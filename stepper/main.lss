
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000005c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000023  00000000  00000000  000000d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000009d  00000000  00000000  000000f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000065  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000098  00000000  00000000  000001f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000008b  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000018  00000000  00000000  0000034b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	02 d0       	rcall	.+4      	; 0x30 <main>
  2c:	15 c0       	rjmp	.+42     	; 0x58 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <main>:
#include <util/delay.h>
#define DIR PINB1
#define STEP PINB0

int main(void){
  DDRB |= 1 << DIR |1<<STEP;
  30:	87 b3       	in	r24, 0x17	; 23
  32:	83 60       	ori	r24, 0x03	; 3
  34:	87 bb       	out	0x17, r24	; 23
  PORTB &=~( 1<<DIR |1<<STEP);
  36:	88 b3       	in	r24, 0x18	; 24
  38:	8c 7f       	andi	r24, 0xFC	; 252
  3a:	88 bb       	out	0x18, r24	; 24
	TCCR0A = (1<<WGM01);
  3c:	82 e0       	ldi	r24, 0x02	; 2
  3e:	8a bd       	out	0x2a, r24	; 42
	OCR0A = 255;
  40:	8f ef       	ldi	r24, 0xFF	; 255
  42:	89 bd       	out	0x29, r24	; 41
	TIMSK =(1<<OCIE0A);
  44:	80 e1       	ldi	r24, 0x10	; 16
  46:	89 bf       	out	0x39, r24	; 57
	//sei();
	TCCR0B =(0<<CS02)|(1<<CS01)|(1<<CS00); //64
  48:	83 e0       	ldi	r24, 0x03	; 3
  4a:	83 bf       	out	0x33, r24	; 51
  4c:	ff cf       	rjmp	.-2      	; 0x4c <__SREG__+0xd>

0000004e <ISR>:
  }
  return 0;
}

ISR(TIMER0_COMPA_vect){
	PORTB ^= 1<<STEP ;
  4e:	88 b3       	in	r24, 0x18	; 24
  50:	91 e0       	ldi	r25, 0x01	; 1
  52:	89 27       	eor	r24, r25
  54:	88 bb       	out	0x18, r24	; 24
  56:	08 95       	ret

00000058 <_exit>:
  58:	f8 94       	cli

0000005a <__stop_program>:
  5a:	ff cf       	rjmp	.-2      	; 0x5a <__stop_program>
