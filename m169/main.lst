   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	sendData
  12               	sendData:
  13               	.LFB6:
  14               		.file 1 "main.c"
   1:main.c        **** #define F_CPU 16000000UL
   2:main.c        **** #include <avr/io.h>
   3:main.c        **** #include <avr/interrupt.h>
   4:main.c        **** #include <util/delay.h>
   5:main.c        **** #include "defines.h"
   6:main.c        **** #include "Led.h"
   7:main.c        **** #include "RTC.h"
   8:main.c        **** //0->5
   9:main.c        **** 
  10:main.c        **** void sendData(uint32_t data){
  15               		.loc 1 10 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 0F93      		push r16
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 16, -2
  22 0002 1F93      		push r17
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 17, -3
  26               	/* prologue: function */
  27               	/* frame size = 0 */
  28               	/* stack size = 2 */
  29               	.L__stack_usage = 2
  11:main.c        ****     PORTA &=~(STROBE|CLK);
  30               		.loc 1 11 0
  31 0004 22B1      		in r18,0x2
  32 0006 297F      		andi r18,lo8(-7)
  33 0008 22B9      		out 0x2,r18
  34               	.LVL1:
  35 000a 40E0      		ldi r20,0
  36 000c 50E0      		ldi r21,0
  37               	.LVL2:
  38               	.L4:
  39               	.LBB4:
  12:main.c        ****     for(uint8_t i=0;i<20;i++){
  13:main.c        ****         if((data>>i) & 0x00000001){
  40               		.loc 1 13 0
  41 000e 8B01      		movw r16,r22
  42 0010 9C01      		movw r18,r24
  43 0012 042E      		mov r0,r20
  44 0014 00C0      		rjmp 2f
  45               		1:
  46 0016 3695      		lsr r19
  47 0018 2795      		ror r18
  48 001a 1795      		ror r17
  49 001c 0795      		ror r16
  50               		2:
  51 001e 0A94      		dec r0
  52 0020 02F4      		brpl 1b
  53 0022 00FF      		sbrs r16,0
  54 0024 00C0      		rjmp .L2
  14:main.c        ****             PORTA|=DATA;
  55               		.loc 1 14 0
  56 0026 109A      		sbi 0x2,0
  57 0028 00C0      		rjmp .L3
  58               	.L2:
  15:main.c        ****         }else{
  16:main.c        ****             PORTA&=~DATA;
  59               		.loc 1 16 0
  60 002a 1098      		cbi 0x2,0
  61               	.L3:
  17:main.c        ****         }
  18:main.c        ****         PORTA|=CLK;
  62               		.loc 1 18 0 discriminator 2
  63 002c 119A      		sbi 0x2,1
  19:main.c        ****         PORTA&=~CLK;
  64               		.loc 1 19 0 discriminator 2
  65 002e 1198      		cbi 0x2,1
  66               	.LVL3:
  67 0030 4F5F      		subi r20,-1
  68 0032 5F4F      		sbci r21,-1
  69               	.LVL4:
  12:main.c        ****         if((data>>i) & 0x00000001){
  70               		.loc 1 12 0 discriminator 2
  71 0034 4431      		cpi r20,20
  72 0036 5105      		cpc r21,__zero_reg__
  73 0038 01F4      		brne .L4
  74               	.LBE4:
  20:main.c        ****     }
  21:main.c        ****     PORTA|=STROBE;
  75               		.loc 1 21 0
  76 003a 129A      		sbi 0x2,2
  22:main.c        ****     PORTA&=~STROBE;
  77               		.loc 1 22 0
  78 003c 1298      		cbi 0x2,2
  79               	/* epilogue start */
  23:main.c        **** }
  80               		.loc 1 23 0
  81 003e 1F91      		pop r17
  82 0040 0F91      		pop r16
  83 0042 0895      		ret
  84               		.cfi_endproc
  85               	.LFE6:
  87               		.section	.text.startup,"ax",@progbits
  88               	.global	main
  90               	main:
  91               	.LFB7:
  24:main.c        **** 
  25:main.c        **** volatile uint8_t state=0;
  26:main.c        **** Led leds[NBLEDS];
  27:main.c        **** 
  28:main.c        **** int main(void){
  92               		.loc 1 28 0
  93               		.cfi_startproc
  94               	/* prologue: function */
  95               	/* frame size = 0 */
  96               	/* stack size = 0 */
  97               	.L__stack_usage = 0
  29:main.c        ****     DDRB|=1<<PORTB0;
  98               		.loc 1 29 0
  99 0000 209A      		sbi 0x4,0
  30:main.c        ****     PORTB &= ~(1<<PB0);
 100               		.loc 1 30 0
 101 0002 2898      		cbi 0x5,0
  31:main.c        ****     
  32:main.c        ****     DDRA |= CLK|DATA|STROBE;
 102               		.loc 1 32 0
 103 0004 81B1      		in r24,0x1
 104 0006 8760      		ori r24,lo8(7)
 105 0008 81B9      		out 0x1,r24
  33:main.c        ****     PORTA &= ~(CLK|DATA|STROBE);
 106               		.loc 1 33 0
 107 000a 82B1      		in r24,0x2
 108 000c 887F      		andi r24,lo8(-8)
 109 000e 82B9      		out 0x2,r24
  34:main.c        ****     ledInit(leds);
 110               		.loc 1 34 0
 111 0010 80E0      		ldi r24,lo8(leds)
 112 0012 90E0      		ldi r25,hi8(leds)
 113 0014 0E94 0000 		call ledInit
 114               	.LVL5:
  35:main.c        ****     
  36:main.c        ****     TIMSK1|=(1<<TOIE1);
 115               		.loc 1 36 0
 116 0018 8091 6F00 		lds r24,111
 117 001c 8160      		ori r24,lo8(1)
 118 001e 8093 6F00 		sts 111,r24
  37:main.c        ****     TIMSK2|=(1<<TOIE2);
 119               		.loc 1 37 0
 120 0022 8091 7000 		lds r24,112
 121 0026 8160      		ori r24,lo8(1)
 122 0028 8093 7000 		sts 112,r24
  38:main.c        ****     sei();
 123               		.loc 1 38 0
 124               	/* #APP */
 125               	 ;  38 "main.c" 1
 126 002c 7894      		sei
 127               	 ;  0 "" 2
  39:main.c        ****     setCurrentTime(0,01,7,11);
 128               		.loc 1 39 0
 129               	/* #NOAPP */
 130 002e 2BE0      		ldi r18,lo8(11)
 131 0030 47E0      		ldi r20,lo8(7)
 132 0032 61E0      		ldi r22,lo8(1)
 133 0034 80E0      		ldi r24,0
 134 0036 0E94 0000 		call setCurrentTime
 135               	.LVL6:
  40:main.c        ****     sendData(0b11111100001111111111);
 136               		.loc 1 40 0
 137 003a 6FEF      		ldi r22,lo8(-1)
 138 003c 73EC      		ldi r23,lo8(-61)
 139 003e 8FE0      		ldi r24,lo8(15)
 140 0040 90E0      		ldi r25,0
 141 0042 0E94 0000 		call sendData
 142               	.LVL7:
 143               	.LBB5:
 144               	.LBB6:
 145               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 146               		.loc 2 187 0
 147 0046 2FEF      		ldi r18,lo8(3199999)
 148 0048 83ED      		ldi r24,hi8(3199999)
 149 004a 90E3      		ldi r25,hlo8(3199999)
 150 004c 2150      	1:	subi r18,1
 151 004e 8040      		sbci r24,0
 152 0050 9040      		sbci r25,0
 153 0052 01F4      		brne 1b
 154 0054 00C0      		rjmp .
 155 0056 0000      		nop
 156               	.LVL8:
 157               	.LBE6:
 158               	.LBE5:
  41:main.c        ****     _delay_ms(1000);
  42:main.c        ****     
  43:main.c        ****     TCCR1B|=(1<<CS12)|(1<<CS10);
 159               		.loc 1 43 0
 160 0058 8091 8100 		lds r24,129
 161 005c 8560      		ori r24,lo8(5)
 162 005e 8093 8100 		sts 129,r24
  44:main.c        ****     TCCR2A|=(1<<CS22)|(1<<CS20);
 163               		.loc 1 44 0
 164 0062 8091 B000 		lds r24,176
 165 0066 8560      		ori r24,lo8(5)
 166 0068 8093 B000 		sts 176,r24
  45:main.c        ****     
  46:main.c        ****     currentColor=tcolorV(WHITE);
 167               		.loc 1 46 0
 168 006c 6FEF      		ldi r22,lo8(-1)
 169 006e 7FEF      		ldi r23,lo8(-1)
 170 0070 8FEF      		ldi r24,lo8(-1)
 171 0072 90E0      		ldi r25,0
 172 0074 0E94 0000 		call tcolorV
 173               	.LVL9:
 174 0078 8B01      		movw r16,r22
 175 007a 282F      		mov r18,r24
 176 007c 6093 0000 		sts currentColor,r22
 177 0080 7093 0000 		sts currentColor+1,r23
 178 0084 8093 0000 		sts currentColor+2,r24
  47:main.c        ****     setLeds(currentTime,leds,currentColor);
 179               		.loc 1 47 0
 180 0088 6091 0000 		lds r22,currentTime
 181 008c 7091 0000 		lds r23,currentTime+1
 182 0090 8091 0000 		lds r24,currentTime+2
 183 0094 9091 0000 		lds r25,currentTime+3
 184 0098 40E0      		ldi r20,lo8(leds)
 185 009a 50E0      		ldi r21,hi8(leds)
 186 009c 0E94 0000 		call setLeds
 187               	.LVL10:
 188               	.L8:
 189 00a0 00C0      		rjmp .L8
 190               		.cfi_endproc
 191               	.LFE7:
 193               		.text
 194               	.global	__vector_9
 196               	__vector_9:
 197               	.LFB8:
  48:main.c        ****     
  49:main.c        ****     while(1){
  50:main.c        ****         
  51:main.c        ****     }
  52:main.c        ****     return(0);
  53:main.c        ****     
  54:main.c        **** }
  55:main.c        **** ISR( TIMER1_OVF_vect ){
 198               		.loc 1 55 0
 199               		.cfi_startproc
 200 0044 1F92      		push r1
 201               	.LCFI2:
 202               		.cfi_def_cfa_offset 3
 203               		.cfi_offset 1, -2
 204 0046 0F92      		push r0
 205               	.LCFI3:
 206               		.cfi_def_cfa_offset 4
 207               		.cfi_offset 0, -3
 208 0048 0FB6      		in r0,__SREG__
 209 004a 0F92      		push r0
 210 004c 1124      		clr __zero_reg__
 211 004e 8F93      		push r24
 212               	.LCFI4:
 213               		.cfi_def_cfa_offset 5
 214               		.cfi_offset 24, -4
 215 0050 9F93      		push r25
 216               	.LCFI5:
 217               		.cfi_def_cfa_offset 6
 218               		.cfi_offset 25, -5
 219               	/* prologue: Signal */
 220               	/* frame size = 0 */
 221               	/* stack size = 5 */
 222               	.L__stack_usage = 5
  56:main.c        ****     
  57:main.c        ****     PORTB^=(1<<PB0);
 223               		.loc 1 57 0
 224 0052 95B1      		in r25,0x5
 225 0054 81E0      		ldi r24,lo8(1)
 226 0056 8927      		eor r24,r25
 227 0058 85B9      		out 0x5,r24
 228               	/* epilogue start */
  58:main.c        **** }
 229               		.loc 1 58 0
 230 005a 9F91      		pop r25
 231 005c 8F91      		pop r24
 232 005e 0F90      		pop r0
 233 0060 0FBE      		out __SREG__,r0
 234 0062 0F90      		pop r0
 235 0064 1F90      		pop r1
 236 0066 1895      		reti
 237               		.cfi_endproc
 238               	.LFE8:
 240               	.global	__vector_5
 242               	__vector_5:
 243               	.LFB9:
  59:main.c        **** ISR( TIMER2_OVF_vect ){
 244               		.loc 1 59 0
 245               		.cfi_startproc
 246 0068 1F92      		push r1
 247               	.LCFI6:
 248               		.cfi_def_cfa_offset 3
 249               		.cfi_offset 1, -2
 250 006a 0F92      		push r0
 251               	.LCFI7:
 252               		.cfi_def_cfa_offset 4
 253               		.cfi_offset 0, -3
 254 006c 0FB6      		in r0,__SREG__
 255 006e 0F92      		push r0
 256 0070 1124      		clr __zero_reg__
 257 0072 2F93      		push r18
 258               	.LCFI8:
 259               		.cfi_def_cfa_offset 5
 260               		.cfi_offset 18, -4
 261 0074 3F93      		push r19
 262               	.LCFI9:
 263               		.cfi_def_cfa_offset 6
 264               		.cfi_offset 19, -5
 265 0076 4F93      		push r20
 266               	.LCFI10:
 267               		.cfi_def_cfa_offset 7
 268               		.cfi_offset 20, -6
 269 0078 5F93      		push r21
 270               	.LCFI11:
 271               		.cfi_def_cfa_offset 8
 272               		.cfi_offset 21, -7
 273 007a 6F93      		push r22
 274               	.LCFI12:
 275               		.cfi_def_cfa_offset 9
 276               		.cfi_offset 22, -8
 277 007c 7F93      		push r23
 278               	.LCFI13:
 279               		.cfi_def_cfa_offset 10
 280               		.cfi_offset 23, -9
 281 007e 8F93      		push r24
 282               	.LCFI14:
 283               		.cfi_def_cfa_offset 11
 284               		.cfi_offset 24, -10
 285 0080 9F93      		push r25
 286               	.LCFI15:
 287               		.cfi_def_cfa_offset 12
 288               		.cfi_offset 25, -11
 289 0082 AF93      		push r26
 290               	.LCFI16:
 291               		.cfi_def_cfa_offset 13
 292               		.cfi_offset 26, -12
 293 0084 BF93      		push r27
 294               	.LCFI17:
 295               		.cfi_def_cfa_offset 14
 296               		.cfi_offset 27, -13
 297 0086 EF93      		push r30
 298               	.LCFI18:
 299               		.cfi_def_cfa_offset 15
 300               		.cfi_offset 30, -14
 301 0088 FF93      		push r31
 302               	.LCFI19:
 303               		.cfi_def_cfa_offset 16
 304               		.cfi_offset 31, -15
 305               	/* prologue: Signal */
 306               	/* frame size = 0 */
 307               	/* stack size = 15 */
 308               	.L__stack_usage = 15
  60:main.c        ****     switch(state){
 309               		.loc 1 60 0
 310 008a 8091 0000 		lds r24,state
 311 008e 8230      		cpi r24,lo8(2)
 312 0090 01F0      		breq .L12
 313 0092 00F4      		brsh .L13
 314 0094 8823      		tst r24
 315 0096 01F0      		breq .L14
 316 0098 8130      		cpi r24,lo8(1)
 317 009a 01F0      		breq .+2
 318 009c 00C0      		rjmp .L11
  61:main.c        ****         case 0:
  62:main.c        ****             sendData(R2 | getDataByColor(tcolor(1,0,0),0,leds));
  63:main.c        ****             break;
  64:main.c        ****         case 1:
  65:main.c        ****             sendData(R1 | getDataByColor(tcolor(1,0,0),1,leds));
 319               		.loc 1 65 0
 320 009e 40E0      		ldi r20,0
 321 00a0 60E0      		ldi r22,0
 322 00a2 81E0      		ldi r24,lo8(1)
 323 00a4 0E94 0000 		call tcolor
 324               	.LVL11:
 325 00a8 20E0      		ldi r18,lo8(leds)
 326 00aa 30E0      		ldi r19,hi8(leds)
 327 00ac 41E0      		ldi r20,lo8(1)
 328 00ae 0E94 0000 		call getDataByColor
 329               	.LVL12:
 330 00b2 7068      		ori r23,128
 331 00b4 00C0      		rjmp .L20
 332               	.L13:
  60:main.c        ****     switch(state){
 333               		.loc 1 60 0
 334 00b6 8430      		cpi r24,lo8(4)
 335 00b8 01F0      		breq .L16
 336 00ba 00F0      		brlo .L17
 337 00bc 8530      		cpi r24,lo8(5)
 338 00be 01F4      		brne .L11
  66:main.c        ****             break;
  67:main.c        ****         case 2:
  68:main.c        ****             sendData(G2 | getDataByColor(tcolor(0,1,0),0,leds));
  69:main.c        ****             break;
  70:main.c        ****         case 3:
  71:main.c        ****             sendData(G1 | getDataByColor(tcolor(0,1,0),1,leds));
  72:main.c        ****             break;
  73:main.c        ****         case 4:
  74:main.c        ****             sendData(B2 | getDataByColor(tcolor(0,0,1),0,leds));
  75:main.c        ****             break;
  76:main.c        ****         case 5:
  77:main.c        ****             sendData(B1 | getDataByColor(tcolor(0,0,1),1,leds));
 339               		.loc 1 77 0
 340 00c0 41E0      		ldi r20,lo8(1)
 341 00c2 60E0      		ldi r22,0
 342 00c4 80E0      		ldi r24,0
 343 00c6 0E94 0000 		call tcolor
 344               	.LVL13:
 345 00ca 20E0      		ldi r18,lo8(leds)
 346 00cc 30E0      		ldi r19,hi8(leds)
 347 00ce 41E0      		ldi r20,lo8(1)
 348 00d0 0E94 0000 		call getDataByColor
 349               	.LVL14:
 350 00d4 8160      		ori r24,1
 351 00d6 00C0      		rjmp .L20
 352               	.L14:
  62:main.c        ****             break;
 353               		.loc 1 62 0
 354 00d8 40E0      		ldi r20,0
 355 00da 60E0      		ldi r22,0
 356 00dc 81E0      		ldi r24,lo8(1)
 357 00de 0E94 0000 		call tcolor
 358               	.LVL15:
 359 00e2 20E0      		ldi r18,lo8(leds)
 360 00e4 30E0      		ldi r19,hi8(leds)
 361 00e6 40E0      		ldi r20,0
 362 00e8 0E94 0000 		call getDataByColor
 363               	.LVL16:
 364 00ec 7064      		ori r23,64
 365 00ee 00C0      		rjmp .L20
 366               	.L12:
  68:main.c        ****             break;
 367               		.loc 1 68 0
 368 00f0 40E0      		ldi r20,0
 369 00f2 61E0      		ldi r22,lo8(1)
 370 00f4 80E0      		ldi r24,0
 371 00f6 0E94 0000 		call tcolor
 372               	.LVL17:
 373 00fa 20E0      		ldi r18,lo8(leds)
 374 00fc 30E0      		ldi r19,hi8(leds)
 375 00fe 40E0      		ldi r20,0
 376 0100 0E94 0000 		call getDataByColor
 377               	.LVL18:
 378 0104 8460      		ori r24,4
 379 0106 00C0      		rjmp .L20
 380               	.L17:
  71:main.c        ****             break;
 381               		.loc 1 71 0
 382 0108 40E0      		ldi r20,0
 383 010a 61E0      		ldi r22,lo8(1)
 384 010c 80E0      		ldi r24,0
 385 010e 0E94 0000 		call tcolor
 386               	.LVL19:
 387 0112 20E0      		ldi r18,lo8(leds)
 388 0114 30E0      		ldi r19,hi8(leds)
 389 0116 41E0      		ldi r20,lo8(1)
 390 0118 0E94 0000 		call getDataByColor
 391               	.LVL20:
 392 011c 8860      		ori r24,8
 393 011e 00C0      		rjmp .L20
 394               	.L16:
  74:main.c        ****             break;
 395               		.loc 1 74 0
 396 0120 41E0      		ldi r20,lo8(1)
 397 0122 60E0      		ldi r22,0
 398 0124 80E0      		ldi r24,0
 399 0126 0E94 0000 		call tcolor
 400               	.LVL21:
 401 012a 20E0      		ldi r18,lo8(leds)
 402 012c 30E0      		ldi r19,hi8(leds)
 403 012e 40E0      		ldi r20,0
 404 0130 0E94 0000 		call getDataByColor
 405               	.LVL22:
 406 0134 8260      		ori r24,2
 407               	.L20:
 408               		.loc 1 77 0
 409 0136 0E94 0000 		call sendData
 410               	.LVL23:
 411               	.L11:
  78:main.c        ****             break;
  79:main.c        ****     }
  80:main.c        ****     state++;
 412               		.loc 1 80 0
 413 013a 8091 0000 		lds r24,state
 414 013e 8F5F      		subi r24,lo8(-(1))
 415 0140 8093 0000 		sts state,r24
  81:main.c        ****     if(state>5)state=0;
 416               		.loc 1 81 0
 417 0144 8091 0000 		lds r24,state
 418 0148 8630      		cpi r24,lo8(6)
 419 014a 00F0      		brlo .L10
 420               		.loc 1 81 0 is_stmt 0 discriminator 1
 421 014c 1092 0000 		sts state,__zero_reg__
 422               	.L10:
 423               	/* epilogue start */
  82:main.c        **** }
 424               		.loc 1 82 0 is_stmt 1
 425 0150 FF91      		pop r31
 426 0152 EF91      		pop r30
 427 0154 BF91      		pop r27
 428 0156 AF91      		pop r26
 429 0158 9F91      		pop r25
 430 015a 8F91      		pop r24
 431 015c 7F91      		pop r23
 432 015e 6F91      		pop r22
 433 0160 5F91      		pop r21
 434 0162 4F91      		pop r20
 435 0164 3F91      		pop r19
 436 0166 2F91      		pop r18
 437 0168 0F90      		pop r0
 438 016a 0FBE      		out __SREG__,r0
 439 016c 0F90      		pop r0
 440 016e 1F90      		pop r1
 441 0170 1895      		reti
 442               		.cfi_endproc
 443               	.LFE9:
 445               		.comm	leds,95,1
 446               	.global	state
 447               		.section .bss
 450               	state:
 451 0000 00        		.zero	1
 452               		.comm	currentColor,3,1
 453               		.comm	currentTime,4,1
 454               		.text
 455               	.Letext0:
 456               		.file 3 "/usr/lib/avr/include/stdint.h"
 457               		.file 4 "RTC.h"
 458               		.file 5 "Led.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cccEXSGU.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cccEXSGU.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cccEXSGU.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cccEXSGU.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cccEXSGU.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cccEXSGU.s:12     .text:0000000000000000 sendData
     /tmp/cccEXSGU.s:90     .text.startup:0000000000000000 main
                            *COM*:000000000000005f leds
                            *COM*:0000000000000003 currentColor
                            *COM*:0000000000000004 currentTime
     /tmp/cccEXSGU.s:196    .text:0000000000000044 __vector_9
     /tmp/cccEXSGU.s:242    .text:0000000000000068 __vector_5
     /tmp/cccEXSGU.s:450    .bss:0000000000000000 state

UNDEFINED SYMBOLS
ledInit
setCurrentTime
tcolorV
setLeds
tcolor
getDataByColor
__do_clear_bss
