   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	sendData
  12               	sendData:
  13               	.LFB6:
  14               		.file 1 "main.c"
   1:main.c        **** #define F_CPU 16000000UL
   2:main.c        **** #include <avr/io.h>
   3:main.c        **** #include <avr/interrupt.h>
   4:main.c        **** #include <util/delay.h>
   5:main.c        **** #include "defines.h"
   6:main.c        **** #include "Led.h"
   7:main.c        **** #include "RTC.h"
   8:main.c        **** //0->5
   9:main.c        **** 
  10:main.c        **** void sendData(uint32_t data){
  15               		.loc 1 10 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 0F93      		push r16
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 16, -2
  22 0002 1F93      		push r17
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 17, -3
  26               	/* prologue: function */
  27               	/* frame size = 0 */
  28               	/* stack size = 2 */
  29               	.L__stack_usage = 2
  11:main.c        ****     PORTA &=~(STROBE|CLK);
  30               		.loc 1 11 0
  31 0004 22B1      		in r18,0x2
  32 0006 297F      		andi r18,lo8(-7)
  33 0008 22B9      		out 0x2,r18
  34               	.LVL1:
  35 000a 40E0      		ldi r20,0
  36 000c 50E0      		ldi r21,0
  37               	.LVL2:
  38               	.L4:
  39               	.LBB10:
  12:main.c        ****     for(uint8_t i=0;i<20;i++){
  13:main.c        ****         if((data>>i) & 0x00000001){
  40               		.loc 1 13 0
  41 000e 8B01      		movw r16,r22
  42 0010 9C01      		movw r18,r24
  43 0012 042E      		mov r0,r20
  44 0014 00C0      		rjmp 2f
  45               		1:
  46 0016 3695      		lsr r19
  47 0018 2795      		ror r18
  48 001a 1795      		ror r17
  49 001c 0795      		ror r16
  50               		2:
  51 001e 0A94      		dec r0
  52 0020 02F4      		brpl 1b
  53 0022 00FF      		sbrs r16,0
  54 0024 00C0      		rjmp .L2
  14:main.c        ****             PORTA|=DATA;
  55               		.loc 1 14 0
  56 0026 109A      		sbi 0x2,0
  57 0028 00C0      		rjmp .L3
  58               	.L2:
  15:main.c        ****         }else{
  16:main.c        ****             PORTA&=~DATA;
  59               		.loc 1 16 0
  60 002a 1098      		cbi 0x2,0
  61               	.L3:
  17:main.c        ****         }
  18:main.c        ****         PORTA|=CLK;
  62               		.loc 1 18 0 discriminator 2
  63 002c 119A      		sbi 0x2,1
  19:main.c        ****         PORTA&=~CLK;
  64               		.loc 1 19 0 discriminator 2
  65 002e 1198      		cbi 0x2,1
  66               	.LVL3:
  67 0030 4F5F      		subi r20,-1
  68 0032 5F4F      		sbci r21,-1
  69               	.LVL4:
  12:main.c        ****         if((data>>i) & 0x00000001){
  70               		.loc 1 12 0 discriminator 2
  71 0034 4431      		cpi r20,20
  72 0036 5105      		cpc r21,__zero_reg__
  73 0038 01F4      		brne .L4
  74               	.LBE10:
  20:main.c        ****     }
  21:main.c        ****     PORTA|=STROBE;
  75               		.loc 1 21 0
  76 003a 129A      		sbi 0x2,2
  22:main.c        ****     PORTA&=~STROBE;
  77               		.loc 1 22 0
  78 003c 1298      		cbi 0x2,2
  79               	/* epilogue start */
  23:main.c        **** }
  80               		.loc 1 23 0
  81 003e 1F91      		pop r17
  82 0040 0F91      		pop r16
  83 0042 0895      		ret
  84               		.cfi_endproc
  85               	.LFE6:
  87               		.section	.text.startup,"ax",@progbits
  88               	.global	main
  90               	main:
  91               	.LFB7:
  24:main.c        **** 
  25:main.c        **** volatile uint8_t state=0;
  26:main.c        **** Led leds[NBLEDS];
  27:main.c        **** 
  28:main.c        **** int main(void){
  92               		.loc 1 28 0
  93               		.cfi_startproc
  94               	/* prologue: function */
  95               	/* frame size = 0 */
  96               	/* stack size = 0 */
  97               	.L__stack_usage = 0
  29:main.c        ****     DDRB|=1<<PORTB0;
  98               		.loc 1 29 0
  99 0000 209A      		sbi 0x4,0
  30:main.c        ****     PORTB &= ~(1<<PB0);
 100               		.loc 1 30 0
 101 0002 2898      		cbi 0x5,0
  31:main.c        ****     
  32:main.c        ****     DDRA |= CLK|DATA|STROBE;
 102               		.loc 1 32 0
 103 0004 81B1      		in r24,0x1
 104 0006 8760      		ori r24,lo8(7)
 105 0008 81B9      		out 0x1,r24
  33:main.c        ****     PORTA &= ~(CLK|DATA|STROBE);
 106               		.loc 1 33 0
 107 000a 82B1      		in r24,0x2
 108 000c 887F      		andi r24,lo8(-8)
 109 000e 82B9      		out 0x2,r24
  34:main.c        ****     ledInit(leds);
 110               		.loc 1 34 0
 111 0010 80E0      		ldi r24,lo8(leds)
 112 0012 90E0      		ldi r25,hi8(leds)
 113 0014 0E94 0000 		call ledInit
 114               	.LVL5:
  35:main.c        ****     
  36:main.c        ****     TIMSK1|=(1<<TOIE1);
 115               		.loc 1 36 0
 116 0018 8091 6F00 		lds r24,111
 117 001c 8160      		ori r24,lo8(1)
 118 001e 8093 6F00 		sts 111,r24
  37:main.c        ****     TIMSK2|=(1<<TOIE2);
 119               		.loc 1 37 0
 120 0022 8091 7000 		lds r24,112
 121 0026 8160      		ori r24,lo8(1)
 122 0028 8093 7000 		sts 112,r24
  38:main.c        ****     sei();
 123               		.loc 1 38 0
 124               	/* #APP */
 125               	 ;  38 "main.c" 1
 126 002c 7894      		sei
 127               	 ;  0 "" 2
  39:main.c        ****     
  40:main.c        ****     sendData(0b11111100001111111111);
 128               		.loc 1 40 0
 129               	/* #NOAPP */
 130 002e 6FEF      		ldi r22,lo8(-1)
 131 0030 73EC      		ldi r23,lo8(-61)
 132 0032 8FE0      		ldi r24,lo8(15)
 133 0034 90E0      		ldi r25,0
 134 0036 0E94 0000 		call sendData
 135               	.LVL6:
 136               	.LBB11:
 137               	.LBB12:
 138               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 139               		.loc 2 187 0
 140 003a 2FEF      		ldi r18,lo8(799999)
 141 003c 84E3      		ldi r24,hi8(799999)
 142 003e 9CE0      		ldi r25,hlo8(799999)
 143 0040 2150      	1:	subi r18,1
 144 0042 8040      		sbci r24,0
 145 0044 9040      		sbci r25,0
 146 0046 01F4      		brne 1b
 147 0048 00C0      		rjmp .
 148 004a 0000      		nop
 149               	.LVL7:
 150               	.LBE12:
 151               	.LBE11:
  41:main.c        ****     _delay_ms(250);
  42:main.c        ****     sendData(0b11000000001111111111);
 152               		.loc 1 42 0
 153 004c 6FEF      		ldi r22,lo8(-1)
 154 004e 73E0      		ldi r23,lo8(3)
 155 0050 8CE0      		ldi r24,lo8(12)
 156 0052 90E0      		ldi r25,0
 157 0054 0E94 0000 		call sendData
 158               	.LVL8:
 159               	.LBB13:
 160               	.LBB14:
 161               		.loc 2 187 0
 162 0058 2FEF      		ldi r18,lo8(799999)
 163 005a 84E3      		ldi r24,hi8(799999)
 164 005c 9CE0      		ldi r25,hlo8(799999)
 165 005e 2150      	1:	subi r18,1
 166 0060 8040      		sbci r24,0
 167 0062 9040      		sbci r25,0
 168 0064 01F4      		brne 1b
 169 0066 00C0      		rjmp .
 170 0068 0000      		nop
 171               	.LVL9:
 172               	.LBE14:
 173               	.LBE13:
  43:main.c        ****     _delay_ms(250);
  44:main.c        ****     sendData(0b00001100001111111111);
 174               		.loc 1 44 0
 175 006a 6FEF      		ldi r22,lo8(-1)
 176 006c 73EC      		ldi r23,lo8(-61)
 177 006e 80E0      		ldi r24,0
 178 0070 90E0      		ldi r25,0
 179 0072 0E94 0000 		call sendData
 180               	.LVL10:
 181               	.LBB15:
 182               	.LBB16:
 183               		.loc 2 187 0
 184 0076 2FEF      		ldi r18,lo8(799999)
 185 0078 84E3      		ldi r24,hi8(799999)
 186 007a 9CE0      		ldi r25,hlo8(799999)
 187 007c 2150      	1:	subi r18,1
 188 007e 8040      		sbci r24,0
 189 0080 9040      		sbci r25,0
 190 0082 01F4      		brne 1b
 191 0084 00C0      		rjmp .
 192 0086 0000      		nop
 193               	.LVL11:
 194               	.LBE16:
 195               	.LBE15:
  45:main.c        ****     _delay_ms(250);
  46:main.c        ****     sendData(0b00110000001111111111);
 196               		.loc 1 46 0
 197 0088 6FEF      		ldi r22,lo8(-1)
 198 008a 73E0      		ldi r23,lo8(3)
 199 008c 83E0      		ldi r24,lo8(3)
 200 008e 90E0      		ldi r25,0
 201 0090 0E94 0000 		call sendData
 202               	.LVL12:
 203               	.LBB17:
 204               	.LBB18:
 205               		.loc 2 187 0
 206 0094 2FEF      		ldi r18,lo8(799999)
 207 0096 84E3      		ldi r24,hi8(799999)
 208 0098 9CE0      		ldi r25,hlo8(799999)
 209 009a 2150      	1:	subi r18,1
 210 009c 8040      		sbci r24,0
 211 009e 9040      		sbci r25,0
 212 00a0 01F4      		brne 1b
 213 00a2 00C0      		rjmp .
 214 00a4 0000      		nop
 215               	.LVL13:
 216               	.LBE18:
 217               	.LBE17:
  47:main.c        ****     _delay_ms(250);
  48:main.c        ****     
  49:main.c        ****     TCCR1B|=(1<<CS12);//|(1<<CS10);
 218               		.loc 1 49 0
 219 00a6 8091 8100 		lds r24,129
 220 00aa 8460      		ori r24,lo8(4)
 221 00ac 8093 8100 		sts 129,r24
  50:main.c        ****     TCCR2A|=(1<<CS22)|(1<<CS20);
 222               		.loc 1 50 0
 223 00b0 8091 B000 		lds r24,176
 224 00b4 8560      		ori r24,lo8(5)
 225 00b6 8093 B000 		sts 176,r24
  51:main.c        ****     
  52:main.c        ****     currentColor=tcolorV(RED);
 226               		.loc 1 52 0
 227 00ba 60E0      		ldi r22,0
 228 00bc 70E0      		ldi r23,0
 229 00be 8FEF      		ldi r24,lo8(-1)
 230 00c0 90E0      		ldi r25,0
 231 00c2 0E94 0000 		call tcolorV
 232               	.LVL14:
 233 00c6 6093 0000 		sts currentColor,r22
 234 00ca 7093 0000 		sts currentColor+1,r23
 235 00ce 8093 0000 		sts currentColor+2,r24
  53:main.c        ****     setCurrentTime(15,45,7,11);
 236               		.loc 1 53 0
 237 00d2 2BE0      		ldi r18,lo8(11)
 238 00d4 47E0      		ldi r20,lo8(7)
 239 00d6 6DE2      		ldi r22,lo8(45)
 240 00d8 8FE0      		ldi r24,lo8(15)
 241 00da 0E94 0000 		call setCurrentTime
 242               	.LVL15:
  54:main.c        ****     currentTime.temp=11;
 243               		.loc 1 54 0
 244 00de 8BE0      		ldi r24,lo8(11)
 245 00e0 8093 0000 		sts currentTime+4,r24
  55:main.c        ****     setLeds(currentTime,leds,currentColor);
 246               		.loc 1 55 0
 247 00e4 E090 0000 		lds r14,currentColor
 248 00e8 F090 0000 		lds r15,currentColor+1
 249 00ec 0091 0000 		lds r16,currentColor+2
 250 00f0 20E0      		ldi r18,lo8(leds)
 251 00f2 30E0      		ldi r19,hi8(leds)
 252 00f4 4091 0000 		lds r20,currentTime
 253 00f8 5091 0000 		lds r21,currentTime+1
 254 00fc 6091 0000 		lds r22,currentTime+2
 255 0100 7091 0000 		lds r23,currentTime+3
 256 0104 0E94 0000 		call setLeds
 257               	.LVL16:
 258               	.L8:
 259 0108 00C0      		rjmp .L8
 260               		.cfi_endproc
 261               	.LFE7:
 263               		.text
 264               	.global	__vector_9
 266               	__vector_9:
 267               	.LFB8:
  56:main.c        ****     
  57:main.c        ****     while(1){
  58:main.c        ****        
  59:main.c        ****     }
  60:main.c        ****     return(0);
  61:main.c        ****     
  62:main.c        **** }
  63:main.c        **** ISR( TIMER1_OVF_vect ){
 268               		.loc 1 63 0
 269               		.cfi_startproc
 270 0044 1F92      		push r1
 271               	.LCFI2:
 272               		.cfi_def_cfa_offset 3
 273               		.cfi_offset 1, -2
 274 0046 0F92      		push r0
 275               	.LCFI3:
 276               		.cfi_def_cfa_offset 4
 277               		.cfi_offset 0, -3
 278 0048 0FB6      		in r0,__SREG__
 279 004a 0F92      		push r0
 280 004c 1124      		clr __zero_reg__
 281 004e EF92      		push r14
 282               	.LCFI4:
 283               		.cfi_def_cfa_offset 5
 284               		.cfi_offset 14, -4
 285 0050 FF92      		push r15
 286               	.LCFI5:
 287               		.cfi_def_cfa_offset 6
 288               		.cfi_offset 15, -5
 289 0052 0F93      		push r16
 290               	.LCFI6:
 291               		.cfi_def_cfa_offset 7
 292               		.cfi_offset 16, -6
 293 0054 2F93      		push r18
 294               	.LCFI7:
 295               		.cfi_def_cfa_offset 8
 296               		.cfi_offset 18, -7
 297 0056 3F93      		push r19
 298               	.LCFI8:
 299               		.cfi_def_cfa_offset 9
 300               		.cfi_offset 19, -8
 301 0058 4F93      		push r20
 302               	.LCFI9:
 303               		.cfi_def_cfa_offset 10
 304               		.cfi_offset 20, -9
 305 005a 5F93      		push r21
 306               	.LCFI10:
 307               		.cfi_def_cfa_offset 11
 308               		.cfi_offset 21, -10
 309 005c 6F93      		push r22
 310               	.LCFI11:
 311               		.cfi_def_cfa_offset 12
 312               		.cfi_offset 22, -11
 313 005e 7F93      		push r23
 314               	.LCFI12:
 315               		.cfi_def_cfa_offset 13
 316               		.cfi_offset 23, -12
 317 0060 8F93      		push r24
 318               	.LCFI13:
 319               		.cfi_def_cfa_offset 14
 320               		.cfi_offset 24, -13
 321 0062 9F93      		push r25
 322               	.LCFI14:
 323               		.cfi_def_cfa_offset 15
 324               		.cfi_offset 25, -14
 325 0064 AF93      		push r26
 326               	.LCFI15:
 327               		.cfi_def_cfa_offset 16
 328               		.cfi_offset 26, -15
 329 0066 BF93      		push r27
 330               	.LCFI16:
 331               		.cfi_def_cfa_offset 17
 332               		.cfi_offset 27, -16
 333 0068 EF93      		push r30
 334               	.LCFI17:
 335               		.cfi_def_cfa_offset 18
 336               		.cfi_offset 30, -17
 337 006a FF93      		push r31
 338               	.LCFI18:
 339               		.cfi_def_cfa_offset 19
 340               		.cfi_offset 31, -18
 341               	/* prologue: Signal */
 342               	/* frame size = 0 */
 343               	/* stack size = 18 */
 344               	.L__stack_usage = 18
  64:main.c        ****     PORTB^=(1<<PB0);
 345               		.loc 1 64 0
 346 006c 95B1      		in r25,0x5
 347 006e 81E0      		ldi r24,lo8(1)
 348 0070 8927      		eor r24,r25
 349 0072 85B9      		out 0x5,r24
  65:main.c        ****     currentTime.min++;
 350               		.loc 1 65 0
 351 0074 8091 0000 		lds r24,currentTime+1
 352 0078 8F5F      		subi r24,lo8(-(1))
  66:main.c        ****     if(currentTime.min>59){
 353               		.loc 1 66 0
 354 007a 8C33      		cpi r24,lo8(60)
 355 007c 00F4      		brsh .L10
  65:main.c        ****     currentTime.min++;
 356               		.loc 1 65 0
 357 007e 8093 0000 		sts currentTime+1,r24
 358 0082 00C0      		rjmp .L11
 359               	.L10:
  67:main.c        ****         currentTime.min=0;
 360               		.loc 1 67 0
 361 0084 1092 0000 		sts currentTime+1,__zero_reg__
  68:main.c        ****         currentTime.hour++;
 362               		.loc 1 68 0
 363 0088 8091 0000 		lds r24,currentTime
 364 008c 8F5F      		subi r24,lo8(-(1))
  69:main.c        ****         if(currentTime.hour>23){
 365               		.loc 1 69 0
 366 008e 8831      		cpi r24,lo8(24)
 367 0090 00F4      		brsh .L12
  68:main.c        ****         currentTime.hour++;
 368               		.loc 1 68 0
 369 0092 8093 0000 		sts currentTime,r24
 370 0096 00C0      		rjmp .L11
 371               	.L12:
  70:main.c        ****             currentTime.hour=0;
 372               		.loc 1 70 0
 373 0098 1092 0000 		sts currentTime,__zero_reg__
  71:main.c        ****             currentTime.monthDay++;
 374               		.loc 1 71 0
 375 009c 8091 0000 		lds r24,currentTime+2
 376 00a0 8F5F      		subi r24,lo8(-(1))
 377 00a2 8093 0000 		sts currentTime+2,r24
 378               	.L11:
  72:main.c        ****         }
  73:main.c        ****     }
  74:main.c        ****     setLeds(currentTime,leds,currentColor);
 379               		.loc 1 74 0
 380 00a6 E090 0000 		lds r14,currentColor
 381 00aa F090 0000 		lds r15,currentColor+1
 382 00ae 0091 0000 		lds r16,currentColor+2
 383 00b2 20E0      		ldi r18,lo8(leds)
 384 00b4 30E0      		ldi r19,hi8(leds)
 385 00b6 4091 0000 		lds r20,currentTime
 386 00ba 5091 0000 		lds r21,currentTime+1
 387 00be 6091 0000 		lds r22,currentTime+2
 388 00c2 7091 0000 		lds r23,currentTime+3
 389 00c6 8091 0000 		lds r24,currentTime+4
 390 00ca 0E94 0000 		call setLeds
 391               	.LVL17:
 392               	/* epilogue start */
  75:main.c        **** }
 393               		.loc 1 75 0
 394 00ce FF91      		pop r31
 395 00d0 EF91      		pop r30
 396 00d2 BF91      		pop r27
 397 00d4 AF91      		pop r26
 398 00d6 9F91      		pop r25
 399 00d8 8F91      		pop r24
 400 00da 7F91      		pop r23
 401 00dc 6F91      		pop r22
 402 00de 5F91      		pop r21
 403 00e0 4F91      		pop r20
 404 00e2 3F91      		pop r19
 405 00e4 2F91      		pop r18
 406 00e6 0F91      		pop r16
 407 00e8 FF90      		pop r15
 408 00ea EF90      		pop r14
 409 00ec 0F90      		pop r0
 410 00ee 0FBE      		out __SREG__,r0
 411 00f0 0F90      		pop r0
 412 00f2 1F90      		pop r1
 413 00f4 1895      		reti
 414               		.cfi_endproc
 415               	.LFE8:
 417               	.global	__vector_5
 419               	__vector_5:
 420               	.LFB9:
  76:main.c        **** ISR( TIMER2_OVF_vect ){
 421               		.loc 1 76 0
 422               		.cfi_startproc
 423 00f6 1F92      		push r1
 424               	.LCFI19:
 425               		.cfi_def_cfa_offset 3
 426               		.cfi_offset 1, -2
 427 00f8 0F92      		push r0
 428               	.LCFI20:
 429               		.cfi_def_cfa_offset 4
 430               		.cfi_offset 0, -3
 431 00fa 0FB6      		in r0,__SREG__
 432 00fc 0F92      		push r0
 433 00fe 1124      		clr __zero_reg__
 434 0100 2F93      		push r18
 435               	.LCFI21:
 436               		.cfi_def_cfa_offset 5
 437               		.cfi_offset 18, -4
 438 0102 3F93      		push r19
 439               	.LCFI22:
 440               		.cfi_def_cfa_offset 6
 441               		.cfi_offset 19, -5
 442 0104 4F93      		push r20
 443               	.LCFI23:
 444               		.cfi_def_cfa_offset 7
 445               		.cfi_offset 20, -6
 446 0106 5F93      		push r21
 447               	.LCFI24:
 448               		.cfi_def_cfa_offset 8
 449               		.cfi_offset 21, -7
 450 0108 6F93      		push r22
 451               	.LCFI25:
 452               		.cfi_def_cfa_offset 9
 453               		.cfi_offset 22, -8
 454 010a 7F93      		push r23
 455               	.LCFI26:
 456               		.cfi_def_cfa_offset 10
 457               		.cfi_offset 23, -9
 458 010c 8F93      		push r24
 459               	.LCFI27:
 460               		.cfi_def_cfa_offset 11
 461               		.cfi_offset 24, -10
 462 010e 9F93      		push r25
 463               	.LCFI28:
 464               		.cfi_def_cfa_offset 12
 465               		.cfi_offset 25, -11
 466 0110 AF93      		push r26
 467               	.LCFI29:
 468               		.cfi_def_cfa_offset 13
 469               		.cfi_offset 26, -12
 470 0112 BF93      		push r27
 471               	.LCFI30:
 472               		.cfi_def_cfa_offset 14
 473               		.cfi_offset 27, -13
 474 0114 EF93      		push r30
 475               	.LCFI31:
 476               		.cfi_def_cfa_offset 15
 477               		.cfi_offset 30, -14
 478 0116 FF93      		push r31
 479               	.LCFI32:
 480               		.cfi_def_cfa_offset 16
 481               		.cfi_offset 31, -15
 482               	/* prologue: Signal */
 483               	/* frame size = 0 */
 484               	/* stack size = 15 */
 485               	.L__stack_usage = 15
  77:main.c        ****     switch(state){
 486               		.loc 1 77 0
 487 0118 8091 0000 		lds r24,state
 488 011c 8230      		cpi r24,lo8(2)
 489 011e 01F0      		breq .L16
 490 0120 00F4      		brsh .L17
 491 0122 8823      		tst r24
 492 0124 01F0      		breq .L18
 493 0126 8130      		cpi r24,lo8(1)
 494 0128 01F0      		breq .+2
 495 012a 00C0      		rjmp .L15
  78:main.c        ****         case 0:
  79:main.c        ****             sendData(R2 | getDataByColor(tcolor(1,0,0),0,leds));
  80:main.c        ****             break;
  81:main.c        ****         case 1:
  82:main.c        ****             sendData(R1 | getDataByColor(tcolor(1,0,0),1,leds));
 496               		.loc 1 82 0
 497 012c 40E0      		ldi r20,0
 498 012e 60E0      		ldi r22,0
 499 0130 81E0      		ldi r24,lo8(1)
 500 0132 0E94 0000 		call tcolor
 501               	.LVL18:
 502 0136 20E0      		ldi r18,lo8(leds)
 503 0138 30E0      		ldi r19,hi8(leds)
 504 013a 41E0      		ldi r20,lo8(1)
 505 013c 0E94 0000 		call getDataByColor
 506               	.LVL19:
 507 0140 7068      		ori r23,128
 508 0142 00C0      		rjmp .L24
 509               	.L17:
  77:main.c        ****     switch(state){
 510               		.loc 1 77 0
 511 0144 8430      		cpi r24,lo8(4)
 512 0146 01F0      		breq .L20
 513 0148 00F0      		brlo .L21
 514 014a 8530      		cpi r24,lo8(5)
 515 014c 01F4      		brne .L15
  83:main.c        ****             break;
  84:main.c        ****         case 2:
  85:main.c        ****             sendData(G2 | getDataByColor(tcolor(0,1,0),0,leds));
  86:main.c        ****             break;
  87:main.c        ****         case 3:
  88:main.c        ****             sendData(G1 | getDataByColor(tcolor(0,1,0),1,leds));
  89:main.c        ****             break;
  90:main.c        ****         case 4:
  91:main.c        ****             sendData(B2 | getDataByColor(tcolor(0,0,1),0,leds));
  92:main.c        ****             break;
  93:main.c        ****         case 5:
  94:main.c        ****             sendData(B1 | getDataByColor(tcolor(0,0,1),1,leds));
 516               		.loc 1 94 0
 517 014e 41E0      		ldi r20,lo8(1)
 518 0150 60E0      		ldi r22,0
 519 0152 80E0      		ldi r24,0
 520 0154 0E94 0000 		call tcolor
 521               	.LVL20:
 522 0158 20E0      		ldi r18,lo8(leds)
 523 015a 30E0      		ldi r19,hi8(leds)
 524 015c 41E0      		ldi r20,lo8(1)
 525 015e 0E94 0000 		call getDataByColor
 526               	.LVL21:
 527 0162 8160      		ori r24,1
 528 0164 00C0      		rjmp .L24
 529               	.L18:
  79:main.c        ****             break;
 530               		.loc 1 79 0
 531 0166 40E0      		ldi r20,0
 532 0168 60E0      		ldi r22,0
 533 016a 81E0      		ldi r24,lo8(1)
 534 016c 0E94 0000 		call tcolor
 535               	.LVL22:
 536 0170 20E0      		ldi r18,lo8(leds)
 537 0172 30E0      		ldi r19,hi8(leds)
 538 0174 40E0      		ldi r20,0
 539 0176 0E94 0000 		call getDataByColor
 540               	.LVL23:
 541 017a 7064      		ori r23,64
 542 017c 00C0      		rjmp .L24
 543               	.L16:
  85:main.c        ****             break;
 544               		.loc 1 85 0
 545 017e 40E0      		ldi r20,0
 546 0180 61E0      		ldi r22,lo8(1)
 547 0182 80E0      		ldi r24,0
 548 0184 0E94 0000 		call tcolor
 549               	.LVL24:
 550 0188 20E0      		ldi r18,lo8(leds)
 551 018a 30E0      		ldi r19,hi8(leds)
 552 018c 40E0      		ldi r20,0
 553 018e 0E94 0000 		call getDataByColor
 554               	.LVL25:
 555 0192 8460      		ori r24,4
 556 0194 00C0      		rjmp .L24
 557               	.L21:
  88:main.c        ****             break;
 558               		.loc 1 88 0
 559 0196 40E0      		ldi r20,0
 560 0198 61E0      		ldi r22,lo8(1)
 561 019a 80E0      		ldi r24,0
 562 019c 0E94 0000 		call tcolor
 563               	.LVL26:
 564 01a0 20E0      		ldi r18,lo8(leds)
 565 01a2 30E0      		ldi r19,hi8(leds)
 566 01a4 41E0      		ldi r20,lo8(1)
 567 01a6 0E94 0000 		call getDataByColor
 568               	.LVL27:
 569 01aa 8860      		ori r24,8
 570 01ac 00C0      		rjmp .L24
 571               	.L20:
  91:main.c        ****             break;
 572               		.loc 1 91 0
 573 01ae 41E0      		ldi r20,lo8(1)
 574 01b0 60E0      		ldi r22,0
 575 01b2 80E0      		ldi r24,0
 576 01b4 0E94 0000 		call tcolor
 577               	.LVL28:
 578 01b8 20E0      		ldi r18,lo8(leds)
 579 01ba 30E0      		ldi r19,hi8(leds)
 580 01bc 40E0      		ldi r20,0
 581 01be 0E94 0000 		call getDataByColor
 582               	.LVL29:
 583 01c2 8260      		ori r24,2
 584               	.L24:
 585               		.loc 1 94 0
 586 01c4 0E94 0000 		call sendData
 587               	.LVL30:
 588               	.L15:
  95:main.c        ****             break;
  96:main.c        ****     }
  97:main.c        ****     state++;
 589               		.loc 1 97 0
 590 01c8 8091 0000 		lds r24,state
 591 01cc 8F5F      		subi r24,lo8(-(1))
 592 01ce 8093 0000 		sts state,r24
  98:main.c        ****     if(state>5)state=0;
 593               		.loc 1 98 0
 594 01d2 8091 0000 		lds r24,state
 595 01d6 8630      		cpi r24,lo8(6)
 596 01d8 00F0      		brlo .L14
 597               		.loc 1 98 0 is_stmt 0 discriminator 1
 598 01da 1092 0000 		sts state,__zero_reg__
 599               	.L14:
 600               	/* epilogue start */
  99:main.c        **** }
 601               		.loc 1 99 0 is_stmt 1
 602 01de FF91      		pop r31
 603 01e0 EF91      		pop r30
 604 01e2 BF91      		pop r27
 605 01e4 AF91      		pop r26
 606 01e6 9F91      		pop r25
 607 01e8 8F91      		pop r24
 608 01ea 7F91      		pop r23
 609 01ec 6F91      		pop r22
 610 01ee 5F91      		pop r21
 611 01f0 4F91      		pop r20
 612 01f2 3F91      		pop r19
 613 01f4 2F91      		pop r18
 614 01f6 0F90      		pop r0
 615 01f8 0FBE      		out __SREG__,r0
 616 01fa 0F90      		pop r0
 617 01fc 1F90      		pop r1
 618 01fe 1895      		reti
 619               		.cfi_endproc
 620               	.LFE9:
 622               		.comm	leds,95,1
 623               	.global	state
 624               		.section .bss
 627               	state:
 628 0000 00        		.zero	1
 629               		.comm	currentColor,3,1
 630               		.comm	currentTime,5,1
 631               		.text
 632               	.Letext0:
 633               		.file 3 "/usr/lib/avr/include/stdint.h"
 634               		.file 4 "RTC.h"
 635               		.file 5 "Led.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccwY8Bqc.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccwY8Bqc.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccwY8Bqc.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccwY8Bqc.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccwY8Bqc.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccwY8Bqc.s:12     .text:0000000000000000 sendData
     /tmp/ccwY8Bqc.s:90     .text.startup:0000000000000000 main
                            *COM*:000000000000005f leds
                            *COM*:0000000000000003 currentColor
                            *COM*:0000000000000005 currentTime
     /tmp/ccwY8Bqc.s:266    .text:0000000000000044 __vector_9
     /tmp/ccwY8Bqc.s:419    .text:00000000000000f6 __vector_5
     /tmp/ccwY8Bqc.s:627    .bss:0000000000000000 state

UNDEFINED SYMBOLS
ledInit
tcolorV
setCurrentTime
setLeds
tcolor
getDataByColor
__do_clear_bss
