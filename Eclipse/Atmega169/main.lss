
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000088  00800100  000003fa  0000048e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800188  00800188  00000516  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000516  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000e0  00000000  00000000  00000556  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000876  00000000  00000000  00000636  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003e1  00000000  00000000  00000eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004de  00000000  00000000  0000128d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  0000176c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000024b  00000000  00000000  0000185c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002a9  00000000  00000000  00001aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00001d50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 30 00 	jmp	0x60	; 0x60 <__dtors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000005c <__ctors_start>:
  5c:	76 00       	.word	0x0076	; ????

0000005e <__ctors_end>:
  5e:	6f 00       	.word	0x006f	; ????

00000060 <__dtors_end>:
  60:	11 24       	eor	r1, r1
  62:	1f be       	out	0x3f, r1	; 63
  64:	cf ef       	ldi	r28, 0xFF	; 255
  66:	d4 e0       	ldi	r29, 0x04	; 4
  68:	de bf       	out	0x3e, r29	; 62
  6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_copy_data>:
  6c:	11 e0       	ldi	r17, 0x01	; 1
  6e:	a0 e0       	ldi	r26, 0x00	; 0
  70:	b1 e0       	ldi	r27, 0x01	; 1
  72:	ea ef       	ldi	r30, 0xFA	; 250
  74:	f3 e0       	ldi	r31, 0x03	; 3
  76:	02 c0       	rjmp	.+4      	; 0x7c <.do_copy_data_start>

00000078 <.do_copy_data_loop>:
  78:	05 90       	lpm	r0, Z+
  7a:	0d 92       	st	X+, r0

0000007c <.do_copy_data_start>:
  7c:	a8 38       	cpi	r26, 0x88	; 136
  7e:	b1 07       	cpc	r27, r17
  80:	d9 f7       	brne	.-10     	; 0x78 <.do_copy_data_loop>

00000082 <__do_clear_bss>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a8 e8       	ldi	r26, 0x88	; 136
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
  8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
  8c:	a9 38       	cpi	r26, 0x89	; 137
  8e:	b1 07       	cpc	r27, r17
  90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>

00000092 <__do_global_ctors>:
  92:	10 e0       	ldi	r17, 0x00	; 0
  94:	ce e5       	ldi	r28, 0x5E	; 94
  96:	d0 e0       	ldi	r29, 0x00	; 0
  98:	04 c0       	rjmp	.+8      	; 0xa2 <.do_global_ctors_start>

0000009a <.do_global_ctors_loop>:
  9a:	22 97       	sbiw	r28, 0x02	; 2
  9c:	fe 01       	movw	r30, r28
  9e:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__tablejump__>

000000a2 <.do_global_ctors_start>:
  a2:	cc 35       	cpi	r28, 0x5C	; 92
  a4:	d1 07       	cpc	r29, r17
  a6:	c9 f7       	brne	.-14     	; 0x9a <.do_global_ctors_loop>
  a8:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  ac:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <__do_global_dtors>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <_Z41__static_initialization_and_destruction_0ii>:
				_delay_ms(500);
			}
		}*/
	}
	return 0;
}
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	91 05       	cpc	r25, r1
  b8:	41 f4       	brne	.+16     	; 0xca <_Z41__static_initialization_and_destruction_0ii+0x16>
  ba:	6f 5f       	subi	r22, 0xFF	; 255
  bc:	7f 4f       	sbci	r23, 0xFF	; 255
  be:	71 f4       	brne	.+28     	; 0xdc <_Z41__static_initialization_and_destruction_0ii+0x28>
#include <avr/io.h>
#include <util/delay.h>
#include "LCD.h"
LCD myLCD;
  c0:	88 e8       	ldi	r24, 0x88	; 136
  c2:	91 e0       	ldi	r25, 0x01	; 1
  c4:	0e 94 ad 00 	call	0x15a	; 0x15a <_ZN3LCDC1Ev>
  c8:	08 95       	ret
  ca:	89 2b       	or	r24, r25
  cc:	39 f4       	brne	.+14     	; 0xdc <_Z41__static_initialization_and_destruction_0ii+0x28>
  ce:	6f 5f       	subi	r22, 0xFF	; 255
  d0:	7f 4f       	sbci	r23, 0xFF	; 255
  d2:	21 f4       	brne	.+8      	; 0xdc <_Z41__static_initialization_and_destruction_0ii+0x28>
  d4:	88 e8       	ldi	r24, 0x88	; 136
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_ZN3LCDD1Ev>
  dc:	08 95       	ret

000000de <_GLOBAL__D_myLCD>:
				_delay_ms(500);
			}
		}*/
	}
	return 0;
}
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	6f ef       	ldi	r22, 0xFF	; 255
  e4:	7f ef       	ldi	r23, 0xFF	; 255
  e6:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z41__static_initialization_and_destruction_0ii>
  ea:	08 95       	ret

000000ec <_GLOBAL__I_myLCD>:
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	6f ef       	ldi	r22, 0xFF	; 255
  f2:	7f ef       	ldi	r23, 0xFF	; 255
  f4:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z41__static_initialization_and_destruction_0ii>
  f8:	08 95       	ret

000000fa <main>:
#include <avr/io.h>
#include <util/delay.h>
#include "LCD.h"
LCD myLCD;

int main(void){
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
	DDRB |= (1 << PB0);
  fe:	20 9a       	sbi	0x04, 0	; 4
	PORTB |= (1<<PB0);
 100:	28 9a       	sbi	0x05, 0	; 5
	myLCD.setDigit(0,1);
 102:	88 e8       	ldi	r24, 0x88	; 136
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	41 e0       	ldi	r20, 0x01	; 1
 10a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <_ZN3LCD8setDigitEhh>
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 10e:	c0 e0       	ldi	r28, 0x00	; 0
 110:	dd e7       	ldi	r29, 0x7D	; 125
	while(1){
		myLCD.blink(1);
 112:	88 e8       	ldi	r24, 0x88	; 136
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	61 e0       	ldi	r22, 0x01	; 1
 118:	70 e0       	ldi	r23, 0x00	; 0
 11a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <_ZN3LCD5blinkEj>
		myLCD.setBattery(LCD::NONE);
 11e:	88 e8       	ldi	r24, 0x88	; 136
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	0e 94 3b 01 	call	0x276	; 0x276 <_ZN3LCD10setBatteryENS_7BatteryE>
 128:	ce 01       	movw	r24, r28
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <main+0x30>
 12e:	f1 cf       	rjmp	.-30     	; 0x112 <main+0x18>

00000130 <_ZN3LCDC2Ev>:
{{0,1,0,1,0,1,1},{&LCDDR0,&LCDDR5,&LCDDR10,&LCDDR15,&LCDDR10,&LCDDR0,&LCDDR5}}}
;


LCD::LCD(){
	LCDCRB|=(1<<LCDMUX1)|(1<<LCDMUX0);
 130:	e5 ee       	ldi	r30, 0xE5	; 229
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	80 63       	ori	r24, 0x30	; 48
 138:	80 83       	st	Z, r24
	LCDFRR|=(1<<LCDPS2)|(1<<LCDCD2); // prescaler 512, division factor 5 & K=8 for duty 1/4
 13a:	e6 ee       	ldi	r30, 0xE6	; 230
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	84 64       	ori	r24, 0x44	; 68
 142:	80 83       	st	Z, r24
	LCDCCR|=(1<<LCDCC1)|(1<<LCDDC2)|(1<<LCDDC1);
 144:	e7 ee       	ldi	r30, 0xE7	; 231
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	82 6c       	ori	r24, 0xC2	; 194
 14c:	80 83       	st	Z, r24
	LCDCRA|=(1<<LCDEN);
 14e:	e4 ee       	ldi	r30, 0xE4	; 228
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	80 68       	ori	r24, 0x80	; 128
 156:	80 83       	st	Z, r24
}
 158:	08 95       	ret

0000015a <_ZN3LCDC1Ev>:
{{0,1,0,1,0,1,1},{&LCDDR0,&LCDDR5,&LCDDR10,&LCDDR15,&LCDDR10,&LCDDR0,&LCDDR5}}}
;


LCD::LCD(){
	LCDCRB|=(1<<LCDMUX1)|(1<<LCDMUX0);
 15a:	e5 ee       	ldi	r30, 0xE5	; 229
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	80 63       	ori	r24, 0x30	; 48
 162:	80 83       	st	Z, r24
	LCDFRR|=(1<<LCDPS2)|(1<<LCDCD2); // prescaler 512, division factor 5 & K=8 for duty 1/4
 164:	e6 ee       	ldi	r30, 0xE6	; 230
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	84 64       	ori	r24, 0x44	; 68
 16c:	80 83       	st	Z, r24
	LCDCCR|=(1<<LCDCC1)|(1<<LCDDC2)|(1<<LCDDC1);
 16e:	e7 ee       	ldi	r30, 0xE7	; 231
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	82 6c       	ori	r24, 0xC2	; 194
 176:	80 83       	st	Z, r24
	LCDCRA|=(1<<LCDEN);
 178:	e4 ee       	ldi	r30, 0xE4	; 228
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	80 68       	ori	r24, 0x80	; 128
 180:	80 83       	st	Z, r24
}
 182:	08 95       	ret

00000184 <_ZN3LCDD2Ev>:

LCD::~LCD() {
	LCDCRA|=(1<<LCDBL);
 184:	80 91 e4 00 	lds	r24, 0x00E4
 188:	81 60       	ori	r24, 0x01	; 1
 18a:	80 93 e4 00 	sts	0x00E4, r24
 18e:	88 e8       	ldi	r24, 0x88	; 136
 190:	93 e1       	ldi	r25, 0x13	; 19
 192:	29 e1       	ldi	r18, 0x19	; 25
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	f9 01       	movw	r30, r18
 198:	31 97       	sbiw	r30, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <_ZN3LCDD2Ev+0x14>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 19c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 19e:	d9 f7       	brne	.-10     	; 0x196 <_ZN3LCDD2Ev+0x12>
	_delay_ms(500);
	LCDCRA&=~(1<<LCDEN);
 1a0:	80 91 e4 00 	lds	r24, 0x00E4
 1a4:	8f 77       	andi	r24, 0x7F	; 127
 1a6:	80 93 e4 00 	sts	0x00E4, r24
}
 1aa:	08 95       	ret

000001ac <_ZN3LCDD1Ev>:
	LCDCCR|=(1<<LCDCC1)|(1<<LCDDC2)|(1<<LCDDC1);
	LCDCRA|=(1<<LCDEN);
}

LCD::~LCD() {
	LCDCRA|=(1<<LCDBL);
 1ac:	80 91 e4 00 	lds	r24, 0x00E4
 1b0:	81 60       	ori	r24, 0x01	; 1
 1b2:	80 93 e4 00 	sts	0x00E4, r24
 1b6:	88 e8       	ldi	r24, 0x88	; 136
 1b8:	93 e1       	ldi	r25, 0x13	; 19
 1ba:	29 e1       	ldi	r18, 0x19	; 25
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	f9 01       	movw	r30, r18
 1c0:	31 97       	sbiw	r30, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <_ZN3LCDD1Ev+0x14>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1c6:	d9 f7       	brne	.-10     	; 0x1be <_ZN3LCDD1Ev+0x12>
	_delay_ms(500);
	LCDCRA&=~(1<<LCDEN);
 1c8:	80 91 e4 00 	lds	r24, 0x00E4
 1cc:	8f 77       	andi	r24, 0x7F	; 127
 1ce:	80 93 e4 00 	sts	0x00E4, r24
}
 1d2:	08 95       	ret

000001d4 <_ZN3LCD8setDigitEhh>:

void LCD::setDigit(uint8_t dig, uint8_t nb) {
 1d4:	ef 92       	push	r14
 1d6:	ff 92       	push	r15
 1d8:	0f 93       	push	r16
 1da:	1f 93       	push	r17
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	e4 2f       	mov	r30, r20
 1e2:	70 e0       	ldi	r23, 0x00	; 0
 1e4:	85 e1       	ldi	r24, 0x15	; 21
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	7c 01       	movw	r14, r24
 1ea:	6e 9d       	mul	r22, r14
 1ec:	c0 01       	movw	r24, r0
 1ee:	6f 9d       	mul	r22, r15
 1f0:	90 0d       	add	r25, r0
 1f2:	7e 9d       	mul	r23, r14
 1f4:	90 0d       	add	r25, r0
 1f6:	11 24       	eor	r1, r1
 1f8:	ec 01       	movw	r28, r24
 1fa:	cf 5e       	subi	r28, 0xEF	; 239
 1fc:	de 4f       	sbci	r29, 0xFE	; 254
 1fe:	dc 01       	movw	r26, r24
 200:	a6 5f       	subi	r26, 0xF6	; 246
 202:	be 4f       	sbci	r27, 0xFE	; 254
 204:	40 e0       	ldi	r20, 0x00	; 0
 206:	50 e0       	ldi	r21, 0x00	; 0
//*(digits[0].dr[0]) |=(1<<digits[0].s[0]);
	for(uint8_t j=0;j<8;j++){
		if(NbMap[nb] & (1<<j)){
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	e0 50       	subi	r30, 0x00	; 0
 20c:	ff 4f       	sbci	r31, 0xFF	; 255
 20e:	80 81       	ld	r24, Z
 210:	68 2f       	mov	r22, r24
 212:	70 e0       	ldi	r23, 0x00	; 0
			*(digits[dig].dr[j]) |= (1<<digits[dig].s[j]);
		}else{
			*(digits[dig].dr[j]) &= ~(1<<digits[dig].s[j]);
 214:	01 e0       	ldi	r16, 0x01	; 1
 216:	10 e0       	ldi	r17, 0x00	; 0
}

void LCD::setDigit(uint8_t dig, uint8_t nb) {
//*(digits[0].dr[0]) |=(1<<digits[0].s[0]);
	for(uint8_t j=0;j<8;j++){
		if(NbMap[nb] & (1<<j)){
 218:	cb 01       	movw	r24, r22
 21a:	04 2e       	mov	r0, r20
 21c:	02 c0       	rjmp	.+4      	; 0x222 <_ZN3LCD8setDigitEhh+0x4e>
 21e:	95 95       	asr	r25
 220:	87 95       	ror	r24
 222:	0a 94       	dec	r0
 224:	e2 f7       	brpl	.-8      	; 0x21e <_ZN3LCD8setDigitEhh+0x4a>
 226:	e8 81       	ld	r30, Y
 228:	f9 81       	ldd	r31, Y+1	; 0x01
 22a:	9c 91       	ld	r25, X
 22c:	80 ff       	sbrs	r24, 0
 22e:	0a c0       	rjmp	.+20     	; 0x244 <_ZN3LCD8setDigitEhh+0x70>
			*(digits[dig].dr[j]) |= (1<<digits[dig].s[j]);
 230:	20 81       	ld	r18, Z
 232:	78 01       	movw	r14, r16
 234:	02 c0       	rjmp	.+4      	; 0x23a <_ZN3LCD8setDigitEhh+0x66>
 236:	ee 0c       	add	r14, r14
 238:	ff 1c       	adc	r15, r15
 23a:	9a 95       	dec	r25
 23c:	e2 f7       	brpl	.-8      	; 0x236 <_ZN3LCD8setDigitEhh+0x62>
 23e:	2e 29       	or	r18, r14
 240:	20 83       	st	Z, r18
 242:	0b c0       	rjmp	.+22     	; 0x25a <_ZN3LCD8setDigitEhh+0x86>
		}else{
			*(digits[dig].dr[j]) &= ~(1<<digits[dig].s[j]);
 244:	20 81       	ld	r18, Z
 246:	78 01       	movw	r14, r16
 248:	02 c0       	rjmp	.+4      	; 0x24e <_ZN3LCD8setDigitEhh+0x7a>
 24a:	ee 0c       	add	r14, r14
 24c:	ff 1c       	adc	r15, r15
 24e:	9a 95       	dec	r25
 250:	e2 f7       	brpl	.-8      	; 0x24a <_ZN3LCD8setDigitEhh+0x76>
 252:	c7 01       	movw	r24, r14
 254:	80 95       	com	r24
 256:	82 23       	and	r24, r18
 258:	80 83       	st	Z, r24
 25a:	4f 5f       	subi	r20, 0xFF	; 255
 25c:	5f 4f       	sbci	r21, 0xFF	; 255
 25e:	22 96       	adiw	r28, 0x02	; 2
 260:	11 96       	adiw	r26, 0x01	; 1
	LCDCRA&=~(1<<LCDEN);
}

void LCD::setDigit(uint8_t dig, uint8_t nb) {
//*(digits[0].dr[0]) |=(1<<digits[0].s[0]);
	for(uint8_t j=0;j<8;j++){
 262:	48 30       	cpi	r20, 0x08	; 8
 264:	51 05       	cpc	r21, r1
 266:	c1 f6       	brne	.-80     	; 0x218 <_ZN3LCD8setDigitEhh+0x44>
		}else{
			*(digits[dig].dr[j]) &= ~(1<<digits[dig].s[j]);
		}	
	}

}
 268:	df 91       	pop	r29
 26a:	cf 91       	pop	r28
 26c:	1f 91       	pop	r17
 26e:	0f 91       	pop	r16
 270:	ff 90       	pop	r15
 272:	ef 90       	pop	r14
 274:	08 95       	ret

00000276 <_ZN3LCD10setBatteryENS_7BatteryE>:
		}
	}
}*/

void LCD::setBattery(Battery b) {
	switch(b){
 276:	63 30       	cpi	r22, 0x03	; 3
 278:	69 f1       	breq	.+90     	; 0x2d4 <_ZN3LCD10setBatteryENS_7BatteryE+0x5e>
 27a:	64 30       	cpi	r22, 0x04	; 4
 27c:	28 f4       	brcc	.+10     	; 0x288 <_ZN3LCD10setBatteryENS_7BatteryE+0x12>
 27e:	61 30       	cpi	r22, 0x01	; 1
 280:	91 f0       	breq	.+36     	; 0x2a6 <_ZN3LCD10setBatteryENS_7BatteryE+0x30>
 282:	62 30       	cpi	r22, 0x02	; 2
 284:	18 f5       	brcc	.+70     	; 0x2cc <_ZN3LCD10setBatteryENS_7BatteryE+0x56>
 286:	0b c0       	rjmp	.+22     	; 0x29e <_ZN3LCD10setBatteryENS_7BatteryE+0x28>
 288:	65 30       	cpi	r22, 0x05	; 5
 28a:	d9 f1       	breq	.+118    	; 0x302 <_ZN3LCD10setBatteryENS_7BatteryE+0x8c>
 28c:	65 30       	cpi	r22, 0x05	; 5
 28e:	80 f1       	brcs	.+96     	; 0x2f0 <_ZN3LCD10setBatteryENS_7BatteryE+0x7a>
 290:	66 30       	cpi	r22, 0x06	; 6
 292:	09 f4       	brne	.+2      	; 0x296 <_ZN3LCD10setBatteryENS_7BatteryE+0x20>
 294:	44 c0       	rjmp	.+136    	; 0x31e <_ZN3LCD10setBatteryENS_7BatteryE+0xa8>
 296:	67 30       	cpi	r22, 0x07	; 7
 298:	09 f0       	breq	.+2      	; 0x29c <_ZN3LCD10setBatteryENS_7BatteryE+0x26>
 29a:	6a c0       	rjmp	.+212    	; 0x370 <_ZN3LCD10setBatteryENS_7BatteryE+0xfa>
 29c:	55 c0       	rjmp	.+170    	; 0x348 <_ZN3LCD10setBatteryENS_7BatteryE+0xd2>
	case NONE:
		LCDDR1 &=~(1<<4);
 29e:	80 91 ed 00 	lds	r24, 0x00ED
 2a2:	8f 7e       	andi	r24, 0xEF	; 239
 2a4:	03 c0       	rjmp	.+6      	; 0x2ac <_ZN3LCD10setBatteryENS_7BatteryE+0x36>
		LCDDR6 &=~(1<<4);
		LCDDR11 &=~(1<<4);
		LCDDR16 &=~(1<<4);
		break;
	case EMPTY:
		LCDDR1 |=(1<<4);
 2a6:	80 91 ed 00 	lds	r24, 0x00ED
 2aa:	80 61       	ori	r24, 0x10	; 16
 2ac:	80 93 ed 00 	sts	0x00ED, r24
		LCDDR6 &=~(1<<4);
 2b0:	80 91 f2 00 	lds	r24, 0x00F2
 2b4:	8f 7e       	andi	r24, 0xEF	; 239
 2b6:	80 93 f2 00 	sts	0x00F2, r24
		LCDDR11 &=~(1<<4);
 2ba:	80 91 f7 00 	lds	r24, 0x00F7
 2be:	8f 7e       	andi	r24, 0xEF	; 239
 2c0:	80 93 f7 00 	sts	0x00F7, r24
		LCDDR16 &=~(1<<4);
 2c4:	80 91 fc 00 	lds	r24, 0x00FC
 2c8:	8f 7e       	andi	r24, 0xEF	; 239
 2ca:	3b c0       	rjmp	.+118    	; 0x342 <_ZN3LCD10setBatteryENS_7BatteryE+0xcc>
		break;
	case FIRST:
		LCDDR1 &=~(1<<4);
 2cc:	80 91 ed 00 	lds	r24, 0x00ED
 2d0:	8f 7e       	andi	r24, 0xEF	; 239
 2d2:	1a c0       	rjmp	.+52     	; 0x308 <_ZN3LCD10setBatteryENS_7BatteryE+0x92>
		LCDDR6 &=~(1<<4);
		LCDDR11 &=~(1<<4);
		LCDDR16 |=(1<<4);
		break;
	case SECOND:
		LCDDR1 &=~(1<<4);
 2d4:	80 91 ed 00 	lds	r24, 0x00ED
 2d8:	8f 7e       	andi	r24, 0xEF	; 239
 2da:	80 93 ed 00 	sts	0x00ED, r24
		LCDDR6 &=~(1<<4);
 2de:	80 91 f2 00 	lds	r24, 0x00F2
 2e2:	8f 7e       	andi	r24, 0xEF	; 239
 2e4:	80 93 f2 00 	sts	0x00F2, r24
		LCDDR11 |=(1<<4);
 2e8:	80 91 f7 00 	lds	r24, 0x00F7
 2ec:	80 61       	ori	r24, 0x10	; 16
 2ee:	e8 cf       	rjmp	.-48     	; 0x2c0 <_ZN3LCD10setBatteryENS_7BatteryE+0x4a>
		LCDDR16 &=~(1<<4);
		break;
	case THIRD:
		LCDDR1 &=~(1<<4);
 2f0:	80 91 ed 00 	lds	r24, 0x00ED
 2f4:	8f 7e       	andi	r24, 0xEF	; 239
 2f6:	80 93 ed 00 	sts	0x00ED, r24
		LCDDR6 |=(1<<4);
 2fa:	80 91 f2 00 	lds	r24, 0x00F2
 2fe:	80 61       	ori	r24, 0x10	; 16
 300:	da cf       	rjmp	.-76     	; 0x2b6 <_ZN3LCD10setBatteryENS_7BatteryE+0x40>
		LCDDR11 &=~(1<<4);
		LCDDR16 &=~(1<<4);
		break;
	case ONEBAR:
		LCDDR1 |=(1<<4);
 302:	80 91 ed 00 	lds	r24, 0x00ED
 306:	80 61       	ori	r24, 0x10	; 16
 308:	80 93 ed 00 	sts	0x00ED, r24
		LCDDR6 &=~(1<<4);
 30c:	80 91 f2 00 	lds	r24, 0x00F2
 310:	8f 7e       	andi	r24, 0xEF	; 239
 312:	80 93 f2 00 	sts	0x00F2, r24
		LCDDR11 &=~(1<<4);
 316:	80 91 f7 00 	lds	r24, 0x00F7
 31a:	8f 7e       	andi	r24, 0xEF	; 239
 31c:	0d c0       	rjmp	.+26     	; 0x338 <_ZN3LCD10setBatteryENS_7BatteryE+0xc2>
		LCDDR16 |=(1<<4);
		break;
	case TWOBAR:
		LCDDR1 |=(1<<4);
 31e:	80 91 ed 00 	lds	r24, 0x00ED
 322:	80 61       	ori	r24, 0x10	; 16
 324:	80 93 ed 00 	sts	0x00ED, r24
		LCDDR6 &=~(1<<4);
 328:	80 91 f2 00 	lds	r24, 0x00F2
 32c:	8f 7e       	andi	r24, 0xEF	; 239
 32e:	80 93 f2 00 	sts	0x00F2, r24
		LCDDR11 |=(1<<4);
 332:	80 91 f7 00 	lds	r24, 0x00F7
 336:	80 61       	ori	r24, 0x10	; 16
 338:	80 93 f7 00 	sts	0x00F7, r24
		LCDDR16 |=(1<<4);
 33c:	80 91 fc 00 	lds	r24, 0x00FC
 340:	80 61       	ori	r24, 0x10	; 16
 342:	80 93 fc 00 	sts	0x00FC, r24
 346:	08 95       	ret
		break;
	case FULL:
		LCDDR1 |=(1<<4);
 348:	80 91 ed 00 	lds	r24, 0x00ED
 34c:	80 61       	ori	r24, 0x10	; 16
 34e:	80 93 ed 00 	sts	0x00ED, r24
		LCDDR6 |=(1<<4);
 352:	80 91 f2 00 	lds	r24, 0x00F2
 356:	80 61       	ori	r24, 0x10	; 16
 358:	80 93 f2 00 	sts	0x00F2, r24
		LCDDR11 |=(1<<4);
 35c:	80 91 f7 00 	lds	r24, 0x00F7
 360:	80 61       	ori	r24, 0x10	; 16
 362:	80 93 f7 00 	sts	0x00F7, r24
		LCDDR16 |=(1<<4);
 366:	80 91 fc 00 	lds	r24, 0x00FC
 36a:	80 61       	ori	r24, 0x10	; 16
 36c:	80 93 fc 00 	sts	0x00FC, r24
 370:	08 95       	ret

00000372 <_ZN3LCD5setDPEb>:
		break;
	}
}

void LCD::setDP(bool b) {
	if(b){
 372:	66 23       	and	r22, r22
 374:	21 f0       	breq	.+8      	; 0x37e <_ZN3LCD5setDPEb+0xc>
		LCDDR15|=(1<<4);
 376:	80 91 fb 00 	lds	r24, 0x00FB
 37a:	80 61       	ori	r24, 0x10	; 16
 37c:	03 c0       	rjmp	.+6      	; 0x384 <_ZN3LCD5setDPEb+0x12>
	}else{
		LCDDR15&=~(1<<4);
 37e:	80 91 fb 00 	lds	r24, 0x00FB
 382:	8f 7e       	andi	r24, 0xEF	; 239
 384:	80 93 fb 00 	sts	0x00FB, r24
 388:	08 95       	ret

0000038a <_ZN3LCD6setClkEb>:
	}
}

void LCD::setClk(bool b) {
	if(b){
 38a:	66 23       	and	r22, r22
 38c:	21 f0       	breq	.+8      	; 0x396 <_ZN3LCD6setClkEb+0xc>
		LCDDR16|=1;
 38e:	80 91 fc 00 	lds	r24, 0x00FC
 392:	81 60       	ori	r24, 0x01	; 1
 394:	03 c0       	rjmp	.+6      	; 0x39c <_ZN3LCD6setClkEb+0x12>
	}else{
		LCDDR16&=~1;
 396:	80 91 fc 00 	lds	r24, 0x00FC
 39a:	8e 7f       	andi	r24, 0xFE	; 254
 39c:	80 93 fc 00 	sts	0x00FC, r24
 3a0:	08 95       	ret

000003a2 <_ZN3LCD5blinkEj>:
	}
}

void LCD::blink(uint16_t t) {
 3a2:	20 e0       	ldi	r18, 0x00	; 0
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	a6 ea       	ldi	r26, 0xA6	; 166
 3a8:	be e0       	ldi	r27, 0x0E	; 14
	for(uint16_t i=0;i<t;i++){
		PORTB|=(1<<PB0);
 3aa:	49 e1       	ldi	r20, 0x19	; 25
 3ac:	50 e0       	ldi	r21, 0x00	; 0
 3ae:	0e c0       	rjmp	.+28     	; 0x3cc <_ZN3LCD5blinkEj+0x2a>
 3b0:	28 9a       	sbi	0x05, 0	; 5
 3b2:	cd 01       	movw	r24, r26
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <_ZN3LCD5blinkEj+0x12>
		_delay_ms(15);
		PORTB&=~(1<<PB0);
 3b8:	28 98       	cbi	0x05, 0	; 5
 3ba:	88 eb       	ldi	r24, 0xB8	; 184
 3bc:	9b e0       	ldi	r25, 0x0B	; 11
 3be:	fa 01       	movw	r30, r20
 3c0:	31 97       	sbiw	r30, 0x01	; 1
 3c2:	f1 f7       	brne	.-4      	; 0x3c0 <_ZN3LCD5blinkEj+0x1e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3c6:	d9 f7       	brne	.-10     	; 0x3be <_ZN3LCD5blinkEj+0x1c>
		LCDDR16&=~1;
	}
}

void LCD::blink(uint16_t t) {
	for(uint16_t i=0;i<t;i++){
 3c8:	2f 5f       	subi	r18, 0xFF	; 255
 3ca:	3f 4f       	sbci	r19, 0xFF	; 255
 3cc:	26 17       	cp	r18, r22
 3ce:	37 07       	cpc	r19, r23
 3d0:	78 f3       	brcs	.-34     	; 0x3b0 <_ZN3LCD5blinkEj+0xe>
		PORTB|=(1<<PB0);
		_delay_ms(15);
		PORTB&=~(1<<PB0);
		_delay_ms(300);
	}
 3d2:	08 95       	ret

000003d4 <__tablejump2__>:
 3d4:	ee 0f       	add	r30, r30
 3d6:	ff 1f       	adc	r31, r31

000003d8 <__tablejump__>:
 3d8:	05 90       	lpm	r0, Z+
 3da:	f4 91       	lpm	r31, Z+
 3dc:	e0 2d       	mov	r30, r0
 3de:	09 94       	ijmp

000003e0 <__do_global_dtors>:
 3e0:	10 e0       	ldi	r17, 0x00	; 0
 3e2:	ce e5       	ldi	r28, 0x5E	; 94
 3e4:	d0 e0       	ldi	r29, 0x00	; 0
 3e6:	04 c0       	rjmp	.+8      	; 0x3f0 <.do_global_dtors_start>

000003e8 <.do_global_dtors_loop>:
 3e8:	fe 01       	movw	r30, r28
 3ea:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__tablejump__>
 3ee:	22 96       	adiw	r28, 0x02	; 2

000003f0 <.do_global_dtors_start>:
 3f0:	c0 36       	cpi	r28, 0x60	; 96
 3f2:	d1 07       	cpc	r29, r17
 3f4:	c9 f7       	brne	.-14     	; 0x3e8 <.do_global_dtors_loop>
 3f6:	f8 94       	cli

000003f8 <__stop_program>:
 3f8:	ff cf       	rjmp	.-2      	; 0x3f8 <__stop_program>
