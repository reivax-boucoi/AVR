
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000416  000004aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000416  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800124  00800124  000004ce  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000004ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000f4  00000000  00000000  000004ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000459  00000000  00000000  000005e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001e8  00000000  00000000  00000a3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000472  00000000  00000000  00000c23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001098  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000019f  00000000  00000000  00001178  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000025a  00000000  00000000  00001317  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001571  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	e6 e1       	ldi	r30, 0x16	; 22
  48:	f4 e0       	ldi	r31, 0x04	; 4
  4a:	02 c0       	rjmp	.+4      	; 0x50 <.do_copy_data_start>

0000004c <.do_copy_data_loop>:
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0

00000050 <.do_copy_data_start>:
  50:	a4 32       	cpi	r26, 0x24	; 36
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <.do_copy_data_loop>

00000056 <__do_clear_bss>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a4 e2       	ldi	r26, 0x24	; 36
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a5 33       	cpi	r26, 0x35	; 53
  62:	b1 07       	cpc	r27, r17
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	5c d1       	rcall	.+696    	; 0x320 <main>
  68:	d4 c1       	rjmp	.+936    	; 0x412 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <i2c_init>:
}


void i2c_init(){

  DDRC &= 0b11001111;
  6c:	87 b1       	in	r24, 0x07	; 7
  6e:	8f 7c       	andi	r24, 0xCF	; 207
  70:	87 b9       	out	0x07, r24	; 7
  PORTC &= 0b11001111;//disabling pull-ups !
  72:	88 b1       	in	r24, 0x08	; 8
  74:	8f 7c       	andi	r24, 0xCF	; 207
  76:	88 b9       	out	0x08, r24	; 8
  TWSR = 0;
  78:	10 92 b9 00 	sts	0x00B9, r1
#if F_CPU < 1600000UL // max of 400kHz if CPU frequency > 1.6MHz 
  TWBR = 0;
#else
  TWBR = ((F_CPU / F_I2C) - 16) / 2;
  7c:	87 e0       	ldi	r24, 0x07	; 7
  7e:	80 93 b8 00 	sts	0x00B8, r24
#endif
  TWCR = _BV(TWEN);
  82:	84 e0       	ldi	r24, 0x04	; 4
  84:	80 93 bc 00 	sts	0x00BC, r24
}
  88:	08 95       	ret

0000008a <i2c_start>:

uint8_t i2c_start(void){
  TWCR = _BV(TWINT) | _BV(TWSTA) | _BV(TWEN);
  8a:	84 ea       	ldi	r24, 0xA4	; 164
  8c:	80 93 bc 00 	sts	0x00BC, r24
  while ((TWCR & _BV(TWINT)) == 0) ;
  90:	80 91 bc 00 	lds	r24, 0x00BC
  94:	87 ff       	sbrs	r24, 7
  96:	fc cf       	rjmp	.-8      	; 0x90 <i2c_start+0x6>
  switch(TW_STATUS){
  98:	80 91 b9 00 	lds	r24, 0x00B9
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	88 7f       	andi	r24, 0xF8	; 248
  a0:	90 70       	andi	r25, 0x00	; 0
  a2:	88 30       	cpi	r24, 0x08	; 8
  a4:	91 05       	cpc	r25, r1
  a6:	21 f0       	breq	.+8      	; 0xb0 <i2c_start+0x26>
  a8:	40 97       	sbiw	r24, 0x10	; 16
  aa:	11 f0       	breq	.+4      	; 0xb0 <i2c_start+0x26>
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	08 95       	ret
  b0:	80 e0       	ldi	r24, 0x00	; 0
    case TW_REP_START:
      return(0);
    default:
      return(1);
  }
}
  b2:	08 95       	ret

000000b4 <i2c_stop>:

void i2c_stop(void){
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
  b4:	84 e9       	ldi	r24, 0x94	; 148
  b6:	80 93 bc 00 	sts	0x00BC, r24
  while (TWCR & _BV(TWSTO));
  ba:	80 91 bc 00 	lds	r24, 0x00BC
  be:	84 fd       	sbrc	r24, 4
  c0:	fc cf       	rjmp	.-8      	; 0xba <i2c_stop+0x6>
}
  c2:	08 95       	ret

000000c4 <i2c_putchar>:


uint8_t i2c_putchar(uint8_t c){
  TWDR = c;
  c4:	80 93 bb 00 	sts	0x00BB, r24
  TWCR = _BV(TWINT) | _BV(TWEN);
  c8:	84 e8       	ldi	r24, 0x84	; 132
  ca:	80 93 bc 00 	sts	0x00BC, r24
  while ((TWCR & _BV(TWINT)) == 0);
  ce:	80 91 bc 00 	lds	r24, 0x00BC
  d2:	87 ff       	sbrs	r24, 7
  d4:	fc cf       	rjmp	.-8      	; 0xce <i2c_putchar+0xa>
  switch(TW_STATUS){
  d6:	80 91 b9 00 	lds	r24, 0x00B9
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	88 7f       	andi	r24, 0xF8	; 248
  de:	90 70       	andi	r25, 0x00	; 0
  e0:	80 33       	cpi	r24, 0x30	; 48
  e2:	91 05       	cpc	r25, r1
  e4:	29 f1       	breq	.+74     	; 0x130 <i2c_putchar+0x6c>
  e6:	81 33       	cpi	r24, 0x31	; 49
  e8:	91 05       	cpc	r25, r1
  ea:	7c f4       	brge	.+30     	; 0x10a <i2c_putchar+0x46>
  ec:	88 31       	cpi	r24, 0x18	; 24
  ee:	91 05       	cpc	r25, r1
  f0:	09 f1       	breq	.+66     	; 0x134 <i2c_putchar+0x70>
  f2:	89 31       	cpi	r24, 0x19	; 25
  f4:	91 05       	cpc	r25, r1
  f6:	1c f4       	brge	.+6      	; 0xfe <i2c_putchar+0x3a>
  f8:	89 2b       	or	r24, r25
  fa:	d1 f0       	breq	.+52     	; 0x130 <i2c_putchar+0x6c>
  fc:	1d c0       	rjmp	.+58     	; 0x138 <i2c_putchar+0x74>
  fe:	80 32       	cpi	r24, 0x20	; 32
 100:	91 05       	cpc	r25, r1
 102:	b1 f0       	breq	.+44     	; 0x130 <i2c_putchar+0x6c>
 104:	88 97       	sbiw	r24, 0x28	; 40
 106:	c1 f4       	brne	.+48     	; 0x138 <i2c_putchar+0x74>
 108:	15 c0       	rjmp	.+42     	; 0x134 <i2c_putchar+0x70>
 10a:	88 34       	cpi	r24, 0x48	; 72
 10c:	91 05       	cpc	r25, r1
 10e:	81 f0       	breq	.+32     	; 0x130 <i2c_putchar+0x6c>
 110:	89 34       	cpi	r24, 0x49	; 73
 112:	91 05       	cpc	r25, r1
 114:	3c f4       	brge	.+14     	; 0x124 <i2c_putchar+0x60>
 116:	88 33       	cpi	r24, 0x38	; 56
 118:	91 05       	cpc	r25, r1
 11a:	51 f0       	breq	.+20     	; 0x130 <i2c_putchar+0x6c>
 11c:	80 34       	cpi	r24, 0x40	; 64
 11e:	91 05       	cpc	r25, r1
 120:	59 f4       	brne	.+22     	; 0x138 <i2c_putchar+0x74>
 122:	08 c0       	rjmp	.+16     	; 0x134 <i2c_putchar+0x70>
 124:	80 35       	cpi	r24, 0x50	; 80
 126:	91 05       	cpc	r25, r1
 128:	29 f0       	breq	.+10     	; 0x134 <i2c_putchar+0x70>
 12a:	88 35       	cpi	r24, 0x58	; 88
 12c:	91 05       	cpc	r25, r1
 12e:	21 f4       	brne	.+8      	; 0x138 <i2c_putchar+0x74>
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	08 95       	ret
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	08 95       	ret
 138:	82 e0       	ldi	r24, 0x02	; 2
	    return(1);
    default:
      return(2);
  }

}
 13a:	08 95       	ret

0000013c <i2c_getchar_ack>:

uint8_t i2c_getchar_ack(void){
  TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN);
 13c:	84 ec       	ldi	r24, 0xC4	; 196
 13e:	80 93 bc 00 	sts	0x00BC, r24
  while ((TWCR & _BV(TWINT)) == 0);
 142:	80 91 bc 00 	lds	r24, 0x00BC
 146:	87 ff       	sbrs	r24, 7
 148:	fc cf       	rjmp	.-8      	; 0x142 <i2c_getchar_ack+0x6>
  return(TWDR);
 14a:	80 91 bb 00 	lds	r24, 0x00BB

}
 14e:	08 95       	ret

00000150 <i2c_getchar_nack>:
uint8_t i2c_getchar_nack(void){
  TWCR = _BV(TWINT) | _BV(TWEN);
 150:	84 e8       	ldi	r24, 0x84	; 132
 152:	80 93 bc 00 	sts	0x00BC, r24
  while ((TWCR & _BV(TWINT)) == 0);
 156:	80 91 bc 00 	lds	r24, 0x00BC
 15a:	87 ff       	sbrs	r24, 7
 15c:	fc cf       	rjmp	.-8      	; 0x156 <i2c_getchar_nack+0x6>
  return(TWDR);
 15e:	80 91 bb 00 	lds	r24, 0x00BB
}
 162:	08 95       	ret

00000164 <i2c_write>:


uint8_t i2c_write(uint8_t addr, uint8_t len, uint8_t adrs, uint8_t *buf){ 
 164:	ef 92       	push	r14
 166:	ff 92       	push	r15
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	06 2f       	mov	r16, r22
 172:	e4 2e       	mov	r14, r20
 174:	e9 01       	movw	r28, r18
  uint8_t restarts = MAX_RESTARTS;
  if(len <= 0)
 176:	66 23       	and	r22, r22
 178:	b9 f1       	breq	.+110    	; 0x1e8 <i2c_write+0x84>
      i2c_stop();
      return(1);
    }
    goto WriteRestart;
  }
  if(i2c_putchar((addr<<1)|TW_WRITE)){
 17a:	f8 2e       	mov	r15, r24
 17c:	ff 0c       	add	r15, r15
 17e:	14 e1       	ldi	r17, 0x14	; 20
 180:	01 c0       	rjmp	.+2      	; 0x184 <i2c_write+0x20>
 182:	11 50       	subi	r17, 0x01	; 1
uint8_t i2c_write(uint8_t addr, uint8_t len, uint8_t adrs, uint8_t *buf){ 
  uint8_t restarts = MAX_RESTARTS;
  if(len <= 0)
    return(0);
WriteRestart:
  if(i2c_start()){
 184:	82 df       	rcall	.-252    	; 0x8a <i2c_start>
 186:	88 23       	and	r24, r24
 188:	59 f0       	breq	.+22     	; 0x1a0 <i2c_write+0x3c>
    if(restarts-- == 0){
 18a:	11 23       	and	r17, r17
 18c:	d1 f7       	brne	.-12     	; 0x182 <i2c_write+0x1e>
      return(1);
  }
}

void i2c_stop(void){
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 18e:	84 e9       	ldi	r24, 0x94	; 148
 190:	80 93 bc 00 	sts	0x00BC, r24
  while (TWCR & _BV(TWSTO));
 194:	80 91 bc 00 	lds	r24, 0x00BC
 198:	84 fd       	sbrc	r24, 4
 19a:	fc cf       	rjmp	.-8      	; 0x194 <i2c_write+0x30>
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	25 c0       	rjmp	.+74     	; 0x1ea <i2c_write+0x86>
      i2c_stop();
      return(1);
    }
    goto WriteRestart;
  }
  if(i2c_putchar((addr<<1)|TW_WRITE)){
 1a0:	8f 2d       	mov	r24, r15
 1a2:	90 df       	rcall	.-224    	; 0xc4 <i2c_putchar>
 1a4:	88 23       	and	r24, r24
 1a6:	59 f0       	breq	.+22     	; 0x1be <i2c_write+0x5a>
    if(restarts-- == 0){
 1a8:	11 23       	and	r17, r17
 1aa:	59 f7       	brne	.-42     	; 0x182 <i2c_write+0x1e>
      return(1);
  }
}

void i2c_stop(void){
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 1ac:	84 e9       	ldi	r24, 0x94	; 148
 1ae:	80 93 bc 00 	sts	0x00BC, r24
  while (TWCR & _BV(TWSTO));
 1b2:	80 91 bc 00 	lds	r24, 0x00BC
 1b6:	84 fd       	sbrc	r24, 4
 1b8:	fc cf       	rjmp	.-8      	; 0x1b2 <i2c_write+0x4e>
 1ba:	82 e0       	ldi	r24, 0x02	; 2
 1bc:	16 c0       	rjmp	.+44     	; 0x1ea <i2c_write+0x86>
      i2c_stop();
      return(2);
    }
    goto WriteRestart;
  }
  if(i2c_putchar(adrs)){
 1be:	8e 2d       	mov	r24, r14
 1c0:	81 df       	rcall	.-254    	; 0xc4 <i2c_putchar>
 1c2:	88 23       	and	r24, r24
 1c4:	11 f0       	breq	.+4      	; 0x1ca <i2c_write+0x66>
 1c6:	83 e0       	ldi	r24, 0x03	; 3
 1c8:	10 c0       	rjmp	.+32     	; 0x1ea <i2c_write+0x86>
    return(3);
  }
  for(; len > 0; len--){
    if(i2c_putchar(*buf++)){
 1ca:	89 91       	ld	r24, Y+
 1cc:	7b df       	rcall	.-266    	; 0xc4 <i2c_putchar>
 1ce:	88 23       	and	r24, r24
 1d0:	11 f0       	breq	.+4      	; 0x1d6 <i2c_write+0x72>
 1d2:	84 e0       	ldi	r24, 0x04	; 4
 1d4:	0a c0       	rjmp	.+20     	; 0x1ea <i2c_write+0x86>
    goto WriteRestart;
  }
  if(i2c_putchar(adrs)){
    return(3);
  }
  for(; len > 0; len--){
 1d6:	01 50       	subi	r16, 0x01	; 1
 1d8:	c1 f7       	brne	.-16     	; 0x1ca <i2c_write+0x66>
      return(1);
  }
}

void i2c_stop(void){
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 1da:	84 e9       	ldi	r24, 0x94	; 148
 1dc:	80 93 bc 00 	sts	0x00BC, r24
  while (TWCR & _BV(TWSTO));
 1e0:	80 91 bc 00 	lds	r24, 0x00BC
 1e4:	84 fd       	sbrc	r24, 4
 1e6:	fc cf       	rjmp	.-8      	; 0x1e0 <i2c_write+0x7c>
 1e8:	80 e0       	ldi	r24, 0x00	; 0
      return(4);
    }      
  }
  i2c_stop();
  return(0);
}
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	ff 90       	pop	r15
 1f4:	ef 90       	pop	r14
 1f6:	08 95       	ret

000001f8 <i2c_read>:


uint8_t i2c_read(uint8_t addr, uint8_t len, uint8_t adrs, uint8_t *buf){
 1f8:	df 92       	push	r13
 1fa:	ef 92       	push	r14
 1fc:	ff 92       	push	r15
 1fe:	0f 93       	push	r16
 200:	1f 93       	push	r17
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	08 2f       	mov	r16, r24
 208:	f6 2e       	mov	r15, r22
 20a:	d4 2e       	mov	r13, r20
 20c:	e9 01       	movw	r28, r18
  uint8_t restarts = MAX_RESTARTS;
  if(len == 0)
 20e:	66 23       	and	r22, r22
 210:	09 f4       	brne	.+2      	; 0x214 <i2c_read+0x1c>
 212:	53 c0       	rjmp	.+166    	; 0x2ba <i2c_read+0xc2>
  if(i2c_start()){
    if(--restarts == 0)
      return(1);
    goto ReadRRestart;
  }
  if(i2c_putchar((addr<<1)|TW_WRITE)){
 214:	e8 2e       	mov	r14, r24
 216:	ee 0c       	add	r14, r14
 218:	13 e1       	ldi	r17, 0x13	; 19
 21a:	01 c0       	rjmp	.+2      	; 0x21e <i2c_read+0x26>
 21c:	11 50       	subi	r17, 0x01	; 1
uint8_t i2c_read(uint8_t addr, uint8_t len, uint8_t adrs, uint8_t *buf){
  uint8_t restarts = MAX_RESTARTS;
  if(len == 0)
    return(0);
ReadRRestart:
  if(i2c_start()){
 21e:	35 df       	rcall	.-406    	; 0x8a <i2c_start>
 220:	88 23       	and	r24, r24
 222:	21 f0       	breq	.+8      	; 0x22c <i2c_read+0x34>
    if(--restarts == 0)
 224:	11 23       	and	r17, r17
 226:	d1 f7       	brne	.-12     	; 0x21c <i2c_read+0x24>
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	48 c0       	rjmp	.+144    	; 0x2bc <i2c_read+0xc4>
      return(1);
    goto ReadRRestart;
  }
  if(i2c_putchar((addr<<1)|TW_WRITE)){
 22c:	8e 2d       	mov	r24, r14
 22e:	4a df       	rcall	.-364    	; 0xc4 <i2c_putchar>
 230:	88 23       	and	r24, r24
 232:	59 f0       	breq	.+22     	; 0x24a <i2c_read+0x52>
    if(--restarts == 0){
 234:	11 23       	and	r17, r17
 236:	91 f7       	brne	.-28     	; 0x21c <i2c_read+0x24>
      return(1);
  }
}

void i2c_stop(void){
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 238:	84 e9       	ldi	r24, 0x94	; 148
 23a:	80 93 bc 00 	sts	0x00BC, r24
  while (TWCR & _BV(TWSTO));
 23e:	80 91 bc 00 	lds	r24, 0x00BC
 242:	84 fd       	sbrc	r24, 4
 244:	fc cf       	rjmp	.-8      	; 0x23e <i2c_read+0x46>
 246:	82 e0       	ldi	r24, 0x02	; 2
 248:	39 c0       	rjmp	.+114    	; 0x2bc <i2c_read+0xc4>
      i2c_stop();
      return(2);
    }
    goto ReadRRestart;
  }
  if(i2c_putchar(adrs)){
 24a:	8d 2d       	mov	r24, r13
 24c:	3b df       	rcall	.-394    	; 0xc4 <i2c_putchar>
 24e:	88 23       	and	r24, r24
 250:	11 f0       	breq	.+4      	; 0x256 <i2c_read+0x5e>
 252:	83 e0       	ldi	r24, 0x03	; 3
 254:	33 c0       	rjmp	.+102    	; 0x2bc <i2c_read+0xc4>
    return(3);
  }  
  if(i2c_start()){
 256:	19 df       	rcall	.-462    	; 0x8a <i2c_start>
 258:	88 23       	and	r24, r24
 25a:	11 f0       	breq	.+4      	; 0x260 <i2c_read+0x68>
 25c:	84 e0       	ldi	r24, 0x04	; 4
 25e:	2e c0       	rjmp	.+92     	; 0x2bc <i2c_read+0xc4>
    return(4);
  }
  if(i2c_putchar((addr<<1)|TW_READ)){
 260:	00 0f       	add	r16, r16
 262:	80 2f       	mov	r24, r16
 264:	81 60       	ori	r24, 0x01	; 1
 266:	2e df       	rcall	.-420    	; 0xc4 <i2c_putchar>
 268:	88 23       	and	r24, r24
 26a:	11 f0       	breq	.+4      	; 0x270 <i2c_read+0x78>
 26c:	85 e0       	ldi	r24, 0x05	; 5
 26e:	26 c0       	rjmp	.+76     	; 0x2bc <i2c_read+0xc4>
 270:	9f 2d       	mov	r25, r15
 272:	fe 01       	movw	r30, r28
  }

}

uint8_t i2c_getchar_ack(void){
  TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN);
 274:	24 ec       	ldi	r18, 0xC4	; 196
 276:	0a c0       	rjmp	.+20     	; 0x28c <i2c_read+0x94>
 278:	20 93 bc 00 	sts	0x00BC, r18
  while ((TWCR & _BV(TWINT)) == 0);
 27c:	80 91 bc 00 	lds	r24, 0x00BC
 280:	87 ff       	sbrs	r24, 7
 282:	fc cf       	rjmp	.-8      	; 0x27c <i2c_read+0x84>
  return(TWDR);
 284:	80 91 bb 00 	lds	r24, 0x00BB
  }
  if(i2c_putchar((addr<<1)|TW_READ)){
    return(5);
  }
  for(; len > 1; len--){
    *(buf++) = i2c_getchar_ack();
 288:	81 93       	st	Z+, r24
    return(4);
  }
  if(i2c_putchar((addr<<1)|TW_READ)){
    return(5);
  }
  for(; len > 1; len--){
 28a:	91 50       	subi	r25, 0x01	; 1
 28c:	92 30       	cpi	r25, 0x02	; 2
 28e:	a0 f7       	brcc	.-24     	; 0x278 <i2c_read+0x80>
 290:	fa 94       	dec	r15
 292:	fe 01       	movw	r30, r28
 294:	ef 0d       	add	r30, r15
 296:	f1 1d       	adc	r31, r1
  while ((TWCR & _BV(TWINT)) == 0);
  return(TWDR);

}
uint8_t i2c_getchar_nack(void){
  TWCR = _BV(TWINT) | _BV(TWEN);
 298:	84 e8       	ldi	r24, 0x84	; 132
 29a:	80 93 bc 00 	sts	0x00BC, r24
  while ((TWCR & _BV(TWINT)) == 0);
 29e:	80 91 bc 00 	lds	r24, 0x00BC
 2a2:	87 ff       	sbrs	r24, 7
 2a4:	fc cf       	rjmp	.-8      	; 0x29e <i2c_read+0xa6>
  return(TWDR);
 2a6:	80 91 bb 00 	lds	r24, 0x00BB
    return(5);
  }
  for(; len > 1; len--){
    *(buf++) = i2c_getchar_ack();
  }
  *(buf++) = i2c_getchar_nack();
 2aa:	80 83       	st	Z, r24
      return(1);
  }
}

void i2c_stop(void){
  TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 2ac:	84 e9       	ldi	r24, 0x94	; 148
 2ae:	80 93 bc 00 	sts	0x00BC, r24
  while (TWCR & _BV(TWSTO));
 2b2:	80 91 bc 00 	lds	r24, 0x00BC
 2b6:	84 fd       	sbrc	r24, 4
 2b8:	fc cf       	rjmp	.-8      	; 0x2b2 <i2c_read+0xba>
 2ba:	80 e0       	ldi	r24, 0x00	; 0
  }
  *(buf++) = i2c_getchar_nack();
  i2c_stop();
  return(0);

}
 2bc:	df 91       	pop	r29
 2be:	cf 91       	pop	r28
 2c0:	1f 91       	pop	r17
 2c2:	0f 91       	pop	r16
 2c4:	ff 90       	pop	r15
 2c6:	ef 90       	pop	r14
 2c8:	df 90       	pop	r13
 2ca:	08 95       	ret

000002cc <uart_init>:
void uart_init (void){
    UBRR0H = (BAUDRATE>>8);
 2cc:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = BAUDRATE;	// set baud rate
 2d0:	8d e4       	ldi	r24, 0x4D	; 77
 2d2:	80 93 c4 00 	sts	0x00C4, r24
    UCSR0B|= (1<<TXEN0)|(1<<RXEN0);	// enable receiver and transmitter
 2d6:	e1 ec       	ldi	r30, 0xC1	; 193
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	80 81       	ld	r24, Z
 2dc:	88 61       	ori	r24, 0x18	; 24
 2de:	80 83       	st	Z, r24
    UCSR0C|= (1<<UMSEL01)|(1<<UCSZ00)|(1<<UCSZ01);	// 8bit data format
 2e0:	e2 ec       	ldi	r30, 0xC2	; 194
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	80 81       	ld	r24, Z
 2e6:	86 68       	ori	r24, 0x86	; 134
 2e8:	80 83       	st	Z, r24
}
 2ea:	08 95       	ret

000002ec <uart_transmit>:

void uart_transmit (uint8_t data){
 2ec:	98 2f       	mov	r25, r24
    while (!( UCSR0A & (1<<UDRE0)));	// wait while register is free
 2ee:	80 91 c0 00 	lds	r24, 0x00C0
 2f2:	85 ff       	sbrs	r24, 5
 2f4:	fc cf       	rjmp	.-8      	; 0x2ee <uart_transmit+0x2>
    UDR0 = data;	// load data in the register
 2f6:	90 93 c6 00 	sts	0x00C6, r25
}
 2fa:	08 95       	ret

000002fc <uart_recieve>:

uint8_t uart_recieve (void){
    while(!(UCSR0A) & (1<<RXC0));	// wait while data is being received
 2fc:	80 91 c0 00 	lds	r24, 0x00C0
    return UDR0;	// return 8-bit data
 300:	80 91 c6 00 	lds	r24, 0x00C6
}
 304:	08 95       	ret

00000306 <uart_transmitMult>:

void uart_transmitMult(char* data){
 306:	fc 01       	movw	r30, r24
 308:	07 c0       	rjmp	.+14     	; 0x318 <uart_transmitMult+0x12>
    UCSR0B|= (1<<TXEN0)|(1<<RXEN0);	// enable receiver and transmitter
    UCSR0C|= (1<<UMSEL01)|(1<<UCSZ00)|(1<<UCSZ01);	// 8bit data format
}

void uart_transmit (uint8_t data){
    while (!( UCSR0A & (1<<UDRE0)));	// wait while register is free
 30a:	80 91 c0 00 	lds	r24, 0x00C0
 30e:	85 ff       	sbrs	r24, 5
 310:	fc cf       	rjmp	.-8      	; 0x30a <uart_transmitMult+0x4>
    return UDR0;	// return 8-bit data
}

void uart_transmitMult(char* data){
	while(*data>0){
		uart_transmit(*data++);
 312:	31 96       	adiw	r30, 0x01	; 1
    UCSR0C|= (1<<UMSEL01)|(1<<UCSZ00)|(1<<UCSZ01);	// 8bit data format
}

void uart_transmit (uint8_t data){
    while (!( UCSR0A & (1<<UDRE0)));	// wait while register is free
    UDR0 = data;	// load data in the register
 314:	90 93 c6 00 	sts	0x00C6, r25
    while(!(UCSR0A) & (1<<RXC0));	// wait while data is being received
    return UDR0;	// return 8-bit data
}

void uart_transmitMult(char* data){
	while(*data>0){
 318:	90 81       	ld	r25, Z
 31a:	99 23       	and	r25, r25
 31c:	b1 f7       	brne	.-20     	; 0x30a <uart_transmitMult+0x4>
		uart_transmit(*data++);
	}
 31e:	08 95       	ret

00000320 <main>:
void uart_transmitMult(char *Data);

char myString[16];
uint8_t data = 0;

int main(void){
 320:	1f 93       	push	r17
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	80 e1       	ldi	r24, 0x10	; 16
 328:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 32a:	2c e2       	ldi	r18, 0x2C	; 44
 32c:	31 e0       	ldi	r19, 0x01	; 1
 32e:	f9 01       	movw	r30, r18
 330:	31 97       	sbiw	r30, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <main+0x10>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 334:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 336:	d9 f7       	brne	.-10     	; 0x32e <main+0xe>
	_delay_ms(1000);
	uart_init();
 338:	c9 df       	rcall	.-110    	; 0x2cc <uart_init>
	uart_transmitMult("Initialized UART\n");
 33a:	80 e0       	ldi	r24, 0x00	; 0
 33c:	91 e0       	ldi	r25, 0x01	; 1
 33e:	e3 df       	rcall	.-58     	; 0x306 <uart_transmitMult>
	i2c_init();
 340:	95 de       	rcall	.-726    	; 0x6c <i2c_init>
	uart_transmitMult("Initialized I2C\n");
 342:	82 e1       	ldi	r24, 0x12	; 18
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	df df       	rcall	.-66     	; 0x306 <uart_transmitMult>
 348:	20 e1       	ldi	r18, 0x10	; 16
 34a:	37 e2       	ldi	r19, 0x27	; 39
    UCSR0C|= (1<<UMSEL01)|(1<<UCSZ00)|(1<<UCSZ01);	// 8bit data format
}

void uart_transmit (uint8_t data){
    while (!( UCSR0A & (1<<UDRE0)));	// wait while register is free
    UDR0 = data;	// load data in the register
 34c:	1a e0       	ldi	r17, 0x0A	; 10
 34e:	cc e2       	ldi	r28, 0x2C	; 44
 350:	d1 e0       	ldi	r29, 0x01	; 1
 352:	05 c0       	rjmp	.+10     	; 0x35e <main+0x3e>
 354:	ce 01       	movw	r24, r28
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <main+0x36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 35a:	21 50       	subi	r18, 0x01	; 1
 35c:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 35e:	21 15       	cp	r18, r1
 360:	31 05       	cpc	r19, r1
 362:	c1 f7       	brne	.-16     	; 0x354 <main+0x34>
	
	while(1){
		
		//i2c_read(ACC_addr,1,0x3B,&data);	
		_delay_ms(1000);
		itoa(data,myString,10);
 364:	80 91 24 01 	lds	r24, 0x0124
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	65 e2       	ldi	r22, 0x25	; 37
 36c:	71 e0       	ldi	r23, 0x01	; 1
 36e:	4a e0       	ldi	r20, 0x0A	; 10
 370:	50 e0       	ldi	r21, 0x00	; 0
 372:	0c d0       	rcall	.+24     	; 0x38c <itoa>
		uart_transmitMult(myString);
 374:	85 e2       	ldi	r24, 0x25	; 37
 376:	91 e0       	ldi	r25, 0x01	; 1
 378:	c6 df       	rcall	.-116    	; 0x306 <uart_transmitMult>
    UCSR0B|= (1<<TXEN0)|(1<<RXEN0);	// enable receiver and transmitter
    UCSR0C|= (1<<UMSEL01)|(1<<UCSZ00)|(1<<UCSZ01);	// 8bit data format
}

void uart_transmit (uint8_t data){
    while (!( UCSR0A & (1<<UDRE0)));	// wait while register is free
 37a:	80 91 c0 00 	lds	r24, 0x00C0
 37e:	85 ff       	sbrs	r24, 5
 380:	fc cf       	rjmp	.-8      	; 0x37a <main+0x5a>
    UDR0 = data;	// load data in the register
 382:	10 93 c6 00 	sts	0x00C6, r17
 386:	20 e1       	ldi	r18, 0x10	; 16
 388:	37 e2       	ldi	r19, 0x27	; 39
 38a:	e4 cf       	rjmp	.-56     	; 0x354 <main+0x34>

0000038c <itoa>:
 38c:	fb 01       	movw	r30, r22
 38e:	9f 01       	movw	r18, r30
 390:	e8 94       	clt
 392:	42 30       	cpi	r20, 0x02	; 2
 394:	bc f0       	brlt	.+46     	; 0x3c4 <itoa+0x38>
 396:	45 32       	cpi	r20, 0x25	; 37
 398:	ac f4       	brge	.+42     	; 0x3c4 <itoa+0x38>
 39a:	4a 30       	cpi	r20, 0x0A	; 10
 39c:	29 f4       	brne	.+10     	; 0x3a8 <itoa+0x1c>
 39e:	97 fb       	bst	r25, 7
 3a0:	1e f4       	brtc	.+6      	; 0x3a8 <itoa+0x1c>
 3a2:	90 95       	com	r25
 3a4:	81 95       	neg	r24
 3a6:	9f 4f       	sbci	r25, 0xFF	; 255
 3a8:	64 2f       	mov	r22, r20
 3aa:	77 27       	eor	r23, r23
 3ac:	1e d0       	rcall	.+60     	; 0x3ea <__udivmodhi4>
 3ae:	80 5d       	subi	r24, 0xD0	; 208
 3b0:	8a 33       	cpi	r24, 0x3A	; 58
 3b2:	0c f0       	brlt	.+2      	; 0x3b6 <itoa+0x2a>
 3b4:	89 5d       	subi	r24, 0xD9	; 217
 3b6:	81 93       	st	Z+, r24
 3b8:	cb 01       	movw	r24, r22
 3ba:	00 97       	sbiw	r24, 0x00	; 0
 3bc:	a9 f7       	brne	.-22     	; 0x3a8 <itoa+0x1c>
 3be:	16 f4       	brtc	.+4      	; 0x3c4 <itoa+0x38>
 3c0:	5d e2       	ldi	r21, 0x2D	; 45
 3c2:	51 93       	st	Z+, r21
 3c4:	10 82       	st	Z, r1
 3c6:	c9 01       	movw	r24, r18
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <strrev>

000003ca <strrev>:
 3ca:	dc 01       	movw	r26, r24
 3cc:	fc 01       	movw	r30, r24
 3ce:	67 2f       	mov	r22, r23
 3d0:	71 91       	ld	r23, Z+
 3d2:	77 23       	and	r23, r23
 3d4:	e1 f7       	brne	.-8      	; 0x3ce <strrev+0x4>
 3d6:	32 97       	sbiw	r30, 0x02	; 2
 3d8:	04 c0       	rjmp	.+8      	; 0x3e2 <strrev+0x18>
 3da:	7c 91       	ld	r23, X
 3dc:	6d 93       	st	X+, r22
 3de:	70 83       	st	Z, r23
 3e0:	62 91       	ld	r22, -Z
 3e2:	ae 17       	cp	r26, r30
 3e4:	bf 07       	cpc	r27, r31
 3e6:	c8 f3       	brcs	.-14     	; 0x3da <strrev+0x10>
 3e8:	08 95       	ret

000003ea <__udivmodhi4>:
 3ea:	aa 1b       	sub	r26, r26
 3ec:	bb 1b       	sub	r27, r27
 3ee:	51 e1       	ldi	r21, 0x11	; 17
 3f0:	07 c0       	rjmp	.+14     	; 0x400 <__udivmodhi4_ep>

000003f2 <__udivmodhi4_loop>:
 3f2:	aa 1f       	adc	r26, r26
 3f4:	bb 1f       	adc	r27, r27
 3f6:	a6 17       	cp	r26, r22
 3f8:	b7 07       	cpc	r27, r23
 3fa:	10 f0       	brcs	.+4      	; 0x400 <__udivmodhi4_ep>
 3fc:	a6 1b       	sub	r26, r22
 3fe:	b7 0b       	sbc	r27, r23

00000400 <__udivmodhi4_ep>:
 400:	88 1f       	adc	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	5a 95       	dec	r21
 406:	a9 f7       	brne	.-22     	; 0x3f2 <__udivmodhi4_loop>
 408:	80 95       	com	r24
 40a:	90 95       	com	r25
 40c:	bc 01       	movw	r22, r24
 40e:	cd 01       	movw	r24, r26
 410:	08 95       	ret

00000412 <_exit>:
 412:	f8 94       	cli

00000414 <__stop_program>:
 414:	ff cf       	rjmp	.-2      	; 0x414 <__stop_program>
