
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  00000226  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000076  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000400  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000170  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000385  00000000  00000000  0000082c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001b7  00000000  00000000  00000bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000162  00000000  00000000  00000dab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a8  00000000  00000000  00000f0d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a1 36       	cpi	r26, 0x61	; 97
  36:	b1 07       	cpc	r27, r17
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	7c d0       	rcall	.+248    	; 0x134 <main>
  3c:	b8 c0       	rjmp	.+368    	; 0x1ae <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <USI_I2C_Master_Transfer>:
	USI_MASTER_WRITE,
	USI_MASTER_READ
} USI_I2C_Master_State;

char USI_I2C_Master_Transfer(char USISR_temp){
	USISR = USISR_temp;								//Set USISR as requested by calling function
  40:	8e b9       	out	0x0e, r24	; 14
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  42:	21 e0       	ldi	r18, 0x01	; 1
	do{
		_delay_us(I2C_TLOW);
		USICR = 0b00101011;								//SCL Positive Edge
  44:	9b e2       	ldi	r25, 0x2B	; 43
  46:	82 2f       	mov	r24, r18
  48:	8a 95       	dec	r24
  4a:	f1 f7       	brne	.-4      	; 0x48 <USI_I2C_Master_Transfer+0x8>
  4c:	9d b9       	out	0x0d, r25	; 13
		while (!(PIN_USI&(1<<PIN_USI_SCL)));		//Wait for SCL to go high
  4e:	b2 9b       	sbis	0x16, 2	; 22
  50:	fe cf       	rjmp	.-4      	; 0x4e <USI_I2C_Master_Transfer+0xe>
  52:	82 2f       	mov	r24, r18
  54:	8a 95       	dec	r24
  56:	f1 f7       	brne	.-4      	; 0x54 <USI_I2C_Master_Transfer+0x14>
		_delay_us(I2C_THIGH);
		USICR = 0b00101011;								//SCL Negative Edge
  58:	9d b9       	out	0x0d, r25	; 13
	}while (!(USISR&(1<<USIOIF)));					//Do until transfer is complete
  5a:	76 9b       	sbis	0x0e, 6	; 14
  5c:	f4 cf       	rjmp	.-24     	; 0x46 <USI_I2C_Master_Transfer+0x6>
  5e:	81 e0       	ldi	r24, 0x01	; 1
  60:	8a 95       	dec	r24
  62:	f1 f7       	brne	.-4      	; 0x60 <USI_I2C_Master_Transfer+0x20>
	_delay_us(I2C_TLOW);
	return USIDR;
  64:	8f b1       	in	r24, 0x0f	; 15
}
  66:	08 95       	ret

00000068 <USI_I2C_Master_Start_Transmission>:

char USI_I2C_Master_Start_Transmission(char *msg, char msg_size){
  68:	ef 92       	push	r14
  6a:	ff 92       	push	r15
  6c:	0f 93       	push	r16
  6e:	1f 93       	push	r17
  70:	cf 93       	push	r28
  72:	df 93       	push	r29
  74:	ec 01       	movw	r28, r24
  76:	16 2f       	mov	r17, r22
	USI_I2C_Master_State = USI_MASTER_ADDRESS;
  78:	10 92 60 00 	sts	0x0060, r1

	//   Start Condition
	PORT_USI |=  (1 << PORT_USI_SCL); 						//Setting input makes line pull high
  7c:	c2 9a       	sbi	0x18, 2	; 24
	while (!(PIN_USI & (1<<PIN_USI_SCL)));		//Wait for SCL to go high
  7e:	b2 9b       	sbis	0x16, 2	; 22
  80:	fe cf       	rjmp	.-4      	; 0x7e <USI_I2C_Master_Start_Transmission+0x16>
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	98 2f       	mov	r25, r24
  86:	9a 95       	dec	r25
  88:	f1 f7       	brne	.-4      	; 0x86 <USI_I2C_Master_Start_Transmission+0x1e>
	#ifdef I2C_FAST_MODE
		_delay_us(I2C_THIGH);
	#else
		_delay_us(I2C_TLOW);
	#endif
	DDR_USI |=  (1 << PORT_USI_SDA);
  8a:	b8 9a       	sbi	0x17, 0	; 23
	DDR_USI |=  (1 << PORT_USI_SCL);
  8c:	ba 9a       	sbi	0x17, 2	; 23
	PORT_USI &= ~(1 << PORT_USI_SDA);
  8e:	c0 98       	cbi	0x18, 0	; 24
  90:	98 2f       	mov	r25, r24
  92:	9a 95       	dec	r25
  94:	f1 f7       	brne	.-4      	; 0x92 <USI_I2C_Master_Start_Transmission+0x2a>
	_delay_us(I2C_THIGH);;
	PORT_USI &= ~(1 << PORT_USI_SCL);
  96:	c2 98       	cbi	0x18, 2	; 24
  98:	8a 95       	dec	r24
  9a:	f1 f7       	brne	.-4      	; 0x98 <USI_I2C_Master_Start_Transmission+0x30>
	_delay_us(I2C_TLOW);
	PORT_USI |=  (1 << PORT_USI_SDA);
  9c:	c0 9a       	sbi	0x18, 0	; 24
		switch(USI_I2C_Master_State){
			case USI_MASTER_ADDRESS:
				if(!(*msg & 0x01)){
					USI_I2C_Master_State = USI_MASTER_WRITE;
				}else{
					USI_I2C_Master_State = USI_MASTER_READ;
  9e:	82 e0       	ldi	r24, 0x02	; 2
  a0:	e8 2e       	mov	r14, r24
	
	do{
		switch(USI_I2C_Master_State){
			case USI_MASTER_ADDRESS:
				if(!(*msg & 0x01)){
					USI_I2C_Master_State = USI_MASTER_WRITE;
  a2:	ff 24       	eor	r15, r15
  a4:	f3 94       	inc	r15
				DDR_USI &= ~(1 << PORT_USI_SDA);
				(*msg) = USI_I2C_Master_Transfer(0b11110000 | (0x00<<USICNT0));			
				msg++;
				DDR_USI |=  (1 << PORT_USI_SDA);				
				if(msg_size == 1){
					USIDR = 0xFF;			//Load NACK to end transmission
  a6:	0f ef       	ldi	r16, 0xFF	; 255
	PORT_USI &= ~(1 << PORT_USI_SCL);
	_delay_us(I2C_TLOW);
	PORT_USI |=  (1 << PORT_USI_SDA);
	
	do{
		switch(USI_I2C_Master_State){
  a8:	80 91 60 00 	lds	r24, 0x0060
  ac:	81 30       	cpi	r24, 0x01	; 1
  ae:	69 f0       	breq	.+26     	; 0xca <USI_I2C_Master_Start_Transmission+0x62>
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	18 f0       	brcs	.+6      	; 0xba <USI_I2C_Master_Start_Transmission+0x52>
  b4:	82 30       	cpi	r24, 0x02	; 2
  b6:	39 f5       	brne	.+78     	; 0x106 <USI_I2C_Master_Start_Transmission+0x9e>
  b8:	19 c0       	rjmp	.+50     	; 0xec <USI_I2C_Master_Start_Transmission+0x84>
			case USI_MASTER_ADDRESS:
				if(!(*msg & 0x01)){
  ba:	88 81       	ld	r24, Y
  bc:	80 fd       	sbrc	r24, 0
  be:	03 c0       	rjmp	.+6      	; 0xc6 <USI_I2C_Master_Start_Transmission+0x5e>
					USI_I2C_Master_State = USI_MASTER_WRITE;
  c0:	f0 92 60 00 	sts	0x0060, r15
  c4:	02 c0       	rjmp	.+4      	; 0xca <USI_I2C_Master_Start_Transmission+0x62>
				}else{
					USI_I2C_Master_State = USI_MASTER_READ;
  c6:	e0 92 60 00 	sts	0x0060, r14
				}//no break so goes to Write
				
			case USI_MASTER_WRITE:
				PORT_USI &= ~(1 << PORT_USI_SCL);
  ca:	c2 98       	cbi	0x18, 2	; 24
				USIDR = *(msg);				//Load data			
  cc:	88 81       	ld	r24, Y
  ce:	8f b9       	out	0x0f, r24	; 15
				msg++;						//Increment buffer pointer
				USI_I2C_Master_Transfer(0b11110000 | (0x00<<USICNT0));
  d0:	80 ef       	ldi	r24, 0xF0	; 240
  d2:	b6 df       	rcall	.-148    	; 0x40 <USI_I2C_Master_Transfer>
				DDR_USI &= ~(1 << PORT_USI_SDA);
  d4:	b8 98       	cbi	0x17, 0	; 23
				if(USI_I2C_Master_Transfer(0b11110000 | (0x0E<<USICNT0)) & 0x01){
  d6:	8e ef       	ldi	r24, 0xFE	; 254
  d8:	b3 df       	rcall	.-154    	; 0x40 <USI_I2C_Master_Transfer>
  da:	80 ff       	sbrs	r24, 0
  dc:	04 c0       	rjmp	.+8      	; 0xe6 <USI_I2C_Master_Start_Transmission+0x7e>
					PORT_USI |=  (1 << PORT_USI_SCL);
  de:	c2 9a       	sbi	0x18, 2	; 24
					PORT_USI |=  (1 << PORT_USI_SDA);
  e0:	c0 9a       	sbi	0x18, 0	; 24
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	20 c0       	rjmp	.+64     	; 0x126 <USI_I2C_Master_Start_Transmission+0xbe>
				}//no break so goes to Write
				
			case USI_MASTER_WRITE:
				PORT_USI &= ~(1 << PORT_USI_SCL);
				USIDR = *(msg);				//Load data			
				msg++;						//Increment buffer pointer
  e6:	21 96       	adiw	r28, 0x01	; 1
				if(USI_I2C_Master_Transfer(0b11110000 | (0x0E<<USICNT0)) & 0x01){
					PORT_USI |=  (1 << PORT_USI_SCL);
					PORT_USI |=  (1 << PORT_USI_SDA);
					return 0;
				}
				DDR_USI |=  (1 << PORT_USI_SDA);
  e8:	b8 9a       	sbi	0x17, 0	; 23
  ea:	0d c0       	rjmp	.+26     	; 0x106 <USI_I2C_Master_Start_Transmission+0x9e>
				break;

			case USI_MASTER_READ:
				DDR_USI &= ~(1 << PORT_USI_SDA);
  ec:	b8 98       	cbi	0x17, 0	; 23
				(*msg) = USI_I2C_Master_Transfer(0b11110000 | (0x00<<USICNT0));			
  ee:	80 ef       	ldi	r24, 0xF0	; 240
  f0:	a7 df       	rcall	.-178    	; 0x40 <USI_I2C_Master_Transfer>
  f2:	88 83       	st	Y, r24
				msg++;
				DDR_USI |=  (1 << PORT_USI_SDA);				
  f4:	b8 9a       	sbi	0x17, 0	; 23
				if(msg_size == 1){
  f6:	11 30       	cpi	r17, 0x01	; 1
  f8:	11 f4       	brne	.+4      	; 0xfe <USI_I2C_Master_Start_Transmission+0x96>
					USIDR = 0xFF;			//Load NACK to end transmission
  fa:	0f b9       	out	0x0f, r16	; 15
  fc:	01 c0       	rjmp	.+2      	; 0x100 <USI_I2C_Master_Start_Transmission+0x98>
				}else{
					USIDR = 0x00;			//Load ACK
  fe:	1f b8       	out	0x0f, r1	; 15
				break;

			case USI_MASTER_READ:
				DDR_USI &= ~(1 << PORT_USI_SDA);
				(*msg) = USI_I2C_Master_Transfer(0b11110000 | (0x00<<USICNT0));			
				msg++;
 100:	21 96       	adiw	r28, 0x01	; 1
				if(msg_size == 1){
					USIDR = 0xFF;			//Load NACK to end transmission
				}else{
					USIDR = 0x00;			//Load ACK
				}
				USI_I2C_Master_Transfer(0b11110000 | (0x0E<<USICNT0));
 102:	8e ef       	ldi	r24, 0xFE	; 254
 104:	9d df       	rcall	.-198    	; 0x40 <USI_I2C_Master_Transfer>
				break;
		}
	}while(--msg_size);
 106:	11 50       	subi	r17, 0x01	; 1
 108:	79 f6       	brne	.-98     	; 0xa8 <USI_I2C_Master_Start_Transmission+0x40>
	
	//Stop Condition
	PORT_USI &= ~(1 << PORT_USI_SDA);           				// Pull SDA low.
 10a:	c0 98       	cbi	0x18, 0	; 24
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	8a 95       	dec	r24
 110:	f1 f7       	brne	.-4      	; 0x10e <USI_I2C_Master_Start_Transmission+0xa6>
	_delay_us(I2C_TLOW);
	DDR_USI &= ~(1 << PORT_USI_SCL);            				// Release SCL.
 112:	ba 98       	cbi	0x17, 2	; 23
	while( !(PIN_USI & (1<<PIN_USI_SCL)) );  	// Wait for SCL to go high.  
 114:	b2 9b       	sbis	0x16, 2	; 22
 116:	fe cf       	rjmp	.-4      	; 0x114 <USI_I2C_Master_Start_Transmission+0xac>
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	8a 95       	dec	r24
 11c:	f1 f7       	brne	.-4      	; 0x11a <USI_I2C_Master_Start_Transmission+0xb2>
	_delay_us(I2C_THIGH);
	DDR_USI &= ~(1 << PORT_USI_SDA);            				// Release SDA.
 11e:	b8 98       	cbi	0x17, 0	; 23
	while( !(PIN_USI & (1<<PIN_USI_SDA)) );  	// Wait for SDA to go high. 
 120:	b0 9b       	sbis	0x16, 0	; 22
 122:	fe cf       	rjmp	.-4      	; 0x120 <USI_I2C_Master_Start_Transmission+0xb8>
 124:	81 e0       	ldi	r24, 0x01	; 1
	return 1;
}
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	1f 91       	pop	r17
 12c:	0f 91       	pop	r16
 12e:	ff 90       	pop	r15
 130:	ef 90       	pop	r14
 132:	08 95       	ret

00000134 <main>:

int main(void){
 134:	af 92       	push	r10
 136:	bf 92       	push	r11
 138:	cf 92       	push	r12
 13a:	df 92       	push	r13
 13c:	ef 92       	push	r14
 13e:	ff 92       	push	r15
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	df 93       	push	r29
 146:	cf 93       	push	r28
 148:	00 d0       	rcall	.+0      	; 0x14a <main+0x16>
 14a:	00 d0       	rcall	.+0      	; 0x14c <main+0x18>
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
	DDRB|=(1<<PINB1);
 150:	b9 9a       	sbi	0x17, 1	; 23
	char i2c_buffer[4];
	char i2c_buffer_len = 3;
	//write : 0 , read : 1
	i2c_buffer[0] = (AccAddr << 1) | WRITE ;
 152:	80 ed       	ldi	r24, 0xD0	; 208
 154:	89 83       	std	Y+1, r24	; 0x01
	i2c_buffer[1] = 0x6B;  //Register to write or to read
 156:	8b e6       	ldi	r24, 0x6B	; 107
 158:	8a 83       	std	Y+2, r24	; 0x02
	i2c_buffer[2] = 0x00;  //Value to write to register
 15a:	1b 82       	std	Y+3, r1	; 0x03

	USI_I2C_Master_Start_Transmission(i2c_buffer, i2c_buffer_len);
 15c:	8e 01       	movw	r16, r28
 15e:	0f 5f       	subi	r16, 0xFF	; 255
 160:	1f 4f       	sbci	r17, 0xFF	; 255
 162:	c8 01       	movw	r24, r16
 164:	63 e0       	ldi	r22, 0x03	; 3
 166:	80 df       	rcall	.-256    	; 0x68 <USI_I2C_Master_Start_Transmission>
	

	for(;;){
		
		i2c_buffer_len = 4;
		i2c_buffer[0] = (AccAddr << 1) | READ ;
 168:	31 ed       	ldi	r19, 0xD1	; 209
 16a:	a3 2e       	mov	r10, r19
		i2c_buffer[1] = 0x3F;  //Register to write or to read
 16c:	2f e3       	ldi	r18, 0x3F	; 63
 16e:	b2 2e       	mov	r11, r18
		if(USI_I2C_Master_Start_Transmission(i2c_buffer, i2c_buffer_len)){
 170:	68 01       	movw	r12, r16
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 172:	99 e1       	ldi	r25, 0x19	; 25
 174:	e9 2e       	mov	r14, r25
 176:	f1 2c       	mov	r15, r1
	

	for(;;){
		
		i2c_buffer_len = 4;
		i2c_buffer[0] = (AccAddr << 1) | READ ;
 178:	a9 82       	std	Y+1, r10	; 0x01
		i2c_buffer[1] = 0x3F;  //Register to write or to read
 17a:	ba 82       	std	Y+2, r11	; 0x02
		if(USI_I2C_Master_Start_Transmission(i2c_buffer, i2c_buffer_len)){
 17c:	c6 01       	movw	r24, r12
 17e:	64 e0       	ldi	r22, 0x04	; 4
 180:	73 df       	rcall	.-282    	; 0x68 <USI_I2C_Master_Start_Transmission>
 182:	88 23       	and	r24, r24
 184:	c9 f3       	breq	.-14     	; 0x178 <__stack+0x19>
			uint16_t acc_x = i2c_buffer[2]<<8 | i2c_buffer[3];
			if(acc_x>8000){
 186:	1b 81       	ldd	r17, Y+3	; 0x03
 188:	00 e0       	ldi	r16, 0x00	; 0
 18a:	8c 81       	ldd	r24, Y+4	; 0x04
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	80 2b       	or	r24, r16
 190:	91 2b       	or	r25, r17
 192:	81 54       	subi	r24, 0x41	; 65
 194:	9f 41       	sbci	r25, 0x1F	; 31
 196:	10 f0       	brcs	.+4      	; 0x19c <__stack+0x3d>
			PORTB|=(1<<PINB1);
 198:	c1 9a       	sbi	0x18, 1	; 24
 19a:	01 c0       	rjmp	.+2      	; 0x19e <__stack+0x3f>
			}else{
			PORTB&=~(1<<PINB1);
 19c:	c1 98       	cbi	0x18, 1	; 24
 19e:	88 e8       	ldi	r24, 0x88	; 136
 1a0:	93 e1       	ldi	r25, 0x13	; 19
 1a2:	f7 01       	movw	r30, r14
 1a4:	31 97       	sbiw	r30, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <__stack+0x45>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1a8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1aa:	31 f3       	breq	.-52     	; 0x178 <__stack+0x19>
 1ac:	fa cf       	rjmp	.-12     	; 0x1a2 <__stack+0x43>

000001ae <_exit>:
 1ae:	f8 94       	cli

000001b0 <__stop_program>:
 1b0:	ff cf       	rjmp	.-2      	; 0x1b0 <__stop_program>
