
/tmp/arduino_build_376412/elevator_altimeter.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__ctors_end>
       4:	0c 94 0c 07 	jmp	0xe18	; 0xe18 <__vector_1>
       8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
       c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      10:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <__vector_4>
      14:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      18:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      1c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      20:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      24:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      28:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      2c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      30:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <__vector_12>
      34:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      38:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      3c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      40:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__vector_16>
      44:	0c 94 d6 05 	jmp	0xbac	; 0xbac <__vector_17>
      48:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      4c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      50:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      54:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      58:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      5c:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__vector_23>
      60:	0c 94 78 06 	jmp	0xcf0	; 0xcf0 <__vector_24>
      64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      68:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      6c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>

00000070 <__trampolines_end>:
__trampolines_start():
      70:	00 2f       	mov	r16, r16
      72:	2b 27       	eor	r18, r27

00000074 <port_to_mode_PGM>:
      74:	00 30 2c 28                                         .0,(

00000078 <port_to_pullup_PGM>:
      78:	00 32 2e 2a                                         .2.*

0000007c <port_to_output_PGM>:
      7c:	00 31 2d 29                                         .1-)

00000080 <digital_pin_to_port_PGM>:
      80:	02 01 01 01 01 01 01 01 01 03 03 03 03 03 02 02     ................
      90:	02 03                                               ..

00000092 <digital_pin_to_bit_mask_PGM>:
      92:	01 80 40 20 10 08 04 02 01 20 10 04 02 01 08 04     ..@ ..... ......
      a2:	02 08                                               ..

000000a4 <__ctors_start>:
__ctors_start():
      a4:	65 07       	cpc	r22, r21

000000a6 <__ctors_end>:
__dtors_end():
      a6:	11 24       	eor	r1, r1
      a8:	1f be       	out	0x3f, r1	; 63
      aa:	cf ef       	ldi	r28, 0xFF	; 255
      ac:	d4 e0       	ldi	r29, 0x04	; 4
      ae:	de bf       	out	0x3e, r29	; 62
      b0:	cd bf       	out	0x3d, r28	; 61

000000b2 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      b2:	22 e0       	ldi	r18, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      b4:	a2 e8       	ldi	r26, 0x82	; 130
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      b6:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      bc:	a4 33       	cpi	r26, 0x34	; 52
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      be:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>

000000c2 <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      c2:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      c4:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      c6:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      c8:	e0 e4       	ldi	r30, 0x40	; 64
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      ca:	fb e1       	ldi	r31, 0x1B	; 27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      cc:	02 c0       	rjmp	.+4      	; 0xd2 <__do_copy_data+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      ce:	05 90       	lpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      d0:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      d2:	a2 38       	cpi	r26, 0x82	; 130
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      d4:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      d6:	d9 f7       	brne	.-10     	; 0xce <__do_copy_data+0xc>

000000d8 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
      d8:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
      da:	c3 e5       	ldi	r28, 0x53	; 83
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
      dc:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
      de:	04 c0       	rjmp	.+8      	; 0xe8 <__do_global_ctors+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
      e0:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
      e2:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
      e4:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
      e8:	c2 35       	cpi	r28, 0x52	; 82
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
      ea:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
      ec:	c9 f7       	brne	.-14     	; 0xe0 <__do_global_ctors+0x8>
      ee:	0e 94 ab 07 	call	0xf56	; 0xf56 <main>
      f2:	0c 94 9e 0d 	jmp	0x1b3c	; 0x1b3c <_exit>

000000f6 <__bad_interrupt>:
__vector_22():
      f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fa <TwoWire::write(int) [clone .constprop.65]>:
write():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:507

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data) {
  if (transmitting) { // in master transmitter mode
      fa:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <TwoWire::transmitting>
      fe:	99 23       	and	r25, r25
     100:	a1 f0       	breq	.+40     	; 0x12a <TwoWire::write(int) [clone .constprop.65]+0x30>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:509
    // don't bother if buffer is full
    if (BufferLength >= TWI_BUFFER_SIZE) {
     102:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <TwoWire::BufferLength>
     106:	90 32       	cpi	r25, 0x20	; 32
     108:	40 f5       	brcc	.+80     	; 0x15a <TwoWire::write(int) [clone .constprop.65]+0x60>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:513
      return 0;
    }
    // put byte in tx buffer
    Buffer[BufferIndex] = data;
     10a:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <TwoWire::BufferIndex>
     10e:	e9 2f       	mov	r30, r25
     110:	f0 e0       	ldi	r31, 0x00	; 0
     112:	ee 57       	subi	r30, 0x7E	; 126
     114:	fe 4f       	sbci	r31, 0xFE	; 254
     116:	80 83       	st	Z, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:514
    ++BufferIndex;
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	89 0f       	add	r24, r25
     11c:	80 93 b8 01 	sts	0x01B8, r24	; 0x8001b8 <TwoWire::BufferIndex>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:516
    // update amount in buffer
    BufferLength = BufferIndex;
     120:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <TwoWire::BufferLength>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:525
      return 0;
    }
    // reply to master
    USI_TWI_Transmit_Byte(data);
  }
  return 1;
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	08 95       	ret
USI_TWI_Space_In_Transmission_Buffer():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:144

// Check if there is space in the transmission buffer.
unsigned char USI_TWI_Space_In_Transmission_Buffer(void)
{
  unsigned char tmpTxHead;
  tmpTxHead = (TWI_TxHead + 1) & TWI_TX_BUFFER_MASK; // Calculate next buffer index.
     12a:	20 91 b7 01 	lds	r18, 0x01B7	; 0x8001b7 <TWI_TxHead>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:145
  return (TWI_TxTail - tmpTxHead) & TWI_TX_BUFFER_MASK; // Return 0 (FALSE) if the transmission buffer is full.
     12e:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <TWI_TxTail>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:144

// Check if there is space in the transmission buffer.
unsigned char USI_TWI_Space_In_Transmission_Buffer(void)
{
  unsigned char tmpTxHead;
  tmpTxHead = (TWI_TxHead + 1) & TWI_TX_BUFFER_MASK; // Calculate next buffer index.
     132:	2f 5f       	subi	r18, 0xFF	; 255
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:145
  return (TWI_TxTail - tmpTxHead) & TWI_TX_BUFFER_MASK; // Return 0 (FALSE) if the transmission buffer is full.
     134:	92 1b       	sub	r25, r18
     136:	9f 70       	andi	r25, 0x0F	; 15
write():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:519
    ++BufferIndex;
    // update amount in buffer
    BufferLength = BufferIndex;
  } else { // in slave send mode
    // don't bother if buffer is full
    if (!USI_TWI_Space_In_Transmission_Buffer()) {
     138:	81 f0       	breq	.+32     	; 0x15a <TwoWire::write(int) [clone .constprop.65]+0x60>
USI_TWI_Transmit_Byte():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:100
// Puts data in the transmission buffer, Waits if buffer is full.
void USI_TWI_Transmit_Byte(unsigned char data)
{
  unsigned char tmphead;

  tmphead = (TWI_TxHead + 1) & TWI_TX_BUFFER_MASK; // Calculate buffer index.
     13a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <TWI_TxHead>
     13e:	9f 5f       	subi	r25, 0xFF	; 255
     140:	9f 70       	andi	r25, 0x0F	; 15
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:101
  while (tmphead == TWI_TxTail)
     142:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <TWI_TxTail>
     146:	92 17       	cp	r25, r18
     148:	e1 f3       	breq	.-8      	; 0x142 <TwoWire::write(int) [clone .constprop.65]+0x48>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:103
    ;                         // Wait for free space in buffer.
  TWI_TxBuf[tmphead] = data;    // Store data in buffer.
     14a:	e9 2f       	mov	r30, r25
     14c:	f0 e0       	ldi	r31, 0x00	; 0
     14e:	ee 56       	subi	r30, 0x6E	; 110
     150:	fe 4f       	sbci	r31, 0xFE	; 254
     152:	80 83       	st	Z, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:104
  TWI_TxHead         = tmphead; // Store new index.
     154:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <TWI_TxHead>
     158:	e5 cf       	rjmp	.-54     	; 0x124 <TwoWire::write(int) [clone .constprop.65]+0x2a>
write():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:510
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data) {
  if (transmitting) { // in master transmitter mode
    // don't bother if buffer is full
    if (BufferLength >= TWI_BUFFER_SIZE) {
      return 0;
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	80 e0       	ldi	r24, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.h:157
    uint8_t isActive(void);

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     15e:	08 95       	ret

00000160 <TwoWire::beginTransmission(unsigned char) [clone .constprop.50]>:
beginTransmission():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:462
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address) {
  // indicate that we are transmitting
  transmitting = 1;
     160:	91 e0       	ldi	r25, 0x01	; 1
     162:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <TwoWire::transmitting>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:464
  // set address of targeted slave and write mode
  Buffer[0] = (address << TWI_ADR_BITS) | (0 << TWI_READ_BIT);
     166:	88 0f       	add	r24, r24
     168:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <__data_end>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:466
  // reset tx buffer iterator vars
  BufferIndex = 1; // reserved by slave address
     16c:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <TwoWire::BufferIndex>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:467
  BufferLength = BufferIndex;
     170:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <TwoWire::BufferLength>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:468
}
     174:	08 95       	ret

00000176 <USI_impl::clockoutUSI2(unsigned char, unsigned char)>:
clockoutUSI2():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:319
    // Unlike other clockout methods, this one cannot rely on the
    // "external" clock source (USICS1) because it is too slow and
    // glitches. Instead, it uses software strobe explicitly.
    uint8_t strobe1 = _BV(USIWM0) | _BV(USITC);
    uint8_t strobe2 = _BV(USIWM0) | _BV(USITC) | _BV(USICLK);
    uint8_t usicr = USICR;
     176:	9a b5       	in	r25, 0x2a	; 42
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:321
    bool mode1 = usicr & _BV(USICS0);
    USISR = _BV(USIOIF);  //clear counter and counter overflow interrupt flag
     178:	20 e4       	ldi	r18, 0x40	; 64
     17a:	2b bd       	out	0x2b, r18	; 43
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:322
    USIDR = data;
     17c:	8c bd       	out	0x2c, r24	; 44
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:343
                     "out %[usicr], %[strobe2] \n\t"
                     "out %[usicr], %[strobe1] \n\t"
                     "out %[usicr], %[strobe2] \n\t"
                     :: [usicr] "I" (_SFR_IO_ADDR(USICR)),
                        [strobe1] "r" (strobe1),
                        [strobe2] "r" (strobe2));
     17e:	81 e1       	ldi	r24, 0x11	; 17
     180:	23 e1       	ldi	r18, 0x13	; 19
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:324
    uint8_t usicr = USICR;
    bool mode1 = usicr & _BV(USICS0);
    USISR = _BV(USIOIF);  //clear counter and counter overflow interrupt flag
    USIDR = data;
    // Use asm to prevent instruction reordering.
    if (!mode1) {
     182:	92 fd       	sbrc	r25, 2
     184:	13 c0       	rjmp	.+38     	; 0x1ac <USI_impl::clockoutUSI2(unsigned char, unsigned char)+0x36>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:343
                     "out %[usicr], %[strobe2] \n\t"
                     "out %[usicr], %[strobe1] \n\t"
                     "out %[usicr], %[strobe2] \n\t"
                     :: [usicr] "I" (_SFR_IO_ADDR(USICR)),
                        [strobe1] "r" (strobe1),
                        [strobe2] "r" (strobe2));
     186:	8a bd       	out	0x2a, r24	; 42
     188:	2a bd       	out	0x2a, r18	; 42
     18a:	8a bd       	out	0x2a, r24	; 42
     18c:	2a bd       	out	0x2a, r18	; 42
     18e:	8a bd       	out	0x2a, r24	; 42
     190:	2a bd       	out	0x2a, r18	; 42
     192:	8a bd       	out	0x2a, r24	; 42
     194:	2a bd       	out	0x2a, r18	; 42
     196:	8a bd       	out	0x2a, r24	; 42
     198:	2a bd       	out	0x2a, r18	; 42
     19a:	8a bd       	out	0x2a, r24	; 42
     19c:	2a bd       	out	0x2a, r18	; 42
     19e:	8a bd       	out	0x2a, r24	; 42
     1a0:	2a bd       	out	0x2a, r18	; 42
     1a2:	8a bd       	out	0x2a, r24	; 42
     1a4:	2a bd       	out	0x2a, r18	; 42
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:365
                     "out %[usicr], %[strobe2] \n\t"
                     :: [usicr] "I" (_SFR_IO_ADDR(USICR)),
                        [strobe1] "r" (strobe1),
                        [strobe2] "r" (strobe2));
    }
    uint8_t retval = USIDR;
     1a6:	8c b5       	in	r24, 0x2c	; 44
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:366
    USICR = usicr;
     1a8:	9a bd       	out	0x2a, r25	; 42
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:368
    return retval;
}
     1aa:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:363
                     "out %[usicr], %[strobe2] \n\t"
                     "out %[usicr], %[strobe1] \n\t"
                     "out %[usicr], %[strobe2] \n\t"
                     :: [usicr] "I" (_SFR_IO_ADDR(USICR)),
                        [strobe1] "r" (strobe1),
                        [strobe2] "r" (strobe2));
     1ac:	8a bd       	out	0x2a, r24	; 42
     1ae:	8a bd       	out	0x2a, r24	; 42
     1b0:	8a bd       	out	0x2a, r24	; 42
     1b2:	2a bd       	out	0x2a, r18	; 42
     1b4:	8a bd       	out	0x2a, r24	; 42
     1b6:	2a bd       	out	0x2a, r18	; 42
     1b8:	8a bd       	out	0x2a, r24	; 42
     1ba:	2a bd       	out	0x2a, r18	; 42
     1bc:	8a bd       	out	0x2a, r24	; 42
     1be:	2a bd       	out	0x2a, r18	; 42
     1c0:	8a bd       	out	0x2a, r24	; 42
     1c2:	2a bd       	out	0x2a, r18	; 42
     1c4:	8a bd       	out	0x2a, r24	; 42
     1c6:	2a bd       	out	0x2a, r18	; 42
     1c8:	8a bd       	out	0x2a, r24	; 42
     1ca:	2a bd       	out	0x2a, r18	; 42
     1cc:	ec cf       	rjmp	.-40     	; 0x1a6 <USI_impl::clockoutUSI2(unsigned char, unsigned char)+0x30>

000001ce <USI_impl::clockoutUSI(unsigned char, unsigned char)>:
clockoutUSI():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:396
}

__attribute__((optimize ("Os")))
uint8_t USI_impl::clockoutUSI(uint8_t data, uint8_t delay)
{
    uint8_t tmp = USICR | _BV(USITC);
     1ce:	9a b5       	in	r25, 0x2a	; 42
     1d0:	91 60       	ori	r25, 0x01	; 1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:397
    USISR = _BV(USIOIF);
     1d2:	20 e4       	ldi	r18, 0x40	; 64
     1d4:	2b bd       	out	0x2b, r18	; 43
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:398
    USIDR = data;
     1d6:	8c bd       	out	0x2c, r24	; 44
     1d8:	80 e1       	ldi	r24, 0x10	; 16
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:400
    for (byte i = 0; i < 16; ++i) {
        USICR = tmp; // compiles to out, one cycle
     1da:	9a bd       	out	0x2a, r25	; 42
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:88
	__asm__ volatile (
		"1: dec %0" "\n\t"
		"brne 1b"
		: "=r" (__count)
		: "0" (__count)
	);
     1dc:	26 2f       	mov	r18, r22
     1de:	2a 95       	dec	r18
     1e0:	f1 f7       	brne	.-4      	; 0x1de <USI_impl::clockoutUSI(unsigned char, unsigned char)+0x10>
     1e2:	81 50       	subi	r24, 0x01	; 1
clockoutUSI():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:399
uint8_t USI_impl::clockoutUSI(uint8_t data, uint8_t delay)
{
    uint8_t tmp = USICR | _BV(USITC);
    USISR = _BV(USIOIF);
    USIDR = data;
    for (byte i = 0; i < 16; ++i) {
     1e4:	d1 f7       	brne	.-12     	; 0x1da <USI_impl::clockoutUSI(unsigned char, unsigned char)+0xc>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:403
        USICR = tmp; // compiles to out, one cycle
        _delay_loop_1(delay); // delay calculated by SPISettings.
    }
    return USIDR;
     1e6:	8c b5       	in	r24, 0x2c	; 44
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:404
}
     1e8:	08 95       	ret

000001ea <Print::write(unsigned char const*, unsigned int)>:
write():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:34

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     1ea:	cf 92       	push	r12
     1ec:	df 92       	push	r13
     1ee:	ef 92       	push	r14
     1f0:	ff 92       	push	r15
     1f2:	0f 93       	push	r16
     1f4:	1f 93       	push	r17
     1f6:	cf 93       	push	r28
     1f8:	df 93       	push	r29
     1fa:	6c 01       	movw	r12, r24
     1fc:	eb 01       	movw	r28, r22
     1fe:	7b 01       	movw	r14, r22
     200:	e4 0e       	add	r14, r20
     202:	f5 1e       	adc	r15, r21
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:35
  size_t n = 0;
     204:	10 e0       	ldi	r17, 0x00	; 0
     206:	00 e0       	ldi	r16, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:36
  while (size--) {
     208:	ce 15       	cp	r28, r14
     20a:	df 05       	cpc	r29, r15
     20c:	61 f0       	breq	.+24     	; 0x226 <Print::write(unsigned char const*, unsigned int)+0x3c>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:37
    n += write(*buffer++);
     20e:	69 91       	ld	r22, Y+
     210:	d6 01       	movw	r26, r12
     212:	ed 91       	ld	r30, X+
     214:	fc 91       	ld	r31, X
     216:	01 90       	ld	r0, Z+
     218:	f0 81       	ld	r31, Z
     21a:	e0 2d       	mov	r30, r0
     21c:	c6 01       	movw	r24, r12
     21e:	09 95       	icall
     220:	08 0f       	add	r16, r24
     222:	19 1f       	adc	r17, r25
     224:	f1 cf       	rjmp	.-30     	; 0x208 <Print::write(unsigned char const*, unsigned int)+0x1e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:40
  }
  return n;
}
     226:	c8 01       	movw	r24, r16
     228:	df 91       	pop	r29
     22a:	cf 91       	pop	r28
     22c:	1f 91       	pop	r17
     22e:	0f 91       	pop	r16
     230:	ff 90       	pop	r15
     232:	ef 90       	pop	r14
     234:	df 90       	pop	r13
     236:	cf 90       	pop	r12
     238:	08 95       	ret

0000023a <HardwareSerial::availableForWrite()>:
availableForWrite():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:198
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     23a:	fc 01       	movw	r30, r24
     23c:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:199
    tail = _tx_buffer_tail;
     23e:	44 8d       	ldd	r20, Z+28	; 0x1c
     240:	25 2f       	mov	r18, r21
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	84 2f       	mov	r24, r20
     246:	90 e0       	ldi	r25, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:201
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     248:	82 1b       	sub	r24, r18
     24a:	93 0b       	sbc	r25, r19
     24c:	54 17       	cp	r21, r20
     24e:	10 f0       	brcs	.+4      	; 0x254 <HardwareSerial::availableForWrite()+0x1a>
     250:	4f 96       	adiw	r24, 0x1f	; 31
     252:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:202
  return tail - head - 1;
     254:	01 97       	sbiw	r24, 0x01	; 1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:203
}
     256:	08 95       	ret

00000258 <HardwareSerial::read()>:
read():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:181
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     258:	fc 01       	movw	r30, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:183
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     25a:	91 8d       	ldd	r25, Z+25	; 0x19
     25c:	82 8d       	ldd	r24, Z+26	; 0x1a
     25e:	98 17       	cp	r25, r24
     260:	61 f0       	breq	.+24     	; 0x27a <HardwareSerial::read()+0x22>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:186
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     262:	a2 8d       	ldd	r26, Z+26	; 0x1a
     264:	ae 0f       	add	r26, r30
     266:	bf 2f       	mov	r27, r31
     268:	b1 1d       	adc	r27, r1
     26a:	5d 96       	adiw	r26, 0x1d	; 29
     26c:	8c 91       	ld	r24, X
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:187
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     26e:	92 8d       	ldd	r25, Z+26	; 0x1a
     270:	9f 5f       	subi	r25, 0xFF	; 255
     272:	9f 71       	andi	r25, 0x1F	; 31
     274:	92 8f       	std	Z+26, r25	; 0x1a
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:188
    return c;
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:184

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     27a:	8f ef       	ldi	r24, 0xFF	; 255
     27c:	9f ef       	ldi	r25, 0xFF	; 255
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:190
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     27e:	08 95       	ret

00000280 <HardwareSerial::peek()>:
peek():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:172
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     280:	fc 01       	movw	r30, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:173
  if (_rx_buffer_head == _rx_buffer_tail) {
     282:	91 8d       	ldd	r25, Z+25	; 0x19
     284:	82 8d       	ldd	r24, Z+26	; 0x1a
     286:	98 17       	cp	r25, r24
     288:	31 f0       	breq	.+12     	; 0x296 <HardwareSerial::peek()+0x16>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:176
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     28a:	82 8d       	ldd	r24, Z+26	; 0x1a
     28c:	e8 0f       	add	r30, r24
     28e:	f1 1d       	adc	r31, r1
     290:	85 8d       	ldd	r24, Z+29	; 0x1d
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:174
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     296:	8f ef       	ldi	r24, 0xFF	; 255
     298:	9f ef       	ldi	r25, 0xFF	; 255
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:178
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     29a:	08 95       	ret

0000029c <HardwareSerial::available()>:
available():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:167
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     29c:	fc 01       	movw	r30, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:168
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     29e:	91 8d       	ldd	r25, Z+25	; 0x19
     2a0:	22 8d       	ldd	r18, Z+26	; 0x1a
     2a2:	89 2f       	mov	r24, r25
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	80 96       	adiw	r24, 0x20	; 32
     2a8:	82 1b       	sub	r24, r18
     2aa:	91 09       	sbc	r25, r1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:169
}
     2ac:	8f 71       	andi	r24, 0x1F	; 31
     2ae:	99 27       	eor	r25, r25
     2b0:	08 95       	ret

000002b2 <HardwareSerial::_tx_udr_empty_irq()>:
_tx_udr_empty_irq():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     2b2:	fc 01       	movw	r30, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     2b4:	a4 8d       	ldd	r26, Z+28	; 0x1c
     2b6:	a8 0f       	add	r26, r24
     2b8:	b9 2f       	mov	r27, r25
     2ba:	b1 1d       	adc	r27, r1
     2bc:	dd 96       	adiw	r26, 0x3d	; 61
     2be:	2c 91       	ld	r18, X
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     2c0:	84 8d       	ldd	r24, Z+28	; 0x1c
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	01 96       	adiw	r24, 0x01	; 1
     2c6:	8f 71       	andi	r24, 0x1F	; 31
     2c8:	99 27       	eor	r25, r25
     2ca:	84 8f       	std	Z+28, r24	; 0x1c
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:96

  *_udr = c;
     2cc:	a6 89       	ldd	r26, Z+22	; 0x16
     2ce:	b7 89       	ldd	r27, Z+23	; 0x17
     2d0:	2c 93       	st	X, r18
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     2d2:	a0 89       	ldd	r26, Z+16	; 0x10
     2d4:	b1 89       	ldd	r27, Z+17	; 0x11
     2d6:	8c 91       	ld	r24, X
     2d8:	83 70       	andi	r24, 0x03	; 3
     2da:	80 64       	ori	r24, 0x40	; 64
     2dc:	8c 93       	st	X, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:109
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     2de:	93 8d       	ldd	r25, Z+27	; 0x1b
     2e0:	84 8d       	ldd	r24, Z+28	; 0x1c
     2e2:	98 13       	cpse	r25, r24
     2e4:	06 c0       	rjmp	.+12     	; 0x2f2 <HardwareSerial::_tx_udr_empty_irq()+0x40>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     2e6:	02 88       	ldd	r0, Z+18	; 0x12
     2e8:	f3 89       	ldd	r31, Z+19	; 0x13
     2ea:	e0 2d       	mov	r30, r0
     2ec:	80 81       	ld	r24, Z
     2ee:	8f 7d       	andi	r24, 0xDF	; 223
     2f0:	80 83       	st	Z, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:113
  }
}
     2f2:	08 95       	ret

000002f4 <HardwareSerial::write(unsigned char)>:
write():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:226
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished transmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     2f4:	ef 92       	push	r14
     2f6:	ff 92       	push	r15
     2f8:	0f 93       	push	r16
     2fa:	1f 93       	push	r17
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	ec 01       	movw	r28, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:227
  _written = true;
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	88 8f       	std	Y+24, r24	; 0x18
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:232
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     306:	9b 8d       	ldd	r25, Y+27	; 0x1b
     308:	8c 8d       	ldd	r24, Y+28	; 0x1c
     30a:	98 13       	cpse	r25, r24
     30c:	1a c0       	rjmp	.+52     	; 0x342 <HardwareSerial::write(unsigned char)+0x4e>
     30e:	e8 89       	ldd	r30, Y+16	; 0x10
     310:	f9 89       	ldd	r31, Y+17	; 0x11
     312:	80 81       	ld	r24, Z
     314:	85 ff       	sbrs	r24, 5
     316:	15 c0       	rjmp	.+42     	; 0x342 <HardwareSerial::write(unsigned char)+0x4e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:241
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     318:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     31a:	f8 94       	cli
write():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:242
      *_udr = c;
     31c:	ee 89       	ldd	r30, Y+22	; 0x16
     31e:	ff 89       	ldd	r31, Y+23	; 0x17
     320:	60 83       	st	Z, r22
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:244
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     322:	e8 89       	ldd	r30, Y+16	; 0x10
     324:	f9 89       	ldd	r31, Y+17	; 0x11
     326:	80 81       	ld	r24, Z
     328:	83 70       	andi	r24, 0x03	; 3
     32a:	80 64       	ori	r24, 0x40	; 64
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:275
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
     32c:	80 83       	st	Z, r24
__iRestore():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     32e:	9f bf       	out	0x3f, r25	; 63
write():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:279
  }

  return 1;
}
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	df 91       	pop	r29
     336:	cf 91       	pop	r28
     338:	1f 91       	pop	r17
     33a:	0f 91       	pop	r16
     33c:	ff 90       	pop	r15
     33e:	ef 90       	pop	r14
     340:	08 95       	ret
     342:	f6 2e       	mov	r15, r22
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:251
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     344:	0b 8d       	ldd	r16, Y+27	; 0x1b
     346:	10 e0       	ldi	r17, 0x00	; 0
     348:	0f 5f       	subi	r16, 0xFF	; 255
     34a:	1f 4f       	sbci	r17, 0xFF	; 255
     34c:	0f 71       	andi	r16, 0x1F	; 31
     34e:	11 27       	eor	r17, r17
     350:	e0 2e       	mov	r14, r16
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:255

  // If the output buffer is full, there's nothing for it other than to
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     352:	8c 8d       	ldd	r24, Y+28	; 0x1c
     354:	8e 11       	cpse	r24, r14
     356:	0c c0       	rjmp	.+24     	; 0x370 <HardwareSerial::write(unsigned char)+0x7c>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:256
    if (bit_is_clear(SREG, SREG_I)) {
     358:	0f b6       	in	r0, 0x3f	; 63
     35a:	07 fc       	sbrc	r0, 7
     35c:	fa cf       	rjmp	.-12     	; 0x352 <HardwareSerial::write(unsigned char)+0x5e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:261
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     35e:	e8 89       	ldd	r30, Y+16	; 0x10
     360:	f9 89       	ldd	r31, Y+17	; 0x11
     362:	80 81       	ld	r24, Z
     364:	85 ff       	sbrs	r24, 5
     366:	f5 cf       	rjmp	.-22     	; 0x352 <HardwareSerial::write(unsigned char)+0x5e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:262
  _tx_udr_empty_irq();
     368:	ce 01       	movw	r24, r28
     36a:	0e 94 59 01 	call	0x2b2	; 0x2b2 <HardwareSerial::_tx_udr_empty_irq()>
     36e:	f1 cf       	rjmp	.-30     	; 0x352 <HardwareSerial::write(unsigned char)+0x5e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:268
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     370:	eb 8d       	ldd	r30, Y+27	; 0x1b
     372:	ec 0f       	add	r30, r28
     374:	fd 2f       	mov	r31, r29
     376:	f1 1d       	adc	r31, r1
     378:	f5 ae       	std	Z+61, r15	; 0x3d
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:273

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     37a:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     37c:	f8 94       	cli
write():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:274
    _tx_buffer_head = i;
     37e:	0b 8f       	std	Y+27, r16	; 0x1b
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:275
    sbi(*_ucsrb, UDRIE0);
     380:	ea 89       	ldd	r30, Y+18	; 0x12
     382:	fb 89       	ldd	r31, Y+19	; 0x13
     384:	80 81       	ld	r24, Z
     386:	80 62       	ori	r24, 0x20	; 32
     388:	d1 cf       	rjmp	.-94     	; 0x32c <HardwareSerial::write(unsigned char)+0x38>

0000038a <Print::print(char) [clone .constprop.63]>:
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:66
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     38a:	68 2f       	mov	r22, r24
     38c:	8b eb       	ldi	r24, 0xBB	; 187
     38e:	91 e0       	ldi	r25, 0x01	; 1
     390:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <HardwareSerial::write(unsigned char)>

00000394 <Print::println() [clone .constprop.62]>:
println():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:123
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:125
{
  size_t n = print('\r');
     398:	8d e0       	ldi	r24, 0x0D	; 13
     39a:	0e 94 c5 01 	call	0x38a	; 0x38a <Print::print(char) [clone .constprop.63]>
     39e:	ec 01       	movw	r28, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:126
  n += print('\n');
     3a0:	8a e0       	ldi	r24, 0x0A	; 10
     3a2:	0e 94 c5 01 	call	0x38a	; 0x38a <Print::print(char) [clone .constprop.63]>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:128
  return n;
}
     3a6:	8c 0f       	add	r24, r28
     3a8:	9d 1f       	adc	r25, r29
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	08 95       	ret

000003b0 <HardwareSerial::flush()>:
flush():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:206
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	ec 01       	movw	r28, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:210
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     3b6:	88 8d       	ldd	r24, Y+24	; 0x18
     3b8:	88 23       	and	r24, r24
     3ba:	b9 f0       	breq	.+46     	; 0x3ea <HardwareSerial::flush()+0x3a>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:213
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     3bc:	aa 89       	ldd	r26, Y+18	; 0x12
     3be:	bb 89       	ldd	r27, Y+19	; 0x13
     3c0:	e8 89       	ldd	r30, Y+16	; 0x10
     3c2:	f9 89       	ldd	r31, Y+17	; 0x11
     3c4:	8c 91       	ld	r24, X
     3c6:	85 fd       	sbrc	r24, 5
     3c8:	03 c0       	rjmp	.+6      	; 0x3d0 <HardwareSerial::flush()+0x20>
     3ca:	80 81       	ld	r24, Z
     3cc:	86 fd       	sbrc	r24, 6
     3ce:	0d c0       	rjmp	.+26     	; 0x3ea <HardwareSerial::flush()+0x3a>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:214
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     3d0:	0f b6       	in	r0, 0x3f	; 63
     3d2:	07 fc       	sbrc	r0, 7
     3d4:	f7 cf       	rjmp	.-18     	; 0x3c4 <HardwareSerial::flush()+0x14>
     3d6:	8c 91       	ld	r24, X
     3d8:	85 ff       	sbrs	r24, 5
     3da:	f2 cf       	rjmp	.-28     	; 0x3c0 <HardwareSerial::flush()+0x10>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:218
  // Interrupts are globally disabled, but the DR empty
  // interrupt should be enabled, so poll the DR empty flag to
  // prevent deadlock
  if (bit_is_set(*_ucsra, UDRE0))
     3dc:	80 81       	ld	r24, Z
     3de:	85 ff       	sbrs	r24, 5
     3e0:	ed cf       	rjmp	.-38     	; 0x3bc <HardwareSerial::flush()+0xc>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:219
    _tx_udr_empty_irq();
     3e2:	ce 01       	movw	r24, r28
     3e4:	0e 94 59 01 	call	0x2b2	; 0x2b2 <HardwareSerial::_tx_udr_empty_irq()>
     3e8:	e9 cf       	rjmp	.-46     	; 0x3bc <HardwareSerial::flush()+0xc>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:223
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished transmission (TXC is set).
}
     3ea:	df 91       	pop	r29
     3ec:	cf 91       	pop	r28
     3ee:	08 95       	ret

000003f0 <digitalWrite>:
digitalWrite():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:181
}

#if defined(__AVR_ATtinyX41__ ) || defined(__AVR_ATtiny1634__) || defined(__AVR_ATtiny828__)

void digitalWrite(uint8_t pin, uint8_t val)
{
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:183
  #ifndef __AVR_ATtiny828__
  if (pin&64) {pin=analogInputToDigitalPin((pin&63));}
     3f4:	86 ff       	sbrs	r24, 6
     3f6:	07 c0       	rjmp	.+14     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3f8:	98 2f       	mov	r25, r24
     3fa:	9f 73       	andi	r25, 0x3F	; 63
     3fc:	85 e0       	ldi	r24, 0x05	; 5
     3fe:	96 30       	cpi	r25, 0x06	; 6
     400:	08 f0       	brcs	.+2      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     402:	86 e1       	ldi	r24, 0x16	; 22
     404:	89 1b       	sub	r24, r25
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:185
  #endif
  uint8_t bit = digitalPinToBitMask(pin);
     406:	a8 2f       	mov	r26, r24
     408:	b0 e0       	ldi	r27, 0x00	; 0
     40a:	fd 01       	movw	r30, r26
     40c:	ee 56       	subi	r30, 0x6E	; 110
     40e:	ff 4f       	sbci	r31, 0xFF	; 255
     410:	24 91       	lpm	r18, Z
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:186
  uint8_t port = digitalPinToPort(pin);
     412:	a0 58       	subi	r26, 0x80	; 128
     414:	bf 4f       	sbci	r27, 0xFF	; 255
     416:	fd 01       	movw	r30, r26
     418:	a4 91       	lpm	r26, Z
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:189
  volatile uint8_t *out, *pue;

  if (port == NOT_A_PIN) return;
     41a:	aa 23       	and	r26, r26
     41c:	e9 f0       	breq	.+58     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
turnOffPWM():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:123
// each digitalread or write.
//
__attribute__((always_inline)) static inline void turnOffPWM( uint8_t pin )
{
  #if CORE_PWM_COUNT >= 1
    if ( pin == CORE_PWM0_PIN )
     41e:	8d 30       	cpi	r24, 0x0D	; 13
     420:	f1 f4       	brne	.+60     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
Timer0_SetCompareOutputModeA():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:692
}
timer0_com_t;

__attribute__((always_inline)) static inline void Timer0_SetCompareOutputModeA( timer0_com_t com )
{
  TCCR0A = (TCCR0A & ~MASK2(COM0A1,COM0A0)) | (com << COM0A0);
     422:	8b b3       	in	r24, 0x1b	; 27
     424:	8f 73       	andi	r24, 0x3F	; 63
Timer0_SetCompareOutputModeB():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:697
}

__attribute__((always_inline)) static inline void Timer0_SetCompareOutputModeB( timer0_com_t com )
{
  TCCR0A = (TCCR0A & ~MASK2(COM0B1,COM0B0)) | (com << COM0B0);
     426:	8b bb       	out	0x1b, r24	; 27
digitalWrite():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:195

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  turnOffPWM( pin );

  out = portOutputRegister(port);
     428:	b0 e0       	ldi	r27, 0x00	; 0
     42a:	fd 01       	movw	r30, r26
     42c:	e4 58       	subi	r30, 0x84	; 132
     42e:	ff 4f       	sbci	r31, 0xFF	; 255
     430:	c4 91       	lpm	r28, Z
     432:	d0 e0       	ldi	r29, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:196
  pue = portPullupRegister(port);
     434:	a8 58       	subi	r26, 0x88	; 136
     436:	bf 4f       	sbci	r27, 0xFF	; 255
     438:	fd 01       	movw	r30, r26
     43a:	a4 91       	lpm	r26, Z
     43c:	b0 e0       	ldi	r27, 0x00	; 0
     43e:	92 2f       	mov	r25, r18
     440:	90 95       	com	r25
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:198

  if (val == LOW) {
     442:	61 11       	cpse	r22, r1
     444:	1f c0       	rjmp	.+62     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:199
    uint8_t oldSREG = SREG;
     446:	2f b7       	in	r18, 0x3f	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:200
    cli();
     448:	f8 94       	cli
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:201
    *out &= ~bit;
     44a:	88 81       	ld	r24, Y
     44c:	89 23       	and	r24, r25
     44e:	88 83       	st	Y, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:202
    *pue &= ~bit; //Turn off the pullups
     450:	8c 91       	ld	r24, X
     452:	89 23       	and	r24, r25
     454:	8c 93       	st	X, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:203
    SREG = oldSREG;
     456:	2f bf       	out	0x3f, r18	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:211
    cli();
    *out |= bit;
    *pue &= ~bit;
    SREG = oldSREG;
  }
}
     458:	df 91       	pop	r29
     45a:	cf 91       	pop	r28
     45c:	08 95       	ret
turnOffPWM():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:131
    }
    else
  #endif

  #if CORE_PWM_COUNT >= 2
    if ( pin == CORE_PWM1_PIN )
     45e:	83 30       	cpi	r24, 0x03	; 3
     460:	19 f4       	brne	.+6      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
Timer0_SetCompareOutputModeB():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:697
     462:	8b b3       	in	r24, 0x1b	; 27
     464:	8f 7c       	andi	r24, 0xCF	; 207
     466:	df cf       	rjmp	.-66     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
turnOffPWM():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:139
    }
    else
  #endif

  #if CORE_PWM_COUNT >= 3
    if ( pin == CORE_PWM2_PIN )
     468:	8e 30       	cpi	r24, 0x0E	; 14
     46a:	31 f4       	brne	.+12     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
Timer1_SetCompareOutputModeA():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:852
}
timer1_com_t;

__attribute__((always_inline)) static inline void Timer1_SetCompareOutputModeA( timer1_com_t com )
{
  TCCR1A = (TCCR1A & ~MASK2(COM1A1,COM1A0)) | (com << COM1A0);
     46c:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__DATA_REGION_ORIGIN__+0x12>
     470:	8f 73       	andi	r24, 0x3F	; 63
Timer1_SetCompareOutputModeB():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:857
}

__attribute__((always_inline)) static inline void Timer1_SetCompareOutputModeB( timer1_com_t com )
{
  TCCR1A = (TCCR1A & ~MASK2(COM1B1,COM1B0)) | (com << COM1B0);
     472:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__DATA_REGION_ORIGIN__+0x12>
     476:	d8 cf       	rjmp	.-80     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
turnOffPWM():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:147
    }
    else
  #endif

  #if CORE_PWM_COUNT >= 4
    if ( pin == CORE_PWM3_PIN )
     478:	82 30       	cpi	r24, 0x02	; 2
     47a:	b1 f6       	brne	.-84     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
Timer1_SetCompareOutputModeB():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:857
     47c:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__DATA_REGION_ORIGIN__+0x12>
     480:	8f 7c       	andi	r24, 0xCF	; 207
     482:	f7 cf       	rjmp	.-18     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
digitalWrite():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:205
    cli();
    *out &= ~bit;
    *pue &= ~bit; //Turn off the pullups
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     484:	3f b7       	in	r19, 0x3f	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:206
    cli();
     486:	f8 94       	cli
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:207
    *out |= bit;
     488:	e8 81       	ld	r30, Y
     48a:	e2 2b       	or	r30, r18
     48c:	e8 83       	st	Y, r30
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:208
    *pue &= ~bit;
     48e:	8c 91       	ld	r24, X
     490:	89 23       	and	r24, r25
     492:	8c 93       	st	X, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:209
    SREG = oldSREG;
     494:	3f bf       	out	0x3f, r19	; 63
     496:	e0 cf       	rjmp	.-64     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>

00000498 <pinMode>:
pinMode():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:37
#include "core_timers.h"
#include "PwmTimer.h"

#if defined(__AVR_ATtinyX41__ ) || defined(__AVR_ATtiny1634__) || defined(__AVR_ATtiny828__)
void pinMode(uint8_t pin, uint8_t mode)
{
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:39
  #ifndef __AVR_ATtiny828__
  if (pin&64) {pin=analogInputToDigitalPin((pin & 63));}
     49c:	86 ff       	sbrs	r24, 6
     49e:	07 c0       	rjmp	.+14     	; 0x4ae <pinMode+0x16>
     4a0:	8f 73       	andi	r24, 0x3F	; 63
     4a2:	a5 e0       	ldi	r26, 0x05	; 5
     4a4:	86 30       	cpi	r24, 0x06	; 6
     4a6:	08 f0       	brcs	.+2      	; 0x4aa <pinMode+0x12>
     4a8:	a6 e1       	ldi	r26, 0x16	; 22
     4aa:	a8 1b       	sub	r26, r24
     4ac:	8a 2f       	mov	r24, r26
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:41
  #endif
  uint8_t bit = digitalPinToBitMask(pin);
     4ae:	a8 2f       	mov	r26, r24
     4b0:	b0 e0       	ldi	r27, 0x00	; 0
     4b2:	fd 01       	movw	r30, r26
     4b4:	ee 56       	subi	r30, 0x6E	; 110
     4b6:	ff 4f       	sbci	r31, 0xFF	; 255
     4b8:	24 91       	lpm	r18, Z
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:42
  uint8_t port = digitalPinToPort(pin);
     4ba:	a0 58       	subi	r26, 0x80	; 128
     4bc:	bf 4f       	sbci	r27, 0xFF	; 255
     4be:	fd 01       	movw	r30, r26
     4c0:	a4 91       	lpm	r26, Z
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:45
  volatile uint8_t *reg, *out, *pue;

  if (port == NOT_A_PIN) return;
     4c2:	aa 23       	and	r26, r26
     4c4:	19 f1       	breq	.+70     	; 0x50c <__stack+0xd>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:48

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     4c6:	b0 e0       	ldi	r27, 0x00	; 0
     4c8:	fd 01       	movw	r30, r26
     4ca:	ec 58       	subi	r30, 0x8C	; 140
     4cc:	ff 4f       	sbci	r31, 0xFF	; 255
     4ce:	e4 91       	lpm	r30, Z
     4d0:	ce 2f       	mov	r28, r30
     4d2:	d0 e0       	ldi	r29, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:49
  out = portOutputRegister(port);
     4d4:	fd 01       	movw	r30, r26
     4d6:	e4 58       	subi	r30, 0x84	; 132
     4d8:	ff 4f       	sbci	r31, 0xFF	; 255
     4da:	e4 91       	lpm	r30, Z
     4dc:	8e 2f       	mov	r24, r30
     4de:	90 e0       	ldi	r25, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:50
  pue = portPullupRegister(port);
     4e0:	a8 58       	subi	r26, 0x88	; 136
     4e2:	bf 4f       	sbci	r27, 0xFF	; 255
     4e4:	fd 01       	movw	r30, r26
     4e6:	a4 91       	lpm	r26, Z
     4e8:	b0 e0       	ldi	r27, 0x00	; 0
     4ea:	32 2f       	mov	r19, r18
     4ec:	30 95       	com	r19
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:52

  if (mode == INPUT) {
     4ee:	61 11       	cpse	r22, r1
     4f0:	10 c0       	rjmp	.+32     	; 0x512 <__stack+0x13>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:53
    uint8_t oldSREG = SREG;
     4f2:	4f b7       	in	r20, 0x3f	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:54
                cli();
     4f4:	f8 94       	cli
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:55
    *reg &= ~bit;
     4f6:	28 81       	ld	r18, Y
     4f8:	23 23       	and	r18, r19
     4fa:	28 83       	st	Y, r18
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:56
    *out &= ~bit;
     4fc:	fc 01       	movw	r30, r24
     4fe:	20 81       	ld	r18, Z
     500:	23 23       	and	r18, r19
     502:	20 83       	st	Z, r18
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:57
    *pue &= ~bit;
     504:	8c 91       	ld	r24, X
     506:	38 23       	and	r19, r24
     508:	3c 93       	st	X, r19
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:58
    SREG = oldSREG;
     50a:	4f bf       	out	0x3f, r20	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:73
                cli();
    *pue &= ~bit;
    *reg |= bit;
    SREG = oldSREG;
  }
}
     50c:	df 91       	pop	r29
     50e:	cf 91       	pop	r28
     510:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:59
                cli();
    *reg &= ~bit;
    *out &= ~bit;
    *pue &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
     512:	62 30       	cpi	r22, 0x02	; 2
     514:	71 f4       	brne	.+28     	; 0x532 <__stack+0x33>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:60
    uint8_t oldSREG = SREG;
     516:	5f b7       	in	r21, 0x3f	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:61
                cli();
     518:	f8 94       	cli
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:62
    *reg &= ~bit;
     51a:	48 81       	ld	r20, Y
     51c:	34 23       	and	r19, r20
     51e:	38 83       	st	Y, r19
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:63
    *out |= bit;
     520:	fc 01       	movw	r30, r24
     522:	30 81       	ld	r19, Z
     524:	32 2b       	or	r19, r18
     526:	30 83       	st	Z, r19
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:64
    *pue |= bit;
     528:	ec 91       	ld	r30, X
     52a:	2e 2b       	or	r18, r30
     52c:	2c 93       	st	X, r18
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:65
    SREG = oldSREG;
     52e:	5f bf       	out	0x3f, r21	; 63
     530:	ed cf       	rjmp	.-38     	; 0x50c <__stack+0xd>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:67
  } else {
    uint8_t oldSREG = SREG;
     532:	9f b7       	in	r25, 0x3f	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:68
                cli();
     534:	f8 94       	cli
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:69
    *pue &= ~bit;
     536:	8c 91       	ld	r24, X
     538:	38 23       	and	r19, r24
     53a:	3c 93       	st	X, r19
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:70
    *reg |= bit;
     53c:	e8 81       	ld	r30, Y
     53e:	2e 2b       	or	r18, r30
     540:	28 83       	st	Y, r18
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:71
    SREG = oldSREG;
     542:	9f bf       	out	0x3f, r25	; 63
     544:	e3 cf       	rjmp	.-58     	; 0x50c <__stack+0xd>

00000546 <micros>:
micros():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:134
  return m;
}
unsigned long micros()
{
  unsigned long m;
  uint8_t oldSREG = SREG, t;
     546:	3f b7       	in	r19, 0x3f	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:136

  cli();
     548:	f8 94       	cli
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:137
  m = millis_timer_overflow_count;
     54a:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <millis_timer_overflow_count>
     54e:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <millis_timer_overflow_count+0x1>
     552:	a0 91 aa 01 	lds	r26, 0x01AA	; 0x8001aa <millis_timer_overflow_count+0x2>
     556:	b0 91 ab 01 	lds	r27, 0x01AB	; 0x8001ab <millis_timer_overflow_count+0x3>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:139
#if defined(TCNT0) && (TIMER_TO_USE_FOR_MILLIS == 0) && !defined(TCW0)
  t = TCNT0;
     55a:	29 b3       	in	r18, 0x19	; 25
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:154

#if defined(TIFR0) && (TIMER_TO_USE_FOR_MILLIS == 0)
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    m++;
#elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 0)
  if ((TIFR & _BV(TOV0)) && (t < 255))
     55c:	09 b6       	in	r0, 0x39	; 57
     55e:	01 fe       	sbrs	r0, 1
     560:	05 c0       	rjmp	.+10     	; 0x56c <micros+0x26>
     562:	2f 3f       	cpi	r18, 0xFF	; 255
     564:	19 f0       	breq	.+6      	; 0x56c <micros+0x26>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:155
    m++;
     566:	01 96       	adiw	r24, 0x01	; 1
     568:	a1 1d       	adc	r26, r1
     56a:	b1 1d       	adc	r27, r1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:164
#elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 1)
  if ((TIFR & _BV(TOV1)) && (t < 255))
    m++;
#endif

  SREG = oldSREG;
     56c:	3f bf       	out	0x3f, r19	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:171

#if F_CPU < 1000000L
  return ((m << 8) + t) * MillisTimer_Prescale_Value * (1000000L/F_CPU);
#else
#if (MillisTimer_Prescale_Value % clockCyclesPerMicrosecond() == 0 ) // Can we just do it the naive way? If so great!
  return ((m << 8) + t) * (MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
     56e:	ba 2f       	mov	r27, r26
     570:	a9 2f       	mov	r26, r25
     572:	98 2f       	mov	r25, r24
     574:	88 27       	eor	r24, r24
     576:	bc 01       	movw	r22, r24
     578:	cd 01       	movw	r24, r26
     57a:	62 0f       	add	r22, r18
     57c:	71 1d       	adc	r23, r1
     57e:	81 1d       	adc	r24, r1
     580:	91 1d       	adc	r25, r1
     582:	43 e0       	ldi	r20, 0x03	; 3
     584:	66 0f       	add	r22, r22
     586:	77 1f       	adc	r23, r23
     588:	88 1f       	adc	r24, r24
     58a:	99 1f       	adc	r25, r25
     58c:	4a 95       	dec	r20
     58e:	d1 f7       	brne	.-12     	; 0x584 <micros+0x3e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:217
  //the high part gets divided by cCPuS then multiplied by the prescaler. Then take the low 8 bits plus the high part modulo-cCPuS to correct for the division, then multiply that by the prescaler value first before dividing by cCPuS, and finally add the two together.
  //return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + ((t+(((m<<8)%clockCyclesPerMicrosecond())) * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond()));
  return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + (t * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
#endif
#endif
}
     590:	08 95       	ret

00000592 <delay>:
delay():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:225
  // Empty
}
void yield(void) __attribute__ ((weak, alias("__empty")));

void delay(unsigned long ms)
{
     592:	cf 92       	push	r12
     594:	df 92       	push	r13
     596:	ef 92       	push	r14
     598:	ff 92       	push	r15
     59a:	cf 93       	push	r28
     59c:	df 93       	push	r29
     59e:	6b 01       	movw	r12, r22
     5a0:	7c 01       	movw	r14, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:227
  #if (F_CPU>=1000000L)
  uint16_t start = (uint16_t)micros();
     5a2:	0e 94 a3 02 	call	0x546	; 0x546 <micros>
     5a6:	eb 01       	movw	r28, r22
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:231

  while (ms > 0) {
    yield();
    while (((uint16_t)micros() - start) >= 1000 && ms) {
     5a8:	0e 94 a3 02 	call	0x546	; 0x546 <micros>
     5ac:	6c 1b       	sub	r22, r28
     5ae:	7d 0b       	sbc	r23, r29
     5b0:	68 3e       	cpi	r22, 0xE8	; 232
     5b2:	73 40       	sbci	r23, 0x03	; 3
     5b4:	a0 f0       	brcs	.+40     	; 0x5de <delay+0x4c>
     5b6:	c1 14       	cp	r12, r1
     5b8:	d1 04       	cpc	r13, r1
     5ba:	e1 04       	cpc	r14, r1
     5bc:	f1 04       	cpc	r15, r1
     5be:	39 f4       	brne	.+14     	; 0x5ce <delay+0x3c>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:241
  #else
  uint32_t start = millis();
  while((millis() - start) < ms)  /* NOP */yield();
  return;
  #endif
}
     5c0:	df 91       	pop	r29
     5c2:	cf 91       	pop	r28
     5c4:	ff 90       	pop	r15
     5c6:	ef 90       	pop	r14
     5c8:	df 90       	pop	r13
     5ca:	cf 90       	pop	r12
     5cc:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:232
  uint16_t start = (uint16_t)micros();

  while (ms > 0) {
    yield();
    while (((uint16_t)micros() - start) >= 1000 && ms) {
      ms--;
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	c8 1a       	sub	r12, r24
     5d2:	d1 08       	sbc	r13, r1
     5d4:	e1 08       	sbc	r14, r1
     5d6:	f1 08       	sbc	r15, r1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:233
      start += 1000;
     5d8:	c8 51       	subi	r28, 0x18	; 24
     5da:	dc 4f       	sbci	r29, 0xFC	; 252
     5dc:	e5 cf       	rjmp	.-54     	; 0x5a8 <delay+0x16>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:229
void delay(unsigned long ms)
{
  #if (F_CPU>=1000000L)
  uint16_t start = (uint16_t)micros();

  while (ms > 0) {
     5de:	c1 14       	cp	r12, r1
     5e0:	d1 04       	cpc	r13, r1
     5e2:	e1 04       	cpc	r14, r1
     5e4:	f1 04       	cpc	r15, r1
     5e6:	01 f7       	brne	.-64     	; 0x5a8 <delay+0x16>
     5e8:	eb cf       	rjmp	.-42     	; 0x5c0 <delay+0x2e>

000005ea <USI_TWI_Master_Transfer>:
USI_TWI_Master_Transfer():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:225
 Data to be sent has to be placed into the USIDR prior to calling
 this function. Data read, will be return'ed from the function.
---------------------------------------------------------------*/
unsigned char USI_TWI_Master_Transfer(unsigned char temp)
{
  USISR = temp;                                          // Set USISR according to temp.
     5ea:	8b bd       	out	0x2b, r24	; 43
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     5ec:	35 e0       	ldi	r19, 0x05	; 5
USI_TWI_Master_Transfer():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:233
         (1 << USIWM1) | (0 << USIWM0) |                 // Set USI in Two-wire mode.
         (1 << USICS1) | (0 << USICS0) | (1 << USICLK) | // Software clock strobe as source.
         (1 << USITC);                                   // Toggle Clock Port.
  do {
    if (USI_TWI_MASTER_SPEED) DELAY_T2TWI_FM; else DELAY_T2TWI;
    USICR = temp; // Generate positive SCL edge.
     5ee:	8b e2       	ldi	r24, 0x2B	; 43
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     5f0:	24 e0       	ldi	r18, 0x04	; 4
     5f2:	93 2f       	mov	r25, r19
     5f4:	9a 95       	dec	r25
     5f6:	f1 f7       	brne	.-4      	; 0x5f4 <USI_TWI_Master_Transfer+0xa>
USI_TWI_Master_Transfer():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:233
     5f8:	8a bd       	out	0x2a, r24	; 42
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:234
    while (!(PIN_USI_CL & (1 << PIN_USI_SCL)))
     5fa:	39 9b       	sbis	0x07, 1	; 7
     5fc:	fe cf       	rjmp	.-4      	; 0x5fa <USI_TWI_Master_Transfer+0x10>
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     5fe:	92 2f       	mov	r25, r18
     600:	9a 95       	dec	r25
     602:	f1 f7       	brne	.-4      	; 0x600 <USI_TWI_Master_Transfer+0x16>
USI_TWI_Master_Transfer():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:237
      ; // Wait for SCL to go high.
    if (USI_TWI_MASTER_SPEED) DELAY_T4TWI_FM; else DELAY_T4TWI;
    USICR = temp;                   // Generate negative SCL edge.
     604:	8a bd       	out	0x2a, r24	; 42
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:238
  } while (!(USISR & (1 << USIOIF))); // Check for transfer complete.
     606:	0b b4       	in	r0, 0x2b	; 43
     608:	06 fe       	sbrs	r0, 6
     60a:	f3 cf       	rjmp	.-26     	; 0x5f2 <USI_TWI_Master_Transfer+0x8>
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     60c:	85 e0       	ldi	r24, 0x05	; 5
     60e:	8a 95       	dec	r24
     610:	f1 f7       	brne	.-4      	; 0x60e <USI_TWI_Master_Transfer+0x24>
USI_TWI_Master_Transfer():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:241

  if (USI_TWI_MASTER_SPEED) DELAY_T2TWI_FM; else DELAY_T2TWI;
  temp  = USIDR;                 // Read out data.
     612:	8c b5       	in	r24, 0x2c	; 44
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:242
  USIDR = 0xFF;                  // Release SDA.
     614:	9f ef       	ldi	r25, 0xFF	; 255
     616:	9c bd       	out	0x2c, r25	; 44
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:243
  DDR_USI |= (1 << PIN_USI_SDA); // Enable SDA as output.
     618:	61 9a       	sbi	0x0c, 1	; 12
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:246

  return temp; // Return the data from the USIDR
}
     61a:	08 95       	ret

0000061c <USI_TWI_Start_Transceiver_With_Data_Stop>:
USI_TWI_Start_Transceiver_With_Data_Stop():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:108
 parameter that defines if a Stop Condition should be send at the end
 of the transmission.
---------------------------------------------------------------*/

unsigned char USI_TWI_Start_Transceiver_With_Data_Stop(unsigned char *msg, unsigned char msgSize, unsigned char stop)
{
     61c:	ff 92       	push	r15
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	06 2f       	mov	r16, r22
     628:	14 2f       	mov	r17, r20
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:115
  // Prepare register value to: Clear flags set USI to shift 8 bits i.e. count 16 clock edges.

  unsigned char tempUSISR_1bit = (1 << USISIF) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC) | (0xE << USICNT0);
  // Prepare register value to: Clear flags, and set USI to shift 1 bit i.e. count 2 clock edges.

  USI_TWI_state.errorState  = 0;
     62a:	21 e0       	ldi	r18, 0x01	; 1
     62c:	20 93 b5 01 	sts	0x01B5, r18	; 0x8001b5 <USI_TWI_state>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:146
    USI_TWI_state.errorState = USI_TWI_UE_DATA_COL;
    return (FALSE);
  }
#endif

  if (!(*msg & (1 << TWI_READ_BIT))) // The LSB in the address byte determines if is a masterRead or masterWrite operation.
     630:	fc 01       	movw	r30, r24
     632:	20 81       	ld	r18, Z
     634:	20 fd       	sbrc	r18, 0
     636:	03 c0       	rjmp	.+6      	; 0x63e <USI_TWI_Start_Transceiver_With_Data_Stop+0x22>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:148
  {
    USI_TWI_state.masterWriteDataMode = TRUE;
     638:	23 e0       	ldi	r18, 0x03	; 3
     63a:	20 93 b5 01 	sts	0x01B5, r18	; 0x8001b5 <USI_TWI_state>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:152
  }

  /* Release SCL to ensure that (repeated) Start can be performed */
  PORT_USI_CL |= (1 << PIN_USI_SCL); // Release SCL.
     63e:	49 9a       	sbi	0x09, 1	; 9
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:153
  while (!(PIN_USI_CL & (1 << PIN_USI_SCL)))
     640:	39 9b       	sbis	0x07, 1	; 7
     642:	fe cf       	rjmp	.-4      	; 0x640 <USI_TWI_Start_Transceiver_With_Data_Stop+0x24>
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     644:	25 e0       	ldi	r18, 0x05	; 5
     646:	2a 95       	dec	r18
     648:	f1 f7       	brne	.-4      	; 0x646 <USI_TWI_Start_Transceiver_With_Data_Stop+0x2a>
USI_TWI_Start_Transceiver_With_Data_Stop():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:159
    ; // Verify that SCL becomes high.
  if (USI_TWI_MASTER_SPEED) DELAY_T4TWI_FM; // Delay for T4TWI if TWI_FAST_MODE
  else DELAY_T2TWI;    // Delay for T2TWI if TWI_STANDARD_MODE

  /* Generate Start Condition */
  PORT_USI &= ~(1 << PIN_USI_SDA); // Force SDA LOW.
     64a:	69 98       	cbi	0x0d, 1	; 13
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     64c:	24 e0       	ldi	r18, 0x04	; 4
     64e:	2a 95       	dec	r18
     650:	f1 f7       	brne	.-4      	; 0x64e <USI_TWI_Start_Transceiver_With_Data_Stop+0x32>
USI_TWI_Start_Transceiver_With_Data_Stop():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:163

  if (USI_TWI_MASTER_SPEED) DELAY_T4TWI_FM; else DELAY_T4TWI; // UGGGGLLLYYYYY - but if you never call clock() which is the only thing that could change USI_TWI_MASTER_SPEED, should be optimized out

  PORT_USI_CL &= ~(1 << PIN_USI_SCL); // Pull SCL LOW.
     652:	49 98       	cbi	0x09, 1	; 9
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:164
  PORT_USI |= (1 << PIN_USI_SDA);  // Release SDA.
     654:	69 9a       	sbi	0x0d, 1	; 13
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:167

#ifdef SIGNAL_VERIFY
  if (!(USISR & (1 << USISIF))) {
     656:	0b b4       	in	r0, 0x2b	; 43
     658:	07 fc       	sbrc	r0, 7
     65a:	0b c0       	rjmp	.+22     	; 0x672 <USI_TWI_Start_Transceiver_With_Data_Stop+0x56>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:168
    USI_TWI_state.errorState = USI_TWI_MISSING_START_CON;
     65c:	87 e0       	ldi	r24, 0x07	; 7
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:186

      /* Clock and verify (N)ACK from slave */
      DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
      if (USI_TWI_Master_Transfer(tempUSISR_1bit) & (1 << TWI_NACK_BIT)) {
        if (USI_TWI_state.addressMode)
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
     65e:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <USI_TWI_state>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:189
        else
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_DATA;
        return (FALSE);
     662:	10 e0       	ldi	r17, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:216
    USI_TWI_Master_Stop(); // Send a STOP condition on the TWI bus.
  }

  /* Transmission successfully completed*/
  return (TRUE);
}
     664:	81 2f       	mov	r24, r17
     666:	df 91       	pop	r29
     668:	cf 91       	pop	r28
     66a:	1f 91       	pop	r17
     66c:	0f 91       	pop	r16
     66e:	ff 90       	pop	r15
     670:	08 95       	ret
     672:	ec 01       	movw	r28, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:202
      *(msg++) = USI_TWI_Master_Transfer(tempUSISR_8bit);

      /* Prepare to generate ACK (or NACK in case of End Of Transmission) */
      if (msgSize == 1) // If transmission of last byte was performed.
      {
        USIDR = 0xFF; // Load NACK to confirm End Of Transmission.
     674:	ff 24       	eor	r15, r15
     676:	fa 94       	dec	r15
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:176
#endif

  /*Write address and Read/Write data */
  do {
    /* If masterWrite cycle (or initial address transmission)*/
    if (USI_TWI_state.addressMode || USI_TWI_state.masterWriteDataMode) {
     678:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <USI_TWI_state>
     67c:	83 70       	andi	r24, 0x03	; 3
     67e:	29 f1       	breq	.+74     	; 0x6ca <USI_TWI_Start_Transceiver_With_Data_Stop+0xae>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:178
      /* Write a byte */
      PORT_USI_CL &= ~(1 << PIN_USI_SCL);         // Pull SCL LOW.
     680:	49 98       	cbi	0x09, 1	; 9
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:179
      USIDR = *(msg++);                        // Setup data.
     682:	88 81       	ld	r24, Y
     684:	8c bd       	out	0x2c, r24	; 44
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:180
      USI_TWI_Master_Transfer(tempUSISR_8bit); // Send 8 bits on bus.
     686:	80 ef       	ldi	r24, 0xF0	; 240
     688:	0e 94 f5 02 	call	0x5ea	; 0x5ea <USI_TWI_Master_Transfer>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:183

      /* Clock and verify (N)ACK from slave */
      DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
     68c:	61 98       	cbi	0x0c, 1	; 12
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:184
      if (USI_TWI_Master_Transfer(tempUSISR_1bit) & (1 << TWI_NACK_BIT)) {
     68e:	8e ef       	ldi	r24, 0xFE	; 254
     690:	0e 94 f5 02 	call	0x5ea	; 0x5ea <USI_TWI_Master_Transfer>
     694:	80 ff       	sbrs	r24, 0
     696:	0c c0       	rjmp	.+24     	; 0x6b0 <USI_TWI_Start_Transceiver_With_Data_Stop+0x94>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:185
        if (USI_TWI_state.addressMode)
     698:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <USI_TWI_state>
     69c:	18 2f       	mov	r17, r24
     69e:	11 70       	andi	r17, 0x01	; 1
     6a0:	80 ff       	sbrs	r24, 0
     6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <USI_TWI_Start_Transceiver_With_Data_Stop+0x8c>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:186
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
     6a4:	86 e0       	ldi	r24, 0x06	; 6
     6a6:	db cf       	rjmp	.-74     	; 0x65e <USI_TWI_Start_Transceiver_With_Data_Stop+0x42>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:188
        else
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_DATA;
     6a8:	85 e0       	ldi	r24, 0x05	; 5
USI_TWI_Master_Stop():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:264
  PORT_USI |= (1 << PIN_USI_SDA); // Release SDA.
  if (USI_TWI_MASTER_SPEED) DELAY_T2TWI_FM; else DELAY_T2TWI;

#ifdef SIGNAL_VERIFY
  if (!(USISR & (1 << USIPF))) {
    USI_TWI_state.errorState = USI_TWI_MISSING_STOP_CON;
     6aa:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <USI_TWI_state>
     6ae:	da cf       	rjmp	.-76     	; 0x664 <USI_TWI_Start_Transceiver_With_Data_Stop+0x48>
USI_TWI_Start_Transceiver_With_Data_Stop():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:191
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
        else
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_DATA;
        return (FALSE);
      }
      USI_TWI_state.addressMode = FALSE; // Only perform address transmission once.
     6b0:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <USI_TWI_state>
     6b4:	8e 7f       	andi	r24, 0xFE	; 254
     6b6:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <USI_TWI_state>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:208
      } else {
        USIDR = 0x00; // Load ACK. Set data register bit 7 (output for SDA) low.
      }
      USI_TWI_Master_Transfer(tempUSISR_1bit); // Generate ACK/NACK.
    }
  } while (--msgSize); // Until all data sent/received.
     6ba:	01 50       	subi	r16, 0x01	; 1
     6bc:	21 96       	adiw	r28, 0x01	; 1
     6be:	01 11       	cpse	r16, r1
     6c0:	db cf       	rjmp	.-74     	; 0x678 <USI_TWI_Start_Transceiver_With_Data_Stop+0x5c>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:210

  if (stop) {
     6c2:	11 11       	cpse	r17, r1
     6c4:	10 c0       	rjmp	.+32     	; 0x6e6 <USI_TWI_Start_Transceiver_With_Data_Stop+0xca>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:215
    USI_TWI_Master_Stop(); // Send a STOP condition on the TWI bus.
  }

  /* Transmission successfully completed*/
  return (TRUE);
     6c6:	11 e0       	ldi	r17, 0x01	; 1
     6c8:	cd cf       	rjmp	.-102    	; 0x664 <USI_TWI_Start_Transceiver_With_Data_Stop+0x48>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:196
      USI_TWI_state.addressMode = FALSE; // Only perform address transmission once.
    }
    /* Else masterRead cycle*/
    else {
      /* Read a data byte */
      DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
     6ca:	61 98       	cbi	0x0c, 1	; 12
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:197
      *(msg++) = USI_TWI_Master_Transfer(tempUSISR_8bit);
     6cc:	80 ef       	ldi	r24, 0xF0	; 240
     6ce:	0e 94 f5 02 	call	0x5ea	; 0x5ea <USI_TWI_Master_Transfer>
     6d2:	88 83       	st	Y, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:200

      /* Prepare to generate ACK (or NACK in case of End Of Transmission) */
      if (msgSize == 1) // If transmission of last byte was performed.
     6d4:	01 30       	cpi	r16, 0x01	; 1
     6d6:	29 f4       	brne	.+10     	; 0x6e2 <USI_TWI_Start_Transceiver_With_Data_Stop+0xc6>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:202
      {
        USIDR = 0xFF; // Load NACK to confirm End Of Transmission.
     6d8:	fc bc       	out	0x2c, r15	; 44
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:206
      } else {
        USIDR = 0x00; // Load ACK. Set data register bit 7 (output for SDA) low.
      }
      USI_TWI_Master_Transfer(tempUSISR_1bit); // Generate ACK/NACK.
     6da:	8e ef       	ldi	r24, 0xFE	; 254
     6dc:	0e 94 f5 02 	call	0x5ea	; 0x5ea <USI_TWI_Master_Transfer>
     6e0:	ec cf       	rjmp	.-40     	; 0x6ba <USI_TWI_Start_Transceiver_With_Data_Stop+0x9e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:204
      /* Prepare to generate ACK (or NACK in case of End Of Transmission) */
      if (msgSize == 1) // If transmission of last byte was performed.
      {
        USIDR = 0xFF; // Load NACK to confirm End Of Transmission.
      } else {
        USIDR = 0x00; // Load ACK. Set data register bit 7 (output for SDA) low.
     6e2:	1c bc       	out	0x2c, r1	; 44
     6e4:	fa cf       	rjmp	.-12     	; 0x6da <USI_TWI_Start_Transceiver_With_Data_Stop+0xbe>
USI_TWI_Master_Stop():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:254
 Function for generating a TWI Stop Condition. Used to release
 the TWI bus.
---------------------------------------------------------------*/
unsigned char USI_TWI_Master_Stop(void)
{
  PORT_USI &= ~(1 << PIN_USI_SDA); // Pull SDA low.
     6e6:	69 98       	cbi	0x0d, 1	; 13
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:255
  PORT_USI_CL |= (1 << PIN_USI_SCL);  // Release SCL.
     6e8:	49 9a       	sbi	0x09, 1	; 9
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:256
  while (!(PIN_USI_CL & (1 << PIN_USI_SCL)))
     6ea:	39 9b       	sbis	0x07, 1	; 7
     6ec:	fe cf       	rjmp	.-4      	; 0x6ea <USI_TWI_Start_Transceiver_With_Data_Stop+0xce>
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     6ee:	84 e0       	ldi	r24, 0x04	; 4
     6f0:	8a 95       	dec	r24
     6f2:	f1 f7       	brne	.-4      	; 0x6f0 <USI_TWI_Start_Transceiver_With_Data_Stop+0xd4>
USI_TWI_Master_Stop():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:259
    ; // Wait for SCL to go high.
  if (USI_TWI_MASTER_SPEED) DELAY_T4TWI_FM; else DELAY_T4TWI;
  PORT_USI |= (1 << PIN_USI_SDA); // Release SDA.
     6f4:	69 9a       	sbi	0x0d, 1	; 13
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     6f6:	85 e0       	ldi	r24, 0x05	; 5
     6f8:	8a 95       	dec	r24
     6fa:	f1 f7       	brne	.-4      	; 0x6f8 <USI_TWI_Start_Transceiver_With_Data_Stop+0xdc>
USI_TWI_Master_Stop():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:263
  if (USI_TWI_MASTER_SPEED) DELAY_T2TWI_FM; else DELAY_T2TWI;

#ifdef SIGNAL_VERIFY
  if (!(USISR & (1 << USIPF))) {
     6fc:	0b b4       	in	r0, 0x2b	; 43
     6fe:	05 fc       	sbrc	r0, 5
     700:	e2 cf       	rjmp	.-60     	; 0x6c6 <USI_TWI_Start_Transceiver_With_Data_Stop+0xaa>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:264
    USI_TWI_state.errorState = USI_TWI_MISSING_STOP_CON;
     702:	88 e0       	ldi	r24, 0x08	; 8
     704:	d2 cf       	rjmp	.-92     	; 0x6aa <USI_TWI_Start_Transceiver_With_Data_Stop+0x8e>

00000706 <TwoWire::endTransmission() [clone .constprop.51]>:
endTransmission():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:478

uint8_t TwoWire::endTransmission(uint8_t sendStop) {
  // transmit buffer (blocking)
  uint8_t ret = USI_TWI_Start_Transceiver_With_Data_Stop(Buffer,
                                                         BufferLength,
                                                         sendStop);
     706:	41 e0       	ldi	r20, 0x01	; 1
     708:	60 91 b9 01 	lds	r22, 0x01B9	; 0x8001b9 <TwoWire::BufferLength>
     70c:	82 e8       	ldi	r24, 0x82	; 130
     70e:	91 e0       	ldi	r25, 0x01	; 1
     710:	0e 94 0e 03 	call	0x61c	; 0x61c <USI_TWI_Start_Transceiver_With_Data_Stop>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:480
  // reset tx buffer iterator vars
  BufferIndex = 0;
     714:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <TwoWire::BufferIndex>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:481
  BufferLength = 0;
     718:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <TwoWire::BufferLength>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:483
  // indicate that we are done transmitting
  transmitting = 0;
     71c:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <TwoWire::transmitting>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:485
  // check for error
  if (ret == FALSE) {
     720:	81 11       	cpse	r24, r1
     722:	10 c0       	rjmp	.+32     	; 0x744 <TwoWire::endTransmission() [clone .constprop.51]+0x3e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:486
    switch (USI_TWI_Get_State_Info()) {
     724:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <USI_TWI_state>
     728:	85 30       	cpi	r24, 0x05	; 5
     72a:	41 f0       	breq	.+16     	; 0x73c <TwoWire::endTransmission() [clone .constprop.51]+0x36>
     72c:	86 30       	cpi	r24, 0x06	; 6
     72e:	21 f0       	breq	.+8      	; 0x738 <TwoWire::endTransmission() [clone .constprop.51]+0x32>
     730:	81 30       	cpi	r24, 0x01	; 1
     732:	31 f4       	brne	.+12     	; 0x740 <TwoWire::endTransmission() [clone .constprop.51]+0x3a>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:488
    case USI_TWI_DATA_OUT_OF_BOUND:
      return 1; //data too long to fit in transmit buffer
     734:	81 e0       	ldi	r24, 0x01	; 1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:501
  return 0; //success
}

uint8_t TwoWire::endTransmission(void) {
  return endTransmission(true);
}
     736:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:490
  if (ret == FALSE) {
    switch (USI_TWI_Get_State_Info()) {
    case USI_TWI_DATA_OUT_OF_BOUND:
      return 1; //data too long to fit in transmit buffer
    case USI_TWI_NO_ACK_ON_ADDRESS:
      return 2; //received NACK on transmit of address
     738:	82 e0       	ldi	r24, 0x02	; 2
     73a:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:492
    case USI_TWI_NO_ACK_ON_DATA:
      return 3; //received NACK on transmit of data
     73c:	83 e0       	ldi	r24, 0x03	; 3
     73e:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:494
    }
    return 4; //other error
     740:	84 e0       	ldi	r24, 0x04	; 4
     742:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:496
  }
  return 0; //success
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	08 95       	ret

00000748 <reverse(unsigned char)>:
reverse():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:308
  "ror %[out] \n\t"
  "lsl __tmp_reg__  \n\t"   /* 7 */
  "ror %[out] \n\t"
  "lsl __tmp_reg__  \n\t"   /* 8 */
  "ror %[out] \n\t"
  : [out] "=r" (result) : [in] "r" (x));
     748:	08 2e       	mov	r0, r24
     74a:	00 0c       	add	r0, r0
     74c:	87 95       	ror	r24
     74e:	00 0c       	add	r0, r0
     750:	87 95       	ror	r24
     752:	00 0c       	add	r0, r0
     754:	87 95       	ror	r24
     756:	00 0c       	add	r0, r0
     758:	87 95       	ror	r24
     75a:	00 0c       	add	r0, r0
     75c:	87 95       	ror	r24
     75e:	00 0c       	add	r0, r0
     760:	87 95       	ror	r24
     762:	00 0c       	add	r0, r0
     764:	87 95       	ror	r24
     766:	00 0c       	add	r0, r0
     768:	87 95       	ror	r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:310
  return(result);
}
     76a:	08 95       	ret

0000076c <SPIClass::transfer(unsigned char)>:
transfer():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:407
    }
    return USIDR;
}

uint8_t SPIClass::transfer(uint8_t spiData)
{
     76c:	1f 93       	push	r17
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	c0 91 b2 01 	lds	r28, 0x01B2	; 0x8001b2 <SPIClass::clockoutfn>
     776:	d0 91 b3 01 	lds	r29, 0x01B3	; 0x8001b3 <SPIClass::clockoutfn+0x1>
     77a:	10 91 b4 01 	lds	r17, 0x01B4	; 0x8001b4 <SPIClass::delay>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:408
    if (msb1st) {
     77e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <SPIClass::msb1st>
     782:	99 23       	and	r25, r25
     784:	31 f0       	breq	.+12     	; 0x792 <SPIClass::transfer(unsigned char)+0x26>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:409
        return clockoutfn(spiData, delay);
     786:	61 2f       	mov	r22, r17
     788:	fe 01       	movw	r30, r28
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:413
    } else {
        return reverse(clockoutfn(reverse(spiData), delay));
    }
}
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	1f 91       	pop	r17
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:409
}

uint8_t SPIClass::transfer(uint8_t spiData)
{
    if (msb1st) {
        return clockoutfn(spiData, delay);
     790:	09 94       	ijmp
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:411
    } else {
        return reverse(clockoutfn(reverse(spiData), delay));
     792:	0e 94 a4 03 	call	0x748	; 0x748 <reverse(unsigned char)>
     796:	61 2f       	mov	r22, r17
     798:	fe 01       	movw	r30, r28
     79a:	09 95       	icall
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:413
    }
}
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	1f 91       	pop	r17
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:411
uint8_t SPIClass::transfer(uint8_t spiData)
{
    if (msb1st) {
        return clockoutfn(spiData, delay);
    } else {
        return reverse(clockoutfn(reverse(spiData), delay));
     7a2:	0c 94 a4 03 	jmp	0x748	; 0x748 <reverse(unsigned char)>

000007a6 <Print::write(char const*) [clone .part.2] [clone .constprop.61]>:
_ZN5Print5writeEPKc.part.2():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.h:51
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
     7a6:	fc 01       	movw	r30, r24
     7a8:	01 90       	ld	r0, Z+
     7aa:	00 20       	and	r0, r0
     7ac:	e9 f7       	brne	.-6      	; 0x7a8 <Print::write(char const*) [clone .part.2] [clone .constprop.61]+0x2>
     7ae:	31 97       	sbiw	r30, 0x01	; 1
     7b0:	af 01       	movw	r20, r30
     7b2:	48 1b       	sub	r20, r24
     7b4:	59 0b       	sbc	r21, r25
     7b6:	bc 01       	movw	r22, r24
     7b8:	8b eb       	ldi	r24, 0xBB	; 187
     7ba:	91 e0       	ldi	r25, 0x01	; 1
     7bc:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <Print::write(unsigned char const*, unsigned int)>

000007c0 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.59]>:
printNumber():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:230
  return vfprintf_P(&f, (const char *)ifsh, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     7c0:	8f 92       	push	r8
     7c2:	9f 92       	push	r9
     7c4:	af 92       	push	r10
     7c6:	bf 92       	push	r11
     7c8:	ef 92       	push	r14
     7ca:	ff 92       	push	r15
     7cc:	0f 93       	push	r16
     7ce:	1f 93       	push	r17
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
     7d4:	cd b7       	in	r28, 0x3d	; 61
     7d6:	de b7       	in	r29, 0x3e	; 62
     7d8:	a1 97       	sbiw	r28, 0x21	; 33
     7da:	0f b6       	in	r0, 0x3f	; 63
     7dc:	f8 94       	cli
     7de:	de bf       	out	0x3e, r29	; 62
     7e0:	0f be       	out	0x3f, r0	; 63
     7e2:	cd bf       	out	0x3d, r28	; 61
     7e4:	16 2f       	mov	r17, r22
     7e6:	04 2f       	mov	r16, r20
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:234
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     7e8:	19 a2       	std	Y+33, r1	; 0x21
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:237

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     7ea:	42 30       	cpi	r20, 0x02	; 2
     7ec:	08 f4       	brcc	.+2      	; 0x7f0 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.59]+0x30>
     7ee:	0a e0       	ldi	r16, 0x0A	; 10
     7f0:	7e 01       	movw	r14, r28
     7f2:	21 e2       	ldi	r18, 0x21	; 33
     7f4:	e2 0e       	add	r14, r18
     7f6:	f1 1c       	adc	r15, r1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:241

  do {
    unsigned long m = n;
    n /= base;
     7f8:	80 2e       	mov	r8, r16
     7fa:	91 2c       	mov	r9, r1
     7fc:	b1 2c       	mov	r11, r1
     7fe:	a1 2c       	mov	r10, r1
     800:	61 2f       	mov	r22, r17
     802:	a5 01       	movw	r20, r10
     804:	94 01       	movw	r18, r8
     806:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__udivmodsi4>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:242
    char c = m - base * n;
     80a:	80 2f       	mov	r24, r16
     80c:	62 2f       	mov	r22, r18
     80e:	0e 94 22 0b 	call	0x1644	; 0x1644 <__mulqi3>
     812:	18 1b       	sub	r17, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:243
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     814:	1a 30       	cpi	r17, 0x0A	; 10
     816:	1c f5       	brge	.+70     	; 0x85e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.59]+0x9e>
     818:	10 5d       	subi	r17, 0xD0	; 208
     81a:	f7 01       	movw	r30, r14
     81c:	12 93       	st	-Z, r17
     81e:	7f 01       	movw	r14, r30
     820:	12 2f       	mov	r17, r18
     822:	73 2f       	mov	r23, r19
     824:	ca 01       	movw	r24, r20
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:244
  } while(n);
     826:	23 2b       	or	r18, r19
     828:	24 2b       	or	r18, r20
     82a:	25 2b       	or	r18, r21
     82c:	49 f7       	brne	.-46     	; 0x800 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.59]+0x40>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.h:50
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	80 e0       	ldi	r24, 0x00	; 0
write():
     832:	30 97       	sbiw	r30, 0x00	; 0
     834:	19 f0       	breq	.+6      	; 0x83c <Print::printNumber(unsigned long, unsigned char) [clone .constprop.59]+0x7c>
     836:	cf 01       	movw	r24, r30
     838:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <Print::write(char const*) [clone .part.2] [clone .constprop.61]>
printNumber():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:247

  return write(str);
}
     83c:	a1 96       	adiw	r28, 0x21	; 33
     83e:	0f b6       	in	r0, 0x3f	; 63
     840:	f8 94       	cli
     842:	de bf       	out	0x3e, r29	; 62
     844:	0f be       	out	0x3f, r0	; 63
     846:	cd bf       	out	0x3d, r28	; 61
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
     84c:	1f 91       	pop	r17
     84e:	0f 91       	pop	r16
     850:	ff 90       	pop	r15
     852:	ef 90       	pop	r14
     854:	bf 90       	pop	r11
     856:	af 90       	pop	r10
     858:	9f 90       	pop	r9
     85a:	8f 90       	pop	r8
     85c:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:243

  do {
    unsigned long m = n;
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     85e:	19 5c       	subi	r17, 0xC9	; 201
     860:	dc cf       	rjmp	.-72     	; 0x81a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.59]+0x5a>

00000862 <Print::println(char const*) [clone .constprop.40]>:
println():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:137
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
     862:	cf 93       	push	r28
     864:	df 93       	push	r29
write():
     866:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <Print::write(char const*) [clone .part.2] [clone .constprop.61]>
     86a:	ec 01       	movw	r28, r24
println():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:140
{
  size_t n = print(c);
  n += println();
     86c:	0e 94 ca 01 	call	0x394	; 0x394 <Print::println() [clone .constprop.62]>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:142
  return n;
}
     870:	8c 0f       	add	r24, r28
     872:	9d 1f       	adc	r25, r29
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	08 95       	ret

0000087a <RF24::csn(bool) [clone .constprop.34]>:
csn():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:15
#include "RF24_config.h"
#include "RF24.h"

/****************************************************************************/

void RF24::csn(bool mode)
     87a:	cf 93       	push	r28
     87c:	c8 2f       	mov	r28, r24
_ZN8SPIClass11setBitOrderEh():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.h:449
  static void endTransaction(void);
  static void end();

  // This function is deprecated.  New applications should use
  // beginTransaction() to configure SPI settings.
  static void setBitOrder(uint8_t bitOrder) {msb1st = bitOrder;}
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SPIClass::msb1st>
setDataMode():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:275
void SPIClass::setDataMode(uint8_t spiDataMode)
{
    if (spiDataMode == SPI_MODE1) {
        USICR |= _BV(USICS0);
    } else {
        USICR &= ~_BV(USICS0);
     884:	8a b5       	in	r24, 0x2a	; 42
     886:	8b 7f       	andi	r24, 0xFB	; 251
     888:	8a bd       	out	0x2a, r24	; 42
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:280
    }
    if (spiDataMode == SPI_MODE2 || spiDataMode == SPI_MODE3) {
        digitalWrite(SCK, HIGH);
    } else {
        digitalWrite(SCK, LOW);
     88a:	60 e0       	ldi	r22, 0x00	; 0
     88c:	8c e0       	ldi	r24, 0x0C	; 12
     88e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <digitalWrite>
_ZN8USI_impl16dispatchClockoutEhPh():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.h:380
    uint8_t clockoutUSI8(uint8_t data, uint8_t delay);

    __attribute__((always_inline))
    inline ClockOut dispatchClockout(uint8_t div, uint8_t* delay)
    {
      *delay = 0;
     892:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <SPIClass::delay>
_ZN8SPIClass15setClockDividerEh():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.h:457
  static void setDataMode(uint8_t dataMode);
  // This function is deprecated.  New applications should use
  // beginTransaction() to configure SPI settings.
  static void setClockDivider(uint8_t div) {
      if (__builtin_constant_p(div)) {
        clockoutfn = USI_impl::dispatchClockout(div, &delay);
     896:	8b eb       	ldi	r24, 0xBB	; 187
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <SPIClass::clockoutfn+0x1>
     89e:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <SPIClass::clockoutfn>
csn():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:52
      if(!mode)
	    _SPI.chipSelect(csn_pin);
#endif

#if !defined (RF24_LINUX)
	digitalWrite(csn_pin,mode);
     8a2:	6c 2f       	mov	r22, r28
     8a4:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <radio+0x1>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:56
	delayMicroseconds(5);
#endif

}
     8a8:	cf 91       	pop	r28
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:52
      if(!mode)
	    _SPI.chipSelect(csn_pin);
#endif

#if !defined (RF24_LINUX)
	digitalWrite(csn_pin,mode);
     8aa:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <digitalWrite>

000008ae <RF24::write_register(unsigned char, unsigned char) [clone .constprop.31]>:
write_register():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:187
  return status;
}

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, uint8_t value)
     8ae:	cf 93       	push	r28
     8b0:	df 93       	push	r29
     8b2:	c8 2f       	mov	r28, r24
     8b4:	d6 2f       	mov	r29, r22
beginTransaction():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:72

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF24_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#endif
    csn(LOW);
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	0e 94 3d 04 	call	0x87a	; 0x87a <RF24::csn(bool) [clone .constprop.34]>
write_register():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:206
	status = *prx++; // status is 1st byte of receive buffer
	endTransaction();
  #else

  beginTransaction();
  status = _SPI.transfer( W_REGISTER | ( REGISTER_MASK & reg ) );
     8bc:	8c 2f       	mov	r24, r28
     8be:	80 62       	ori	r24, 0x20	; 32
     8c0:	0e 94 b6 03 	call	0x76c	; 0x76c <SPIClass::transfer(unsigned char)>
     8c4:	c8 2f       	mov	r28, r24
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:207
  _SPI.transfer(value);
     8c6:	8d 2f       	mov	r24, r29
     8c8:	0e 94 b6 03 	call	0x76c	; 0x76c <SPIClass::transfer(unsigned char)>
endTransaction():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:78
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	0e 94 3d 04 	call	0x87a	; 0x87a <RF24::csn(bool) [clone .constprop.34]>
write_register():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:213
  endTransaction();

  #endif

  return status;
}
     8d2:	8c 2f       	mov	r24, r28
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	08 95       	ret

000008da <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.30]>:
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:155
  return result;
}

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, const uint8_t* buf, uint8_t len)
     8da:	0f 93       	push	r16
     8dc:	1f 93       	push	r17
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	d8 2f       	mov	r29, r24
     8e4:	c6 2f       	mov	r28, r22
beginTransaction():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:72

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF24_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#endif
    csn(LOW);
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	0e 94 3d 04 	call	0x87a	; 0x87a <RF24::csn(bool) [clone .constprop.34]>
write_register():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:175
  status = *prx; // status is 1st byte of receive buffer
  endTransaction();
  #else

  beginTransaction();
  status = _SPI.transfer( W_REGISTER | ( REGISTER_MASK & reg ) );
     8ec:	8d 2f       	mov	r24, r29
     8ee:	80 62       	ori	r24, 0x20	; 32
     8f0:	0e 94 b6 03 	call	0x76c	; 0x76c <SPIClass::transfer(unsigned char)>
     8f4:	d8 2f       	mov	r29, r24
     8f6:	05 e0       	ldi	r16, 0x05	; 5
     8f8:	11 e0       	ldi	r17, 0x01	; 1
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:176
  while ( len-- )
     8fa:	c1 50       	subi	r28, 0x01	; 1
     8fc:	30 f0       	brcs	.+12     	; 0x90a <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.30]+0x30>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:177
    _SPI.transfer(*buf++);
     8fe:	f8 01       	movw	r30, r16
     900:	81 91       	ld	r24, Z+
     902:	8f 01       	movw	r16, r30
     904:	0e 94 b6 03 	call	0x76c	; 0x76c <SPIClass::transfer(unsigned char)>
     908:	f8 cf       	rjmp	.-16     	; 0x8fa <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.30]+0x20>
endTransaction():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:78
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	0e 94 3d 04 	call	0x87a	; 0x87a <RF24::csn(bool) [clone .constprop.34]>
write_register():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:183
  endTransaction();

  #endif

  return status;
}
     910:	8d 2f       	mov	r24, r29
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	1f 91       	pop	r17
     918:	0f 91       	pop	r16
     91a:	08 95       	ret

0000091c <RF24::read_register(unsigned char) [clone .constprop.27]>:
read_register():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:124
  return status;
}

/****************************************************************************/

uint8_t RF24::read_register(uint8_t reg)
     91c:	cf 93       	push	r28
     91e:	c8 2f       	mov	r28, r24
beginTransaction():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:72

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF24_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#endif
    csn(LOW);
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	0e 94 3d 04 	call	0x87a	; 0x87a <RF24::csn(bool) [clone .constprop.34]>
read_register():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:144
  
  endTransaction();
  #else

  beginTransaction();
  _SPI.transfer( R_REGISTER | ( REGISTER_MASK & reg ) );
     926:	8c 2f       	mov	r24, r28
     928:	0e 94 b6 03 	call	0x76c	; 0x76c <SPIClass::transfer(unsigned char)>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:145
  result = _SPI.transfer(0xff);
     92c:	8f ef       	ldi	r24, 0xFF	; 255
     92e:	0e 94 b6 03 	call	0x76c	; 0x76c <SPIClass::transfer(unsigned char)>
     932:	c8 2f       	mov	r28, r24
endTransaction():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:78
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	0e 94 3d 04 	call	0x87a	; 0x87a <RF24::csn(bool) [clone .constprop.34]>
read_register():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:151
  endTransaction();

  #endif

  return result;
}
     93a:	8c 2f       	mov	r24, r28
     93c:	cf 91       	pop	r28
     93e:	08 95       	ret

00000940 <RF24::setDataRate(rf24_datarate_e) [clone .constprop.26]>:
setDataRate():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1404
  return (read_register(RF_SETUP) & (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH))) >> 1 ;
}

/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
     940:	0f 93       	push	r16
     942:	1f 93       	push	r17
     944:	cf 93       	push	r28
     946:	8c 01       	movw	r16, r24
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1407
{
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;
     948:	86 e0       	ldi	r24, 0x06	; 6
     94a:	0e 94 8e 04 	call	0x91c	; 0x91c <RF24::read_register(unsigned char) [clone .constprop.27]>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1410

  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
     94e:	c8 2f       	mov	r28, r24
     950:	c7 7d       	andi	r28, 0xD7	; 215
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1415
  
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txRxDelay=250;
  #else //16Mhz Arduino
    txRxDelay=85;
     952:	85 e5       	ldi	r24, 0x55	; 85
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	a0 e0       	ldi	r26, 0x00	; 0
     958:	b0 e0       	ldi	r27, 0x00	; 0
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1417
  #endif
  if( speed == RF24_250KBPS )
     95a:	02 30       	cpi	r16, 0x02	; 2
     95c:	11 05       	cpc	r17, r1
     95e:	29 f4       	brne	.+10     	; 0x96a <RF24::setDataRate(rf24_datarate_e) [clone .constprop.26]+0x2a>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1421
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    setup |= _BV( RF_DR_LOW ) ;
     960:	c0 62       	ori	r28, 0x20	; 32
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1425
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txRxDelay=450;
  #else //16Mhz Arduino
	txRxDelay=155;
     962:	8b e9       	ldi	r24, 0x9B	; 155
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	a0 e0       	ldi	r26, 0x00	; 0
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <radio+0xd>
     96e:	90 93 30 02 	sts	0x0230, r25	; 0x800230 <radio+0xe>
     972:	a0 93 31 02 	sts	0x0231, r26	; 0x800231 <radio+0xf>
     976:	b0 93 32 02 	sts	0x0232, r27	; 0x800232 <radio+0x10>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1442
      #else //16Mhz Arduino	  
	  txRxDelay=65;
	  #endif
    }
  }
  write_register(RF_SETUP,setup);
     97a:	6c 2f       	mov	r22, r28
     97c:	86 e0       	ldi	r24, 0x06	; 6
     97e:	0e 94 57 04 	call	0x8ae	; 0x8ae <RF24::write_register(unsigned char, unsigned char) [clone .constprop.31]>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1445

  // Verify our result
  if ( read_register(RF_SETUP) == setup )
     982:	86 e0       	ldi	r24, 0x06	; 6
     984:	0e 94 8e 04 	call	0x91c	; 0x91c <RF24::read_register(unsigned char) [clone .constprop.27]>
     988:	91 e0       	ldi	r25, 0x01	; 1
     98a:	c8 13       	cpse	r28, r24
     98c:	90 e0       	ldi	r25, 0x00	; 0
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1450
  {
    result = true;
  }
  return result;
}
     98e:	89 2f       	mov	r24, r25
     990:	cf 91       	pop	r28
     992:	1f 91       	pop	r17
     994:	0f 91       	pop	r16
     996:	08 95       	ret

00000998 <RF24::spiTrans(unsigned char) [clone .constprop.24]>:
spiTrans():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:333
  return spiTrans( FLUSH_TX );
}

/****************************************************************************/

uint8_t RF24::spiTrans(uint8_t cmd){
     998:	cf 93       	push	r28
     99a:	c8 2f       	mov	r28, r24
beginTransaction():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:72

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF24_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#endif
    csn(LOW);
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	0e 94 3d 04 	call	0x87a	; 0x87a <RF24::csn(bool) [clone .constprop.34]>
spiTrans():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:338
uint8_t RF24::spiTrans(uint8_t cmd){

  uint8_t status;
  
  beginTransaction();
  status = _SPI.transfer( cmd );
     9a2:	8c 2f       	mov	r24, r28
     9a4:	0e 94 b6 03 	call	0x76c	; 0x76c <SPIClass::transfer(unsigned char)>
     9a8:	c8 2f       	mov	r28, r24
endTransaction():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:78
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	0e 94 3d 04 	call	0x87a	; 0x87a <RF24::csn(bool) [clone .constprop.34]>
spiTrans():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:342
  beginTransaction();
  status = _SPI.transfer( cmd );
  endTransaction();
  
  return status;
}
     9b0:	8c 2f       	mov	r24, r28
     9b2:	cf 91       	pop	r28
     9b4:	08 95       	ret

000009b6 <Print::printFloat(double, unsigned char) [clone .constprop.5]>:
printFloat():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:249
  } while(n);

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
     9b6:	4f 92       	push	r4
     9b8:	5f 92       	push	r5
     9ba:	6f 92       	push	r6
     9bc:	7f 92       	push	r7
     9be:	8f 92       	push	r8
     9c0:	9f 92       	push	r9
     9c2:	af 92       	push	r10
     9c4:	bf 92       	push	r11
     9c6:	cf 92       	push	r12
     9c8:	df 92       	push	r13
     9ca:	ef 92       	push	r14
     9cc:	ff 92       	push	r15
     9ce:	0f 93       	push	r16
     9d0:	1f 93       	push	r17
     9d2:	cf 93       	push	r28
     9d4:	6b 01       	movw	r12, r22
     9d6:	7c 01       	movw	r14, r24
     9d8:	74 2e       	mov	r7, r20
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:253
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
     9da:	ac 01       	movw	r20, r24
     9dc:	9b 01       	movw	r18, r22
     9de:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__unordsf2>
     9e2:	88 23       	and	r24, r24
     9e4:	99 f0       	breq	.+38     	; 0xa0c <Print::printFloat(double, unsigned char) [clone .constprop.5]+0x56>
write():
     9e6:	8c e1       	ldi	r24, 0x1C	; 28
     9e8:	91 e0       	ldi	r25, 0x01	; 1
printFloat():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:292
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
     9ea:	cf 91       	pop	r28
     9ec:	1f 91       	pop	r17
     9ee:	0f 91       	pop	r16
     9f0:	ff 90       	pop	r15
     9f2:	ef 90       	pop	r14
     9f4:	df 90       	pop	r13
     9f6:	cf 90       	pop	r12
     9f8:	bf 90       	pop	r11
     9fa:	af 90       	pop	r10
     9fc:	9f 90       	pop	r9
     9fe:	8f 90       	pop	r8
     a00:	7f 90       	pop	r7
     a02:	6f 90       	pop	r6
     a04:	5f 90       	pop	r5
     a06:	4f 90       	pop	r4
write():
     a08:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <Print::write(char const*) [clone .part.2] [clone .constprop.61]>
printFloat():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:254
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
     a0c:	46 01       	movw	r8, r12
     a0e:	57 01       	movw	r10, r14
     a10:	e8 94       	clt
     a12:	b7 f8       	bld	r11, 7
     a14:	2f ef       	ldi	r18, 0xFF	; 255
     a16:	3f ef       	ldi	r19, 0xFF	; 255
     a18:	4f e7       	ldi	r20, 0x7F	; 127
     a1a:	5f e7       	ldi	r21, 0x7F	; 127
     a1c:	c5 01       	movw	r24, r10
     a1e:	b4 01       	movw	r22, r8
     a20:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <__unordsf2>
     a24:	81 11       	cpse	r24, r1
     a26:	0d c0       	rjmp	.+26     	; 0xa42 <Print::printFloat(double, unsigned char) [clone .constprop.5]+0x8c>
     a28:	2f ef       	ldi	r18, 0xFF	; 255
     a2a:	3f ef       	ldi	r19, 0xFF	; 255
     a2c:	4f e7       	ldi	r20, 0x7F	; 127
     a2e:	5f e7       	ldi	r21, 0x7F	; 127
     a30:	c5 01       	movw	r24, r10
     a32:	b4 01       	movw	r22, r8
     a34:	0e 94 98 0b 	call	0x1730	; 0x1730 <__cmpsf2>
     a38:	18 16       	cp	r1, r24
     a3a:	1c f4       	brge	.+6      	; 0xa42 <Print::printFloat(double, unsigned char) [clone .constprop.5]+0x8c>
write():
     a3c:	80 e2       	ldi	r24, 0x20	; 32
     a3e:	91 e0       	ldi	r25, 0x01	; 1
     a40:	d4 cf       	rjmp	.-88     	; 0x9ea <Print::printFloat(double, unsigned char) [clone .constprop.5]+0x34>
printFloat():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:255
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     a42:	2f ef       	ldi	r18, 0xFF	; 255
     a44:	3f ef       	ldi	r19, 0xFF	; 255
     a46:	4f e7       	ldi	r20, 0x7F	; 127
     a48:	5f e4       	ldi	r21, 0x4F	; 79
     a4a:	c7 01       	movw	r24, r14
     a4c:	b6 01       	movw	r22, r12
     a4e:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__gesf2>
     a52:	18 16       	cp	r1, r24
     a54:	1c f4       	brge	.+6      	; 0xa5c <Print::printFloat(double, unsigned char) [clone .constprop.5]+0xa6>
write():
     a56:	84 e2       	ldi	r24, 0x24	; 36
     a58:	91 e0       	ldi	r25, 0x01	; 1
     a5a:	c7 cf       	rjmp	.-114    	; 0x9ea <Print::printFloat(double, unsigned char) [clone .constprop.5]+0x34>
printFloat():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:256
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
     a5c:	2f ef       	ldi	r18, 0xFF	; 255
     a5e:	3f ef       	ldi	r19, 0xFF	; 255
     a60:	4f e7       	ldi	r20, 0x7F	; 127
     a62:	5f ec       	ldi	r21, 0xCF	; 207
     a64:	c7 01       	movw	r24, r14
     a66:	b6 01       	movw	r22, r12
     a68:	0e 94 98 0b 	call	0x1730	; 0x1730 <__cmpsf2>
     a6c:	87 fd       	sbrc	r24, 7
     a6e:	f3 cf       	rjmp	.-26     	; 0xa56 <Print::printFloat(double, unsigned char) [clone .constprop.5]+0xa0>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:259

  // Handle negative numbers
  if (number < 0.0)
     a70:	20 e0       	ldi	r18, 0x00	; 0
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	a9 01       	movw	r20, r18
     a76:	c7 01       	movw	r24, r14
     a78:	b6 01       	movw	r22, r12
     a7a:	0e 94 98 0b 	call	0x1730	; 0x1730 <__cmpsf2>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:251
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
     a7e:	10 e0       	ldi	r17, 0x00	; 0
     a80:	00 e0       	ldi	r16, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:259
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
     a82:	87 ff       	sbrs	r24, 7
     a84:	08 c0       	rjmp	.+16     	; 0xa96 <Print::printFloat(double, unsigned char) [clone .constprop.5]+0xe0>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:261
  {
     n += print('-');
     a86:	8d e2       	ldi	r24, 0x2D	; 45
     a88:	0e 94 c5 01 	call	0x38a	; 0x38a <Print::print(char) [clone .constprop.63]>
     a8c:	8c 01       	movw	r16, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:262
     number = -number;
     a8e:	f7 fa       	bst	r15, 7
     a90:	f0 94       	com	r15
     a92:	f7 f8       	bld	r15, 7
     a94:	f0 94       	com	r15
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:267
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     a96:	c0 e0       	ldi	r28, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:266
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
     a98:	60 e0       	ldi	r22, 0x00	; 0
     a9a:	70 e0       	ldi	r23, 0x00	; 0
     a9c:	80 e0       	ldi	r24, 0x00	; 0
     a9e:	9f e3       	ldi	r25, 0x3F	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:267
  for (uint8_t i=0; i<digits; ++i)
     aa0:	7c 16       	cp	r7, r28
     aa2:	41 f0       	breq	.+16     	; 0xab4 <Print::printFloat(double, unsigned char) [clone .constprop.5]+0xfe>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:268
    rounding /= 10.0;
     aa4:	20 e0       	ldi	r18, 0x00	; 0
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	40 e2       	ldi	r20, 0x20	; 32
     aaa:	51 e4       	ldi	r21, 0x41	; 65
     aac:	0e 94 9d 0b 	call	0x173a	; 0x173a <__divsf3>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:267
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     ab0:	cf 5f       	subi	r28, 0xFF	; 255
     ab2:	f6 cf       	rjmp	.-20     	; 0xaa0 <Print::printFloat(double, unsigned char) [clone .constprop.5]+0xea>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:270
    rounding /= 10.0;

  number += rounding;
     ab4:	a7 01       	movw	r20, r14
     ab6:	96 01       	movw	r18, r12
     ab8:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__addsf3>
     abc:	2b 01       	movw	r4, r22
     abe:	3c 01       	movw	r6, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:273

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
     ac0:	0e 94 16 0c 	call	0x182c	; 0x182c <__fixunssfsi>
     ac4:	4b 01       	movw	r8, r22
     ac6:	5c 01       	movw	r10, r24
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:103
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     ac8:	4a e0       	ldi	r20, 0x0A	; 10
     aca:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.59]>
printFloat():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:275
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
     ace:	7c 01       	movw	r14, r24
     ad0:	e0 0e       	add	r14, r16
     ad2:	f1 1e       	adc	r15, r17
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:278

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
     ad4:	cc 23       	and	r28, r28
     ad6:	09 f4       	brne	.+2      	; 0xada <Print::printFloat(double, unsigned char) [clone .constprop.5]+0x124>
     ad8:	4b c0       	rjmp	.+150    	; 0xb70 <Print::printFloat(double, unsigned char) [clone .constprop.5]+0x1ba>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:274

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
     ada:	c5 01       	movw	r24, r10
     adc:	b4 01       	movw	r22, r8
     ade:	0e 94 45 0c 	call	0x188a	; 0x188a <__floatunsisf>
     ae2:	9b 01       	movw	r18, r22
     ae4:	ac 01       	movw	r20, r24
     ae6:	c3 01       	movw	r24, r6
     ae8:	b2 01       	movw	r22, r4
     aea:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__subsf3>
     aee:	4b 01       	movw	r8, r22
     af0:	5c 01       	movw	r10, r24
write():
     af2:	88 e2       	ldi	r24, 0x28	; 40
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <Print::write(char const*) [clone .part.2] [clone .constprop.61]>
printFloat():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:279
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
     afa:	e8 0e       	add	r14, r24
     afc:	f9 1e       	adc	r15, r25
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:283
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
     afe:	c1 50       	subi	r28, 0x01	; 1
     b00:	b8 f1       	brcs	.+110    	; 0xb70 <Print::printFloat(double, unsigned char) [clone .constprop.5]+0x1ba>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:285
  {
    remainder *= 10.0;
     b02:	20 e0       	ldi	r18, 0x00	; 0
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	40 e2       	ldi	r20, 0x20	; 32
     b08:	51 e4       	ldi	r21, 0x41	; 65
     b0a:	c5 01       	movw	r24, r10
     b0c:	b4 01       	movw	r22, r8
     b0e:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__mulsf3>
     b12:	2b 01       	movw	r4, r22
     b14:	3c 01       	movw	r6, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:286
    int toPrint = int(remainder);
     b16:	0e 94 0f 0c 	call	0x181e	; 0x181e <__fixsfsi>
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:76
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
     b1a:	4b 01       	movw	r8, r22
     b1c:	77 0f       	add	r23, r23
     b1e:	aa 08       	sbc	r10, r10
     b20:	bb 08       	sbc	r11, r11
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:89
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
     b22:	b7 fe       	sbrs	r11, 7
     b24:	1f c0       	rjmp	.+62     	; 0xb64 <Print::printFloat(double, unsigned char) [clone .constprop.5]+0x1ae>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:90
      int t = print('-');
     b26:	8d e2       	ldi	r24, 0x2D	; 45
     b28:	0e 94 c5 01 	call	0x38a	; 0x38a <Print::print(char) [clone .constprop.63]>
     b2c:	6c 01       	movw	r12, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:91
      n = -n;
     b2e:	66 27       	eor	r22, r22
     b30:	77 27       	eor	r23, r23
     b32:	cb 01       	movw	r24, r22
     b34:	68 19       	sub	r22, r8
     b36:	79 09       	sbc	r23, r9
     b38:	8a 09       	sbc	r24, r10
     b3a:	9b 09       	sbc	r25, r11
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:92
      return printNumber(n, 10) + t;
     b3c:	4a e0       	ldi	r20, 0x0A	; 10
     b3e:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.59]>
     b42:	8c 0d       	add	r24, r12
     b44:	9d 1d       	adc	r25, r13
printFloat():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:287
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
     b46:	e8 0e       	add	r14, r24
     b48:	f9 1e       	adc	r15, r25
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:288
    remainder -= toPrint;
     b4a:	c5 01       	movw	r24, r10
     b4c:	b4 01       	movw	r22, r8
     b4e:	0e 94 47 0c 	call	0x188e	; 0x188e <__floatsisf>
     b52:	9b 01       	movw	r18, r22
     b54:	ac 01       	movw	r20, r24
     b56:	c3 01       	movw	r24, r6
     b58:	b2 01       	movw	r22, r4
     b5a:	0e 94 2b 0b 	call	0x1656	; 0x1656 <__subsf3>
     b5e:	4b 01       	movw	r8, r22
     b60:	5c 01       	movw	r10, r24
     b62:	cd cf       	rjmp	.-102    	; 0xafe <Print::printFloat(double, unsigned char) [clone .constprop.5]+0x148>
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:94
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     b64:	4a e0       	ldi	r20, 0x0A	; 10
     b66:	c5 01       	movw	r24, r10
     b68:	b4 01       	movw	r22, r8
     b6a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.59]>
     b6e:	eb cf       	rjmp	.-42     	; 0xb46 <Print::printFloat(double, unsigned char) [clone .constprop.5]+0x190>
printFloat():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:292
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
     b70:	c7 01       	movw	r24, r14
     b72:	cf 91       	pop	r28
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
     b78:	ff 90       	pop	r15
     b7a:	ef 90       	pop	r14
     b7c:	df 90       	pop	r13
     b7e:	cf 90       	pop	r12
     b80:	bf 90       	pop	r11
     b82:	af 90       	pop	r10
     b84:	9f 90       	pop	r9
     b86:	8f 90       	pop	r8
     b88:	7f 90       	pop	r7
     b8a:	6f 90       	pop	r6
     b8c:	5f 90       	pop	r5
     b8e:	4f 90       	pop	r4
     b90:	08 95       	ret

00000b92 <Print::println(double, int) [clone .constprop.3]>:
println():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:186
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
     b92:	cf 93       	push	r28
     b94:	df 93       	push	r29
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:108
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
     b96:	42 e0       	ldi	r20, 0x02	; 2
     b98:	0e 94 db 04 	call	0x9b6	; 0x9b6 <Print::printFloat(double, unsigned char) [clone .constprop.5]>
     b9c:	ec 01       	movw	r28, r24
println():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:189
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
     b9e:	0e 94 ca 01 	call	0x394	; 0x394 <Print::println() [clone .constprop.62]>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:191
  return n;
}
     ba2:	8c 0f       	add	r24, r28
     ba4:	9d 1f       	adc	r25, r29
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28
     baa:	08 95       	ret

00000bac <__vector_17>:
__vector_17():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial0.cpp:63
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     bac:	1f 92       	push	r1
     bae:	0f 92       	push	r0
     bb0:	0f b6       	in	r0, 0x3f	; 63
     bb2:	0f 92       	push	r0
     bb4:	11 24       	eor	r1, r1
     bb6:	2f 93       	push	r18
     bb8:	3f 93       	push	r19
     bba:	4f 93       	push	r20
     bbc:	5f 93       	push	r21
     bbe:	6f 93       	push	r22
     bc0:	7f 93       	push	r23
     bc2:	8f 93       	push	r24
     bc4:	9f 93       	push	r25
     bc6:	af 93       	push	r26
     bc8:	bf 93       	push	r27
     bca:	ef 93       	push	r30
     bcc:	ff 93       	push	r31
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
     bce:	8b eb       	ldi	r24, 0xBB	; 187
     bd0:	91 e0       	ldi	r25, 0x01	; 1
     bd2:	0e 94 59 01 	call	0x2b2	; 0x2b2 <HardwareSerial::_tx_udr_empty_irq()>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial0.cpp:65
}
     bd6:	ff 91       	pop	r31
     bd8:	ef 91       	pop	r30
     bda:	bf 91       	pop	r27
     bdc:	af 91       	pop	r26
     bde:	9f 91       	pop	r25
     be0:	8f 91       	pop	r24
     be2:	7f 91       	pop	r23
     be4:	6f 91       	pop	r22
     be6:	5f 91       	pop	r21
     be8:	4f 91       	pop	r20
     bea:	3f 91       	pop	r19
     bec:	2f 91       	pop	r18
     bee:	0f 90       	pop	r0
     bf0:	0f be       	out	0x3f, r0	; 63
     bf2:	0f 90       	pop	r0
     bf4:	1f 90       	pop	r1
     bf6:	18 95       	reti

00000bf8 <__vector_16>:
__vector_16():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial0.cpp:48
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     bf8:	1f 92       	push	r1
     bfa:	0f 92       	push	r0
     bfc:	0f b6       	in	r0, 0x3f	; 63
     bfe:	0f 92       	push	r0
     c00:	11 24       	eor	r1, r1
     c02:	2f 93       	push	r18
     c04:	8f 93       	push	r24
     c06:	9f 93       	push	r25
     c08:	ef 93       	push	r30
     c0a:	ff 93       	push	r31
_rx_complete_irq():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     c0c:	e0 91 cb 01 	lds	r30, 0x01CB	; 0x8001cb <Serial+0x10>
     c10:	f0 91 cc 01 	lds	r31, 0x01CC	; 0x8001cc <Serial+0x11>
     c14:	80 81       	ld	r24, Z
     c16:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <Serial+0x16>
     c1a:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <Serial+0x17>
     c1e:	82 fd       	sbrc	r24, 2
     c20:	1b c0       	rjmp	.+54     	; 0xc58 <__vector_16+0x60>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     c22:	90 81       	ld	r25, Z
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     c24:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <Serial+0x19>
     c28:	8f 5f       	subi	r24, 0xFF	; 255
     c2a:	8f 71       	andi	r24, 0x1F	; 31
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     c2c:	20 91 d5 01 	lds	r18, 0x01D5	; 0x8001d5 <Serial+0x1a>
     c30:	82 17       	cp	r24, r18
     c32:	41 f0       	breq	.+16     	; 0xc44 <__vector_16+0x4c>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
     c34:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <Serial+0x19>
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	e5 54       	subi	r30, 0x45	; 69
     c3c:	fe 4f       	sbci	r31, 0xFE	; 254
     c3e:	95 8f       	std	Z+29, r25	; 0x1d
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial_private.h:115
      _rx_buffer_head = i;
     c40:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <Serial+0x19>
__vector_16():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial0.cpp:50
    Serial._rx_complete_irq();
  }
     c44:	ff 91       	pop	r31
     c46:	ef 91       	pop	r30
     c48:	9f 91       	pop	r25
     c4a:	8f 91       	pop	r24
     c4c:	2f 91       	pop	r18
     c4e:	0f 90       	pop	r0
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	0f 90       	pop	r0
     c54:	1f 90       	pop	r1
     c56:	18 95       	reti
_rx_complete_irq():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     c58:	80 81       	ld	r24, Z
     c5a:	f4 cf       	rjmp	.-24     	; 0xc44 <__vector_16+0x4c>

00000c5c <__vector_12>:
__vector_12():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:86
volatile unsigned long millis_timer_overflow_count = 0;
volatile unsigned long millis_timer_millis = 0;
static unsigned char millis_timer_fract = 0;

ISR(MILLISTIMER_OVF_vect)
{
     c5c:	1f 92       	push	r1
     c5e:	0f 92       	push	r0
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	0f 92       	push	r0
     c64:	11 24       	eor	r1, r1
     c66:	2f 93       	push	r18
     c68:	3f 93       	push	r19
     c6a:	8f 93       	push	r24
     c6c:	9f 93       	push	r25
     c6e:	af 93       	push	r26
     c70:	bf 93       	push	r27
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:89
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access)
  unsigned long m = millis_timer_millis;
     c72:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <millis_timer_millis>
     c76:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <millis_timer_millis+0x1>
     c7a:	a0 91 a6 01 	lds	r26, 0x01A6	; 0x8001a6 <millis_timer_millis+0x2>
     c7e:	b0 91 a7 01 	lds	r27, 0x01A7	; 0x8001a7 <millis_timer_millis+0x3>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:90
  unsigned char f = millis_timer_fract;
     c82:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <millis_timer_fract>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:102
    f -= FRACT_MAX;
    m += 1;
  }
...rmv */

  f += FRACT_INC;
     c86:	26 e0       	ldi	r18, 0x06	; 6
     c88:	23 0f       	add	r18, r19
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:104

  if (f >= FRACT_MAX)
     c8a:	2d 37       	cpi	r18, 0x7D	; 125
     c8c:	68 f1       	brcs	.+90     	; 0xce8 <__vector_12+0x8c>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:106
  {
    f -= FRACT_MAX;
     c8e:	29 e8       	ldi	r18, 0x89	; 137
     c90:	23 0f       	add	r18, r19
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:107
    m = m + MILLIS_INC + 1;
     c92:	03 96       	adiw	r24, 0x03	; 3
     c94:	a1 1d       	adc	r26, r1
     c96:	b1 1d       	adc	r27, r1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:114
  else
  {
    m += MILLIS_INC;
  }

  millis_timer_fract = f;
     c98:	20 93 a3 01 	sts	0x01A3, r18	; 0x8001a3 <millis_timer_fract>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:115
  millis_timer_millis = m;
     c9c:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <millis_timer_millis>
     ca0:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <millis_timer_millis+0x1>
     ca4:	a0 93 a6 01 	sts	0x01A6, r26	; 0x8001a6 <millis_timer_millis+0x2>
     ca8:	b0 93 a7 01 	sts	0x01A7, r27	; 0x8001a7 <millis_timer_millis+0x3>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:116
  millis_timer_overflow_count++;
     cac:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <millis_timer_overflow_count>
     cb0:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <millis_timer_overflow_count+0x1>
     cb4:	a0 91 aa 01 	lds	r26, 0x01AA	; 0x8001aa <millis_timer_overflow_count+0x2>
     cb8:	b0 91 ab 01 	lds	r27, 0x01AB	; 0x8001ab <millis_timer_overflow_count+0x3>
     cbc:	01 96       	adiw	r24, 0x01	; 1
     cbe:	a1 1d       	adc	r26, r1
     cc0:	b1 1d       	adc	r27, r1
     cc2:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <millis_timer_overflow_count>
     cc6:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <millis_timer_overflow_count+0x1>
     cca:	a0 93 aa 01 	sts	0x01AA, r26	; 0x8001aa <millis_timer_overflow_count+0x2>
     cce:	b0 93 ab 01 	sts	0x01AB, r27	; 0x8001ab <millis_timer_overflow_count+0x3>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:117
}
     cd2:	bf 91       	pop	r27
     cd4:	af 91       	pop	r26
     cd6:	9f 91       	pop	r25
     cd8:	8f 91       	pop	r24
     cda:	3f 91       	pop	r19
     cdc:	2f 91       	pop	r18
     cde:	0f 90       	pop	r0
     ce0:	0f be       	out	0x3f, r0	; 63
     ce2:	0f 90       	pop	r0
     ce4:	1f 90       	pop	r1
     ce6:	18 95       	reti
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:111
    f -= FRACT_MAX;
    m = m + MILLIS_INC + 1;
  }
  else
  {
    m += MILLIS_INC;
     ce8:	02 96       	adiw	r24, 0x02	; 2
     cea:	a1 1d       	adc	r26, r1
     cec:	b1 1d       	adc	r27, r1
     cee:	d4 cf       	rjmp	.-88     	; 0xc98 <__vector_12+0x3c>

00000cf0 <__vector_24>:
__vector_24():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:207
/*----------------------------------------------------------
 Handles all the communication. Is disabled only when waiting
 for new Start Condition.
----------------------------------------------------------*/
ISR(USI_OVERFLOW_VECTOR)
{
     cf0:	1f 92       	push	r1
     cf2:	0f 92       	push	r0
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	0f 92       	push	r0
     cf8:	11 24       	eor	r1, r1
     cfa:	2f 93       	push	r18
     cfc:	8f 93       	push	r24
     cfe:	9f 93       	push	r25
     d00:	ef 93       	push	r30
     d02:	ff 93       	push	r31
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:212
  unsigned char tmpRxHead;
  unsigned char tmpTxTail; // Temporary variables to store volatiles
  unsigned char tmpUSIDR;

  switch (USI_TWI_Overflow_State) {
     d04:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <USI_TWI_Overflow_State>
     d08:	82 30       	cpi	r24, 0x02	; 2
     d0a:	09 f4       	brne	.+2      	; 0xd0e <__vector_24+0x1e>
     d0c:	5f c0       	rjmp	.+190    	; 0xdcc <__vector_24+0xdc>
     d0e:	78 f4       	brcc	.+30     	; 0xd2e <__vector_24+0x3e>
     d10:	88 23       	and	r24, r24
     d12:	49 f1       	breq	.+82     	; 0xd66 <__vector_24+0x76>
     d14:	81 30       	cpi	r24, 0x01	; 1
     d16:	09 f4       	brne	.+2      	; 0xd1a <__vector_24+0x2a>
     d18:	3f c0       	rjmp	.+126    	; 0xd98 <__vector_24+0xa8>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:306
    {
      SET_USI_TO_SEND_NACK();
    }
    break;
  }
}
     d1a:	ff 91       	pop	r31
     d1c:	ef 91       	pop	r30
     d1e:	9f 91       	pop	r25
     d20:	8f 91       	pop	r24
     d22:	2f 91       	pop	r18
     d24:	0f 90       	pop	r0
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	0f 90       	pop	r0
     d2a:	1f 90       	pop	r1
     d2c:	18 95       	reti
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:212
{
  unsigned char tmpRxHead;
  unsigned char tmpTxTail; // Temporary variables to store volatiles
  unsigned char tmpUSIDR;

  switch (USI_TWI_Overflow_State) {
     d2e:	84 30       	cpi	r24, 0x04	; 4
     d30:	09 f4       	brne	.+2      	; 0xd34 <__vector_24+0x44>
     d32:	52 c0       	rjmp	.+164    	; 0xdd8 <__vector_24+0xe8>
     d34:	50 f1       	brcs	.+84     	; 0xd8a <__vector_24+0x9a>
     d36:	85 30       	cpi	r24, 0x05	; 5
     d38:	81 f7       	brne	.-32     	; 0xd1a <__vector_24+0x2a>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:293
    break;

  // Copy data from USIDR and send ACK. Next USI_SLAVE_REQUEST_DATA
  case USI_SLAVE_GET_DATA_AND_SEND_ACK:
    // Put data into Buffer
    USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <USI_TWI_Overflow_State>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:294
    tmpUSIDR              = USIDR; // Not necessary, but prevents warnings
     d40:	9c b5       	in	r25, 0x2c	; 44
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:295
    tmpRxHead = (TWI_RxHead + 1) & TWI_RX_BUFFER_MASK;
     d42:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <TWI_RxHead>
     d46:	8f 5f       	subi	r24, 0xFF	; 255
     d48:	8f 70       	andi	r24, 0x0F	; 15
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:296
    if (TWI_RxTail != tmpRxHead) {
     d4a:	20 91 ad 01 	lds	r18, 0x01AD	; 0x8001ad <TWI_RxTail>
     d4e:	28 17       	cp	r18, r24
     d50:	09 f4       	brne	.+2      	; 0xd54 <__vector_24+0x64>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__vector_24+0xf2>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:297
      TWI_RxHead            = tmpRxHead;
     d54:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <TWI_RxHead>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:298
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
     d58:	e0 91 ac 01 	lds	r30, 0x01AC	; 0x8001ac <TWI_RxHead>
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	ee 57       	subi	r30, 0x7E	; 126
     d60:	fe 4f       	sbci	r31, 0xFE	; 254
     d62:	90 83       	st	Z, r25
     d64:	0c c0       	rjmp	.+24     	; 0xd7e <__vector_24+0x8e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:216

  switch (USI_TWI_Overflow_State) {
  // ---------- Address mode ----------
  // Check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK, else reset USI.
  case USI_SLAVE_CHECK_ADDRESS:
    if ((USIDR == 0) || ((USIDR >> 1) == TWI_slaveAddress)) {
     d66:	8c b5       	in	r24, 0x2c	; 44
     d68:	88 23       	and	r24, r24
     d6a:	19 f0       	breq	.+6      	; 0xd72 <__vector_24+0x82>
     d6c:	8c b5       	in	r24, 0x2c	; 44
     d6e:	86 95       	lsr	r24
     d70:	79 f4       	brne	.+30     	; 0xd90 <__vector_24+0xa0>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:217
      if (USIDR & 0x01) {
     d72:	0c b4       	in	r0, 0x2c	; 44
     d74:	00 fe       	sbrs	r0, 0
     d76:	07 c0       	rjmp	.+14     	; 0xd86 <__vector_24+0x96>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:224
          // reset tx buffer and call callback
          tmpTxTail = TWI_TxHead;
          TWI_TxTail = tmpTxTail;
          USI_TWI_On_Slave_Transmit();
        }
        USI_TWI_Overflow_State = USI_SLAVE_SEND_DATA;
     d78:	81 e0       	ldi	r24, 0x01	; 1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:226
      } else {
        USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
     d7a:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <USI_TWI_Overflow_State>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:228
      }
      SET_USI_TO_SEND_ACK();
     d7e:	1c bc       	out	0x2c, r1	; 44
     d80:	61 9a       	sbi	0x0c, 1	; 12
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:302
      TWI_RxHead            = tmpRxHead;
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
      SET_USI_TO_SEND_ACK();
    } else // If the buffer is full then:
    {
      SET_USI_TO_SEND_NACK();
     d82:	8e e7       	ldi	r24, 0x7E	; 126
     d84:	21 c0       	rjmp	.+66     	; 0xdc8 <__vector_24+0xd8>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:226
          TWI_TxTail = tmpTxTail;
          USI_TWI_On_Slave_Transmit();
        }
        USI_TWI_Overflow_State = USI_SLAVE_SEND_DATA;
      } else {
        USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
     d86:	84 e0       	ldi	r24, 0x04	; 4
     d88:	f8 cf       	rjmp	.-16     	; 0xd7a <__vector_24+0x8a>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:237
    break;

  // ----- Master write data mode ------
  // Check reply and goto USI_SLAVE_SEND_DATA if OK, else reset USI.
  case USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA:
    if (USIDR) // If NACK, the master does not want more data.
     d8a:	8c b5       	in	r24, 0x2c	; 44
     d8c:	88 23       	and	r24, r24
     d8e:	21 f0       	breq	.+8      	; 0xd98 <__vector_24+0xa8>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:255
    if (TWI_TxHead != tmpTxTail) {
      TWI_TxTail = (TWI_TxTail + 1) & TWI_TX_BUFFER_MASK;
      USIDR      = TWI_TxBuf[TWI_TxTail];
    } else // If the buffer is empty then:
    {
      SET_USI_TO_TWI_START_CONDITION_MODE();
     d90:	61 98       	cbi	0x0c, 1	; 12
     d92:	88 ea       	ldi	r24, 0xA8	; 168
     d94:	8a bd       	out	0x2a, r24	; 42
     d96:	17 c0       	rjmp	.+46     	; 0xdc6 <__vector_24+0xd6>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:249
  // Copy data from buffer to USIDR and set USI to shift byte. Next USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA
  /* Falls through. */
  case USI_SLAVE_SEND_DATA:

    // Get data from Buffer
    tmpTxTail = TWI_TxTail; // Not necessary, but prevents warnings
     d98:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <TWI_TxTail>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:250
    if (TWI_TxHead != tmpTxTail) {
     d9c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <TWI_TxHead>
     da0:	98 17       	cp	r25, r24
     da2:	b1 f3       	breq	.-20     	; 0xd90 <__vector_24+0xa0>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:251
      TWI_TxTail = (TWI_TxTail + 1) & TWI_TX_BUFFER_MASK;
     da4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <TWI_TxTail>
     da8:	8f 5f       	subi	r24, 0xFF	; 255
     daa:	8f 70       	andi	r24, 0x0F	; 15
     dac:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <TWI_TxTail>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:252
      USIDR      = TWI_TxBuf[TWI_TxTail];
     db0:	e0 91 b6 01 	lds	r30, 0x01B6	; 0x8001b6 <TWI_TxTail>
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	ee 56       	subi	r30, 0x6E	; 110
     db8:	fe 4f       	sbci	r31, 0xFE	; 254
     dba:	80 81       	ld	r24, Z
     dbc:	8c bd       	out	0x2c, r24	; 44
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:258
    } else // If the buffer is empty then:
    {
      SET_USI_TO_TWI_START_CONDITION_MODE();
      return;
    }
    USI_TWI_Overflow_State = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
     dbe:	82 e0       	ldi	r24, 0x02	; 2
     dc0:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <USI_TWI_Overflow_State>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:259
    SET_USI_TO_SEND_DATA();
     dc4:	61 9a       	sbi	0x0c, 1	; 12
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:272

  // ----- Master read data mode ------
  // Set USI to sample data from master. Next USI_SLAVE_GET_DATA_AND_SEND_ACK.
  case USI_SLAVE_REQUEST_DATA:
    USI_TWI_Overflow_State = USI_SLAVE_GET_DATA_AND_SEND_ACK;
    SET_USI_TO_READ_DATA();
     dc6:	80 e7       	ldi	r24, 0x70	; 112
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:302
      TWI_RxHead            = tmpRxHead;
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
      SET_USI_TO_SEND_ACK();
    } else // If the buffer is full then:
    {
      SET_USI_TO_SEND_NACK();
     dc8:	8b bd       	out	0x2b, r24	; 43
     dca:	a7 cf       	rjmp	.-178    	; 0xd1a <__vector_24+0x2a>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:264
    SET_USI_TO_SEND_DATA();
    break;

  // Set USI to sample reply from master. Next USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA
  case USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA:
    USI_TWI_Overflow_State = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
     dcc:	83 e0       	ldi	r24, 0x03	; 3
     dce:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <USI_TWI_Overflow_State>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:265
    SET_USI_TO_READ_ACK();
     dd2:	61 98       	cbi	0x0c, 1	; 12
     dd4:	1c bc       	out	0x2c, r1	; 44
     dd6:	d5 cf       	rjmp	.-86     	; 0xd82 <__vector_24+0x92>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:271
    break;

  // ----- Master read data mode ------
  // Set USI to sample data from master. Next USI_SLAVE_GET_DATA_AND_SEND_ACK.
  case USI_SLAVE_REQUEST_DATA:
    USI_TWI_Overflow_State = USI_SLAVE_GET_DATA_AND_SEND_ACK;
     dd8:	85 e0       	ldi	r24, 0x05	; 5
     dda:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <USI_TWI_Overflow_State>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:272
    SET_USI_TO_READ_DATA();
     dde:	61 98       	cbi	0x0c, 1	; 12
     de0:	f2 cf       	rjmp	.-28     	; 0xdc6 <__vector_24+0xd6>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:302
      TWI_RxHead            = tmpRxHead;
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
      SET_USI_TO_SEND_ACK();
    } else // If the buffer is full then:
    {
      SET_USI_TO_SEND_NACK();
     de2:	61 98       	cbi	0x0c, 1	; 12
     de4:	ce cf       	rjmp	.-100    	; 0xd82 <__vector_24+0x92>

00000de6 <__vector_23>:
__vector_23():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:165
ISR(USI_START_VECTOR)
#elif __ICCAVR__
#pragma vector = USI_START_VECTOR
__interrupt void USI_Start_Condition_ISR(void)
#endif
{
     de6:	1f 92       	push	r1
     de8:	0f 92       	push	r0
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	0f 92       	push	r0
     dee:	11 24       	eor	r1, r1
     df0:	8f 93       	push	r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:178
      // reset rx buffer
      TWI_RxTail = tmpRxHead;
    }
  }

  USI_TWI_Overflow_State = USI_SLAVE_CHECK_ADDRESS;
     df2:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <USI_TWI_Overflow_State>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:179
  DDR_USI &= ~(1 << PORT_USI_SDA); // Set SDA as input
     df6:	61 98       	cbi	0x0c, 1	; 12
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:180
  while ((tmpPin = (PIN_USI_CL & (1 << PORT_USI_SCL))) && ((PIN_USI & (1 << PIN_USI_SDA)) == 0))
     df8:	39 9b       	sbis	0x07, 1	; 7
     dfa:	04 c0       	rjmp	.+8      	; 0xe04 <__vector_23+0x1e>
     dfc:	59 9b       	sbis	0x0b, 1	; 11
     dfe:	fc cf       	rjmp	.-8      	; 0xdf8 <__vector_23+0x12>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:185
    ; // Wait for SCL to go low to ensure the "Start Condition" has completed.
        // If a Stop condition arises then leave the interrupt to prevent waiting forever.
  if (tmpPin) {
    // Stop Condition (waiting for next Start Condition)
    USICR = (1 << USISIE) | (0 << USIOIE) | // Enable Start Condition Interrupt. Disable Overflow Interrupt.
     e00:	88 ea       	ldi	r24, 0xA8	; 168
     e02:	01 c0       	rjmp	.+2      	; 0xe06 <__vector_23+0x20>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:192
                                            // to first Start Condition (potential failure)
            (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
            (0 << USITC);
  } else {
    // really Start Condition (Enable Overflow Interrupt)
    USICR = (1 << USISIE) | (1 << USIOIE)
     e04:	88 ef       	ldi	r24, 0xF8	; 248
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:185
  while ((tmpPin = (PIN_USI_CL & (1 << PORT_USI_SCL))) && ((PIN_USI & (1 << PIN_USI_SDA)) == 0))
    ; // Wait for SCL to go low to ensure the "Start Condition" has completed.
        // If a Stop condition arises then leave the interrupt to prevent waiting forever.
  if (tmpPin) {
    // Stop Condition (waiting for next Start Condition)
    USICR = (1 << USISIE) | (0 << USIOIE) | // Enable Start Condition Interrupt. Disable Overflow Interrupt.
     e06:	8a bd       	out	0x2a, r24	; 42
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:198
            | // Enable Overflow and Start Condition Interrupt. (Keep StartCondInt to detect RESTART)
            (1 << USIWM1) | (1 << USIWM0) |                 // Set USI in Two-wire mode.
            (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
            (0 << USITC);
  }
  USISR = (1 << USI_START_COND_INT) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC) | // Clear flags
     e08:	80 ef       	ldi	r24, 0xF0	; 240
     e0a:	8b bd       	out	0x2b, r24	; 43
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:200
          (0x0 << USICNT0); // Set USI to sample 8 bits i.e. count 16 external pin toggles.
}
     e0c:	8f 91       	pop	r24
     e0e:	0f 90       	pop	r0
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	0f 90       	pop	r0
     e14:	1f 90       	pop	r1
     e16:	18 95       	reti

00000e18 <__vector_1>:
__vector_1():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:110
        Serial.print("Mode :");
        Serial.println(log_mode);
    }
}

ISR(INT0_vect) {
     e18:	1f 92       	push	r1
     e1a:	0f 92       	push	r0
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	0f 92       	push	r0
     e20:	11 24       	eor	r1, r1
     e22:	8f 93       	push	r24
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:111
    alt_data.newDataReady = true;
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <alt_data+0x9>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:112
}
     e2a:	8f 91       	pop	r24
     e2c:	0f 90       	pop	r0
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	0f 90       	pop	r0
     e32:	1f 90       	pop	r1
     e34:	18 95       	reti

00000e36 <__vector_4>:
__vector_4():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:101
        digitalWrite(LED0, LOW);
    }
    //GOTO sleep
}

ISR(PCINT2_vect) {
     e36:	1f 92       	push	r1
     e38:	0f 92       	push	r0
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	0f 92       	push	r0
     e3e:	11 24       	eor	r1, r1
     e40:	2f 93       	push	r18
     e42:	3f 93       	push	r19
     e44:	4f 93       	push	r20
     e46:	5f 93       	push	r21
     e48:	6f 93       	push	r22
     e4a:	7f 93       	push	r23
     e4c:	8f 93       	push	r24
     e4e:	9f 93       	push	r25
     e50:	af 93       	push	r26
     e52:	bf 93       	push	r27
     e54:	ef 93       	push	r30
     e56:	ff 93       	push	r31
digitalRead():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:248
#endif

int digitalRead(uint8_t pin)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t bit = digitalPinToBitMask(pin);
     e58:	ef e9       	ldi	r30, 0x9F	; 159
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	84 91       	lpm	r24, Z
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:249
  uint8_t port = digitalPinToPort(pin);
     e5e:	ed e8       	ldi	r30, 0x8D	; 141
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	e4 91       	lpm	r30, Z
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:251

  if (port == NOT_A_PIN) return LOW;
     e64:	ee 23       	and	r30, r30
     e66:	41 f0       	breq	.+16     	; 0xe78 <__vector_4+0x42>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:259
  // "read" should *NEVER* change the behavior of the thing you're using it on.
  // That's why it's called "read" not "write". As an added bonus, sets the
  // stage for auto-fast-digitalRead() for compile time known pins.
  // turnOffPWM( pin );

  if (*portInputRegister(port) & bit) return HIGH;
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	e0 59       	subi	r30, 0x90	; 144
     e6c:	ff 4f       	sbci	r31, 0xFF	; 255
     e6e:	a4 91       	lpm	r26, Z
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	ec 91       	ld	r30, X
     e74:	e8 23       	and	r30, r24
     e76:	a9 f4       	brne	.+42     	; 0xea2 <__vector_4+0x6c>
__vector_4():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:104

    if (!digitalRead(USER_SW)) {
        if (++log_mode > 4)log_mode = 0;
     e78:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <log_mode>
     e7c:	8f 5f       	subi	r24, 0xFF	; 255
     e7e:	85 30       	cpi	r24, 0x05	; 5
     e80:	08 f5       	brcc	.+66     	; 0xec4 <__vector_4+0x8e>
     e82:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <log_mode>
write():
     e86:	8a e7       	ldi	r24, 0x7A	; 122
     e88:	91 e0       	ldi	r25, 0x01	; 1
     e8a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <Print::write(char const*) [clone .part.2] [clone .constprop.61]>
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:71
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
     e8e:	60 91 af 01 	lds	r22, 0x01AF	; 0x8001af <log_mode>
     e92:	70 e0       	ldi	r23, 0x00	; 0
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	80 e0       	ldi	r24, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:103
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     e98:	4a e0       	ldi	r20, 0x0A	; 10
     e9a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.59]>
println():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:154
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
     e9e:	0e 94 ca 01 	call	0x394	; 0x394 <Print::println() [clone .constprop.62]>
__vector_4():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:108
        Serial.print("Mode :");
        Serial.println(log_mode);
    }
}
     ea2:	ff 91       	pop	r31
     ea4:	ef 91       	pop	r30
     ea6:	bf 91       	pop	r27
     ea8:	af 91       	pop	r26
     eaa:	9f 91       	pop	r25
     eac:	8f 91       	pop	r24
     eae:	7f 91       	pop	r23
     eb0:	6f 91       	pop	r22
     eb2:	5f 91       	pop	r21
     eb4:	4f 91       	pop	r20
     eb6:	3f 91       	pop	r19
     eb8:	2f 91       	pop	r18
     eba:	0f 90       	pop	r0
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	0f 90       	pop	r0
     ec0:	1f 90       	pop	r1
     ec2:	18 95       	reti
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:104
}

ISR(PCINT2_vect) {

    if (!digitalRead(USER_SW)) {
        if (++log_mode > 4)log_mode = 0;
     ec4:	10 92 af 01 	sts	0x01AF, r1	; 0x8001af <log_mode>
     ec8:	de cf       	rjmp	.-68     	; 0xe86 <__vector_4+0x50>

00000eca <global constructors keyed to 65535_0_Alt.cpp.o.2381>:
_GLOBAL__I_65535_0_Alt.cpp.o.2381():
     eca:	eb eb       	ldi	r30, 0xBB	; 187
     ecc:	f1 e0       	ldi	r31, 0x01	; 1
     ece:	13 82       	std	Z+3, r1	; 0x03
     ed0:	12 82       	std	Z+2, r1	; 0x02
     ed2:	88 ee       	ldi	r24, 0xE8	; 232
     ed4:	93 e0       	ldi	r25, 0x03	; 3
     ed6:	a0 e0       	ldi	r26, 0x00	; 0
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	84 83       	std	Z+4, r24	; 0x04
     edc:	95 83       	std	Z+5, r25	; 0x05
     ede:	a6 83       	std	Z+6, r26	; 0x06
     ee0:	b7 83       	std	Z+7, r27	; 0x07
     ee2:	8e e0       	ldi	r24, 0x0E	; 14
     ee4:	91 e0       	ldi	r25, 0x01	; 1
     ee6:	91 83       	std	Z+1, r25	; 0x01
     ee8:	80 83       	st	Z, r24
     eea:	82 e4       	ldi	r24, 0x42	; 66
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	95 87       	std	Z+13, r25	; 0x0d
     ef0:	84 87       	std	Z+12, r24	; 0x0c
     ef2:	81 e4       	ldi	r24, 0x41	; 65
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	97 87       	std	Z+15, r25	; 0x0f
     ef8:	86 87       	std	Z+14, r24	; 0x0e
     efa:	86 e4       	ldi	r24, 0x46	; 70
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	91 8b       	std	Z+17, r25	; 0x11
     f00:	80 8b       	std	Z+16, r24	; 0x10
     f02:	85 e4       	ldi	r24, 0x45	; 69
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	93 8b       	std	Z+19, r25	; 0x13
     f08:	82 8b       	std	Z+18, r24	; 0x12
     f0a:	84 e4       	ldi	r24, 0x44	; 68
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	95 8b       	std	Z+21, r25	; 0x15
     f10:	84 8b       	std	Z+20, r24	; 0x14
     f12:	80 e4       	ldi	r24, 0x40	; 64
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	97 8b       	std	Z+23, r25	; 0x17
     f18:	86 8b       	std	Z+22, r24	; 0x16
     f1a:	11 8e       	std	Z+25, r1	; 0x19
     f1c:	12 8e       	std	Z+26, r1	; 0x1a
     f1e:	13 8e       	std	Z+27, r1	; 0x1b
     f20:	14 8e       	std	Z+28, r1	; 0x1c
     f22:	e2 e2       	ldi	r30, 0x22	; 34
     f24:	f2 e0       	ldi	r31, 0x02	; 2
     f26:	88 e0       	ldi	r24, 0x08	; 8
     f28:	80 83       	st	Z, r24
     f2a:	82 e0       	ldi	r24, 0x02	; 2
     f2c:	81 83       	std	Z+1, r24	; 0x01
     f2e:	14 82       	std	Z+4, r1	; 0x04
     f30:	80 e2       	ldi	r24, 0x20	; 32
     f32:	85 83       	std	Z+5, r24	; 0x05
     f34:	16 82       	std	Z+6, r1	; 0x06
     f36:	85 e0       	ldi	r24, 0x05	; 5
     f38:	84 87       	std	Z+12, r24	; 0x0c
     f3a:	17 82       	std	Z+7, r1	; 0x07
     f3c:	e8 e1       	ldi	r30, 0x18	; 24
     f3e:	f2 e0       	ldi	r31, 0x02	; 2
     f40:	80 e2       	ldi	r24, 0x20	; 32
     f42:	98 e0       	ldi	r25, 0x08	; 8
     f44:	a0 e0       	ldi	r26, 0x00	; 0
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	85 83       	std	Z+5, r24	; 0x05
     f4a:	96 83       	std	Z+6, r25	; 0x06
     f4c:	a7 83       	std	Z+7, r26	; 0x07
     f4e:	b0 87       	std	Z+8, r27	; 0x08
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	81 87       	std	Z+9, r24	; 0x09
     f54:	08 95       	ret

00000f56 <main>:
init():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:572
  #else
  CLKPR=1<<CLKPCE; //enable change of protected register
  #endif
  CLKPR=1; //prescale by 2 for 4MHz
  #endif
  sei();
     f56:	78 94       	sei
Timer0_SetWaveformGenerationMode():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:677
}
timer0_wgm_t;

__attribute__((always_inline)) static inline void Timer0_SetWaveformGenerationMode( timer0_wgm_t wgm )
{
  TCCR0A = (TCCR0A & ~MASK2(WGM01,WGM00)) | (((wgm & B011) >> 0) << WGM00);
     f58:	8b b3       	in	r24, 0x1b	; 27
     f5a:	83 60       	ori	r24, 0x03	; 3
     f5c:	8b bb       	out	0x1b, r24	; 27
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:678
  TCCR0B = (TCCR0B & ~MASK1(WGM02))       | (((wgm & B100) >> 2) << WGM02);
     f5e:	d3 98       	cbi	0x1a, 3	; 26
Timer0_ClockSelect():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:659
}
timer0_cs_t;

__attribute__((always_inline)) static inline void Timer0_ClockSelect( timer0_cs_t cs )
{
  TCCR0B = (TCCR0B & ~MASK3(CS02,CS01,CS00)) | (cs << CS00);
     f60:	8a b3       	in	r24, 0x1a	; 26
     f62:	88 7f       	andi	r24, 0xF8	; 248
     f64:	82 60       	ori	r24, 0x02	; 2
     f66:	8a bb       	out	0x1a, r24	; 26
Timer0_EnableOverflowInterrupt():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:733
  TIMSK |= (1<<OCIE0A);
}

__attribute__((always_inline)) static inline void Timer0_EnableOverflowInterrupt( void )
{
  TIMSK |= (1<<TOIE0);
     f68:	8a b7       	in	r24, 0x3a	; 58
     f6a:	82 60       	ori	r24, 0x02	; 2
     f6c:	8a bf       	out	0x3a, r24	; 58
Timer1_ClockSelect():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:811
}
timer1_cs_t;

__attribute__((always_inline)) static inline void Timer1_ClockSelect( timer1_cs_t cs )
{
  TCCR1B = (TCCR1B & ~MASK3(CS12,CS11,CS10)) | (cs << CS10);
     f6e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
     f72:	88 7f       	andi	r24, 0xF8	; 248
     f74:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
Timer1_SetWaveformGenerationMode():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:837
}
timer1_wgm_t;

__attribute__((always_inline)) static inline void Timer1_SetWaveformGenerationMode( timer1_wgm_t wgm )
{
  TCCR1A = (TCCR1A & ~MASK2(WGM11,WGM10)) | (((wgm & B0011) >> 0) << WGM10);
     f78:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__DATA_REGION_ORIGIN__+0x12>
     f7c:	8c 7f       	andi	r24, 0xFC	; 252
     f7e:	81 60       	ori	r24, 0x01	; 1
     f80:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__DATA_REGION_ORIGIN__+0x12>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:838
  TCCR1B = (TCCR1B & ~MASK2(WGM13,WGM12)) | (((wgm & B1100) >> 2) << WGM12);
     f84:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
     f88:	87 7e       	andi	r24, 0xE7	; 231
     f8a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
Timer1_ClockSelect():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:811
}
timer1_cs_t;

__attribute__((always_inline)) static inline void Timer1_ClockSelect( timer1_cs_t cs )
{
  TCCR1B = (TCCR1B & ~MASK3(CS12,CS11,CS10)) | (cs << CS10);
     f8e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
     f92:	88 7f       	andi	r24, 0xF8	; 248
     f94:	82 60       	ori	r24, 0x02	; 2
     f96:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
ADC_PrescalerSelect():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_adc.h:89
}
adc_ps_t;

__attribute__((always_inline)) static inline void ADC_PrescalerSelect( adc_ps_t ps )
{
  ADCSRA = (ADCSRA & ~MASK3(ADPS2,ADPS1,ADPS0)) | (ps << ADPS0);
     f9a:	83 b1       	in	r24, 0x03	; 3
     f9c:	88 7f       	andi	r24, 0xF8	; 248
     f9e:	83 60       	ori	r24, 0x03	; 3
     fa0:	83 b9       	out	0x03, r24	; 3
ADC_Enable():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_adc.h:94
}

__attribute__((always_inline)) static inline void ADC_Enable( void )
{
  ADCSRA |= MASK1( ADEN );
     fa2:	1f 9a       	sbi	0x03, 7	; 3
setup():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:31
uint8_t log_mode = 0;
uint16_t batt_v = 0;
Alt_Data alt_data;

void setup() {
    pinMode(LED0, OUTPUT);
     fa4:	61 e0       	ldi	r22, 0x01	; 1
     fa6:	8a e0       	ldi	r24, 0x0A	; 10
     fa8:	0e 94 4c 02 	call	0x498	; 0x498 <pinMode>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:32
    pinMode(LED1, OUTPUT);
     fac:	61 e0       	ldi	r22, 0x01	; 1
     fae:	89 e0       	ldi	r24, 0x09	; 9
     fb0:	0e 94 4c 02 	call	0x498	; 0x498 <pinMode>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:33
    pinMode(USER_SW, INPUT_PULLUP);
     fb4:	62 e0       	ldi	r22, 0x02	; 2
     fb6:	8d e0       	ldi	r24, 0x0D	; 13
     fb8:	0e 94 4c 02 	call	0x498	; 0x498 <pinMode>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:34
    pinMode(MPL_INT1, INPUT);
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	8b e0       	ldi	r24, 0x0B	; 11
     fc0:	0e 94 4c 02 	call	0x498	; 0x498 <pinMode>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:35
    pinMode(NRF_CE, OUTPUT);
     fc4:	61 e0       	ldi	r22, 0x01	; 1
     fc6:	88 e0       	ldi	r24, 0x08	; 8
     fc8:	0e 94 4c 02 	call	0x498	; 0x498 <pinMode>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:36
    pinMode(NRF_SCK, OUTPUT);
     fcc:	61 e0       	ldi	r22, 0x01	; 1
     fce:	87 e0       	ldi	r24, 0x07	; 7
     fd0:	0e 94 4c 02 	call	0x498	; 0x498 <pinMode>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:37
    pinMode(NRF_MOSI, OUTPUT);
     fd4:	61 e0       	ldi	r22, 0x01	; 1
     fd6:	83 e0       	ldi	r24, 0x03	; 3
     fd8:	0e 94 4c 02 	call	0x498	; 0x498 <pinMode>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:38
    pinMode(NRF_CSN, OUTPUT);
     fdc:	61 e0       	ldi	r22, 0x01	; 1
     fde:	82 e0       	ldi	r24, 0x02	; 2
     fe0:	0e 94 4c 02 	call	0x498	; 0x498 <pinMode>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:39
    pinMode(NRF_IRQ, INPUT);
     fe4:	60 e0       	ldi	r22, 0x00	; 0
     fe6:	84 e0       	ldi	r24, 0x04	; 4
     fe8:	0e 94 4c 02 	call	0x498	; 0x498 <pinMode>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:40
    pinMode(NRF_MISO, INPUT);
     fec:	60 e0       	ldi	r22, 0x00	; 0
     fee:	86 e0       	ldi	r24, 0x06	; 6
     ff0:	0e 94 4c 02 	call	0x498	; 0x498 <pinMode>
begin():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     ff4:	e0 91 cb 01 	lds	r30, 0x01CB	; 0x8001cb <Serial+0x10>
     ff8:	f0 91 cc 01 	lds	r31, 0x01CC	; 0x8001cc <Serial+0x11>
     ffc:	c2 e0       	ldi	r28, 0x02	; 2
     ffe:	c0 83       	st	Z, r28
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1000:	e0 91 c7 01 	lds	r30, 0x01C7	; 0x8001c7 <Serial+0xc>
    1004:	f0 91 c8 01 	lds	r31, 0x01C8	; 0x8001c8 <Serial+0xd>
    1008:	10 82       	st	Z, r1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    100a:	e0 91 c9 01 	lds	r30, 0x01C9	; 0x8001c9 <Serial+0xe>
    100e:	f0 91 ca 01 	lds	r31, 0x01CA	; 0x8001ca <Serial+0xf>
    1012:	8c e0       	ldi	r24, 0x0C	; 12
    1014:	80 83       	st	Z, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:138

  _written = false;
    1016:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <Serial+0x18>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:144

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    101a:	e0 91 cf 01 	lds	r30, 0x01CF	; 0x8001cf <Serial+0x14>
    101e:	f0 91 d0 01 	lds	r31, 0x01D0	; 0x8001d0 <Serial+0x15>
    1022:	86 e0       	ldi	r24, 0x06	; 6
    1024:	80 83       	st	Z, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:146

  sbi(*_ucsrb, RXEN0);
    1026:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <Serial+0x12>
    102a:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <Serial+0x13>
    102e:	80 81       	ld	r24, Z
    1030:	80 61       	ori	r24, 0x10	; 16
    1032:	80 83       	st	Z, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:147
  sbi(*_ucsrb, TXEN0);
    1034:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <Serial+0x12>
    1038:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <Serial+0x13>
    103c:	80 81       	ld	r24, Z
    103e:	88 60       	ori	r24, 0x08	; 8
    1040:	80 83       	st	Z, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:148
  sbi(*_ucsrb, RXCIE0);
    1042:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <Serial+0x12>
    1046:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <Serial+0x13>
    104a:	80 81       	ld	r24, Z
    104c:	80 68       	ori	r24, 0x80	; 128
    104e:	80 83       	st	Z, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:149
  cbi(*_ucsrb, UDRIE0);
    1050:	e0 91 cd 01 	lds	r30, 0x01CD	; 0x8001cd <Serial+0x12>
    1054:	f0 91 ce 01 	lds	r31, 0x01CE	; 0x8001ce <Serial+0x13>
    1058:	80 81       	ld	r24, Z
    105a:	8f 7d       	andi	r24, 0xDF	; 223
    105c:	80 83       	st	Z, r24
setup():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:42
    Serial.begin(9600);
    Serial.println("Reboot");
    105e:	8a e2       	ldi	r24, 0x2A	; 42
    1060:	91 e0       	ldi	r25, 0x01	; 1
    1062:	0e 94 31 04 	call	0x862	; 0x862 <Print::println(char const*) [clone .constprop.40]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:43
    delay(50);
    1066:	62 e3       	ldi	r22, 0x32	; 50
    1068:	70 e0       	ldi	r23, 0x00	; 0
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	0e 94 c9 02 	call	0x592	; 0x592 <delay>
begin():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:364
}

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void) {
  BufferIndex = 0;
    1072:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <TwoWire::BufferIndex>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:365
  BufferLength = 0;
    1076:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <TwoWire::BufferLength>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:367

  transmitting = 0;
    107a:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <TwoWire::transmitting>
USI_TWI_Master_Initialise():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:61
{
  #ifdef PUE_USI
  PUE_USI |=(1 << PIN_USI_SDA);
  PUE_USI_CL |=(1 << PIN_USI_SCL);
  #endif
  PORT_USI |= (1 << PIN_USI_SDA); // Enable pullup on SDA, to set high as released state.
    107e:	69 9a       	sbi	0x0d, 1	; 13
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:62
  PORT_USI_CL |= (1 << PIN_USI_SCL); // Enable pullup on SCL, to set high as released state.
    1080:	49 9a       	sbi	0x09, 1	; 9
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:64

  DDR_USI_CL |= (1 << PIN_USI_SCL); // Enable SCL as output.
    1082:	41 9a       	sbi	0x08, 1	; 8
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:65
  DDR_USI |= (1 << PIN_USI_SDA); // Enable SDA as output.
    1084:	61 9a       	sbi	0x0c, 1	; 12
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:67

  USIDR = 0xFF;                                           // Preload dataregister with "released level" data.
    1086:	8f ef       	ldi	r24, 0xFF	; 255
    1088:	8c bd       	out	0x2c, r24	; 44
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:68
  USICR = (0 << USISIE) | (0 << USIOIE) |                 // Disable Interrupts.
    108a:	8a e2       	ldi	r24, 0x2A	; 42
    108c:	8a bd       	out	0x2a, r24	; 42
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:72
          (1 << USIWM1) | (0 << USIWM0) |                 // Set USI in Two-wire mode.
          (1 << USICS1) | (0 << USICS0) | (1 << USICLK) | // Software stobe as counter clock source
          (0 << USITC);
  USISR = (1 << USISIF) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC) | // Clear flags,
    108e:	80 ef       	ldi	r24, 0xF0	; 240
    1090:	8b bd       	out	0x2b, r24	; 43
beginTransmission():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:471
  BufferIndex = 1; // reserved by slave address
  BufferLength = BufferIndex;
}

void TwoWire::beginTransmission(int address) {
  beginTransmission((uint8_t)address);
    1092:	80 e6       	ldi	r24, 0x60	; 96
    1094:	0e 94 b0 00 	call	0x160	; 0x160 <TwoWire::beginTransmission(unsigned char) [clone .constprop.50]>
MPL_init():
/tmp/arduino_build_376412/sketch/Alt.cpp:48


void MPL_init() {
    Wire.begin();
    Wire.beginTransmission(ALTI_ADDR);
    Wire.write(ALTI_REG_CTRL1);
    1098:	86 e2       	ldi	r24, 0x26	; 38
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	0e 94 7d 00 	call	0xfa	; 0xfa <TwoWire::write(int) [clone .constprop.65]>
/tmp/arduino_build_376412/sketch/Alt.cpp:49
    Wire.write(0xB8);//0b10111000);//Altimeter mode, OSR=0b111(128,512ms)
    10a0:	88 eb       	ldi	r24, 0xB8	; 184
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	0e 94 7d 00 	call	0xfa	; 0xfa <TwoWire::write(int) [clone .constprop.65]>
/tmp/arduino_build_376412/sketch/Alt.cpp:50
    Wire.endTransmission();
    10a8:	0e 94 83 03 	call	0x706	; 0x706 <TwoWire::endTransmission() [clone .constprop.51]>
beginTransmission():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:471
    10ac:	80 e6       	ldi	r24, 0x60	; 96
    10ae:	0e 94 b0 00 	call	0x160	; 0x160 <TwoWire::beginTransmission(unsigned char) [clone .constprop.50]>
MPL_init():
/tmp/arduino_build_376412/sketch/Alt.cpp:53

    Wire.beginTransmission(ALTI_ADDR);
    Wire.write(ALTI_REG_PT_DATA_CFG);
    10b2:	83 e1       	ldi	r24, 0x13	; 19
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	0e 94 7d 00 	call	0xfa	; 0xfa <TwoWire::write(int) [clone .constprop.65]>
/tmp/arduino_build_376412/sketch/Alt.cpp:54
    Wire.write(0x07);//0b00000111);//DREM=PDEFE=TDEFE=1: data ready event on new temperature or altitude readings.
    10ba:	87 e0       	ldi	r24, 0x07	; 7
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	0e 94 7d 00 	call	0xfa	; 0xfa <TwoWire::write(int) [clone .constprop.65]>
/tmp/arduino_build_376412/sketch/Alt.cpp:55
    Wire.endTransmission();
    10c2:	0e 94 83 03 	call	0x706	; 0x706 <TwoWire::endTransmission() [clone .constprop.51]>
beginTransmission():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:471
    10c6:	80 e6       	ldi	r24, 0x60	; 96
    10c8:	0e 94 b0 00 	call	0x160	; 0x160 <TwoWire::beginTransmission(unsigned char) [clone .constprop.50]>
MPL_init():
/tmp/arduino_build_376412/sketch/Alt.cpp:58

    Wire.beginTransmission(ALTI_ADDR);
    Wire.write(ALTI_REG_CTRL4);
    10cc:	89 e2       	ldi	r24, 0x29	; 41
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	0e 94 7d 00 	call	0xfa	; 0xfa <TwoWire::write(int) [clone .constprop.65]>
/tmp/arduino_build_376412/sketch/Alt.cpp:59
    Wire.write(0x80);//INT_EN_DRDY=1 enable data ready interrupt
    10d4:	80 e8       	ldi	r24, 0x80	; 128
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	0e 94 7d 00 	call	0xfa	; 0xfa <TwoWire::write(int) [clone .constprop.65]>
/tmp/arduino_build_376412/sketch/Alt.cpp:60
    Wire.endTransmission();
    10dc:	0e 94 83 03 	call	0x706	; 0x706 <TwoWire::endTransmission() [clone .constprop.51]>
beginTransmission():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:471
    10e0:	80 e6       	ldi	r24, 0x60	; 96
    10e2:	0e 94 b0 00 	call	0x160	; 0x160 <TwoWire::beginTransmission(unsigned char) [clone .constprop.50]>
MPL_init():
/tmp/arduino_build_376412/sketch/Alt.cpp:63

    Wire.beginTransmission(ALTI_ADDR);
    Wire.write(ALTI_REG_CTRL5);
    10e6:	8a e2       	ldi	r24, 0x2A	; 42
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	0e 94 7d 00 	call	0xfa	; 0xfa <TwoWire::write(int) [clone .constprop.65]>
/tmp/arduino_build_376412/sketch/Alt.cpp:64
    Wire.write(0x80);//INT_EN_DRDY=1 route Data ready interrupt to INT1
    10ee:	80 e8       	ldi	r24, 0x80	; 128
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	0e 94 7d 00 	call	0xfa	; 0xfa <TwoWire::write(int) [clone .constprop.65]>
/tmp/arduino_build_376412/sketch/Alt.cpp:65
    Wire.endTransmission();
    10f6:	0e 94 83 03 	call	0x706	; 0x706 <TwoWire::endTransmission() [clone .constprop.51]>
beginTransmission():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:471
    10fa:	80 e6       	ldi	r24, 0x60	; 96
    10fc:	0e 94 b0 00 	call	0x160	; 0x160 <TwoWire::beginTransmission(unsigned char) [clone .constprop.50]>
MPL_init():
/tmp/arduino_build_376412/sketch/Alt.cpp:68

    Wire.beginTransmission(ALTI_ADDR);
    Wire.write(ALTI_REG_CTRL1);
    1100:	86 e2       	ldi	r24, 0x26	; 38
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	0e 94 7d 00 	call	0xfa	; 0xfa <TwoWire::write(int) [clone .constprop.65]>
/tmp/arduino_build_376412/sketch/Alt.cpp:69
    Wire.write(0xB9);//0b10111001);//Altimeter mode, OSR=0b111(128,512ms), Active
    1108:	89 eb       	ldi	r24, 0xB9	; 185
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 7d 00 	call	0xfa	; 0xfa <TwoWire::write(int) [clone .constprop.65]>
/tmp/arduino_build_376412/sketch/Alt.cpp:70
    Wire.endTransmission();
    1110:	0e 94 83 03 	call	0x706	; 0x706 <TwoWire::endTransmission() [clone .constprop.51]>
setup():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:46
    MPL_init();

    MCUCR = (1 << ISC01); //Interrupt on falling edge of INTO
    1114:	c6 bf       	out	0x36, r28	; 54
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:47
    GIMSK |= (1 << PCIE2) | (1 << INT0);
    1116:	8c b7       	in	r24, 0x3c	; 60
    1118:	80 66       	ori	r24, 0x60	; 96
    111a:	8c bf       	out	0x3c, r24	; 60
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:48
    PCMSK2 |= (1 << PCINT12);
    111c:	89 b5       	in	r24, 0x29	; 41
    111e:	81 60       	ori	r24, 0x01	; 1
    1120:	89 bd       	out	0x29, r24	; 41
analogReference():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_analog.c:44
{
  // can't actually set the register here because the default setting
  // will connect AVCC and the AREF pin, which would cause a short if
  // there's something connected to AREF.
  // fix? Validate the mode?
  analog_reference = mode;
    1122:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <analog_reference>
begin():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:613
	ce(LOW);
	csn(HIGH);
	delay(200);
  #else
    // Initialize pins
    if (ce_pin != csn_pin) pinMode(ce_pin,OUTPUT);  
    1126:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <radio>
    112a:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <radio+0x1>
    112e:	89 17       	cp	r24, r25
    1130:	19 f0       	breq	.+6      	; 0x1138 <main+0x1e2>
    1132:	61 e0       	ldi	r22, 0x01	; 1
    1134:	0e 94 4c 02 	call	0x498	; 0x498 <pinMode>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:616
  
    #if ! defined(LITTLEWIRE)
      if (ce_pin != csn_pin)
    1138:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <radio+0x1>
    113c:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <radio>
    1140:	98 17       	cp	r25, r24
    1142:	19 f0       	breq	.+6      	; 0x114a <main+0x1f4>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:618
    #endif
        pinMode(csn_pin,OUTPUT);
    1144:	61 e0       	ldi	r22, 0x01	; 1
    1146:	0e 94 4c 02 	call	0x498	; 0x498 <pinMode>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:262
uint8_t SPIClass::interruptMask = 0;
uint8_t SPIClass::interruptSave = 0;

void SPIClass::begin(void)
{
    USICR &= ~(_BV(USISIE) | _BV(USIOIE) | _BV(USIWM1));
    114a:	8a b5       	in	r24, 0x2a	; 42
    114c:	8f 71       	andi	r24, 0x1F	; 31
    114e:	8a bd       	out	0x2a, r24	; 42
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:263
    USICR |= _BV(USIWM0) | _BV(USICS1) | _BV(USICLK);
    1150:	8a b5       	in	r24, 0x2a	; 42
    1152:	8a 61       	ori	r24, 0x1A	; 26
    1154:	8a bd       	out	0x2a, r24	; 42
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:264
    USI_SCK_PORT |= _BV(USCK_DD_PIN);   //set the USCK pin as output
    1156:	41 9a       	sbi	0x08, 1	; 8
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:265
    USI_DDR_PORT |= _BV(DO_DD_PIN);     //set the DO pin as output
    1158:	62 9a       	sbi	0x0c, 2	; 12
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:266
    USI_DDR_PORT &= ~_BV(DI_DD_PIN);    //set the DI pin as input
    115a:	61 98       	cbi	0x0c, 1	; 12
applySettings():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:447
        }
    }
}

void SPIClass::applySettings(SPISettings settings) {
    USICR = settings.usicr;
    115c:	8a e1       	ldi	r24, 0x1A	; 26
    115e:	8a bd       	out	0x2a, r24	; 42
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:448
    msb1st = settings.msb1st ;
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <SPIClass::msb1st>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:449
    delay = settings.delay;
    1166:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <SPIClass::delay>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:450
    clockoutfn = settings.clockoutfn;
    116a:	87 ee       	ldi	r24, 0xE7	; 231
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <SPIClass::clockoutfn+0x1>
    1172:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <SPIClass::clockoutfn>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/SPI/SPI.cpp:454
    if (settings.cpol) {
        digitalWrite(SCK, HIGH);
    } else {
        digitalWrite(SCK, LOW);
    1176:	60 e0       	ldi	r22, 0x00	; 0
    1178:	8c e0       	ldi	r24, 0x0C	; 12
    117a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <digitalWrite>
ce():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:63
/****************************************************************************/

void RF24::ce(bool level)
{
  //Allow for 3-pin use on ATTiny
  if (ce_pin != csn_pin) digitalWrite(ce_pin,level);
    117e:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <radio>
    1182:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <radio+0x1>
    1186:	89 17       	cp	r24, r25
    1188:	19 f0       	breq	.+6      	; 0x1190 <main+0x23a>
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <digitalWrite>
begin():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:622
    #endif
        pinMode(csn_pin,OUTPUT);
    
    _SPI.begin();
    ce(LOW);
  	csn(HIGH);
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	0e 94 3d 04 	call	0x87a	; 0x87a <RF24::csn(bool) [clone .constprop.34]>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:634
  // This is actually only required following power up but some settling time also appears to
  // be required after resets too. For full coverage, we'll always assume the worst.
  // Enabling 16b CRC is by far the most obvious case if the wrong timing is used - or skipped.
  // Technically we require 4.5ms + 14us as a worst case. We'll just call it 5ms for good measure.
  // WARNING: Delay is based on P-variant whereby non-P *may* require different timing.
  delay( 5 ) ;
    1196:	65 e0       	ldi	r22, 0x05	; 5
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	0e 94 c9 02 	call	0x592	; 0x592 <delay>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:637

  // Reset NRF_CONFIG and enable 16-bit CRC.
  write_register( NRF_CONFIG, 0b00001100 ) ;
    11a2:	6c e0       	ldi	r22, 0x0C	; 12
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	0e 94 57 04 	call	0x8ae	; 0x8ae <RF24::write_register(unsigned char, unsigned char) [clone .constprop.31]>
setRetries():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1533
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
 write_register(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
    11aa:	6f e5       	ldi	r22, 0x5F	; 95
    11ac:	84 e0       	ldi	r24, 0x04	; 4
    11ae:	0e 94 57 04 	call	0x8ae	; 0x8ae <RF24::write_register(unsigned char, unsigned char) [clone .constprop.31]>
begin():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:649
  // Reset value is MAX
  //setPALevel( RF24_PA_MAX ) ;

  // check for connected module and if this is a p nRF24l01 variant
  //
  if( setDataRate( RF24_250KBPS ) )
    11b2:	82 e0       	ldi	r24, 0x02	; 2
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0e 94 a0 04 	call	0x940	; 0x940 <RF24::setDataRate(rf24_datarate_e) [clone .constprop.26]>
    11ba:	88 23       	and	r24, r24
    11bc:	19 f0       	breq	.+6      	; 0x11c4 <main+0x26e>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:651
  {
    p_variant = true ;
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <radio+0x4>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:653
  }
  setup = read_register(RF_SETUP);
    11c4:	86 e0       	ldi	r24, 0x06	; 6
    11c6:	0e 94 8e 04 	call	0x91c	; 0x91c <RF24::read_register(unsigned char) [clone .constprop.27]>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:661
    p_variant = true ;
  }*/
  
  // Then set the data rate to the slowest (and most reliable) speed supported by all
  // hardware.
  setDataRate( RF24_1MBPS ) ;
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	0e 94 a0 04 	call	0x940	; 0x940 <RF24::setDataRate(rf24_datarate_e) [clone .constprop.26]>
beginTransaction():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:72

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF24_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#endif
    csn(LOW);
    11d2:	80 e0       	ldi	r24, 0x00	; 0
    11d4:	0e 94 3d 04 	call	0x87a	; 0x87a <RF24::csn(bool) [clone .constprop.34]>
toggle_features():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1228
/****************************************************************************/

void RF24::toggle_features(void)
{
    beginTransaction();
	_SPI.transfer( ACTIVATE );
    11d8:	80 e5       	ldi	r24, 0x50	; 80
    11da:	0e 94 b6 03 	call	0x76c	; 0x76c <SPIClass::transfer(unsigned char)>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1229
    _SPI.transfer( 0x73 );
    11de:	83 e7       	ldi	r24, 0x73	; 115
    11e0:	0e 94 b6 03 	call	0x76c	; 0x76c <SPIClass::transfer(unsigned char)>
endTransaction():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:78
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	0e 94 3d 04 	call	0x87a	; 0x87a <RF24::csn(bool) [clone .constprop.34]>
begin():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:668
  // Initialize CRC and request 2-byte (16bit) CRC
  //setCRCLength( RF24_CRC_16 ) ;

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
  toggle_features();
  write_register(FEATURE,0 );
    11ea:	60 e0       	ldi	r22, 0x00	; 0
    11ec:	8d e1       	ldi	r24, 0x1D	; 29
    11ee:	0e 94 57 04 	call	0x8ae	; 0x8ae <RF24::write_register(unsigned char, unsigned char) [clone .constprop.31]>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:669
  write_register(DYNPD,0);
    11f2:	60 e0       	ldi	r22, 0x00	; 0
    11f4:	8c e1       	ldi	r24, 0x1C	; 28
    11f6:	0e 94 57 04 	call	0x8ae	; 0x8ae <RF24::write_register(unsigned char, unsigned char) [clone .constprop.31]>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:673

  // Reset current status
  // Notice reset and flush is the last thing we do
  write_register(NRF_STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
    11fa:	60 e7       	ldi	r22, 0x70	; 112
    11fc:	87 e0       	ldi	r24, 0x07	; 7
    11fe:	0e 94 57 04 	call	0x8ae	; 0x8ae <RF24::write_register(unsigned char, unsigned char) [clone .constprop.31]>
setChannel():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:440
/****************************************************************************/

void RF24::setChannel(uint8_t channel)
{
  const uint8_t max_channel = 125;
  write_register(RF_CH,rf24_min(channel,max_channel));
    1202:	6c e4       	ldi	r22, 0x4C	; 76
    1204:	85 e0       	ldi	r24, 0x05	; 5
    1206:	0e 94 57 04 	call	0x8ae	; 0x8ae <RF24::write_register(unsigned char, unsigned char) [clone .constprop.31]>
flush_rx():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:321

/****************************************************************************/

uint8_t RF24::flush_rx(void)
{
  return spiTrans( FLUSH_RX );
    120a:	82 ee       	ldi	r24, 0xE2	; 226
    120c:	0e 94 cc 04 	call	0x998	; 0x998 <RF24::spiTrans(unsigned char) [clone .constprop.24]>
flush_tx():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:328

/****************************************************************************/

uint8_t RF24::flush_tx(void)
{
  return spiTrans( FLUSH_TX );
    1210:	81 ee       	ldi	r24, 0xE1	; 225
    1212:	0e 94 cc 04 	call	0x998	; 0x998 <RF24::spiTrans(unsigned char) [clone .constprop.24]>
powerUp():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:766
/****************************************************************************/

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void RF24::powerUp(void)
{
   uint8_t cfg = read_register(NRF_CONFIG);
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	0e 94 8e 04 	call	0x91c	; 0x91c <RF24::read_register(unsigned char) [clone .constprop.27]>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:769

   // if not powered up then power up and wait for the radio to initialize
   if (!(cfg & _BV(PWR_UP))){
    121c:	81 fd       	sbrc	r24, 1
    121e:	0b c0       	rjmp	.+22     	; 0x1236 <main+0x2e0>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:770
      write_register(NRF_CONFIG, cfg | _BV(PWR_UP));
    1220:	68 2f       	mov	r22, r24
    1222:	62 60       	ori	r22, 0x02	; 2
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	0e 94 57 04 	call	0x8ae	; 0x8ae <RF24::write_register(unsigned char, unsigned char) [clone .constprop.31]>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:775

      // For nRF24L01+ to go from power down mode to TX or RX mode it must first pass through stand-by mode.
	  // There must be a delay of Tpd2stby (see Table 16.) after the nRF24L01+ leaves power down mode before
	  // the CEis set high. - Tpd2stby can be up to 5ms per the 1.0 datasheet
      delay(5);
    122a:	65 e0       	ldi	r22, 0x05	; 5
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	0e 94 c9 02 	call	0x592	; 0x592 <delay>
begin():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:688

  powerUp(); //Power up by default when begin() is called

  // Enable PTX, do not write CE high so radio will remain in standby I mode ( 130us max to transition to RX or TX instead of 1500us from powerUp )
  // PTX should use only 22uA of power
  write_register(NRF_CONFIG, ( read_register(NRF_CONFIG) ) & ~_BV(PRIM_RX) );
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	0e 94 8e 04 	call	0x91c	; 0x91c <RF24::read_register(unsigned char) [clone .constprop.27]>
    123c:	68 2f       	mov	r22, r24
    123e:	6e 7f       	andi	r22, 0xFE	; 254
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	0e 94 57 04 	call	0x8ae	; 0x8ae <RF24::write_register(unsigned char, unsigned char) [clone .constprop.31]>
setup():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:52
    analogReference(DEFAULT);

    radio.begin();
    radio.setDataRate( RF24_250KBPS );
    1246:	82 e0       	ldi	r24, 0x02	; 2
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	0e 94 a0 04 	call	0x940	; 0x940 <RF24::setDataRate(rf24_datarate_e) [clone .constprop.26]>
setRetries():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1533
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
 write_register(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
    124e:	65 e3       	ldi	r22, 0x35	; 53
    1250:	84 e0       	ldi	r24, 0x04	; 4
    1252:	0e 94 57 04 	call	0x8ae	; 0x8ae <RF24::write_register(unsigned char, unsigned char) [clone .constprop.31]>
openWritingPipe():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1133
void RF24::openWritingPipe(const uint8_t *address)
{
  // Note that AVR 8-bit uC's store this LSB first, and the NRF24L01(+)
  // expects it LSB first too, so we're good.

  write_register(RX_ADDR_P0,address, addr_width);
    1256:	60 91 2e 02 	lds	r22, 0x022E	; 0x80022e <radio+0xc>
    125a:	8a e0       	ldi	r24, 0x0A	; 10
    125c:	0e 94 6d 04 	call	0x8da	; 0x8da <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.30]>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1134
  write_register(TX_ADDR, address, addr_width);
    1260:	60 91 2e 02 	lds	r22, 0x022E	; 0x80022e <radio+0xc>
    1264:	80 e1       	ldi	r24, 0x10	; 16
    1266:	0e 94 6d 04 	call	0x8da	; 0x8da <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.30]>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1138

  //const uint8_t max_payload_size = 32;
  //write_register(RX_PW_P0,rf24_min(payload_size,max_payload_size));
  write_register(RX_PW_P0,payload_size);
    126a:	60 91 27 02 	lds	r22, 0x0227	; 0x800227 <radio+0x5>
    126e:	81 e1       	ldi	r24, 0x11	; 17
    1270:	0e 94 57 04 	call	0x8ae	; 0x8ae <RF24::write_register(unsigned char, unsigned char) [clone .constprop.31]>
setup():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:55
    radio.setRetries(3, 5); // delay, count
    radio.openWritingPipe(slaveAddress);
    Serial.println("Initialized radio !");
    1274:	81 e3       	ldi	r24, 0x31	; 49
    1276:	91 e0       	ldi	r25, 0x01	; 1
    1278:	0e 94 31 04 	call	0x862	; 0x862 <Print::println(char const*) [clone .constprop.40]>
requestFrom():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:426
  // clamp to buffer length
  if (quantity > TWI_BUFFER_SIZE) {
    quantity = TWI_BUFFER_SIZE;
  }
  // set address of targeted slave and read mode
  Buffer[0] = (address << TWI_ADR_BITS) | (1 << TWI_READ_BIT);
    127c:	11 ec       	ldi	r17, 0xC1	; 193
loop():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:60

}

void loop() {
    if (alt_data.newDataReady) {
    127e:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <alt_data+0x9>
    1282:	88 23       	and	r24, r24
    1284:	e1 f3       	breq	.-8      	; 0x127e <main+0x328>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:61
        digitalWrite(LED1, HIGH);
    1286:	61 e0       	ldi	r22, 0x01	; 1
    1288:	89 e0       	ldi	r24, 0x09	; 9
    128a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <digitalWrite>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:62
        alt_data.newDataReady = false;
    128e:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <alt_data+0x9>
ADC_SetVoltageReference():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_adc.h:256
}
adc_ic_t;

__attribute__((always_inline)) static inline void ADC_SetVoltageReference( adc_vr_t vr )
{
  ADMUX = (ADMUX & ~MASK2(REFS1,REFS0)) | (((vr & B11) >> 0) << REFS0);
    1292:	94 b1       	in	r25, 0x04	; 4
    1294:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <analog_reference>
    1298:	82 95       	swap	r24
    129a:	88 0f       	add	r24, r24
    129c:	88 0f       	add	r24, r24
    129e:	80 7c       	andi	r24, 0xC0	; 192
    12a0:	9f 73       	andi	r25, 0x3F	; 63
    12a2:	89 2b       	or	r24, r25
    12a4:	84 b9       	out	0x04, r24	; 4
ADC_SetInputChannel():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_adc.h:261
}

__attribute__((always_inline)) static inline void ADC_SetInputChannel( adc_ic_t ic )
{
  ADMUX = (ADMUX & ~MASK4(MUX3,MUX2,MUX1,MUX0)) | (ic << MUX0);
    12a6:	84 b1       	in	r24, 0x04	; 4
    12a8:	80 7f       	andi	r24, 0xF0	; 240
    12aa:	84 b9       	out	0x04, r24	; 4
ADC_StartConversion():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_adc.h:266
}

__attribute__((always_inline)) static inline void ADC_StartConversion( void )
{
  ADCSRA |= MASK1( ADSC );
    12ac:	1e 9a       	sbi	0x03, 6	; 3
analogRead():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_analog.c:61
  ADC_SetVoltageReference( analog_reference );
  ADC_SetInputChannel( pin );

  ADC_StartConversion();

  while( ADC_ConversionInProgress() );
    12ae:	1e 99       	sbic	0x03, 6	; 3
    12b0:	fe cf       	rjmp	.-4      	; 0x12ae <main+0x358>
ADC_GetDataRegister():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_adc.h:276
  return( (ADCSRA & (1<<ADSC)) != 0 );
}

__attribute__((always_inline)) static inline uint16_t ADC_GetDataRegister( void )
{
  return( ADC );
    12b2:	80 b1       	in	r24, 0x00	; 0
    12b4:	91 b1       	in	r25, 0x01	; 1
loop():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:63
        batt_v = analogRead(Batt_sense);// ;
    12b6:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <batt_v+0x1>
    12ba:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <batt_v>
beginTransmission():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:471
  BufferIndex = 1; // reserved by slave address
  BufferLength = BufferIndex;
}

void TwoWire::beginTransmission(int address) {
  beginTransmission((uint8_t)address);
    12be:	80 e6       	ldi	r24, 0x60	; 96
    12c0:	0e 94 b0 00 	call	0x160	; 0x160 <TwoWire::beginTransmission(unsigned char) [clone .constprop.50]>
MPL_readAltTemp():
/tmp/arduino_build_376412/sketch/Alt.cpp:101
}

void MPL_readAltTemp(uint32_t *alt, uint16_t *temp) {

    Wire.beginTransmission(ALTI_ADDR);
    Wire.write(0); //STATUS register (reads DR_STATUS reg (0x06))
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	0e 94 7d 00 	call	0xfa	; 0xfa <TwoWire::write(int) [clone .constprop.65]>
requestFrom():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:426
  // clamp to buffer length
  if (quantity > TWI_BUFFER_SIZE) {
    quantity = TWI_BUFFER_SIZE;
  }
  // set address of targeted slave and read mode
  Buffer[0] = (address << TWI_ADR_BITS) | (1 << TWI_READ_BIT);
    12cc:	10 93 82 01 	sts	0x0182, r17	; 0x800182 <__data_end>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:429
  // perform blocking read into buffer
  uint8_t ret = USI_TWI_Start_Transceiver_With_Data_Stop(Buffer, quantity,
                                                         sendStop);
    12d0:	41 e0       	ldi	r20, 0x01	; 1
    12d2:	67 e0       	ldi	r22, 0x07	; 7
    12d4:	82 e8       	ldi	r24, 0x82	; 130
    12d6:	91 e0       	ldi	r25, 0x01	; 1
    12d8:	0e 94 0e 03 	call	0x61c	; 0x61c <USI_TWI_Start_Transceiver_With_Data_Stop>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:431
  // set rx buffer iterator vars
  BufferIndex = 1; // ignore slave address
    12dc:	91 e0       	ldi	r25, 0x01	; 1
    12de:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <TwoWire::BufferIndex>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:433
  // check for error
  if (ret == FALSE) {
    12e2:	81 11       	cpse	r24, r1
    12e4:	ea c0       	rjmp	.+468    	; 0x14ba <main+0x564>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:434
    BufferLength = BufferIndex;
    12e6:	90 93 b9 01 	sts	0x01B9, r25	; 0x8001b9 <TwoWire::BufferLength>
available():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:551

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void) {
  if (BufferLength) {
    12ea:	40 91 b9 01 	lds	r20, 0x01B9	; 0x8001b9 <TwoWire::BufferLength>
    12ee:	21 e0       	ldi	r18, 0x01	; 1
    12f0:	d0 e0       	ldi	r29, 0x00	; 0
    12f2:	c0 e0       	ldi	r28, 0x00	; 0
    12f4:	81 2c       	mov	r8, r1
    12f6:	91 2c       	mov	r9, r1
    12f8:	54 01       	movw	r10, r8
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	44 23       	and	r20, r20
    12fe:	09 f4       	brne	.+2      	; 0x1302 <main+0x3ac>
    1300:	e0 c0       	rjmp	.+448    	; 0x14c2 <main+0x56c>
read():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:565
// or after requestFrom(address, numBytes)
int TwoWire::read(void) {
  int value = -1;

  // get each successive byte on each call
  if (available()) {
    1302:	24 13       	cpse	r18, r20
    1304:	f7 c0       	rjmp	.+494    	; 0x14f4 <main+0x59e>
main():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:562

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void) {
  int value = -1;
    1306:	8f ef       	ldi	r24, 0xFF	; 255
    1308:	9f ef       	ldi	r25, 0xFF	; 255
MPL_readAltTemp():
/tmp/arduino_build_376412/sketch/Alt.cpp:108
    uint32_t alti = 0; // in 16*meters
    uint16_t tempe = 0; //in 16*degrees
    Wire.requestFrom(ALTI_ADDR, n);//request n bytes from slave device, free up bus after transmission
    for (uint8_t i = 0; i < n; i++) {
        uint8_t d = Wire.read();
        if (i == 0) {
    130a:	33 23       	and	r19, r19
    130c:	41 f0       	breq	.+16     	; 0x131e <main+0x3c8>
/tmp/arduino_build_376412/sketch/Alt.cpp:116
            } else if ( d & 0xF0) { //PTOW-POW-TOW some data was overwritten
                //Serial.print(",ok");
            } else { //no new data available

            }
        } else if (i < 4) {
    130e:	34 30       	cpi	r19, 0x04	; 4
    1310:	08 f0       	brcs	.+2      	; 0x1314 <main+0x3be>
    1312:	f7 c0       	rjmp	.+494    	; 0x1502 <main+0x5ac>
/tmp/arduino_build_376412/sketch/Alt.cpp:117
            alti = (alti << 8) | d;
    1314:	ba 2c       	mov	r11, r10
    1316:	a9 2c       	mov	r10, r9
    1318:	98 2c       	mov	r9, r8
    131a:	88 24       	eor	r8, r8
    131c:	88 2a       	or	r8, r24
/tmp/arduino_build_376412/sketch/Alt.cpp:106
    Wire.write(0); //STATUS register (reads DR_STATUS reg (0x06))
    uint8_t n = 6;
    uint32_t alti = 0; // in 16*meters
    uint16_t tempe = 0; //in 16*degrees
    Wire.requestFrom(ALTI_ADDR, n);//request n bytes from slave device, free up bus after transmission
    for (uint8_t i = 0; i < n; i++) {
    131e:	3f 5f       	subi	r19, 0xFF	; 255
    1320:	36 30       	cpi	r19, 0x06	; 6
    1322:	61 f7       	brne	.-40     	; 0x12fc <main+0x3a6>
    1324:	20 93 b8 01 	sts	0x01B8, r18	; 0x8001b8 <TwoWire::BufferIndex>
/tmp/arduino_build_376412/sketch/Alt.cpp:122
            alti = (alti << 8) | d;
        } else {
            tempe = (tempe << 8) | d; //temp is 8MSBs=int value, 8LSBs=[4 decimal, 0b0000].
        }
    }
    *alt = alti >> 4;
    1328:	75 01       	movw	r14, r10
    132a:	64 01       	movw	r12, r8
    132c:	44 e0       	ldi	r20, 0x04	; 4
    132e:	f6 94       	lsr	r15
    1330:	e7 94       	ror	r14
    1332:	d7 94       	ror	r13
    1334:	c7 94       	ror	r12
    1336:	4a 95       	dec	r20
    1338:	d1 f7       	brne	.-12     	; 0x132e <main+0x3d8>
/tmp/arduino_build_376412/sketch/Alt.cpp:123
    *temp = tempe >> 4;
    133a:	54 e0       	ldi	r21, 0x04	; 4
    133c:	d6 95       	lsr	r29
    133e:	c7 95       	ror	r28
    1340:	5a 95       	dec	r21
    1342:	e1 f7       	brne	.-8      	; 0x133c <main+0x3e6>
getEtage():
/tmp/arduino_build_376412/sketch/Alt.cpp:19
    newDataReady = true;

}

uint8_t Alt_Data::getEtage(uint32_t alt) {
    alti = alt;
    1344:	c0 92 18 02 	sts	0x0218, r12	; 0x800218 <alt_data>
    1348:	d0 92 19 02 	sts	0x0219, r13	; 0x800219 <alt_data+0x1>
    134c:	e0 92 1a 02 	sts	0x021A, r14	; 0x80021a <alt_data+0x2>
    1350:	f0 92 1b 02 	sts	0x021B, r15	; 0x80021b <alt_data+0x3>
/tmp/arduino_build_376412/sketch/Alt.cpp:21

    if (alti < alt_RdC) {
    1354:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <alt_data+0x5>
    1358:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <alt_data+0x6>
    135c:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <alt_data+0x7>
    1360:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <alt_data+0x8>
    1364:	c8 16       	cp	r12, r24
    1366:	d9 06       	cpc	r13, r25
    1368:	ea 06       	cpc	r14, r26
    136a:	fb 06       	cpc	r15, r27
    136c:	08 f0       	brcs	.+2      	; 0x1370 <main+0x41a>
    136e:	cd c0       	rjmp	.+410    	; 0x150a <main+0x5b4>
/tmp/arduino_build_376412/sketch/Alt.cpp:22
        alt_RdC = alti;
    1370:	c0 92 1d 02 	sts	0x021D, r12	; 0x80021d <alt_data+0x5>
    1374:	d0 92 1e 02 	sts	0x021E, r13	; 0x80021e <alt_data+0x6>
    1378:	e0 92 1f 02 	sts	0x021F, r14	; 0x80021f <alt_data+0x7>
    137c:	f0 92 20 02 	sts	0x0220, r15	; 0x800220 <alt_data+0x8>
write():
    1380:	85 e4       	ldi	r24, 0x45	; 69
    1382:	91 e0       	ldi	r25, 0x01	; 1
    1384:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <Print::write(char const*) [clone .part.2] [clone .constprop.61]>
getEtage():
/tmp/arduino_build_376412/sketch/Alt.cpp:33
#ifdef DEBUG_Alt
        Serial.print("rs up, ");
#endif
    }

    etage = (alti - alt_RdC) / FLOOR_HEIGHT;
    1388:	40 90 18 02 	lds	r4, 0x0218	; 0x800218 <alt_data>
    138c:	50 90 19 02 	lds	r5, 0x0219	; 0x800219 <alt_data+0x1>
    1390:	60 90 1a 02 	lds	r6, 0x021A	; 0x80021a <alt_data+0x2>
    1394:	70 90 1b 02 	lds	r7, 0x021B	; 0x80021b <alt_data+0x3>
    1398:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <alt_data+0x5>
    139c:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <alt_data+0x6>
    13a0:	a0 91 1f 02 	lds	r26, 0x021F	; 0x80021f <alt_data+0x7>
    13a4:	b0 91 20 02 	lds	r27, 0x0220	; 0x800220 <alt_data+0x8>
    13a8:	a3 01       	movw	r20, r6
    13aa:	92 01       	movw	r18, r4
    13ac:	28 1b       	sub	r18, r24
    13ae:	39 0b       	sbc	r19, r25
    13b0:	4a 0b       	sbc	r20, r26
    13b2:	5b 0b       	sbc	r21, r27
    13b4:	ca 01       	movw	r24, r20
    13b6:	b9 01       	movw	r22, r18
    13b8:	20 e3       	ldi	r18, 0x30	; 48
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	40 e0       	ldi	r20, 0x00	; 0
    13be:	50 e0       	ldi	r21, 0x00	; 0
    13c0:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__udivmodsi4>
    13c4:	20 93 1c 02 	sts	0x021C, r18	; 0x80021c <alt_data+0x4>
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:103
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    13c8:	4a e0       	ldi	r20, 0x0A	; 10
    13ca:	c3 01       	movw	r24, r6
    13cc:	b2 01       	movw	r22, r4
    13ce:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.59]>
getEtage():
/tmp/arduino_build_376412/sketch/Alt.cpp:36
#ifdef DEBUG_Alt
    Serial.print(alti);
    Serial.print(',');
    13d2:	8c e2       	ldi	r24, 0x2C	; 44
    13d4:	0e 94 c5 01 	call	0x38a	; 0x38a <Print::print(char) [clone .constprop.63]>
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:103
    13d8:	60 91 1d 02 	lds	r22, 0x021D	; 0x80021d <alt_data+0x5>
    13dc:	70 91 1e 02 	lds	r23, 0x021E	; 0x80021e <alt_data+0x6>
    13e0:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <alt_data+0x7>
    13e4:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <alt_data+0x8>
    13e8:	4a e0       	ldi	r20, 0x0A	; 10
    13ea:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.59]>
getEtage():
/tmp/arduino_build_376412/sketch/Alt.cpp:38
    Serial.print(alt_RdC);
    Serial.print(',');
    13ee:	8c e2       	ldi	r24, 0x2C	; 44
    13f0:	0e 94 c5 01 	call	0x38a	; 0x38a <Print::print(char) [clone .constprop.63]>
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:71
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    13f4:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <alt_data+0x4>
    13f8:	70 e0       	ldi	r23, 0x00	; 0
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	80 e0       	ldi	r24, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:103
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    13fe:	4a e0       	ldi	r20, 0x0A	; 10
    1400:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.59]>
println():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:154
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    1404:	0e 94 ca 01 	call	0x394	; 0x394 <Print::println() [clone .constprop.62]>
getEtage():
/tmp/arduino_build_376412/sketch/Alt.cpp:41
    Serial.println(etage);
#endif
    return etage;
    1408:	00 91 1c 02 	lds	r16, 0x021C	; 0x80021c <alt_data+0x4>
loop():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:68
        uint32_t alti;
        uint16_t temp;
        MPL_readAltTemp(&alti, &temp);
        uint8_t etage = alt_data.getEtage(alti);
        switch (log_mode) {
    140c:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <log_mode>
    1410:	81 30       	cpi	r24, 0x01	; 1
    1412:	09 f4       	brne	.+2      	; 0x1416 <main+0x4c0>
    1414:	d1 c0       	rjmp	.+418    	; 0x15b8 <main+0x662>
    1416:	08 f4       	brcc	.+2      	; 0x141a <main+0x4c4>
    1418:	93 c0       	rjmp	.+294    	; 0x1540 <main+0x5ea>
    141a:	82 30       	cpi	r24, 0x02	; 2
    141c:	09 f4       	brne	.+2      	; 0x1420 <main+0x4ca>
    141e:	d9 c0       	rjmp	.+434    	; 0x15d2 <main+0x67c>
    1420:	83 30       	cpi	r24, 0x03	; 3
    1422:	09 f4       	brne	.+2      	; 0x1426 <main+0x4d0>
    1424:	b0 c0       	rjmp	.+352    	; 0x1586 <main+0x630>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:88
                Serial.println(batt_v / 1024.0 * 2.5 * 2.0);
                break;
            default:
                break;
        }
        digitalWrite(LED1, LOW);
    1426:	60 e0       	ldi	r22, 0x00	; 0
    1428:	89 e0       	ldi	r24, 0x09	; 9
    142a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <digitalWrite>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:89
        digitalWrite(LED0, HIGH);
    142e:	61 e0       	ldi	r22, 0x01	; 1
    1430:	8a e0       	ldi	r24, 0x0A	; 10
    1432:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <digitalWrite>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:91

        dataToSend[3] = (etage << 4) | ((alti >> 14) & 0x0F);
    1436:	d5 01       	movw	r26, r10
    1438:	c4 01       	movw	r24, r8
    143a:	22 e1       	ldi	r18, 0x12	; 18
    143c:	b6 95       	lsr	r27
    143e:	a7 95       	ror	r26
    1440:	97 95       	ror	r25
    1442:	87 95       	ror	r24
    1444:	2a 95       	dec	r18
    1446:	d1 f7       	brne	.-12     	; 0x143c <main+0x4e6>
    1448:	8f 70       	andi	r24, 0x0F	; 15
    144a:	02 95       	swap	r16
    144c:	00 7f       	andi	r16, 0xF0	; 240
    144e:	80 2b       	or	r24, r16
    1450:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__data_start+0x3>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:92
        dataToSend[2] = alti >> 6;
    1454:	3a e0       	ldi	r19, 0x0A	; 10
    1456:	b6 94       	lsr	r11
    1458:	a7 94       	ror	r10
    145a:	97 94       	ror	r9
    145c:	87 94       	ror	r8
    145e:	3a 95       	dec	r19
    1460:	d1 f7       	brne	.-12     	; 0x1456 <main+0x500>
    1462:	80 92 02 01 	sts	0x0102, r8	; 0x800102 <__data_start+0x2>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:93
        dataToSend[1] = ((alti << 2) & 0xFC) | ((batt_v >> 8) & 0x03);
    1466:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <batt_v>
    146a:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <batt_v+0x1>
    146e:	83 70       	andi	r24, 0x03	; 3
    1470:	cc 0c       	add	r12, r12
    1472:	cc 0c       	add	r12, r12
    1474:	c8 2a       	or	r12, r24
    1476:	c0 92 01 01 	sts	0x0101, r12	; 0x800101 <__data_start+0x1>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:94
        dataToSend[0] = batt_v;
    147a:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
write_payload():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:222
uint8_t RF24::write_payload(const void* buf, uint8_t data_len, const uint8_t writeType)
{
  uint8_t status;
  const uint8_t* current = reinterpret_cast<const uint8_t*>(buf);

   data_len = rf24_min(data_len, payload_size);
    147e:	c0 91 27 02 	lds	r28, 0x0227	; 0x800227 <radio+0x5>
    1482:	dc 2f       	mov	r29, r28
    1484:	c5 30       	cpi	r28, 0x05	; 5
    1486:	08 f0       	brcs	.+2      	; 0x148a <main+0x534>
    1488:	d4 e0       	ldi	r29, 0x04	; 4
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:223
   uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
    148a:	80 91 28 02 	lds	r24, 0x0228	; 0x800228 <radio+0x6>
    148e:	cd 1b       	sub	r28, r29
    1490:	81 11       	cpse	r24, r1
main():
    1492:	c0 e0       	ldi	r28, 0x00	; 0
beginTransaction():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:72

  inline void RF24::beginTransaction() {
    #if defined (RF24_SPI_TRANSACTIONS)
    _SPI.beginTransaction(SPISettings(RF24_SPI_SPEED, MSBFIRST, SPI_MODE0));
	#endif
    csn(LOW);
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	0e 94 3d 04 	call	0x87a	; 0x87a <RF24::csn(bool) [clone .constprop.34]>
write_payload():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:248
	endTransaction();

  #else

  beginTransaction();
  status = _SPI.transfer( writeType );
    149a:	80 ea       	ldi	r24, 0xA0	; 160
    149c:	0e 94 b6 03 	call	0x76c	; 0x76c <SPIClass::transfer(unsigned char)>
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	e8 2e       	mov	r14, r24
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	f8 2e       	mov	r15, r24
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:249
  while ( data_len-- ) {
    14a8:	d1 50       	subi	r29, 0x01	; 1
    14aa:	08 f4       	brcc	.+2      	; 0x14ae <main+0x558>
    14ac:	96 c0       	rjmp	.+300    	; 0x15da <main+0x684>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:250
    _SPI.transfer(*current++);
    14ae:	f7 01       	movw	r30, r14
    14b0:	81 91       	ld	r24, Z+
    14b2:	7f 01       	movw	r14, r30
    14b4:	0e 94 b6 03 	call	0x76c	; 0x76c <SPIClass::transfer(unsigned char)>
    14b8:	f7 cf       	rjmp	.-18     	; 0x14a8 <main+0x552>
requestFrom():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:437
  // check for error
  if (ret == FALSE) {
    BufferLength = BufferIndex;
    return 0;
  }
  BufferLength = quantity;
    14ba:	87 e0       	ldi	r24, 0x07	; 7
    14bc:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <TwoWire::BufferLength>
    14c0:	14 cf       	rjmp	.-472    	; 0x12ea <main+0x394>
USI_TWI_Data_In_Receive_Buffer():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:136

// Check if there is data in the receive buffer.
unsigned char USI_TWI_Data_In_Receive_Buffer(void)
{
  unsigned char tmpRxTail;          // Temporary variable to store volatile
  tmpRxTail = TWI_RxTail;           // Not necessary, but prevents warnings
    14c2:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <TWI_RxTail>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:137
  return (TWI_RxHead - tmpRxTail) & TWI_RX_BUFFER_MASK; // Return 0 (FALSE) if the receive buffer is empty.
    14c6:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <TWI_RxHead>
    14ca:	89 1b       	sub	r24, r25
    14cc:	8f 70       	andi	r24, 0x0F	; 15
read():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:565
// or after requestFrom(address, numBytes)
int TwoWire::read(void) {
  int value = -1;

  // get each successive byte on each call
  if (available()) {
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <main+0x57c>
    14d0:	1a cf       	rjmp	.-460    	; 0x1306 <main+0x3b0>
USI_TWI_Receive_Byte():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:112
// Returns a byte from the receive buffer. Waits if buffer is empty.
unsigned char USI_TWI_Receive_Byte(void)
{
  unsigned char tmptail;
  unsigned char tmpRxTail; // Temporary variable to store volatile
  tmpRxTail = TWI_RxTail;  // Not necessary, but prevents warnings
    14d2:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <TWI_RxTail>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:113
  while (TWI_RxHead == tmpRxTail)
    14d6:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <TWI_RxHead>
    14da:	98 17       	cp	r25, r24
    14dc:	e1 f3       	breq	.-8      	; 0x14d6 <main+0x580>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:115
    ;
  tmptail    = (TWI_RxTail + 1) & TWI_RX_BUFFER_MASK; // Calculate buffer index
    14de:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <TWI_RxTail>
    14e2:	ef 5f       	subi	r30, 0xFF	; 255
    14e4:	ef 70       	andi	r30, 0x0F	; 15
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:116
  TWI_RxTail = tmptail;                               // Store new index
    14e6:	e0 93 ad 01 	sts	0x01AD, r30	; 0x8001ad <TWI_RxTail>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:117
  return TWI_RxBuf[tmptail];                          // Return data from the buffer.
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	ee 57       	subi	r30, 0x7E	; 126
    14ee:	fe 4f       	sbci	r31, 0xFE	; 254
read():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:570
    if (BufferLength) {
      value = Buffer[BufferIndex];
      ++BufferIndex;
    } else {
      value = USI_TWI_Receive_Byte();
    14f0:	80 81       	ld	r24, Z
    14f2:	0b cf       	rjmp	.-490    	; 0x130a <main+0x3b4>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:567
  int value = -1;

  // get each successive byte on each call
  if (available()) {
    if (BufferLength) {
      value = Buffer[BufferIndex];
    14f4:	e2 2f       	mov	r30, r18
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	ee 57       	subi	r30, 0x7E	; 126
    14fa:	fe 4f       	sbci	r31, 0xFE	; 254
    14fc:	80 81       	ld	r24, Z
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:568
      ++BufferIndex;
    14fe:	2f 5f       	subi	r18, 0xFF	; 255
    1500:	04 cf       	rjmp	.-504    	; 0x130a <main+0x3b4>
MPL_readAltTemp():
/tmp/arduino_build_376412/sketch/Alt.cpp:119

            }
        } else if (i < 4) {
            alti = (alti << 8) | d;
        } else {
            tempe = (tempe << 8) | d; //temp is 8MSBs=int value, 8LSBs=[4 decimal, 0b0000].
    1502:	68 2f       	mov	r22, r24
    1504:	7c 2f       	mov	r23, r28
    1506:	eb 01       	movw	r28, r22
    1508:	0a cf       	rjmp	.-492    	; 0x131e <main+0x3c8>
getEtage():
/tmp/arduino_build_376412/sketch/Alt.cpp:26
    if (alti < alt_RdC) {
        alt_RdC = alti;
#ifdef DEBUG_Alt
        Serial.print("rs down, ");
#endif
    } else if (alti > (alt_RdC + 15 * FLOOR_HEIGHT)) {
    150a:	80 53       	subi	r24, 0x30	; 48
    150c:	9d 4f       	sbci	r25, 0xFD	; 253
    150e:	af 4f       	sbci	r26, 0xFF	; 255
    1510:	bf 4f       	sbci	r27, 0xFF	; 255
    1512:	8c 15       	cp	r24, r12
    1514:	9d 05       	cpc	r25, r13
    1516:	ae 05       	cpc	r26, r14
    1518:	bf 05       	cpc	r27, r15
    151a:	08 f0       	brcs	.+2      	; 0x151e <main+0x5c8>
    151c:	35 cf       	rjmp	.-406    	; 0x1388 <main+0x432>
/tmp/arduino_build_376412/sketch/Alt.cpp:27
        alt_RdC = alti - (15 * FLOOR_HEIGHT);
    151e:	d7 01       	movw	r26, r14
    1520:	c6 01       	movw	r24, r12
    1522:	80 5d       	subi	r24, 0xD0	; 208
    1524:	92 40       	sbci	r25, 0x02	; 2
    1526:	a1 09       	sbc	r26, r1
    1528:	b1 09       	sbc	r27, r1
    152a:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <alt_data+0x5>
    152e:	90 93 1e 02 	sts	0x021E, r25	; 0x80021e <alt_data+0x6>
    1532:	a0 93 1f 02 	sts	0x021F, r26	; 0x80021f <alt_data+0x7>
    1536:	b0 93 20 02 	sts	0x0220, r27	; 0x800220 <alt_data+0x8>
write():
    153a:	8f e4       	ldi	r24, 0x4F	; 79
    153c:	91 e0       	ldi	r25, 0x01	; 1
    153e:	22 cf       	rjmp	.-444    	; 0x1384 <main+0x42e>
loop():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:70
        uint16_t temp;
        MPL_readAltTemp(&alti, &temp);
        uint8_t etage = alt_data.getEtage(alti);
        switch (log_mode) {
            case 0://All: alt,temp,batt
                Serial.print(alti / 16.0); //in meters
    1540:	c7 01       	movw	r24, r14
    1542:	b6 01       	movw	r22, r12
    1544:	0e 94 45 0c 	call	0x188a	; 0x188a <__floatunsisf>
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	40 e8       	ldi	r20, 0x80	; 128
    154e:	5d e3       	ldi	r21, 0x3D	; 61
    1550:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__mulsf3>
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:108
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1554:	42 e0       	ldi	r20, 0x02	; 2
    1556:	0e 94 db 04 	call	0x9b6	; 0x9b6 <Print::printFloat(double, unsigned char) [clone .constprop.5]>
write():
    155a:	87 e5       	ldi	r24, 0x57	; 87
    155c:	91 e0       	ldi	r25, 0x01	; 1
    155e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <Print::write(char const*) [clone .part.2] [clone .constprop.61]>
loop():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:72
                Serial.print(",");
                Serial.print(temp / 16.0); //in degrees C
    1562:	be 01       	movw	r22, r28
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	80 e0       	ldi	r24, 0x00	; 0
    1568:	0e 94 45 0c 	call	0x188a	; 0x188a <__floatunsisf>
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	40 e8       	ldi	r20, 0x80	; 128
    1572:	5d e3       	ldi	r21, 0x3D	; 61
    1574:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__mulsf3>
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:108
    1578:	42 e0       	ldi	r20, 0x02	; 2
    157a:	0e 94 db 04 	call	0x9b6	; 0x9b6 <Print::printFloat(double, unsigned char) [clone .constprop.5]>
write():
    157e:	87 e5       	ldi	r24, 0x57	; 87
    1580:	91 e0       	ldi	r25, 0x01	; 1
    1582:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <Print::write(char const*) [clone .part.2] [clone .constprop.61]>
loop():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:83
                break;
            case 2://temp only
                Serial.println(temp / 16.0); //in degrees C
                break;
            case 3://batt only
                Serial.println(batt_v / 1024.0 * 2.5 * 2.0);
    1586:	60 91 b0 01 	lds	r22, 0x01B0	; 0x8001b0 <batt_v>
    158a:	70 91 b1 01 	lds	r23, 0x01B1	; 0x8001b1 <batt_v+0x1>
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	0e 94 45 0c 	call	0x188a	; 0x188a <__floatunsisf>
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	40 e8       	ldi	r20, 0x80	; 128
    159c:	5a e3       	ldi	r21, 0x3A	; 58
    159e:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__mulsf3>
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	40 e2       	ldi	r20, 0x20	; 32
    15a8:	50 e4       	ldi	r21, 0x40	; 64
    15aa:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__mulsf3>
    15ae:	9b 01       	movw	r18, r22
    15b0:	ac 01       	movw	r20, r24
    15b2:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__addsf3>
    15b6:	0a c0       	rjmp	.+20     	; 0x15cc <main+0x676>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:77
                Serial.print(temp / 16.0); //in degrees C
                Serial.print(",");
                Serial.println(batt_v / 1024.0 * 2.5 * 2.0);
                break;
            case 1://alt only
                Serial.println(alti / 16.0); //in meters
    15b8:	c7 01       	movw	r24, r14
    15ba:	b6 01       	movw	r22, r12
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:80
                break;
            case 2://temp only
                Serial.println(temp / 16.0); //in degrees C
    15bc:	0e 94 45 0c 	call	0x188a	; 0x188a <__floatunsisf>
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	40 e8       	ldi	r20, 0x80	; 128
    15c6:	5d e3       	ldi	r21, 0x3D	; 61
    15c8:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <__mulsf3>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:83
                break;
            case 3://batt only
                Serial.println(batt_v / 1024.0 * 2.5 * 2.0);
    15cc:	0e 94 c9 05 	call	0xb92	; 0xb92 <Print::println(double, int) [clone .constprop.3]>
    15d0:	2a cf       	rjmp	.-428    	; 0x1426 <main+0x4d0>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:80
                break;
            case 1://alt only
                Serial.println(alti / 16.0); //in meters
                break;
            case 2://temp only
                Serial.println(temp / 16.0); //in degrees C
    15d2:	be 01       	movw	r22, r28
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	f1 cf       	rjmp	.-30     	; 0x15bc <main+0x666>
write_payload():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:252
  }
  while ( blank_len-- ) {
    15da:	c1 50       	subi	r28, 0x01	; 1
    15dc:	20 f0       	brcs	.+8      	; 0x15e6 <main+0x690>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:253
    _SPI.transfer(0);
    15de:	80 e0       	ldi	r24, 0x00	; 0
    15e0:	0e 94 b6 03 	call	0x76c	; 0x76c <SPIClass::transfer(unsigned char)>
    15e4:	fa cf       	rjmp	.-12     	; 0x15da <main+0x684>
endTransaction():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:78
  }

/****************************************************************************/

  inline void RF24::endTransaction() {
    csn(HIGH);
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	0e 94 3d 04 	call	0x87a	; 0x87a <RF24::csn(bool) [clone .constprop.34]>
ce():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:63
/****************************************************************************/

void RF24::ce(bool level)
{
  //Allow for 3-pin use on ATTiny
  if (ce_pin != csn_pin) digitalWrite(ce_pin,level);
    15ec:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <radio>
    15f0:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <radio+0x1>
    15f4:	89 17       	cp	r24, r25
    15f6:	19 f0       	breq	.+6      	; 0x15fe <main+0x6a8>
    15f8:	61 e0       	ldi	r22, 0x01	; 1
    15fa:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <digitalWrite>
get_status():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:348

/****************************************************************************/

uint8_t RF24::get_status(void)
{
  return spiTrans(NOP);
    15fe:	8f ef       	ldi	r24, 0xFF	; 255
    1600:	0e 94 cc 04 	call	0x998	; 0x998 <RF24::spiTrans(unsigned char) [clone .constprop.24]>
write():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:805
	//Wait until complete or failed
	#if defined (FAILURE_HANDLING) || defined (RF24_LINUX)
		uint32_t timer = millis();
	#endif 
	
	while( ! ( get_status()  & ( _BV(TX_DS) | _BV(MAX_RT) ))) { 
    1604:	80 73       	andi	r24, 0x30	; 48
    1606:	d9 f3       	breq	.-10     	; 0x15fe <main+0x6a8>
ce():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:63
/****************************************************************************/

void RF24::ce(bool level)
{
  //Allow for 3-pin use on ATTiny
  if (ce_pin != csn_pin) digitalWrite(ce_pin,level);
    1608:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <radio>
    160c:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <radio+0x1>
    1610:	89 17       	cp	r24, r25
    1612:	19 f0       	breq	.+6      	; 0x161a <main+0x6c4>
    1614:	60 e0       	ldi	r22, 0x00	; 0
    1616:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <digitalWrite>
write():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:820
		#endif
	}
    
	ce(LOW);

	uint8_t status = write_register(NRF_STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
    161a:	60 e7       	ldi	r22, 0x70	; 112
    161c:	87 e0       	ldi	r24, 0x07	; 7
    161e:	0e 94 57 04 	call	0x8ae	; 0x8ae <RF24::write_register(unsigned char, unsigned char) [clone .constprop.31]>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:823

  //Max retries exceeded
  if( status & _BV(MAX_RT)){
    1622:	84 fd       	sbrc	r24, 4
    1624:	09 c0       	rjmp	.+18     	; 0x1638 <main+0x6e2>
send():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:130
    //    Serial.print('\t');
    //    Serial.print(batt);
    //    Serial.print('\t');
    //    Serial.print(alti);
    if (rslt) {
        Serial.println("\tAcknowledge received");
    1626:	89 e5       	ldi	r24, 0x59	; 89
    1628:	91 e0       	ldi	r25, 0x01	; 1
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:133
    }
    else {
        Serial.println("\tTx failed");
    162a:	0e 94 31 04 	call	0x862	; 0x862 <Print::println(char const*) [clone .constprop.40]>
loop():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:96
        dataToSend[3] = (etage << 4) | ((alti >> 14) & 0x0F);
        dataToSend[2] = alti >> 6;
        dataToSend[1] = ((alti << 2) & 0xFC) | ((batt_v >> 8) & 0x03);
        dataToSend[0] = batt_v;
        send();
        digitalWrite(LED0, LOW);
    162e:	60 e0       	ldi	r22, 0x00	; 0
    1630:	8a e0       	ldi	r24, 0x0A	; 10
    1632:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <digitalWrite>
    1636:	23 ce       	rjmp	.-954    	; 0x127e <main+0x328>
flush_tx():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:328

/****************************************************************************/

uint8_t RF24::flush_tx(void)
{
  return spiTrans( FLUSH_TX );
    1638:	81 ee       	ldi	r24, 0xE1	; 225
    163a:	0e 94 cc 04 	call	0x998	; 0x998 <RF24::spiTrans(unsigned char) [clone .constprop.24]>
send():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:133
    //    Serial.print(alti);
    if (rslt) {
        Serial.println("\tAcknowledge received");
    }
    else {
        Serial.println("\tTx failed");
    163e:	8f e6       	ldi	r24, 0x6F	; 111
    1640:	91 e0       	ldi	r25, 0x01	; 1
    1642:	f3 cf       	rjmp	.-26     	; 0x162a <main+0x6d4>

00001644 <__mulqi3>:
__mulqi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:224
    1644:	00 24       	eor	r0, r0

00001646 <__mulqi3_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:226
    1646:	80 fd       	sbrc	r24, 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:227
    1648:	06 0e       	add	r0, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:228
    164a:	66 0f       	add	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:229
    164c:	11 f0       	breq	.+4      	; 0x1652 <__mulqi3_exit>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:230
    164e:	86 95       	lsr	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:231
    1650:	d1 f7       	brne	.-12     	; 0x1646 <__mulqi3_loop>

00001652 <__mulqi3_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:233
    1652:	80 2d       	mov	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:234
    1654:	08 95       	ret

00001656 <__subsf3>:
__subsf3():
    1656:	50 58       	subi	r21, 0x80	; 128

00001658 <__addsf3>:
    1658:	bb 27       	eor	r27, r27
    165a:	aa 27       	eor	r26, r26
    165c:	0e 94 43 0b 	call	0x1686	; 0x1686 <__addsf3x>
    1660:	0c 94 bd 0c 	jmp	0x197a	; 0x197a <__fp_round>
__addsf3():
    1664:	0e 94 af 0c 	call	0x195e	; 0x195e <__fp_pscA>
    1668:	38 f0       	brcs	.+14     	; 0x1678 <__addsf3+0x20>
    166a:	0e 94 b6 0c 	call	0x196c	; 0x196c <__fp_pscB>
    166e:	20 f0       	brcs	.+8      	; 0x1678 <__addsf3+0x20>
    1670:	39 f4       	brne	.+14     	; 0x1680 <__addsf3+0x28>
    1672:	9f 3f       	cpi	r25, 0xFF	; 255
    1674:	19 f4       	brne	.+6      	; 0x167c <__addsf3+0x24>
    1676:	26 f4       	brtc	.+8      	; 0x1680 <__addsf3+0x28>
    1678:	0c 94 ac 0c 	jmp	0x1958	; 0x1958 <__fp_nan>
    167c:	0e f4       	brtc	.+2      	; 0x1680 <__addsf3+0x28>
    167e:	e0 95       	com	r30
    1680:	e7 fb       	bst	r30, 7
    1682:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <__fp_inf>

00001686 <__addsf3x>:
__addsf3x():
    1686:	e9 2f       	mov	r30, r25
    1688:	0e 94 ce 0c 	call	0x199c	; 0x199c <__fp_split3>
    168c:	58 f3       	brcs	.-42     	; 0x1664 <__addsf3+0xc>
    168e:	ba 17       	cp	r27, r26
    1690:	62 07       	cpc	r22, r18
    1692:	73 07       	cpc	r23, r19
    1694:	84 07       	cpc	r24, r20
    1696:	95 07       	cpc	r25, r21
    1698:	20 f0       	brcs	.+8      	; 0x16a2 <__addsf3x+0x1c>
    169a:	79 f4       	brne	.+30     	; 0x16ba <__addsf3x+0x34>
    169c:	a6 f5       	brtc	.+104    	; 0x1706 <__addsf3x+0x80>
    169e:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <__fp_zero>
    16a2:	0e f4       	brtc	.+2      	; 0x16a6 <__addsf3x+0x20>
    16a4:	e0 95       	com	r30
    16a6:	0b 2e       	mov	r0, r27
    16a8:	ba 2f       	mov	r27, r26
    16aa:	a0 2d       	mov	r26, r0
    16ac:	0b 01       	movw	r0, r22
    16ae:	b9 01       	movw	r22, r18
    16b0:	90 01       	movw	r18, r0
    16b2:	0c 01       	movw	r0, r24
    16b4:	ca 01       	movw	r24, r20
    16b6:	a0 01       	movw	r20, r0
    16b8:	11 24       	eor	r1, r1
    16ba:	ff 27       	eor	r31, r31
    16bc:	59 1b       	sub	r21, r25
    16be:	99 f0       	breq	.+38     	; 0x16e6 <__addsf3x+0x60>
    16c0:	59 3f       	cpi	r21, 0xF9	; 249
    16c2:	50 f4       	brcc	.+20     	; 0x16d8 <__addsf3x+0x52>
    16c4:	50 3e       	cpi	r21, 0xE0	; 224
    16c6:	68 f1       	brcs	.+90     	; 0x1722 <__addsf3x+0x9c>
    16c8:	1a 16       	cp	r1, r26
    16ca:	f0 40       	sbci	r31, 0x00	; 0
    16cc:	a2 2f       	mov	r26, r18
    16ce:	23 2f       	mov	r18, r19
    16d0:	34 2f       	mov	r19, r20
    16d2:	44 27       	eor	r20, r20
    16d4:	58 5f       	subi	r21, 0xF8	; 248
    16d6:	f3 cf       	rjmp	.-26     	; 0x16be <__addsf3x+0x38>
    16d8:	46 95       	lsr	r20
    16da:	37 95       	ror	r19
    16dc:	27 95       	ror	r18
    16de:	a7 95       	ror	r26
    16e0:	f0 40       	sbci	r31, 0x00	; 0
    16e2:	53 95       	inc	r21
    16e4:	c9 f7       	brne	.-14     	; 0x16d8 <__addsf3x+0x52>
    16e6:	7e f4       	brtc	.+30     	; 0x1706 <__addsf3x+0x80>
    16e8:	1f 16       	cp	r1, r31
    16ea:	ba 0b       	sbc	r27, r26
    16ec:	62 0b       	sbc	r22, r18
    16ee:	73 0b       	sbc	r23, r19
    16f0:	84 0b       	sbc	r24, r20
    16f2:	ba f0       	brmi	.+46     	; 0x1722 <__addsf3x+0x9c>
    16f4:	91 50       	subi	r25, 0x01	; 1
    16f6:	a1 f0       	breq	.+40     	; 0x1720 <__addsf3x+0x9a>
    16f8:	ff 0f       	add	r31, r31
    16fa:	bb 1f       	adc	r27, r27
    16fc:	66 1f       	adc	r22, r22
    16fe:	77 1f       	adc	r23, r23
    1700:	88 1f       	adc	r24, r24
    1702:	c2 f7       	brpl	.-16     	; 0x16f4 <__addsf3x+0x6e>
    1704:	0e c0       	rjmp	.+28     	; 0x1722 <__addsf3x+0x9c>
    1706:	ba 0f       	add	r27, r26
    1708:	62 1f       	adc	r22, r18
    170a:	73 1f       	adc	r23, r19
    170c:	84 1f       	adc	r24, r20
    170e:	48 f4       	brcc	.+18     	; 0x1722 <__addsf3x+0x9c>
    1710:	87 95       	ror	r24
    1712:	77 95       	ror	r23
    1714:	67 95       	ror	r22
    1716:	b7 95       	ror	r27
    1718:	f7 95       	ror	r31
    171a:	9e 3f       	cpi	r25, 0xFE	; 254
    171c:	08 f0       	brcs	.+2      	; 0x1720 <__addsf3x+0x9a>
    171e:	b0 cf       	rjmp	.-160    	; 0x1680 <__addsf3+0x28>
    1720:	93 95       	inc	r25
    1722:	88 0f       	add	r24, r24
    1724:	08 f0       	brcs	.+2      	; 0x1728 <__addsf3x+0xa2>
    1726:	99 27       	eor	r25, r25
    1728:	ee 0f       	add	r30, r30
    172a:	97 95       	ror	r25
    172c:	87 95       	ror	r24
    172e:	08 95       	ret

00001730 <__cmpsf2>:
    1730:	0e 94 82 0c 	call	0x1904	; 0x1904 <__fp_cmp>
    1734:	08 f4       	brcc	.+2      	; 0x1738 <__cmpsf2+0x8>
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	08 95       	ret

0000173a <__divsf3>:
    173a:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__divsf3x>
    173e:	0c 94 bd 0c 	jmp	0x197a	; 0x197a <__fp_round>
    1742:	0e 94 b6 0c 	call	0x196c	; 0x196c <__fp_pscB>
    1746:	58 f0       	brcs	.+22     	; 0x175e <__divsf3+0x24>
    1748:	0e 94 af 0c 	call	0x195e	; 0x195e <__fp_pscA>
    174c:	40 f0       	brcs	.+16     	; 0x175e <__divsf3+0x24>
    174e:	29 f4       	brne	.+10     	; 0x175a <__divsf3+0x20>
    1750:	5f 3f       	cpi	r21, 0xFF	; 255
__divsf3():
    1752:	29 f0       	breq	.+10     	; 0x175e <__divsf3+0x24>
    1754:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <__fp_inf>
    1758:	51 11       	cpse	r21, r1
    175a:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__fp_szero>
    175e:	0c 94 ac 0c 	jmp	0x1958	; 0x1958 <__fp_nan>

00001762 <__divsf3x>:
__divsf3x():
    1762:	0e 94 ce 0c 	call	0x199c	; 0x199c <__fp_split3>
    1766:	68 f3       	brcs	.-38     	; 0x1742 <__divsf3+0x8>

00001768 <__divsf3_pse>:
    1768:	99 23       	and	r25, r25
    176a:	b1 f3       	breq	.-20     	; 0x1758 <__divsf3+0x1e>
    176c:	55 23       	and	r21, r21
    176e:	91 f3       	breq	.-28     	; 0x1754 <__divsf3+0x1a>
    1770:	95 1b       	sub	r25, r21
    1772:	55 0b       	sbc	r21, r21
    1774:	bb 27       	eor	r27, r27
    1776:	aa 27       	eor	r26, r26
    1778:	62 17       	cp	r22, r18
    177a:	73 07       	cpc	r23, r19
    177c:	84 07       	cpc	r24, r20
    177e:	38 f0       	brcs	.+14     	; 0x178e <__divsf3_pse+0x26>
    1780:	9f 5f       	subi	r25, 0xFF	; 255
    1782:	5f 4f       	sbci	r21, 0xFF	; 255
    1784:	22 0f       	add	r18, r18
    1786:	33 1f       	adc	r19, r19
    1788:	44 1f       	adc	r20, r20
    178a:	aa 1f       	adc	r26, r26
    178c:	a9 f3       	breq	.-22     	; 0x1778 <__divsf3_pse+0x10>
    178e:	35 d0       	rcall	.+106    	; 0x17fa <__divsf3_pse+0x92>
    1790:	0e 2e       	mov	r0, r30
    1792:	3a f0       	brmi	.+14     	; 0x17a2 <__divsf3_pse+0x3a>
    1794:	e0 e8       	ldi	r30, 0x80	; 128
    1796:	32 d0       	rcall	.+100    	; 0x17fc <__divsf3_pse+0x94>
    1798:	91 50       	subi	r25, 0x01	; 1
    179a:	50 40       	sbci	r21, 0x00	; 0
    179c:	e6 95       	lsr	r30
    179e:	00 1c       	adc	r0, r0
    17a0:	ca f7       	brpl	.-14     	; 0x1794 <__divsf3_pse+0x2c>
    17a2:	2b d0       	rcall	.+86     	; 0x17fa <__divsf3_pse+0x92>
    17a4:	fe 2f       	mov	r31, r30
    17a6:	29 d0       	rcall	.+82     	; 0x17fa <__divsf3_pse+0x92>
    17a8:	66 0f       	add	r22, r22
    17aa:	77 1f       	adc	r23, r23
    17ac:	88 1f       	adc	r24, r24
    17ae:	bb 1f       	adc	r27, r27
    17b0:	26 17       	cp	r18, r22
    17b2:	37 07       	cpc	r19, r23
    17b4:	48 07       	cpc	r20, r24
    17b6:	ab 07       	cpc	r26, r27
    17b8:	b0 e8       	ldi	r27, 0x80	; 128
    17ba:	09 f0       	breq	.+2      	; 0x17be <__divsf3_pse+0x56>
    17bc:	bb 0b       	sbc	r27, r27
    17be:	80 2d       	mov	r24, r0
    17c0:	bf 01       	movw	r22, r30
    17c2:	ff 27       	eor	r31, r31
    17c4:	93 58       	subi	r25, 0x83	; 131
    17c6:	5f 4f       	sbci	r21, 0xFF	; 255
    17c8:	3a f0       	brmi	.+14     	; 0x17d8 <__divsf3_pse+0x70>
    17ca:	9e 3f       	cpi	r25, 0xFE	; 254
    17cc:	51 05       	cpc	r21, r1
    17ce:	78 f0       	brcs	.+30     	; 0x17ee <__divsf3_pse+0x86>
    17d0:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <__fp_inf>
    17d4:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__fp_szero>
    17d8:	5f 3f       	cpi	r21, 0xFF	; 255
    17da:	e4 f3       	brlt	.-8      	; 0x17d4 <__divsf3_pse+0x6c>
    17dc:	98 3e       	cpi	r25, 0xE8	; 232
    17de:	d4 f3       	brlt	.-12     	; 0x17d4 <__divsf3_pse+0x6c>
    17e0:	86 95       	lsr	r24
    17e2:	77 95       	ror	r23
    17e4:	67 95       	ror	r22
    17e6:	b7 95       	ror	r27
    17e8:	f7 95       	ror	r31
    17ea:	9f 5f       	subi	r25, 0xFF	; 255
    17ec:	c9 f7       	brne	.-14     	; 0x17e0 <__divsf3_pse+0x78>
    17ee:	88 0f       	add	r24, r24
    17f0:	91 1d       	adc	r25, r1
    17f2:	96 95       	lsr	r25
    17f4:	87 95       	ror	r24
    17f6:	97 f9       	bld	r25, 7
    17f8:	08 95       	ret
    17fa:	e1 e0       	ldi	r30, 0x01	; 1
    17fc:	66 0f       	add	r22, r22
    17fe:	77 1f       	adc	r23, r23
    1800:	88 1f       	adc	r24, r24
    1802:	bb 1f       	adc	r27, r27
    1804:	62 17       	cp	r22, r18
    1806:	73 07       	cpc	r23, r19
    1808:	84 07       	cpc	r24, r20
    180a:	ba 07       	cpc	r27, r26
    180c:	20 f0       	brcs	.+8      	; 0x1816 <__divsf3_pse+0xae>
    180e:	62 1b       	sub	r22, r18
    1810:	73 0b       	sbc	r23, r19
    1812:	84 0b       	sbc	r24, r20
    1814:	ba 0b       	sbc	r27, r26
    1816:	ee 1f       	adc	r30, r30
    1818:	88 f7       	brcc	.-30     	; 0x17fc <__divsf3_pse+0x94>
    181a:	e0 95       	com	r30
    181c:	08 95       	ret

0000181e <__fixsfsi>:
    181e:	0e 94 16 0c 	call	0x182c	; 0x182c <__fixunssfsi>
    1822:	68 94       	set
    1824:	b1 11       	cpse	r27, r1
    1826:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__fp_szero>
    182a:	08 95       	ret

0000182c <__fixunssfsi>:
    182c:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <__fp_splitA>
    1830:	88 f0       	brcs	.+34     	; 0x1854 <__fixunssfsi+0x28>
    1832:	9f 57       	subi	r25, 0x7F	; 127
    1834:	98 f0       	brcs	.+38     	; 0x185c <__fixunssfsi+0x30>
    1836:	b9 2f       	mov	r27, r25
    1838:	99 27       	eor	r25, r25
    183a:	b7 51       	subi	r27, 0x17	; 23
    183c:	b0 f0       	brcs	.+44     	; 0x186a <__fixunssfsi+0x3e>
__fixunssfsi():
    183e:	e1 f0       	breq	.+56     	; 0x1878 <__fixunssfsi+0x4c>
    1840:	66 0f       	add	r22, r22
    1842:	77 1f       	adc	r23, r23
    1844:	88 1f       	adc	r24, r24
    1846:	99 1f       	adc	r25, r25
    1848:	1a f0       	brmi	.+6      	; 0x1850 <__fixunssfsi+0x24>
    184a:	ba 95       	dec	r27
    184c:	c9 f7       	brne	.-14     	; 0x1840 <__fixunssfsi+0x14>
    184e:	14 c0       	rjmp	.+40     	; 0x1878 <__fixunssfsi+0x4c>
    1850:	b1 30       	cpi	r27, 0x01	; 1
    1852:	91 f0       	breq	.+36     	; 0x1878 <__fixunssfsi+0x4c>
    1854:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <__fp_zero>
    1858:	b1 e0       	ldi	r27, 0x01	; 1
    185a:	08 95       	ret
    185c:	0c 94 f0 0c 	jmp	0x19e0	; 0x19e0 <__fp_zero>
    1860:	67 2f       	mov	r22, r23
    1862:	78 2f       	mov	r23, r24
    1864:	88 27       	eor	r24, r24
    1866:	b8 5f       	subi	r27, 0xF8	; 248
    1868:	39 f0       	breq	.+14     	; 0x1878 <__fixunssfsi+0x4c>
    186a:	b9 3f       	cpi	r27, 0xF9	; 249
    186c:	cc f3       	brlt	.-14     	; 0x1860 <__fixunssfsi+0x34>
    186e:	86 95       	lsr	r24
    1870:	77 95       	ror	r23
    1872:	67 95       	ror	r22
    1874:	b3 95       	inc	r27
    1876:	d9 f7       	brne	.-10     	; 0x186e <__fixunssfsi+0x42>
    1878:	3e f4       	brtc	.+14     	; 0x1888 <__fixunssfsi+0x5c>
    187a:	90 95       	com	r25
    187c:	80 95       	com	r24
    187e:	70 95       	com	r23
    1880:	61 95       	neg	r22
    1882:	7f 4f       	sbci	r23, 0xFF	; 255
    1884:	8f 4f       	sbci	r24, 0xFF	; 255
    1886:	9f 4f       	sbci	r25, 0xFF	; 255
    1888:	08 95       	ret

0000188a <__floatunsisf>:
__floatunsisf():
    188a:	e8 94       	clt
    188c:	09 c0       	rjmp	.+18     	; 0x18a0 <__floatsisf+0x12>

0000188e <__floatsisf>:
    188e:	97 fb       	bst	r25, 7
    1890:	3e f4       	brtc	.+14     	; 0x18a0 <__floatsisf+0x12>
    1892:	90 95       	com	r25
    1894:	80 95       	com	r24
    1896:	70 95       	com	r23
    1898:	61 95       	neg	r22
    189a:	7f 4f       	sbci	r23, 0xFF	; 255
    189c:	8f 4f       	sbci	r24, 0xFF	; 255
    189e:	9f 4f       	sbci	r25, 0xFF	; 255
    18a0:	99 23       	and	r25, r25
    18a2:	a9 f0       	breq	.+42     	; 0x18ce <__floatsisf+0x40>
    18a4:	f9 2f       	mov	r31, r25
    18a6:	96 e9       	ldi	r25, 0x96	; 150
    18a8:	bb 27       	eor	r27, r27
    18aa:	93 95       	inc	r25
    18ac:	f6 95       	lsr	r31
    18ae:	87 95       	ror	r24
    18b0:	77 95       	ror	r23
    18b2:	67 95       	ror	r22
    18b4:	b7 95       	ror	r27
    18b6:	f1 11       	cpse	r31, r1
    18b8:	f8 cf       	rjmp	.-16     	; 0x18aa <__floatsisf+0x1c>
    18ba:	fa f4       	brpl	.+62     	; 0x18fa <__floatsisf+0x6c>
    18bc:	bb 0f       	add	r27, r27
    18be:	11 f4       	brne	.+4      	; 0x18c4 <__floatsisf+0x36>
    18c0:	60 ff       	sbrs	r22, 0
    18c2:	1b c0       	rjmp	.+54     	; 0x18fa <__floatsisf+0x6c>
    18c4:	6f 5f       	subi	r22, 0xFF	; 255
    18c6:	7f 4f       	sbci	r23, 0xFF	; 255
    18c8:	8f 4f       	sbci	r24, 0xFF	; 255
    18ca:	9f 4f       	sbci	r25, 0xFF	; 255
    18cc:	16 c0       	rjmp	.+44     	; 0x18fa <__floatsisf+0x6c>
    18ce:	88 23       	and	r24, r24
    18d0:	11 f0       	breq	.+4      	; 0x18d6 <__floatsisf+0x48>
    18d2:	96 e9       	ldi	r25, 0x96	; 150
    18d4:	11 c0       	rjmp	.+34     	; 0x18f8 <__floatsisf+0x6a>
    18d6:	77 23       	and	r23, r23
    18d8:	21 f0       	breq	.+8      	; 0x18e2 <__floatsisf+0x54>
    18da:	9e e8       	ldi	r25, 0x8E	; 142
    18dc:	87 2f       	mov	r24, r23
    18de:	76 2f       	mov	r23, r22
    18e0:	05 c0       	rjmp	.+10     	; 0x18ec <__floatsisf+0x5e>
    18e2:	66 23       	and	r22, r22
    18e4:	71 f0       	breq	.+28     	; 0x1902 <__floatsisf+0x74>
    18e6:	96 e8       	ldi	r25, 0x86	; 134
    18e8:	86 2f       	mov	r24, r22
    18ea:	70 e0       	ldi	r23, 0x00	; 0
    18ec:	60 e0       	ldi	r22, 0x00	; 0
    18ee:	2a f0       	brmi	.+10     	; 0x18fa <__floatsisf+0x6c>
    18f0:	9a 95       	dec	r25
    18f2:	66 0f       	add	r22, r22
    18f4:	77 1f       	adc	r23, r23
    18f6:	88 1f       	adc	r24, r24
    18f8:	da f7       	brpl	.-10     	; 0x18f0 <__floatsisf+0x62>
    18fa:	88 0f       	add	r24, r24
    18fc:	96 95       	lsr	r25
    18fe:	87 95       	ror	r24
    1900:	97 f9       	bld	r25, 7
    1902:	08 95       	ret

00001904 <__fp_cmp>:
__fp_cmp():
    1904:	99 0f       	add	r25, r25
    1906:	00 08       	sbc	r0, r0
    1908:	55 0f       	add	r21, r21
    190a:	aa 0b       	sbc	r26, r26
    190c:	e0 e8       	ldi	r30, 0x80	; 128
    190e:	fe ef       	ldi	r31, 0xFE	; 254
    1910:	16 16       	cp	r1, r22
    1912:	17 06       	cpc	r1, r23
    1914:	e8 07       	cpc	r30, r24
    1916:	f9 07       	cpc	r31, r25
    1918:	c0 f0       	brcs	.+48     	; 0x194a <__fp_cmp+0x46>
    191a:	12 16       	cp	r1, r18
    191c:	13 06       	cpc	r1, r19
    191e:	e4 07       	cpc	r30, r20
    1920:	f5 07       	cpc	r31, r21
    1922:	98 f0       	brcs	.+38     	; 0x194a <__fp_cmp+0x46>
    1924:	62 1b       	sub	r22, r18
    1926:	73 0b       	sbc	r23, r19
    1928:	84 0b       	sbc	r24, r20
    192a:	95 0b       	sbc	r25, r21
    192c:	39 f4       	brne	.+14     	; 0x193c <__fp_cmp+0x38>
    192e:	0a 26       	eor	r0, r26
    1930:	61 f0       	breq	.+24     	; 0x194a <__fp_cmp+0x46>
    1932:	23 2b       	or	r18, r19
    1934:	24 2b       	or	r18, r20
    1936:	25 2b       	or	r18, r21
    1938:	21 f4       	brne	.+8      	; 0x1942 <__fp_cmp+0x3e>
    193a:	08 95       	ret
    193c:	0a 26       	eor	r0, r26
    193e:	09 f4       	brne	.+2      	; 0x1942 <__fp_cmp+0x3e>
    1940:	a1 40       	sbci	r26, 0x01	; 1
    1942:	a6 95       	lsr	r26
    1944:	8f ef       	ldi	r24, 0xFF	; 255
    1946:	81 1d       	adc	r24, r1
    1948:	81 1d       	adc	r24, r1
    194a:	08 95       	ret

0000194c <__fp_inf>:
__fp_inf():
    194c:	97 f9       	bld	r25, 7
    194e:	9f 67       	ori	r25, 0x7F	; 127
    1950:	80 e8       	ldi	r24, 0x80	; 128
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	60 e0       	ldi	r22, 0x00	; 0
    1956:	08 95       	ret

00001958 <__fp_nan>:
__fp_nan():
    1958:	9f ef       	ldi	r25, 0xFF	; 255
    195a:	80 ec       	ldi	r24, 0xC0	; 192
    195c:	08 95       	ret

0000195e <__fp_pscA>:
__fp_pscA():
    195e:	00 24       	eor	r0, r0
    1960:	0a 94       	dec	r0
    1962:	16 16       	cp	r1, r22
    1964:	17 06       	cpc	r1, r23
    1966:	18 06       	cpc	r1, r24
    1968:	09 06       	cpc	r0, r25
    196a:	08 95       	ret

0000196c <__fp_pscB>:
__fp_pscB():
    196c:	00 24       	eor	r0, r0
    196e:	0a 94       	dec	r0
    1970:	12 16       	cp	r1, r18
    1972:	13 06       	cpc	r1, r19
    1974:	14 06       	cpc	r1, r20
    1976:	05 06       	cpc	r0, r21
    1978:	08 95       	ret

0000197a <__fp_round>:
__fp_round():
    197a:	09 2e       	mov	r0, r25
    197c:	03 94       	inc	r0
    197e:	00 0c       	add	r0, r0
    1980:	11 f4       	brne	.+4      	; 0x1986 <__fp_round+0xc>
    1982:	88 23       	and	r24, r24
    1984:	52 f0       	brmi	.+20     	; 0x199a <__fp_round+0x20>
    1986:	bb 0f       	add	r27, r27
    1988:	40 f4       	brcc	.+16     	; 0x199a <__fp_round+0x20>
    198a:	bf 2b       	or	r27, r31
    198c:	11 f4       	brne	.+4      	; 0x1992 <__fp_round+0x18>
    198e:	60 ff       	sbrs	r22, 0
    1990:	04 c0       	rjmp	.+8      	; 0x199a <__fp_round+0x20>
    1992:	6f 5f       	subi	r22, 0xFF	; 255
    1994:	7f 4f       	sbci	r23, 0xFF	; 255
    1996:	8f 4f       	sbci	r24, 0xFF	; 255
    1998:	9f 4f       	sbci	r25, 0xFF	; 255
    199a:	08 95       	ret

0000199c <__fp_split3>:
__fp_split3():
    199c:	57 fd       	sbrc	r21, 7
    199e:	90 58       	subi	r25, 0x80	; 128
    19a0:	44 0f       	add	r20, r20
    19a2:	55 1f       	adc	r21, r21
    19a4:	59 f0       	breq	.+22     	; 0x19bc <__fp_splitA+0x10>
    19a6:	5f 3f       	cpi	r21, 0xFF	; 255
    19a8:	71 f0       	breq	.+28     	; 0x19c6 <__fp_splitA+0x1a>
    19aa:	47 95       	ror	r20

000019ac <__fp_splitA>:
    19ac:	88 0f       	add	r24, r24
    19ae:	97 fb       	bst	r25, 7
    19b0:	99 1f       	adc	r25, r25
    19b2:	61 f0       	breq	.+24     	; 0x19cc <__fp_splitA+0x20>
    19b4:	9f 3f       	cpi	r25, 0xFF	; 255
    19b6:	79 f0       	breq	.+30     	; 0x19d6 <__fp_splitA+0x2a>
    19b8:	87 95       	ror	r24
    19ba:	08 95       	ret
    19bc:	12 16       	cp	r1, r18
    19be:	13 06       	cpc	r1, r19
    19c0:	14 06       	cpc	r1, r20
    19c2:	55 1f       	adc	r21, r21
    19c4:	f2 cf       	rjmp	.-28     	; 0x19aa <__fp_split3+0xe>
    19c6:	46 95       	lsr	r20
    19c8:	f1 df       	rcall	.-30     	; 0x19ac <__fp_splitA>
    19ca:	08 c0       	rjmp	.+16     	; 0x19dc <__fp_splitA+0x30>
    19cc:	16 16       	cp	r1, r22
    19ce:	17 06       	cpc	r1, r23
    19d0:	18 06       	cpc	r1, r24
    19d2:	99 1f       	adc	r25, r25
    19d4:	f1 cf       	rjmp	.-30     	; 0x19b8 <__fp_splitA+0xc>
    19d6:	86 95       	lsr	r24
    19d8:	71 05       	cpc	r23, r1
    19da:	61 05       	cpc	r22, r1
    19dc:	08 94       	sec
    19de:	08 95       	ret

000019e0 <__fp_zero>:
__fp_zero():
    19e0:	e8 94       	clt

000019e2 <__fp_szero>:
    19e2:	bb 27       	eor	r27, r27
    19e4:	66 27       	eor	r22, r22
    19e6:	77 27       	eor	r23, r23
    19e8:	cb 01       	movw	r24, r22
    19ea:	97 f9       	bld	r25, 7
    19ec:	08 95       	ret

000019ee <__gesf2>:
__gesf2():
    19ee:	0e 94 82 0c 	call	0x1904	; 0x1904 <__fp_cmp>
    19f2:	08 f4       	brcc	.+2      	; 0x19f6 <__gesf2+0x8>
    19f4:	8f ef       	ldi	r24, 0xFF	; 255
    19f6:	08 95       	ret

000019f8 <__mulsf3>:
__mulsf3():
    19f8:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__mulsf3x>
    19fc:	0c 94 bd 0c 	jmp	0x197a	; 0x197a <__fp_round>
    1a00:	0e 94 af 0c 	call	0x195e	; 0x195e <__fp_pscA>
    1a04:	38 f0       	brcs	.+14     	; 0x1a14 <__mulsf3+0x1c>
    1a06:	0e 94 b6 0c 	call	0x196c	; 0x196c <__fp_pscB>
    1a0a:	20 f0       	brcs	.+8      	; 0x1a14 <__mulsf3+0x1c>
    1a0c:	95 23       	and	r25, r21
    1a0e:	11 f0       	breq	.+4      	; 0x1a14 <__mulsf3+0x1c>
    1a10:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <__fp_inf>
    1a14:	0c 94 ac 0c 	jmp	0x1958	; 0x1958 <__fp_nan>
    1a18:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__fp_szero>

00001a1c <__mulsf3x>:
__mulsf3x():
    1a1c:	0e 94 ce 0c 	call	0x199c	; 0x199c <__fp_split3>
    1a20:	78 f3       	brcs	.-34     	; 0x1a00 <__mulsf3+0x8>

00001a22 <__mulsf3_pse>:
    1a22:	99 23       	and	r25, r25
    1a24:	c9 f3       	breq	.-14     	; 0x1a18 <__mulsf3+0x20>
    1a26:	55 23       	and	r21, r21
    1a28:	b9 f3       	breq	.-18     	; 0x1a18 <__mulsf3+0x20>
    1a2a:	95 0f       	add	r25, r21
    1a2c:	50 e0       	ldi	r21, 0x00	; 0
    1a2e:	55 1f       	adc	r21, r21
    1a30:	aa 27       	eor	r26, r26
    1a32:	ee 27       	eor	r30, r30
    1a34:	ff 27       	eor	r31, r31
    1a36:	bb 27       	eor	r27, r27
    1a38:	00 24       	eor	r0, r0
    1a3a:	08 94       	sec
    1a3c:	67 95       	ror	r22
    1a3e:	20 f4       	brcc	.+8      	; 0x1a48 <__mulsf3_pse+0x26>
    1a40:	e2 0f       	add	r30, r18
    1a42:	f3 1f       	adc	r31, r19
    1a44:	b4 1f       	adc	r27, r20
    1a46:	0a 1e       	adc	r0, r26
    1a48:	22 0f       	add	r18, r18
    1a4a:	33 1f       	adc	r19, r19
    1a4c:	44 1f       	adc	r20, r20
    1a4e:	aa 1f       	adc	r26, r26
    1a50:	66 95       	lsr	r22
    1a52:	a9 f7       	brne	.-22     	; 0x1a3e <__mulsf3_pse+0x1c>
    1a54:	77 95       	ror	r23
    1a56:	30 f4       	brcc	.+12     	; 0x1a64 <__mulsf3_pse+0x42>
    1a58:	f3 0f       	add	r31, r19
    1a5a:	b4 1f       	adc	r27, r20
    1a5c:	0a 1e       	adc	r0, r26
    1a5e:	12 1e       	adc	r1, r18
    1a60:	08 f4       	brcc	.+2      	; 0x1a64 <__mulsf3_pse+0x42>
    1a62:	63 95       	inc	r22
    1a64:	33 0f       	add	r19, r19
    1a66:	44 1f       	adc	r20, r20
    1a68:	aa 1f       	adc	r26, r26
    1a6a:	22 1f       	adc	r18, r18
    1a6c:	76 95       	lsr	r23
    1a6e:	99 f7       	brne	.-26     	; 0x1a56 <__mulsf3_pse+0x34>
    1a70:	87 95       	ror	r24
    1a72:	20 f4       	brcc	.+8      	; 0x1a7c <__mulsf3_pse+0x5a>
    1a74:	b4 0f       	add	r27, r20
    1a76:	0a 1e       	adc	r0, r26
    1a78:	12 1e       	adc	r1, r18
    1a7a:	63 1f       	adc	r22, r19
    1a7c:	44 0f       	add	r20, r20
    1a7e:	aa 1f       	adc	r26, r26
    1a80:	22 1f       	adc	r18, r18
    1a82:	33 1f       	adc	r19, r19
    1a84:	86 95       	lsr	r24
    1a86:	a9 f7       	brne	.-22     	; 0x1a72 <__mulsf3_pse+0x50>
    1a88:	86 2f       	mov	r24, r22
    1a8a:	71 2d       	mov	r23, r1
    1a8c:	60 2d       	mov	r22, r0
    1a8e:	11 24       	eor	r1, r1
    1a90:	9f 57       	subi	r25, 0x7F	; 127
    1a92:	50 40       	sbci	r21, 0x00	; 0
    1a94:	9a f0       	brmi	.+38     	; 0x1abc <__mulsf3_pse+0x9a>
    1a96:	f1 f0       	breq	.+60     	; 0x1ad4 <__mulsf3_pse+0xb2>
    1a98:	88 23       	and	r24, r24
    1a9a:	4a f0       	brmi	.+18     	; 0x1aae <__mulsf3_pse+0x8c>
    1a9c:	ee 0f       	add	r30, r30
    1a9e:	ff 1f       	adc	r31, r31
    1aa0:	bb 1f       	adc	r27, r27
    1aa2:	66 1f       	adc	r22, r22
    1aa4:	77 1f       	adc	r23, r23
    1aa6:	88 1f       	adc	r24, r24
    1aa8:	91 50       	subi	r25, 0x01	; 1
    1aaa:	50 40       	sbci	r21, 0x00	; 0
    1aac:	a9 f7       	brne	.-22     	; 0x1a98 <__mulsf3_pse+0x76>
    1aae:	9e 3f       	cpi	r25, 0xFE	; 254
    1ab0:	51 05       	cpc	r21, r1
    1ab2:	80 f0       	brcs	.+32     	; 0x1ad4 <__mulsf3_pse+0xb2>
    1ab4:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <__fp_inf>
    1ab8:	0c 94 f1 0c 	jmp	0x19e2	; 0x19e2 <__fp_szero>
    1abc:	5f 3f       	cpi	r21, 0xFF	; 255
    1abe:	e4 f3       	brlt	.-8      	; 0x1ab8 <__mulsf3_pse+0x96>
    1ac0:	98 3e       	cpi	r25, 0xE8	; 232
    1ac2:	d4 f3       	brlt	.-12     	; 0x1ab8 <__mulsf3_pse+0x96>
    1ac4:	86 95       	lsr	r24
    1ac6:	77 95       	ror	r23
    1ac8:	67 95       	ror	r22
    1aca:	b7 95       	ror	r27
    1acc:	f7 95       	ror	r31
    1ace:	e7 95       	ror	r30
    1ad0:	9f 5f       	subi	r25, 0xFF	; 255
    1ad2:	c1 f7       	brne	.-16     	; 0x1ac4 <__mulsf3_pse+0xa2>
    1ad4:	fe 2b       	or	r31, r30
    1ad6:	88 0f       	add	r24, r24
    1ad8:	91 1d       	adc	r25, r1
    1ada:	96 95       	lsr	r25
    1adc:	87 95       	ror	r24
    1ade:	97 f9       	bld	r25, 7
    1ae0:	08 95       	ret

00001ae2 <__unordsf2>:
    1ae2:	0e 94 82 0c 	call	0x1904	; 0x1904 <__fp_cmp>
    1ae6:	88 0b       	sbc	r24, r24
    1ae8:	99 0b       	sbc	r25, r25
    1aea:	08 95       	ret

00001aec <__udivmodsi4>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1aec:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1aee:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1af0:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1af2:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    1af4:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1af6:	0d c0       	rjmp	.+26     	; 0x1b12 <__udivmodsi4_ep>

00001af8 <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1af8:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1afa:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1afc:	ee 1f       	adc	r30, r30
__udivmodsi4_loop():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1afe:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1b00:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1b02:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    1b04:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    1b06:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1b08:	20 f0       	brcs	.+8      	; 0x1b12 <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1b0a:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1b0c:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1b0e:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1b10:	f5 0b       	sbc	r31, r21

00001b12 <__udivmodsi4_ep>:
__udivmodsi4_ep():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1b12:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    1b14:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    1b16:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    1b18:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1b1a:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1b1c:	69 f7       	brne	.-38     	; 0x1af8 <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1b1e:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1b20:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1b22:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    1b24:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    1b26:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    1b28:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1b2a:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1b2c:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1b2e:	08 95       	ret

00001b30 <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1b30:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1b32:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    1b34:	05 90       	lpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1b36:	f4 91       	lpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1b38:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1b3a:	09 94       	ijmp

00001b3c <_exit>:
exit():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1b3c:	f8 94       	cli

00001b3e <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1b3e:	ff cf       	rjmp	.-2      	; 0x1b3e <__stop_program>
