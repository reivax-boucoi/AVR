
/tmp/arduino_build_376412/elevator_altimeter.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__ctors_end>
       4:	0c 94 2e 08 	jmp	0x105c	; 0x105c <__vector_1>
       8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
       c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      10:	0c 94 3d 08 	jmp	0x107a	; 0x107a <__vector_4>
      14:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      18:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      1c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      20:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      24:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      28:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      2c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      30:	0c 94 50 07 	jmp	0xea0	; 0xea0 <__vector_12>
      34:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      38:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      3c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      40:	0c 94 1e 07 	jmp	0xe3c	; 0xe3c <__vector_16>
      44:	0c 94 f8 06 	jmp	0xdf0	; 0xdf0 <__vector_17>
      48:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      4c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      50:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      54:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      58:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      5c:	0c 94 15 08 	jmp	0x102a	; 0x102a <__vector_23>
      60:	0c 94 9a 07 	jmp	0xf34	; 0xf34 <__vector_24>
      64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      68:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      6c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>

00000070 <__trampolines_end>:
__trampolines_start():
      70:	00 2f       	mov	r16, r16
      72:	2b 27       	eor	r18, r27

00000074 <port_to_mode_PGM>:
      74:	00 30 2c 28                                         .0,(

00000078 <port_to_pullup_PGM>:
      78:	00 32 2e 2a                                         .2.*

0000007c <port_to_output_PGM>:
      7c:	00 31 2d 29                                         .1-)

00000080 <digital_pin_to_port_PGM>:
      80:	02 01 01 01 01 01 01 01 01 03 03 03 03 03 02 02     ................
      90:	02 03                                               ..

00000092 <digital_pin_to_bit_mask_PGM>:
      92:	01 80 40 20 10 08 04 02 01 20 10 04 02 01 08 04     ..@ ..... ......
      a2:	02 08                                               ..

000000a4 <__ctors_start>:
__ctors_start():
      a4:	87 08       	sbc	r8, r7

000000a6 <__ctors_end>:
__dtors_end():
      a6:	11 24       	eor	r1, r1
      a8:	1f be       	out	0x3f, r1	; 63
      aa:	cf ef       	ldi	r28, 0xFF	; 255
      ac:	d4 e0       	ldi	r29, 0x04	; 4
      ae:	de bf       	out	0x3e, r29	; 62
      b0:	cd bf       	out	0x3d, r28	; 61

000000b2 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      b2:	22 e0       	ldi	r18, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      b4:	a0 e8       	ldi	r26, 0x80	; 128
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      b6:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      bc:	a0 33       	cpi	r26, 0x30	; 48
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      be:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>

000000c2 <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      c2:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      c4:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      c6:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      c8:	e4 ec       	ldi	r30, 0xC4	; 196
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      ca:	fe e1       	ldi	r31, 0x1E	; 30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      cc:	02 c0       	rjmp	.+4      	; 0xd2 <__do_copy_data+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      ce:	05 90       	lpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      d0:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      d2:	a0 38       	cpi	r26, 0x80	; 128
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      d4:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      d6:	d9 f7       	brne	.-10     	; 0xce <__do_copy_data+0xc>

000000d8 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
      d8:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
      da:	c3 e5       	ldi	r28, 0x53	; 83
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
      dc:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
      de:	04 c0       	rjmp	.+8      	; 0xe8 <__do_global_ctors+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
      e0:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
      e2:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
      e4:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
      e8:	c2 35       	cpi	r28, 0x52	; 82
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
      ea:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
      ec:	c9 f7       	brne	.-14     	; 0xe0 <__do_global_ctors+0x8>
      ee:	0e 94 cd 08 	call	0x119a	; 0x119a <main>
      f2:	0c 94 60 0f 	jmp	0x1ec0	; 0x1ec0 <_exit>

000000f6 <__bad_interrupt>:
__vector_22():
      f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fa <TwoWire::write(int) [clone .constprop.65]>:
write():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:507

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data) {
  if (transmitting) { // in master transmitter mode
      fa:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <TwoWire::transmitting>
      fe:	99 23       	and	r25, r25
     100:	a1 f0       	breq	.+40     	; 0x12a <TwoWire::write(int) [clone .constprop.65]+0x30>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:509
    // don't bother if buffer is full
    if (BufferLength >= TWI_BUFFER_SIZE) {
     102:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <TwoWire::BufferLength>
     106:	90 32       	cpi	r25, 0x20	; 32
     108:	40 f5       	brcc	.+80     	; 0x15a <TwoWire::write(int) [clone .constprop.65]+0x60>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:513
      return 0;
    }
    // put byte in tx buffer
    Buffer[BufferIndex] = data;
     10a:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <TwoWire::BufferIndex>
     10e:	e9 2f       	mov	r30, r25
     110:	f0 e0       	ldi	r31, 0x00	; 0
     112:	e0 58       	subi	r30, 0x80	; 128
     114:	fe 4f       	sbci	r31, 0xFE	; 254
     116:	80 83       	st	Z, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:514
    ++BufferIndex;
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	89 0f       	add	r24, r25
     11c:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <TwoWire::BufferIndex>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:516
    // update amount in buffer
    BufferLength = BufferIndex;
     120:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <TwoWire::BufferLength>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:525
      return 0;
    }
    // reply to master
    USI_TWI_Transmit_Byte(data);
  }
  return 1;
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	08 95       	ret
USI_TWI_Space_In_Transmission_Buffer():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:144

// Check if there is space in the transmission buffer.
unsigned char USI_TWI_Space_In_Transmission_Buffer(void)
{
  unsigned char tmpTxHead;
  tmpTxHead = (TWI_TxHead + 1) & TWI_TX_BUFFER_MASK; // Calculate next buffer index.
     12a:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <TWI_TxHead>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:145
  return (TWI_TxTail - tmpTxHead) & TWI_TX_BUFFER_MASK; // Return 0 (FALSE) if the transmission buffer is full.
     12e:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <TWI_TxTail>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:144

// Check if there is space in the transmission buffer.
unsigned char USI_TWI_Space_In_Transmission_Buffer(void)
{
  unsigned char tmpTxHead;
  tmpTxHead = (TWI_TxHead + 1) & TWI_TX_BUFFER_MASK; // Calculate next buffer index.
     132:	2f 5f       	subi	r18, 0xFF	; 255
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:145
  return (TWI_TxTail - tmpTxHead) & TWI_TX_BUFFER_MASK; // Return 0 (FALSE) if the transmission buffer is full.
     134:	92 1b       	sub	r25, r18
     136:	9f 70       	andi	r25, 0x0F	; 15
write():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:519
    ++BufferIndex;
    // update amount in buffer
    BufferLength = BufferIndex;
  } else { // in slave send mode
    // don't bother if buffer is full
    if (!USI_TWI_Space_In_Transmission_Buffer()) {
     138:	81 f0       	breq	.+32     	; 0x15a <TwoWire::write(int) [clone .constprop.65]+0x60>
USI_TWI_Transmit_Byte():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:100
// Puts data in the transmission buffer, Waits if buffer is full.
void USI_TWI_Transmit_Byte(unsigned char data)
{
  unsigned char tmphead;

  tmphead = (TWI_TxHead + 1) & TWI_TX_BUFFER_MASK; // Calculate buffer index.
     13a:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <TWI_TxHead>
     13e:	9f 5f       	subi	r25, 0xFF	; 255
     140:	9f 70       	andi	r25, 0x0F	; 15
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:101
  while (tmphead == TWI_TxTail)
     142:	20 91 b1 01 	lds	r18, 0x01B1	; 0x8001b1 <TWI_TxTail>
     146:	92 17       	cp	r25, r18
     148:	e1 f3       	breq	.-8      	; 0x142 <TwoWire::write(int) [clone .constprop.65]+0x48>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:103
    ;                         // Wait for free space in buffer.
  TWI_TxBuf[tmphead] = data;    // Store data in buffer.
     14a:	e9 2f       	mov	r30, r25
     14c:	f0 e0       	ldi	r31, 0x00	; 0
     14e:	e0 57       	subi	r30, 0x70	; 112
     150:	fe 4f       	sbci	r31, 0xFE	; 254
     152:	80 83       	st	Z, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:104
  TWI_TxHead         = tmphead; // Store new index.
     154:	90 93 b2 01 	sts	0x01B2, r25	; 0x8001b2 <TWI_TxHead>
     158:	e5 cf       	rjmp	.-54     	; 0x124 <TwoWire::write(int) [clone .constprop.65]+0x2a>
write():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:510
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data) {
  if (transmitting) { // in master transmitter mode
    // don't bother if buffer is full
    if (BufferLength >= TWI_BUFFER_SIZE) {
      return 0;
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	80 e0       	ldi	r24, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.h:157
    uint8_t isActive(void);

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     15e:	08 95       	ret

00000160 <TwoWire::beginTransmission(unsigned char) [clone .constprop.50]>:
beginTransmission():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:462
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address) {
  // indicate that we are transmitting
  transmitting = 1;
     160:	91 e0       	ldi	r25, 0x01	; 1
     162:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <TwoWire::transmitting>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:464
  // set address of targeted slave and write mode
  Buffer[0] = (address << TWI_ADR_BITS) | (0 << TWI_READ_BIT);
     166:	88 0f       	add	r24, r24
     168:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__data_end>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:466
  // reset tx buffer iterator vars
  BufferIndex = 1; // reserved by slave address
     16c:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <TwoWire::BufferIndex>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:467
  BufferLength = BufferIndex;
     170:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <TwoWire::BufferLength>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:468
}
     174:	08 95       	ret

00000176 <Print::write(unsigned char const*, unsigned int)>:
write():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:34

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     176:	cf 92       	push	r12
     178:	df 92       	push	r13
     17a:	ef 92       	push	r14
     17c:	ff 92       	push	r15
     17e:	0f 93       	push	r16
     180:	1f 93       	push	r17
     182:	cf 93       	push	r28
     184:	df 93       	push	r29
     186:	6c 01       	movw	r12, r24
     188:	eb 01       	movw	r28, r22
     18a:	7b 01       	movw	r14, r22
     18c:	e4 0e       	add	r14, r20
     18e:	f5 1e       	adc	r15, r21
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:35
  size_t n = 0;
     190:	10 e0       	ldi	r17, 0x00	; 0
     192:	00 e0       	ldi	r16, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:36
  while (size--) {
     194:	ce 15       	cp	r28, r14
     196:	df 05       	cpc	r29, r15
     198:	61 f0       	breq	.+24     	; 0x1b2 <Print::write(unsigned char const*, unsigned int)+0x3c>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:37
    n += write(*buffer++);
     19a:	69 91       	ld	r22, Y+
     19c:	d6 01       	movw	r26, r12
     19e:	ed 91       	ld	r30, X+
     1a0:	fc 91       	ld	r31, X
     1a2:	01 90       	ld	r0, Z+
     1a4:	f0 81       	ld	r31, Z
     1a6:	e0 2d       	mov	r30, r0
     1a8:	c6 01       	movw	r24, r12
     1aa:	09 95       	icall
     1ac:	08 0f       	add	r16, r24
     1ae:	19 1f       	adc	r17, r25
     1b0:	f1 cf       	rjmp	.-30     	; 0x194 <Print::write(unsigned char const*, unsigned int)+0x1e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:40
  }
  return n;
}
     1b2:	c8 01       	movw	r24, r16
     1b4:	df 91       	pop	r29
     1b6:	cf 91       	pop	r28
     1b8:	1f 91       	pop	r17
     1ba:	0f 91       	pop	r16
     1bc:	ff 90       	pop	r15
     1be:	ef 90       	pop	r14
     1c0:	df 90       	pop	r13
     1c2:	cf 90       	pop	r12
     1c4:	08 95       	ret

000001c6 <HardwareSerial::availableForWrite()>:
availableForWrite():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:198
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     1c6:	fc 01       	movw	r30, r24
     1c8:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:199
    tail = _tx_buffer_tail;
     1ca:	44 8d       	ldd	r20, Z+28	; 0x1c
     1cc:	25 2f       	mov	r18, r21
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	84 2f       	mov	r24, r20
     1d2:	90 e0       	ldi	r25, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:201
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     1d4:	82 1b       	sub	r24, r18
     1d6:	93 0b       	sbc	r25, r19
     1d8:	54 17       	cp	r21, r20
     1da:	10 f0       	brcs	.+4      	; 0x1e0 <HardwareSerial::availableForWrite()+0x1a>
     1dc:	4f 96       	adiw	r24, 0x1f	; 31
     1de:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:202
  return tail - head - 1;
     1e0:	01 97       	sbiw	r24, 0x01	; 1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:203
}
     1e2:	08 95       	ret

000001e4 <HardwareSerial::read()>:
read():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:181
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     1e4:	fc 01       	movw	r30, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:183
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     1e6:	91 8d       	ldd	r25, Z+25	; 0x19
     1e8:	82 8d       	ldd	r24, Z+26	; 0x1a
     1ea:	98 17       	cp	r25, r24
     1ec:	61 f0       	breq	.+24     	; 0x206 <HardwareSerial::read()+0x22>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:186
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     1ee:	a2 8d       	ldd	r26, Z+26	; 0x1a
     1f0:	ae 0f       	add	r26, r30
     1f2:	bf 2f       	mov	r27, r31
     1f4:	b1 1d       	adc	r27, r1
     1f6:	5d 96       	adiw	r26, 0x1d	; 29
     1f8:	8c 91       	ld	r24, X
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:187
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     1fa:	92 8d       	ldd	r25, Z+26	; 0x1a
     1fc:	9f 5f       	subi	r25, 0xFF	; 255
     1fe:	9f 71       	andi	r25, 0x1F	; 31
     200:	92 8f       	std	Z+26, r25	; 0x1a
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:188
    return c;
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:184

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     206:	8f ef       	ldi	r24, 0xFF	; 255
     208:	9f ef       	ldi	r25, 0xFF	; 255
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:190
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     20a:	08 95       	ret

0000020c <HardwareSerial::peek()>:
peek():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:172
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     20c:	fc 01       	movw	r30, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:173
  if (_rx_buffer_head == _rx_buffer_tail) {
     20e:	91 8d       	ldd	r25, Z+25	; 0x19
     210:	82 8d       	ldd	r24, Z+26	; 0x1a
     212:	98 17       	cp	r25, r24
     214:	31 f0       	breq	.+12     	; 0x222 <HardwareSerial::peek()+0x16>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:176
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     216:	82 8d       	ldd	r24, Z+26	; 0x1a
     218:	e8 0f       	add	r30, r24
     21a:	f1 1d       	adc	r31, r1
     21c:	85 8d       	ldd	r24, Z+29	; 0x1d
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:174
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     222:	8f ef       	ldi	r24, 0xFF	; 255
     224:	9f ef       	ldi	r25, 0xFF	; 255
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:178
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     226:	08 95       	ret

00000228 <HardwareSerial::available()>:
available():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:167
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     228:	fc 01       	movw	r30, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:168
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     22a:	91 8d       	ldd	r25, Z+25	; 0x19
     22c:	22 8d       	ldd	r18, Z+26	; 0x1a
     22e:	89 2f       	mov	r24, r25
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	80 96       	adiw	r24, 0x20	; 32
     234:	82 1b       	sub	r24, r18
     236:	91 09       	sbc	r25, r1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:169
}
     238:	8f 71       	andi	r24, 0x1F	; 31
     23a:	99 27       	eor	r25, r25
     23c:	08 95       	ret

0000023e <HardwareSerial::_tx_udr_empty_irq()>:
_tx_udr_empty_irq():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     23e:	fc 01       	movw	r30, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     240:	a4 8d       	ldd	r26, Z+28	; 0x1c
     242:	a8 0f       	add	r26, r24
     244:	b9 2f       	mov	r27, r25
     246:	b1 1d       	adc	r27, r1
     248:	dd 96       	adiw	r26, 0x3d	; 61
     24a:	2c 91       	ld	r18, X
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     24c:	84 8d       	ldd	r24, Z+28	; 0x1c
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	01 96       	adiw	r24, 0x01	; 1
     252:	8f 71       	andi	r24, 0x1F	; 31
     254:	99 27       	eor	r25, r25
     256:	84 8f       	std	Z+28, r24	; 0x1c
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:96

  *_udr = c;
     258:	a6 89       	ldd	r26, Z+22	; 0x16
     25a:	b7 89       	ldd	r27, Z+23	; 0x17
     25c:	2c 93       	st	X, r18
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     25e:	a0 89       	ldd	r26, Z+16	; 0x10
     260:	b1 89       	ldd	r27, Z+17	; 0x11
     262:	8c 91       	ld	r24, X
     264:	83 70       	andi	r24, 0x03	; 3
     266:	80 64       	ori	r24, 0x40	; 64
     268:	8c 93       	st	X, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:109
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     26a:	93 8d       	ldd	r25, Z+27	; 0x1b
     26c:	84 8d       	ldd	r24, Z+28	; 0x1c
     26e:	98 13       	cpse	r25, r24
     270:	06 c0       	rjmp	.+12     	; 0x27e <HardwareSerial::_tx_udr_empty_irq()+0x40>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     272:	02 88       	ldd	r0, Z+18	; 0x12
     274:	f3 89       	ldd	r31, Z+19	; 0x13
     276:	e0 2d       	mov	r30, r0
     278:	80 81       	ld	r24, Z
     27a:	8f 7d       	andi	r24, 0xDF	; 223
     27c:	80 83       	st	Z, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:113
  }
}
     27e:	08 95       	ret

00000280 <HardwareSerial::write(unsigned char)>:
write():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:226
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished transmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     280:	ef 92       	push	r14
     282:	ff 92       	push	r15
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	ec 01       	movw	r28, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:227
  _written = true;
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	88 8f       	std	Y+24, r24	; 0x18
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:232
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     292:	9b 8d       	ldd	r25, Y+27	; 0x1b
     294:	8c 8d       	ldd	r24, Y+28	; 0x1c
     296:	98 13       	cpse	r25, r24
     298:	1a c0       	rjmp	.+52     	; 0x2ce <HardwareSerial::write(unsigned char)+0x4e>
     29a:	e8 89       	ldd	r30, Y+16	; 0x10
     29c:	f9 89       	ldd	r31, Y+17	; 0x11
     29e:	80 81       	ld	r24, Z
     2a0:	85 ff       	sbrs	r24, 5
     2a2:	15 c0       	rjmp	.+42     	; 0x2ce <HardwareSerial::write(unsigned char)+0x4e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:241
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     2a4:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     2a6:	f8 94       	cli
write():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:242
      *_udr = c;
     2a8:	ee 89       	ldd	r30, Y+22	; 0x16
     2aa:	ff 89       	ldd	r31, Y+23	; 0x17
     2ac:	60 83       	st	Z, r22
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:244
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     2ae:	e8 89       	ldd	r30, Y+16	; 0x10
     2b0:	f9 89       	ldd	r31, Y+17	; 0x11
     2b2:	80 81       	ld	r24, Z
     2b4:	83 70       	andi	r24, 0x03	; 3
     2b6:	80 64       	ori	r24, 0x40	; 64
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:275
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
     2b8:	80 83       	st	Z, r24
__iRestore():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     2ba:	9f bf       	out	0x3f, r25	; 63
write():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:279
  }

  return 1;
}
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	ff 90       	pop	r15
     2ca:	ef 90       	pop	r14
     2cc:	08 95       	ret
     2ce:	f6 2e       	mov	r15, r22
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:251
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     2d0:	0b 8d       	ldd	r16, Y+27	; 0x1b
     2d2:	10 e0       	ldi	r17, 0x00	; 0
     2d4:	0f 5f       	subi	r16, 0xFF	; 255
     2d6:	1f 4f       	sbci	r17, 0xFF	; 255
     2d8:	0f 71       	andi	r16, 0x1F	; 31
     2da:	11 27       	eor	r17, r17
     2dc:	e0 2e       	mov	r14, r16
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:255

  // If the output buffer is full, there's nothing for it other than to
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     2de:	8c 8d       	ldd	r24, Y+28	; 0x1c
     2e0:	8e 11       	cpse	r24, r14
     2e2:	0c c0       	rjmp	.+24     	; 0x2fc <HardwareSerial::write(unsigned char)+0x7c>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:256
    if (bit_is_clear(SREG, SREG_I)) {
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	07 fc       	sbrc	r0, 7
     2e8:	fa cf       	rjmp	.-12     	; 0x2de <HardwareSerial::write(unsigned char)+0x5e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:261
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     2ea:	e8 89       	ldd	r30, Y+16	; 0x10
     2ec:	f9 89       	ldd	r31, Y+17	; 0x11
     2ee:	80 81       	ld	r24, Z
     2f0:	85 ff       	sbrs	r24, 5
     2f2:	f5 cf       	rjmp	.-22     	; 0x2de <HardwareSerial::write(unsigned char)+0x5e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:262
  _tx_udr_empty_irq();
     2f4:	ce 01       	movw	r24, r28
     2f6:	0e 94 1f 01 	call	0x23e	; 0x23e <HardwareSerial::_tx_udr_empty_irq()>
     2fa:	f1 cf       	rjmp	.-30     	; 0x2de <HardwareSerial::write(unsigned char)+0x5e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:268
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     2fc:	eb 8d       	ldd	r30, Y+27	; 0x1b
     2fe:	ec 0f       	add	r30, r28
     300:	fd 2f       	mov	r31, r29
     302:	f1 1d       	adc	r31, r1
     304:	f5 ae       	std	Z+61, r15	; 0x3d
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:273

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     306:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     308:	f8 94       	cli
write():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:274
    _tx_buffer_head = i;
     30a:	0b 8f       	std	Y+27, r16	; 0x1b
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:275
    sbi(*_ucsrb, UDRIE0);
     30c:	ea 89       	ldd	r30, Y+18	; 0x12
     30e:	fb 89       	ldd	r31, Y+19	; 0x13
     310:	80 81       	ld	r24, Z
     312:	80 62       	ori	r24, 0x20	; 32
     314:	d1 cf       	rjmp	.-94     	; 0x2b8 <HardwareSerial::write(unsigned char)+0x38>

00000316 <Print::print(char) [clone .constprop.63]>:
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:66
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     316:	68 2f       	mov	r22, r24
     318:	86 eb       	ldi	r24, 0xB6	; 182
     31a:	91 e0       	ldi	r25, 0x01	; 1
     31c:	0c 94 40 01 	jmp	0x280	; 0x280 <HardwareSerial::write(unsigned char)>

00000320 <Print::println() [clone .constprop.62]>:
println():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:123
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
     320:	cf 93       	push	r28
     322:	df 93       	push	r29
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:125
{
  size_t n = print('\r');
     324:	8d e0       	ldi	r24, 0x0D	; 13
     326:	0e 94 8b 01 	call	0x316	; 0x316 <Print::print(char) [clone .constprop.63]>
     32a:	ec 01       	movw	r28, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:126
  n += print('\n');
     32c:	8a e0       	ldi	r24, 0x0A	; 10
     32e:	0e 94 8b 01 	call	0x316	; 0x316 <Print::print(char) [clone .constprop.63]>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:128
  return n;
}
     332:	8c 0f       	add	r24, r28
     334:	9d 1f       	adc	r25, r29
     336:	df 91       	pop	r29
     338:	cf 91       	pop	r28
     33a:	08 95       	ret

0000033c <HardwareSerial::flush()>:
flush():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:206
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	ec 01       	movw	r28, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:210
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     342:	88 8d       	ldd	r24, Y+24	; 0x18
     344:	88 23       	and	r24, r24
     346:	b9 f0       	breq	.+46     	; 0x376 <HardwareSerial::flush()+0x3a>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:213
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     348:	aa 89       	ldd	r26, Y+18	; 0x12
     34a:	bb 89       	ldd	r27, Y+19	; 0x13
     34c:	e8 89       	ldd	r30, Y+16	; 0x10
     34e:	f9 89       	ldd	r31, Y+17	; 0x11
     350:	8c 91       	ld	r24, X
     352:	85 fd       	sbrc	r24, 5
     354:	03 c0       	rjmp	.+6      	; 0x35c <HardwareSerial::flush()+0x20>
     356:	80 81       	ld	r24, Z
     358:	86 fd       	sbrc	r24, 6
     35a:	0d c0       	rjmp	.+26     	; 0x376 <HardwareSerial::flush()+0x3a>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:214
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	07 fc       	sbrc	r0, 7
     360:	f7 cf       	rjmp	.-18     	; 0x350 <HardwareSerial::flush()+0x14>
     362:	8c 91       	ld	r24, X
     364:	85 ff       	sbrs	r24, 5
     366:	f2 cf       	rjmp	.-28     	; 0x34c <HardwareSerial::flush()+0x10>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:218
  // Interrupts are globally disabled, but the DR empty
  // interrupt should be enabled, so poll the DR empty flag to
  // prevent deadlock
  if (bit_is_set(*_ucsra, UDRE0))
     368:	80 81       	ld	r24, Z
     36a:	85 ff       	sbrs	r24, 5
     36c:	ed cf       	rjmp	.-38     	; 0x348 <HardwareSerial::flush()+0xc>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:219
    _tx_udr_empty_irq();
     36e:	ce 01       	movw	r24, r28
     370:	0e 94 1f 01 	call	0x23e	; 0x23e <HardwareSerial::_tx_udr_empty_irq()>
     374:	e9 cf       	rjmp	.-46     	; 0x348 <HardwareSerial::flush()+0xc>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:223
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished transmission (TXC is set).
}
     376:	df 91       	pop	r29
     378:	cf 91       	pop	r28
     37a:	08 95       	ret

0000037c <digitalWrite>:
digitalWrite():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:181
}

#if defined(__AVR_ATtinyX41__ ) || defined(__AVR_ATtiny1634__) || defined(__AVR_ATtiny828__)

void digitalWrite(uint8_t pin, uint8_t val)
{
     37c:	cf 93       	push	r28
     37e:	df 93       	push	r29
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:183
  #ifndef __AVR_ATtiny828__
  if (pin&64) {pin=analogInputToDigitalPin((pin&63));}
     380:	86 ff       	sbrs	r24, 6
     382:	07 c0       	rjmp	.+14     	; 0x392 <digitalWrite+0x16>
     384:	98 2f       	mov	r25, r24
     386:	9f 73       	andi	r25, 0x3F	; 63
     388:	85 e0       	ldi	r24, 0x05	; 5
     38a:	96 30       	cpi	r25, 0x06	; 6
     38c:	08 f0       	brcs	.+2      	; 0x390 <digitalWrite+0x14>
     38e:	86 e1       	ldi	r24, 0x16	; 22
     390:	89 1b       	sub	r24, r25
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:185
  #endif
  uint8_t bit = digitalPinToBitMask(pin);
     392:	a8 2f       	mov	r26, r24
     394:	b0 e0       	ldi	r27, 0x00	; 0
     396:	fd 01       	movw	r30, r26
     398:	ee 56       	subi	r30, 0x6E	; 110
     39a:	ff 4f       	sbci	r31, 0xFF	; 255
     39c:	24 91       	lpm	r18, Z
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:186
  uint8_t port = digitalPinToPort(pin);
     39e:	a0 58       	subi	r26, 0x80	; 128
     3a0:	bf 4f       	sbci	r27, 0xFF	; 255
     3a2:	fd 01       	movw	r30, r26
     3a4:	a4 91       	lpm	r26, Z
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:189
  volatile uint8_t *out, *pue;

  if (port == NOT_A_PIN) return;
     3a6:	aa 23       	and	r26, r26
     3a8:	e9 f0       	breq	.+58     	; 0x3e4 <digitalWrite+0x68>
turnOffPWM():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:123
// each digitalread or write.
//
__attribute__((always_inline)) static inline void turnOffPWM( uint8_t pin )
{
  #if CORE_PWM_COUNT >= 1
    if ( pin == CORE_PWM0_PIN )
     3aa:	8d 30       	cpi	r24, 0x0D	; 13
     3ac:	f1 f4       	brne	.+60     	; 0x3ea <digitalWrite+0x6e>
Timer0_SetCompareOutputModeA():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:692
}
timer0_com_t;

__attribute__((always_inline)) static inline void Timer0_SetCompareOutputModeA( timer0_com_t com )
{
  TCCR0A = (TCCR0A & ~MASK2(COM0A1,COM0A0)) | (com << COM0A0);
     3ae:	8b b3       	in	r24, 0x1b	; 27
     3b0:	8f 73       	andi	r24, 0x3F	; 63
Timer0_SetCompareOutputModeB():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:697
}

__attribute__((always_inline)) static inline void Timer0_SetCompareOutputModeB( timer0_com_t com )
{
  TCCR0A = (TCCR0A & ~MASK2(COM0B1,COM0B0)) | (com << COM0B0);
     3b2:	8b bb       	out	0x1b, r24	; 27
digitalWrite():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:195

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  turnOffPWM( pin );

  out = portOutputRegister(port);
     3b4:	b0 e0       	ldi	r27, 0x00	; 0
     3b6:	fd 01       	movw	r30, r26
     3b8:	e4 58       	subi	r30, 0x84	; 132
     3ba:	ff 4f       	sbci	r31, 0xFF	; 255
     3bc:	c4 91       	lpm	r28, Z
     3be:	d0 e0       	ldi	r29, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:196
  pue = portPullupRegister(port);
     3c0:	a8 58       	subi	r26, 0x88	; 136
     3c2:	bf 4f       	sbci	r27, 0xFF	; 255
     3c4:	fd 01       	movw	r30, r26
     3c6:	a4 91       	lpm	r26, Z
     3c8:	b0 e0       	ldi	r27, 0x00	; 0
     3ca:	92 2f       	mov	r25, r18
     3cc:	90 95       	com	r25
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:198

  if (val == LOW) {
     3ce:	61 11       	cpse	r22, r1
     3d0:	1f c0       	rjmp	.+62     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:199
    uint8_t oldSREG = SREG;
     3d2:	2f b7       	in	r18, 0x3f	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:200
    cli();
     3d4:	f8 94       	cli
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:201
    *out &= ~bit;
     3d6:	88 81       	ld	r24, Y
     3d8:	89 23       	and	r24, r25
     3da:	88 83       	st	Y, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:202
    *pue &= ~bit; //Turn off the pullups
     3dc:	8c 91       	ld	r24, X
     3de:	89 23       	and	r24, r25
     3e0:	8c 93       	st	X, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:203
    SREG = oldSREG;
     3e2:	2f bf       	out	0x3f, r18	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:211
    cli();
    *out |= bit;
    *pue &= ~bit;
    SREG = oldSREG;
  }
}
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	08 95       	ret
turnOffPWM():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:131
    }
    else
  #endif

  #if CORE_PWM_COUNT >= 2
    if ( pin == CORE_PWM1_PIN )
     3ea:	83 30       	cpi	r24, 0x03	; 3
     3ec:	19 f4       	brne	.+6      	; 0x3f4 <digitalWrite+0x78>
Timer0_SetCompareOutputModeB():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:697
     3ee:	8b b3       	in	r24, 0x1b	; 27
     3f0:	8f 7c       	andi	r24, 0xCF	; 207
     3f2:	df cf       	rjmp	.-66     	; 0x3b2 <digitalWrite+0x36>
turnOffPWM():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:139
    }
    else
  #endif

  #if CORE_PWM_COUNT >= 3
    if ( pin == CORE_PWM2_PIN )
     3f4:	8e 30       	cpi	r24, 0x0E	; 14
     3f6:	31 f4       	brne	.+12     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
Timer1_SetCompareOutputModeA():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:852
}
timer1_com_t;

__attribute__((always_inline)) static inline void Timer1_SetCompareOutputModeA( timer1_com_t com )
{
  TCCR1A = (TCCR1A & ~MASK2(COM1A1,COM1A0)) | (com << COM1A0);
     3f8:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__DATA_REGION_ORIGIN__+0x12>
     3fc:	8f 73       	andi	r24, 0x3F	; 63
Timer1_SetCompareOutputModeB():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:857
}

__attribute__((always_inline)) static inline void Timer1_SetCompareOutputModeB( timer1_com_t com )
{
  TCCR1A = (TCCR1A & ~MASK2(COM1B1,COM1B0)) | (com << COM1B0);
     3fe:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__DATA_REGION_ORIGIN__+0x12>
     402:	d8 cf       	rjmp	.-80     	; 0x3b4 <digitalWrite+0x38>
turnOffPWM():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:147
    }
    else
  #endif

  #if CORE_PWM_COUNT >= 4
    if ( pin == CORE_PWM3_PIN )
     404:	82 30       	cpi	r24, 0x02	; 2
     406:	b1 f6       	brne	.-84     	; 0x3b4 <digitalWrite+0x38>
Timer1_SetCompareOutputModeB():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:857
     408:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__DATA_REGION_ORIGIN__+0x12>
     40c:	8f 7c       	andi	r24, 0xCF	; 207
     40e:	f7 cf       	rjmp	.-18     	; 0x3fe <digitalWrite+0x82>
digitalWrite():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:205
    cli();
    *out &= ~bit;
    *pue &= ~bit; //Turn off the pullups
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
     410:	3f b7       	in	r19, 0x3f	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:206
    cli();
     412:	f8 94       	cli
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:207
    *out |= bit;
     414:	e8 81       	ld	r30, Y
     416:	e2 2b       	or	r30, r18
     418:	e8 83       	st	Y, r30
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:208
    *pue &= ~bit;
     41a:	8c 91       	ld	r24, X
     41c:	89 23       	and	r24, r25
     41e:	8c 93       	st	X, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:209
    SREG = oldSREG;
     420:	3f bf       	out	0x3f, r19	; 63
     422:	e0 cf       	rjmp	.-64     	; 0x3e4 <digitalWrite+0x68>

00000424 <pinMode>:
pinMode():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:37
#include "core_timers.h"
#include "PwmTimer.h"

#if defined(__AVR_ATtinyX41__ ) || defined(__AVR_ATtiny1634__) || defined(__AVR_ATtiny828__)
void pinMode(uint8_t pin, uint8_t mode)
{
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:39
  #ifndef __AVR_ATtiny828__
  if (pin&64) {pin=analogInputToDigitalPin((pin & 63));}
     428:	86 ff       	sbrs	r24, 6
     42a:	07 c0       	rjmp	.+14     	; 0x43a <pinMode+0x16>
     42c:	8f 73       	andi	r24, 0x3F	; 63
     42e:	a5 e0       	ldi	r26, 0x05	; 5
     430:	86 30       	cpi	r24, 0x06	; 6
     432:	08 f0       	brcs	.+2      	; 0x436 <pinMode+0x12>
     434:	a6 e1       	ldi	r26, 0x16	; 22
     436:	a8 1b       	sub	r26, r24
     438:	8a 2f       	mov	r24, r26
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:41
  #endif
  uint8_t bit = digitalPinToBitMask(pin);
     43a:	a8 2f       	mov	r26, r24
     43c:	b0 e0       	ldi	r27, 0x00	; 0
     43e:	fd 01       	movw	r30, r26
     440:	ee 56       	subi	r30, 0x6E	; 110
     442:	ff 4f       	sbci	r31, 0xFF	; 255
     444:	24 91       	lpm	r18, Z
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:42
  uint8_t port = digitalPinToPort(pin);
     446:	a0 58       	subi	r26, 0x80	; 128
     448:	bf 4f       	sbci	r27, 0xFF	; 255
     44a:	fd 01       	movw	r30, r26
     44c:	a4 91       	lpm	r26, Z
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:45
  volatile uint8_t *reg, *out, *pue;

  if (port == NOT_A_PIN) return;
     44e:	aa 23       	and	r26, r26
     450:	19 f1       	breq	.+70     	; 0x498 <pinMode+0x74>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:48

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     452:	b0 e0       	ldi	r27, 0x00	; 0
     454:	fd 01       	movw	r30, r26
     456:	ec 58       	subi	r30, 0x8C	; 140
     458:	ff 4f       	sbci	r31, 0xFF	; 255
     45a:	e4 91       	lpm	r30, Z
     45c:	ce 2f       	mov	r28, r30
     45e:	d0 e0       	ldi	r29, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:49
  out = portOutputRegister(port);
     460:	fd 01       	movw	r30, r26
     462:	e4 58       	subi	r30, 0x84	; 132
     464:	ff 4f       	sbci	r31, 0xFF	; 255
     466:	e4 91       	lpm	r30, Z
     468:	8e 2f       	mov	r24, r30
     46a:	90 e0       	ldi	r25, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:50
  pue = portPullupRegister(port);
     46c:	a8 58       	subi	r26, 0x88	; 136
     46e:	bf 4f       	sbci	r27, 0xFF	; 255
     470:	fd 01       	movw	r30, r26
     472:	a4 91       	lpm	r26, Z
     474:	b0 e0       	ldi	r27, 0x00	; 0
     476:	32 2f       	mov	r19, r18
     478:	30 95       	com	r19
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:52

  if (mode == INPUT) {
     47a:	61 11       	cpse	r22, r1
     47c:	10 c0       	rjmp	.+32     	; 0x49e <pinMode+0x7a>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:53
    uint8_t oldSREG = SREG;
     47e:	4f b7       	in	r20, 0x3f	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:54
                cli();
     480:	f8 94       	cli
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:55
    *reg &= ~bit;
     482:	28 81       	ld	r18, Y
     484:	23 23       	and	r18, r19
     486:	28 83       	st	Y, r18
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:56
    *out &= ~bit;
     488:	fc 01       	movw	r30, r24
     48a:	20 81       	ld	r18, Z
     48c:	23 23       	and	r18, r19
     48e:	20 83       	st	Z, r18
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:57
    *pue &= ~bit;
     490:	8c 91       	ld	r24, X
     492:	38 23       	and	r19, r24
     494:	3c 93       	st	X, r19
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:58
    SREG = oldSREG;
     496:	4f bf       	out	0x3f, r20	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:73
                cli();
    *pue &= ~bit;
    *reg |= bit;
    SREG = oldSREG;
  }
}
     498:	df 91       	pop	r29
     49a:	cf 91       	pop	r28
     49c:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:59
                cli();
    *reg &= ~bit;
    *out &= ~bit;
    *pue &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
     49e:	62 30       	cpi	r22, 0x02	; 2
     4a0:	71 f4       	brne	.+28     	; 0x4be <pinMode+0x9a>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:60
    uint8_t oldSREG = SREG;
     4a2:	5f b7       	in	r21, 0x3f	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:61
                cli();
     4a4:	f8 94       	cli
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:62
    *reg &= ~bit;
     4a6:	48 81       	ld	r20, Y
     4a8:	34 23       	and	r19, r20
     4aa:	38 83       	st	Y, r19
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:63
    *out |= bit;
     4ac:	fc 01       	movw	r30, r24
     4ae:	30 81       	ld	r19, Z
     4b0:	32 2b       	or	r19, r18
     4b2:	30 83       	st	Z, r19
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:64
    *pue |= bit;
     4b4:	ec 91       	ld	r30, X
     4b6:	2e 2b       	or	r18, r30
     4b8:	2c 93       	st	X, r18
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:65
    SREG = oldSREG;
     4ba:	5f bf       	out	0x3f, r21	; 63
     4bc:	ed cf       	rjmp	.-38     	; 0x498 <pinMode+0x74>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:67
  } else {
    uint8_t oldSREG = SREG;
     4be:	9f b7       	in	r25, 0x3f	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:68
                cli();
     4c0:	f8 94       	cli
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:69
    *pue &= ~bit;
     4c2:	8c 91       	ld	r24, X
     4c4:	38 23       	and	r19, r24
     4c6:	3c 93       	st	X, r19
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:70
    *reg |= bit;
     4c8:	e8 81       	ld	r30, Y
     4ca:	2e 2b       	or	r18, r30
     4cc:	28 83       	st	Y, r18
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:71
    SREG = oldSREG;
     4ce:	9f bf       	out	0x3f, r25	; 63
     4d0:	e3 cf       	rjmp	.-58     	; 0x498 <pinMode+0x74>

000004d2 <micros>:
micros():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:134
  return m;
}
unsigned long micros()
{
  unsigned long m;
  uint8_t oldSREG = SREG, t;
     4d2:	3f b7       	in	r19, 0x3f	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:136

  cli();
     4d4:	f8 94       	cli
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:137
  m = millis_timer_overflow_count;
     4d6:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <millis_timer_overflow_count>
     4da:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <millis_timer_overflow_count+0x1>
     4de:	a0 91 a8 01 	lds	r26, 0x01A8	; 0x8001a8 <millis_timer_overflow_count+0x2>
     4e2:	b0 91 a9 01 	lds	r27, 0x01A9	; 0x8001a9 <millis_timer_overflow_count+0x3>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:139
#if defined(TCNT0) && (TIMER_TO_USE_FOR_MILLIS == 0) && !defined(TCW0)
  t = TCNT0;
     4e6:	29 b3       	in	r18, 0x19	; 25
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:154

#if defined(TIFR0) && (TIMER_TO_USE_FOR_MILLIS == 0)
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    m++;
#elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 0)
  if ((TIFR & _BV(TOV0)) && (t < 255))
     4e8:	09 b6       	in	r0, 0x39	; 57
     4ea:	01 fe       	sbrs	r0, 1
     4ec:	05 c0       	rjmp	.+10     	; 0x4f8 <micros+0x26>
     4ee:	2f 3f       	cpi	r18, 0xFF	; 255
     4f0:	19 f0       	breq	.+6      	; 0x4f8 <micros+0x26>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:155
    m++;
     4f2:	01 96       	adiw	r24, 0x01	; 1
     4f4:	a1 1d       	adc	r26, r1
     4f6:	b1 1d       	adc	r27, r1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:164
#elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 1)
  if ((TIFR & _BV(TOV1)) && (t < 255))
    m++;
#endif

  SREG = oldSREG;
     4f8:	3f bf       	out	0x3f, r19	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:171

#if F_CPU < 1000000L
  return ((m << 8) + t) * MillisTimer_Prescale_Value * (1000000L/F_CPU);
#else
#if (MillisTimer_Prescale_Value % clockCyclesPerMicrosecond() == 0 ) // Can we just do it the naive way? If so great!
  return ((m << 8) + t) * (MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
     4fa:	ba 2f       	mov	r27, r26
     4fc:	a9 2f       	mov	r26, r25
     4fe:	98 2f       	mov	r25, r24
     500:	88 27       	eor	r24, r24
     502:	bc 01       	movw	r22, r24
     504:	cd 01       	movw	r24, r26
     506:	62 0f       	add	r22, r18
     508:	71 1d       	adc	r23, r1
     50a:	81 1d       	adc	r24, r1
     50c:	91 1d       	adc	r25, r1
     50e:	43 e0       	ldi	r20, 0x03	; 3
     510:	66 0f       	add	r22, r22
     512:	77 1f       	adc	r23, r23
     514:	88 1f       	adc	r24, r24
     516:	99 1f       	adc	r25, r25
     518:	4a 95       	dec	r20
     51a:	d1 f7       	brne	.-12     	; 0x510 <__stack+0x11>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:217
  //the high part gets divided by cCPuS then multiplied by the prescaler. Then take the low 8 bits plus the high part modulo-cCPuS to correct for the division, then multiply that by the prescaler value first before dividing by cCPuS, and finally add the two together.
  //return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + ((t+(((m<<8)%clockCyclesPerMicrosecond())) * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond()));
  return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + (t * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
#endif
#endif
}
     51c:	08 95       	ret

0000051e <delay>:
delay():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:225
  // Empty
}
void yield(void) __attribute__ ((weak, alias("__empty")));

void delay(unsigned long ms)
{
     51e:	cf 92       	push	r12
     520:	df 92       	push	r13
     522:	ef 92       	push	r14
     524:	ff 92       	push	r15
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	6b 01       	movw	r12, r22
     52c:	7c 01       	movw	r14, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:227
  #if (F_CPU>=1000000L)
  uint16_t start = (uint16_t)micros();
     52e:	0e 94 69 02 	call	0x4d2	; 0x4d2 <micros>
     532:	eb 01       	movw	r28, r22
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:231

  while (ms > 0) {
    yield();
    while (((uint16_t)micros() - start) >= 1000 && ms) {
     534:	0e 94 69 02 	call	0x4d2	; 0x4d2 <micros>
     538:	6c 1b       	sub	r22, r28
     53a:	7d 0b       	sbc	r23, r29
     53c:	68 3e       	cpi	r22, 0xE8	; 232
     53e:	73 40       	sbci	r23, 0x03	; 3
     540:	a0 f0       	brcs	.+40     	; 0x56a <delay+0x4c>
     542:	c1 14       	cp	r12, r1
     544:	d1 04       	cpc	r13, r1
     546:	e1 04       	cpc	r14, r1
     548:	f1 04       	cpc	r15, r1
     54a:	39 f4       	brne	.+14     	; 0x55a <delay+0x3c>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:241
  #else
  uint32_t start = millis();
  while((millis() - start) < ms)  /* NOP */yield();
  return;
  #endif
}
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	ff 90       	pop	r15
     552:	ef 90       	pop	r14
     554:	df 90       	pop	r13
     556:	cf 90       	pop	r12
     558:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:232
  uint16_t start = (uint16_t)micros();

  while (ms > 0) {
    yield();
    while (((uint16_t)micros() - start) >= 1000 && ms) {
      ms--;
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	c8 1a       	sub	r12, r24
     55e:	d1 08       	sbc	r13, r1
     560:	e1 08       	sbc	r14, r1
     562:	f1 08       	sbc	r15, r1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:233
      start += 1000;
     564:	c8 51       	subi	r28, 0x18	; 24
     566:	dc 4f       	sbci	r29, 0xFC	; 252
     568:	e5 cf       	rjmp	.-54     	; 0x534 <delay+0x16>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:229
void delay(unsigned long ms)
{
  #if (F_CPU>=1000000L)
  uint16_t start = (uint16_t)micros();

  while (ms > 0) {
     56a:	c1 14       	cp	r12, r1
     56c:	d1 04       	cpc	r13, r1
     56e:	e1 04       	cpc	r14, r1
     570:	f1 04       	cpc	r15, r1
     572:	01 f7       	brne	.-64     	; 0x534 <delay+0x16>
     574:	eb cf       	rjmp	.-42     	; 0x54c <delay+0x2e>

00000576 <USI_TWI_Master_Transfer>:
USI_TWI_Master_Transfer():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:225
 Data to be sent has to be placed into the USIDR prior to calling
 this function. Data read, will be return'ed from the function.
---------------------------------------------------------------*/
unsigned char USI_TWI_Master_Transfer(unsigned char temp)
{
  USISR = temp;                                          // Set USISR according to temp.
     576:	8b bd       	out	0x2b, r24	; 43
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     578:	35 e0       	ldi	r19, 0x05	; 5
USI_TWI_Master_Transfer():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:233
         (1 << USIWM1) | (0 << USIWM0) |                 // Set USI in Two-wire mode.
         (1 << USICS1) | (0 << USICS0) | (1 << USICLK) | // Software clock strobe as source.
         (1 << USITC);                                   // Toggle Clock Port.
  do {
    if (USI_TWI_MASTER_SPEED) DELAY_T2TWI_FM; else DELAY_T2TWI;
    USICR = temp; // Generate positive SCL edge.
     57a:	8b e2       	ldi	r24, 0x2B	; 43
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     57c:	24 e0       	ldi	r18, 0x04	; 4
     57e:	93 2f       	mov	r25, r19
     580:	9a 95       	dec	r25
     582:	f1 f7       	brne	.-4      	; 0x580 <USI_TWI_Master_Transfer+0xa>
USI_TWI_Master_Transfer():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:233
     584:	8a bd       	out	0x2a, r24	; 42
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:234
    while (!(PIN_USI_CL & (1 << PIN_USI_SCL)))
     586:	39 9b       	sbis	0x07, 1	; 7
     588:	fe cf       	rjmp	.-4      	; 0x586 <USI_TWI_Master_Transfer+0x10>
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     58a:	92 2f       	mov	r25, r18
     58c:	9a 95       	dec	r25
     58e:	f1 f7       	brne	.-4      	; 0x58c <USI_TWI_Master_Transfer+0x16>
USI_TWI_Master_Transfer():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:237
      ; // Wait for SCL to go high.
    if (USI_TWI_MASTER_SPEED) DELAY_T4TWI_FM; else DELAY_T4TWI;
    USICR = temp;                   // Generate negative SCL edge.
     590:	8a bd       	out	0x2a, r24	; 42
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:238
  } while (!(USISR & (1 << USIOIF))); // Check for transfer complete.
     592:	0b b4       	in	r0, 0x2b	; 43
     594:	06 fe       	sbrs	r0, 6
     596:	f3 cf       	rjmp	.-26     	; 0x57e <USI_TWI_Master_Transfer+0x8>
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     598:	85 e0       	ldi	r24, 0x05	; 5
     59a:	8a 95       	dec	r24
     59c:	f1 f7       	brne	.-4      	; 0x59a <USI_TWI_Master_Transfer+0x24>
USI_TWI_Master_Transfer():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:241

  if (USI_TWI_MASTER_SPEED) DELAY_T2TWI_FM; else DELAY_T2TWI;
  temp  = USIDR;                 // Read out data.
     59e:	8c b5       	in	r24, 0x2c	; 44
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:242
  USIDR = 0xFF;                  // Release SDA.
     5a0:	9f ef       	ldi	r25, 0xFF	; 255
     5a2:	9c bd       	out	0x2c, r25	; 44
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:243
  DDR_USI |= (1 << PIN_USI_SDA); // Enable SDA as output.
     5a4:	61 9a       	sbi	0x0c, 1	; 12
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:246

  return temp; // Return the data from the USIDR
}
     5a6:	08 95       	ret

000005a8 <USI_TWI_Start_Transceiver_With_Data_Stop>:
USI_TWI_Start_Transceiver_With_Data_Stop():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:108
 parameter that defines if a Stop Condition should be send at the end
 of the transmission.
---------------------------------------------------------------*/

unsigned char USI_TWI_Start_Transceiver_With_Data_Stop(unsigned char *msg, unsigned char msgSize, unsigned char stop)
{
     5a8:	ff 92       	push	r15
     5aa:	0f 93       	push	r16
     5ac:	1f 93       	push	r17
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	06 2f       	mov	r16, r22
     5b4:	14 2f       	mov	r17, r20
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:115
  // Prepare register value to: Clear flags set USI to shift 8 bits i.e. count 16 clock edges.

  unsigned char tempUSISR_1bit = (1 << USISIF) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC) | (0xE << USICNT0);
  // Prepare register value to: Clear flags, and set USI to shift 1 bit i.e. count 2 clock edges.

  USI_TWI_state.errorState  = 0;
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	20 93 b0 01 	sts	0x01B0, r18	; 0x8001b0 <USI_TWI_state>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:146
    USI_TWI_state.errorState = USI_TWI_UE_DATA_COL;
    return (FALSE);
  }
#endif

  if (!(*msg & (1 << TWI_READ_BIT))) // The LSB in the address byte determines if is a masterRead or masterWrite operation.
     5bc:	fc 01       	movw	r30, r24
     5be:	20 81       	ld	r18, Z
     5c0:	20 fd       	sbrc	r18, 0
     5c2:	03 c0       	rjmp	.+6      	; 0x5ca <USI_TWI_Start_Transceiver_With_Data_Stop+0x22>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:148
  {
    USI_TWI_state.masterWriteDataMode = TRUE;
     5c4:	23 e0       	ldi	r18, 0x03	; 3
     5c6:	20 93 b0 01 	sts	0x01B0, r18	; 0x8001b0 <USI_TWI_state>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:152
  }

  /* Release SCL to ensure that (repeated) Start can be performed */
  PORT_USI_CL |= (1 << PIN_USI_SCL); // Release SCL.
     5ca:	49 9a       	sbi	0x09, 1	; 9
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:153
  while (!(PIN_USI_CL & (1 << PIN_USI_SCL)))
     5cc:	39 9b       	sbis	0x07, 1	; 7
     5ce:	fe cf       	rjmp	.-4      	; 0x5cc <USI_TWI_Start_Transceiver_With_Data_Stop+0x24>
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     5d0:	25 e0       	ldi	r18, 0x05	; 5
     5d2:	2a 95       	dec	r18
     5d4:	f1 f7       	brne	.-4      	; 0x5d2 <USI_TWI_Start_Transceiver_With_Data_Stop+0x2a>
USI_TWI_Start_Transceiver_With_Data_Stop():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:159
    ; // Verify that SCL becomes high.
  if (USI_TWI_MASTER_SPEED) DELAY_T4TWI_FM; // Delay for T4TWI if TWI_FAST_MODE
  else DELAY_T2TWI;    // Delay for T2TWI if TWI_STANDARD_MODE

  /* Generate Start Condition */
  PORT_USI &= ~(1 << PIN_USI_SDA); // Force SDA LOW.
     5d6:	69 98       	cbi	0x0d, 1	; 13
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     5d8:	24 e0       	ldi	r18, 0x04	; 4
     5da:	2a 95       	dec	r18
     5dc:	f1 f7       	brne	.-4      	; 0x5da <USI_TWI_Start_Transceiver_With_Data_Stop+0x32>
USI_TWI_Start_Transceiver_With_Data_Stop():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:163

  if (USI_TWI_MASTER_SPEED) DELAY_T4TWI_FM; else DELAY_T4TWI; // UGGGGLLLYYYYY - but if you never call clock() which is the only thing that could change USI_TWI_MASTER_SPEED, should be optimized out

  PORT_USI_CL &= ~(1 << PIN_USI_SCL); // Pull SCL LOW.
     5de:	49 98       	cbi	0x09, 1	; 9
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:164
  PORT_USI |= (1 << PIN_USI_SDA);  // Release SDA.
     5e0:	69 9a       	sbi	0x0d, 1	; 13
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:167

#ifdef SIGNAL_VERIFY
  if (!(USISR & (1 << USISIF))) {
     5e2:	0b b4       	in	r0, 0x2b	; 43
     5e4:	07 fc       	sbrc	r0, 7
     5e6:	0b c0       	rjmp	.+22     	; 0x5fe <USI_TWI_Start_Transceiver_With_Data_Stop+0x56>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:168
    USI_TWI_state.errorState = USI_TWI_MISSING_START_CON;
     5e8:	87 e0       	ldi	r24, 0x07	; 7
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:186

      /* Clock and verify (N)ACK from slave */
      DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
      if (USI_TWI_Master_Transfer(tempUSISR_1bit) & (1 << TWI_NACK_BIT)) {
        if (USI_TWI_state.addressMode)
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
     5ea:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <USI_TWI_state>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:189
        else
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_DATA;
        return (FALSE);
     5ee:	10 e0       	ldi	r17, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:216
    USI_TWI_Master_Stop(); // Send a STOP condition on the TWI bus.
  }

  /* Transmission successfully completed*/
  return (TRUE);
}
     5f0:	81 2f       	mov	r24, r17
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	ff 90       	pop	r15
     5fc:	08 95       	ret
     5fe:	ec 01       	movw	r28, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:202
      *(msg++) = USI_TWI_Master_Transfer(tempUSISR_8bit);

      /* Prepare to generate ACK (or NACK in case of End Of Transmission) */
      if (msgSize == 1) // If transmission of last byte was performed.
      {
        USIDR = 0xFF; // Load NACK to confirm End Of Transmission.
     600:	ff 24       	eor	r15, r15
     602:	fa 94       	dec	r15
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:176
#endif

  /*Write address and Read/Write data */
  do {
    /* If masterWrite cycle (or initial address transmission)*/
    if (USI_TWI_state.addressMode || USI_TWI_state.masterWriteDataMode) {
     604:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <USI_TWI_state>
     608:	83 70       	andi	r24, 0x03	; 3
     60a:	29 f1       	breq	.+74     	; 0x656 <USI_TWI_Start_Transceiver_With_Data_Stop+0xae>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:178
      /* Write a byte */
      PORT_USI_CL &= ~(1 << PIN_USI_SCL);         // Pull SCL LOW.
     60c:	49 98       	cbi	0x09, 1	; 9
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:179
      USIDR = *(msg++);                        // Setup data.
     60e:	88 81       	ld	r24, Y
     610:	8c bd       	out	0x2c, r24	; 44
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:180
      USI_TWI_Master_Transfer(tempUSISR_8bit); // Send 8 bits on bus.
     612:	80 ef       	ldi	r24, 0xF0	; 240
     614:	0e 94 bb 02 	call	0x576	; 0x576 <USI_TWI_Master_Transfer>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:183

      /* Clock and verify (N)ACK from slave */
      DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
     618:	61 98       	cbi	0x0c, 1	; 12
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:184
      if (USI_TWI_Master_Transfer(tempUSISR_1bit) & (1 << TWI_NACK_BIT)) {
     61a:	8e ef       	ldi	r24, 0xFE	; 254
     61c:	0e 94 bb 02 	call	0x576	; 0x576 <USI_TWI_Master_Transfer>
     620:	80 ff       	sbrs	r24, 0
     622:	0c c0       	rjmp	.+24     	; 0x63c <USI_TWI_Start_Transceiver_With_Data_Stop+0x94>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:185
        if (USI_TWI_state.addressMode)
     624:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <USI_TWI_state>
     628:	18 2f       	mov	r17, r24
     62a:	11 70       	andi	r17, 0x01	; 1
     62c:	80 ff       	sbrs	r24, 0
     62e:	02 c0       	rjmp	.+4      	; 0x634 <USI_TWI_Start_Transceiver_With_Data_Stop+0x8c>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:186
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
     630:	86 e0       	ldi	r24, 0x06	; 6
     632:	db cf       	rjmp	.-74     	; 0x5ea <USI_TWI_Start_Transceiver_With_Data_Stop+0x42>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:188
        else
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_DATA;
     634:	85 e0       	ldi	r24, 0x05	; 5
USI_TWI_Master_Stop():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:264
  PORT_USI |= (1 << PIN_USI_SDA); // Release SDA.
  if (USI_TWI_MASTER_SPEED) DELAY_T2TWI_FM; else DELAY_T2TWI;

#ifdef SIGNAL_VERIFY
  if (!(USISR & (1 << USIPF))) {
    USI_TWI_state.errorState = USI_TWI_MISSING_STOP_CON;
     636:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <USI_TWI_state>
     63a:	da cf       	rjmp	.-76     	; 0x5f0 <USI_TWI_Start_Transceiver_With_Data_Stop+0x48>
USI_TWI_Start_Transceiver_With_Data_Stop():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:191
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
        else
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_DATA;
        return (FALSE);
      }
      USI_TWI_state.addressMode = FALSE; // Only perform address transmission once.
     63c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <USI_TWI_state>
     640:	8e 7f       	andi	r24, 0xFE	; 254
     642:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <USI_TWI_state>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:208
      } else {
        USIDR = 0x00; // Load ACK. Set data register bit 7 (output for SDA) low.
      }
      USI_TWI_Master_Transfer(tempUSISR_1bit); // Generate ACK/NACK.
    }
  } while (--msgSize); // Until all data sent/received.
     646:	01 50       	subi	r16, 0x01	; 1
     648:	21 96       	adiw	r28, 0x01	; 1
     64a:	01 11       	cpse	r16, r1
     64c:	db cf       	rjmp	.-74     	; 0x604 <USI_TWI_Start_Transceiver_With_Data_Stop+0x5c>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:210

  if (stop) {
     64e:	11 11       	cpse	r17, r1
     650:	10 c0       	rjmp	.+32     	; 0x672 <USI_TWI_Start_Transceiver_With_Data_Stop+0xca>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:215
    USI_TWI_Master_Stop(); // Send a STOP condition on the TWI bus.
  }

  /* Transmission successfully completed*/
  return (TRUE);
     652:	11 e0       	ldi	r17, 0x01	; 1
     654:	cd cf       	rjmp	.-102    	; 0x5f0 <USI_TWI_Start_Transceiver_With_Data_Stop+0x48>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:196
      USI_TWI_state.addressMode = FALSE; // Only perform address transmission once.
    }
    /* Else masterRead cycle*/
    else {
      /* Read a data byte */
      DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
     656:	61 98       	cbi	0x0c, 1	; 12
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:197
      *(msg++) = USI_TWI_Master_Transfer(tempUSISR_8bit);
     658:	80 ef       	ldi	r24, 0xF0	; 240
     65a:	0e 94 bb 02 	call	0x576	; 0x576 <USI_TWI_Master_Transfer>
     65e:	88 83       	st	Y, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:200

      /* Prepare to generate ACK (or NACK in case of End Of Transmission) */
      if (msgSize == 1) // If transmission of last byte was performed.
     660:	01 30       	cpi	r16, 0x01	; 1
     662:	29 f4       	brne	.+10     	; 0x66e <USI_TWI_Start_Transceiver_With_Data_Stop+0xc6>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:202
      {
        USIDR = 0xFF; // Load NACK to confirm End Of Transmission.
     664:	fc bc       	out	0x2c, r15	; 44
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:206
      } else {
        USIDR = 0x00; // Load ACK. Set data register bit 7 (output for SDA) low.
      }
      USI_TWI_Master_Transfer(tempUSISR_1bit); // Generate ACK/NACK.
     666:	8e ef       	ldi	r24, 0xFE	; 254
     668:	0e 94 bb 02 	call	0x576	; 0x576 <USI_TWI_Master_Transfer>
     66c:	ec cf       	rjmp	.-40     	; 0x646 <USI_TWI_Start_Transceiver_With_Data_Stop+0x9e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:204
      /* Prepare to generate ACK (or NACK in case of End Of Transmission) */
      if (msgSize == 1) // If transmission of last byte was performed.
      {
        USIDR = 0xFF; // Load NACK to confirm End Of Transmission.
      } else {
        USIDR = 0x00; // Load ACK. Set data register bit 7 (output for SDA) low.
     66e:	1c bc       	out	0x2c, r1	; 44
     670:	fa cf       	rjmp	.-12     	; 0x666 <USI_TWI_Start_Transceiver_With_Data_Stop+0xbe>
USI_TWI_Master_Stop():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:254
 Function for generating a TWI Stop Condition. Used to release
 the TWI bus.
---------------------------------------------------------------*/
unsigned char USI_TWI_Master_Stop(void)
{
  PORT_USI &= ~(1 << PIN_USI_SDA); // Pull SDA low.
     672:	69 98       	cbi	0x0d, 1	; 13
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:255
  PORT_USI_CL |= (1 << PIN_USI_SCL);  // Release SCL.
     674:	49 9a       	sbi	0x09, 1	; 9
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:256
  while (!(PIN_USI_CL & (1 << PIN_USI_SCL)))
     676:	39 9b       	sbis	0x07, 1	; 7
     678:	fe cf       	rjmp	.-4      	; 0x676 <USI_TWI_Start_Transceiver_With_Data_Stop+0xce>
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     67a:	84 e0       	ldi	r24, 0x04	; 4
     67c:	8a 95       	dec	r24
     67e:	f1 f7       	brne	.-4      	; 0x67c <USI_TWI_Start_Transceiver_With_Data_Stop+0xd4>
USI_TWI_Master_Stop():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:259
    ; // Wait for SCL to go high.
  if (USI_TWI_MASTER_SPEED) DELAY_T4TWI_FM; else DELAY_T4TWI;
  PORT_USI |= (1 << PIN_USI_SDA); // Release SDA.
     680:	69 9a       	sbi	0x0d, 1	; 13
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     682:	85 e0       	ldi	r24, 0x05	; 5
     684:	8a 95       	dec	r24
     686:	f1 f7       	brne	.-4      	; 0x684 <USI_TWI_Start_Transceiver_With_Data_Stop+0xdc>
USI_TWI_Master_Stop():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:263
  if (USI_TWI_MASTER_SPEED) DELAY_T2TWI_FM; else DELAY_T2TWI;

#ifdef SIGNAL_VERIFY
  if (!(USISR & (1 << USIPF))) {
     688:	0b b4       	in	r0, 0x2b	; 43
     68a:	05 fc       	sbrc	r0, 5
     68c:	e2 cf       	rjmp	.-60     	; 0x652 <USI_TWI_Start_Transceiver_With_Data_Stop+0xaa>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:264
    USI_TWI_state.errorState = USI_TWI_MISSING_STOP_CON;
     68e:	88 e0       	ldi	r24, 0x08	; 8
     690:	d2 cf       	rjmp	.-92     	; 0x636 <USI_TWI_Start_Transceiver_With_Data_Stop+0x8e>

00000692 <TwoWire::endTransmission() [clone .constprop.51]>:
endTransmission():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:478

uint8_t TwoWire::endTransmission(uint8_t sendStop) {
  // transmit buffer (blocking)
  uint8_t ret = USI_TWI_Start_Transceiver_With_Data_Stop(Buffer,
                                                         BufferLength,
                                                         sendStop);
     692:	41 e0       	ldi	r20, 0x01	; 1
     694:	60 91 b4 01 	lds	r22, 0x01B4	; 0x8001b4 <TwoWire::BufferLength>
     698:	80 e8       	ldi	r24, 0x80	; 128
     69a:	91 e0       	ldi	r25, 0x01	; 1
     69c:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <USI_TWI_Start_Transceiver_With_Data_Stop>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:480
  // reset tx buffer iterator vars
  BufferIndex = 0;
     6a0:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <TwoWire::BufferIndex>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:481
  BufferLength = 0;
     6a4:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <TwoWire::BufferLength>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:483
  // indicate that we are done transmitting
  transmitting = 0;
     6a8:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <TwoWire::transmitting>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:485
  // check for error
  if (ret == FALSE) {
     6ac:	81 11       	cpse	r24, r1
     6ae:	10 c0       	rjmp	.+32     	; 0x6d0 <TwoWire::endTransmission() [clone .constprop.51]+0x3e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:486
    switch (USI_TWI_Get_State_Info()) {
     6b0:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <USI_TWI_state>
     6b4:	85 30       	cpi	r24, 0x05	; 5
     6b6:	41 f0       	breq	.+16     	; 0x6c8 <TwoWire::endTransmission() [clone .constprop.51]+0x36>
     6b8:	86 30       	cpi	r24, 0x06	; 6
     6ba:	21 f0       	breq	.+8      	; 0x6c4 <TwoWire::endTransmission() [clone .constprop.51]+0x32>
     6bc:	81 30       	cpi	r24, 0x01	; 1
     6be:	31 f4       	brne	.+12     	; 0x6cc <TwoWire::endTransmission() [clone .constprop.51]+0x3a>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:488
    case USI_TWI_DATA_OUT_OF_BOUND:
      return 1; //data too long to fit in transmit buffer
     6c0:	81 e0       	ldi	r24, 0x01	; 1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:501
  return 0; //success
}

uint8_t TwoWire::endTransmission(void) {
  return endTransmission(true);
}
     6c2:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:490
  if (ret == FALSE) {
    switch (USI_TWI_Get_State_Info()) {
    case USI_TWI_DATA_OUT_OF_BOUND:
      return 1; //data too long to fit in transmit buffer
    case USI_TWI_NO_ACK_ON_ADDRESS:
      return 2; //received NACK on transmit of address
     6c4:	82 e0       	ldi	r24, 0x02	; 2
     6c6:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:492
    case USI_TWI_NO_ACK_ON_DATA:
      return 3; //received NACK on transmit of data
     6c8:	83 e0       	ldi	r24, 0x03	; 3
     6ca:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:494
    }
    return 4; //other error
     6cc:	84 e0       	ldi	r24, 0x04	; 4
     6ce:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:496
  }
  return 0; //success
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	08 95       	ret

000006d4 <Print::write(char const*) [clone .part.2] [clone .constprop.61]>:
_ZN5Print5writeEPKc.part.2():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.h:51
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
     6d4:	fc 01       	movw	r30, r24
     6d6:	01 90       	ld	r0, Z+
     6d8:	00 20       	and	r0, r0
     6da:	e9 f7       	brne	.-6      	; 0x6d6 <Print::write(char const*) [clone .part.2] [clone .constprop.61]+0x2>
     6dc:	31 97       	sbiw	r30, 0x01	; 1
     6de:	af 01       	movw	r20, r30
     6e0:	48 1b       	sub	r20, r24
     6e2:	59 0b       	sbc	r21, r25
     6e4:	bc 01       	movw	r22, r24
     6e6:	86 eb       	ldi	r24, 0xB6	; 182
     6e8:	91 e0       	ldi	r25, 0x01	; 1
     6ea:	0c 94 bb 00 	jmp	0x176	; 0x176 <Print::write(unsigned char const*, unsigned int)>

000006ee <Print::printNumber(unsigned long, unsigned char) [clone .constprop.59]>:
printNumber():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:230
  return vfprintf_P(&f, (const char *)ifsh, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     6ee:	8f 92       	push	r8
     6f0:	9f 92       	push	r9
     6f2:	af 92       	push	r10
     6f4:	bf 92       	push	r11
     6f6:	ef 92       	push	r14
     6f8:	ff 92       	push	r15
     6fa:	0f 93       	push	r16
     6fc:	1f 93       	push	r17
     6fe:	cf 93       	push	r28
     700:	df 93       	push	r29
     702:	cd b7       	in	r28, 0x3d	; 61
     704:	de b7       	in	r29, 0x3e	; 62
     706:	a1 97       	sbiw	r28, 0x21	; 33
     708:	0f b6       	in	r0, 0x3f	; 63
     70a:	f8 94       	cli
     70c:	de bf       	out	0x3e, r29	; 62
     70e:	0f be       	out	0x3f, r0	; 63
     710:	cd bf       	out	0x3d, r28	; 61
     712:	16 2f       	mov	r17, r22
     714:	04 2f       	mov	r16, r20
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:234
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     716:	19 a2       	std	Y+33, r1	; 0x21
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:237

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     718:	42 30       	cpi	r20, 0x02	; 2
     71a:	08 f4       	brcc	.+2      	; 0x71e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.59]+0x30>
     71c:	0a e0       	ldi	r16, 0x0A	; 10
     71e:	7e 01       	movw	r14, r28
     720:	21 e2       	ldi	r18, 0x21	; 33
     722:	e2 0e       	add	r14, r18
     724:	f1 1c       	adc	r15, r1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:241

  do {
    unsigned long m = n;
    n /= base;
     726:	80 2e       	mov	r8, r16
     728:	91 2c       	mov	r9, r1
     72a:	b1 2c       	mov	r11, r1
     72c:	a1 2c       	mov	r10, r1
     72e:	61 2f       	mov	r22, r17
     730:	a5 01       	movw	r20, r10
     732:	94 01       	movw	r18, r8
     734:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <__udivmodsi4>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:242
    char c = m - base * n;
     738:	80 2f       	mov	r24, r16
     73a:	62 2f       	mov	r22, r18
     73c:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <__mulqi3>
     740:	18 1b       	sub	r17, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:243
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     742:	1a 30       	cpi	r17, 0x0A	; 10
     744:	1c f5       	brge	.+70     	; 0x78c <Print::printNumber(unsigned long, unsigned char) [clone .constprop.59]+0x9e>
     746:	10 5d       	subi	r17, 0xD0	; 208
     748:	f7 01       	movw	r30, r14
     74a:	12 93       	st	-Z, r17
     74c:	7f 01       	movw	r14, r30
     74e:	12 2f       	mov	r17, r18
     750:	73 2f       	mov	r23, r19
     752:	ca 01       	movw	r24, r20
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:244
  } while(n);
     754:	23 2b       	or	r18, r19
     756:	24 2b       	or	r18, r20
     758:	25 2b       	or	r18, r21
     75a:	49 f7       	brne	.-46     	; 0x72e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.59]+0x40>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.h:50
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	80 e0       	ldi	r24, 0x00	; 0
write():
     760:	30 97       	sbiw	r30, 0x00	; 0
     762:	19 f0       	breq	.+6      	; 0x76a <Print::printNumber(unsigned long, unsigned char) [clone .constprop.59]+0x7c>
     764:	cf 01       	movw	r24, r30
     766:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <Print::write(char const*) [clone .part.2] [clone .constprop.61]>
printNumber():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:247

  return write(str);
}
     76a:	a1 96       	adiw	r28, 0x21	; 33
     76c:	0f b6       	in	r0, 0x3f	; 63
     76e:	f8 94       	cli
     770:	de bf       	out	0x3e, r29	; 62
     772:	0f be       	out	0x3f, r0	; 63
     774:	cd bf       	out	0x3d, r28	; 61
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	1f 91       	pop	r17
     77c:	0f 91       	pop	r16
     77e:	ff 90       	pop	r15
     780:	ef 90       	pop	r14
     782:	bf 90       	pop	r11
     784:	af 90       	pop	r10
     786:	9f 90       	pop	r9
     788:	8f 90       	pop	r8
     78a:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:243

  do {
    unsigned long m = n;
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     78c:	19 5c       	subi	r17, 0xC9	; 201
     78e:	dc cf       	rjmp	.-72     	; 0x748 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.59]+0x5a>

00000790 <Print::println(char const*) [clone .constprop.40]>:
println():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:137
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
write():
     794:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <Print::write(char const*) [clone .part.2] [clone .constprop.61]>
     798:	ec 01       	movw	r28, r24
println():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:140
{
  size_t n = print(c);
  n += println();
     79a:	0e 94 90 01 	call	0x320	; 0x320 <Print::println() [clone .constprop.62]>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:142
  return n;
}
     79e:	8c 0f       	add	r24, r28
     7a0:	9d 1f       	adc	r25, r29
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	08 95       	ret

000007a8 <RF24::endTransaction() [clone .constprop.34]>:
csn():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:52
      if(!mode)
	    _SPI.chipSelect(csn_pin);
#endif

#if !defined (RF24_LINUX)
	digitalWrite(csn_pin,mode);
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <radio+0x2>
     7ae:	0c 94 be 01 	jmp	0x37c	; 0x37c <digitalWrite>

000007b2 <RF24::beginTransaction() [clone .constprop.33]>:
     7b2:	60 e0       	ldi	r22, 0x00	; 0
     7b4:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <radio+0x2>
     7b8:	0c 94 be 01 	jmp	0x37c	; 0x37c <digitalWrite>

000007bc <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]>:
write_register():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:187
  return status;
}

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, uint8_t value)
     7bc:	1f 93       	push	r17
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	18 2f       	mov	r17, r24
     7c4:	d6 2f       	mov	r29, r22
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:205
	_SPI.transfernb( (char *) spi_txbuff, (char *) spi_rxbuff, 2);
	status = *prx++; // status is 1st byte of receive buffer
	endTransaction();
  #else

  beginTransaction();
     7c6:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <RF24::beginTransaction() [clone .constprop.33]>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:206
  status = _SPI.transfer( W_REGISTER | ( REGISTER_MASK & reg ) );
     7ca:	81 2f       	mov	r24, r17
     7cc:	80 62       	ori	r24, 0x20	; 32
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:151
  inline __attribute__((always_inline))
  void transferBit(uint8_t bit, uint8_t* rxData, uint8_t txData) {
    if (MODE_CPHA(Mode)) {
      fastDigitalWrite(SckPin, !MODE_CPOL(Mode));
    }
    fastDigitalWrite(MosiPin, txData & (1 << bit));
     7ce:	90 e0       	ldi	r25, 0x00	; 0
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
     7d0:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
     7d2:	89 9a       	sbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:154
    fastDigitalWrite(SckPin,
      MODE_CPHA(Mode) ? MODE_CPOL(Mode) : !MODE_CPOL(Mode));
    if (fastDigitalRead(MisoPin)) *rxData |= 1 << bit;
     7d4:	7a 9b       	sbis	0x0f, 2	; 15
     7d6:	76 c0       	rjmp	.+236    	; 0x8c4 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]+0x108>
write_register():
     7d8:	c0 e8       	ldi	r28, 0x80	; 128
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
  } else {
    *address &= ~mask;
     7da:	89 98       	cbi	0x11, 1	; 17
     7dc:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
     7de:	89 9a       	sbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:154
     7e0:	7a 99       	sbic	0x0f, 2	; 15
     7e2:	c0 64       	ori	r28, 0x40	; 64
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
  } else {
    *address &= ~mask;
     7e4:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
     7e6:	8d 9a       	sbi	0x11, 5	; 17
     7e8:	89 9a       	sbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:154
     7ea:	7a 99       	sbic	0x0f, 2	; 15
     7ec:	c0 62       	ori	r28, 0x20	; 32
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
  } else {
    *address &= ~mask;
     7ee:	89 98       	cbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:151
  inline __attribute__((always_inline))
  void transferBit(uint8_t bit, uint8_t* rxData, uint8_t txData) {
    if (MODE_CPHA(Mode)) {
      fastDigitalWrite(SckPin, !MODE_CPOL(Mode));
    }
    fastDigitalWrite(MosiPin, txData & (1 << bit));
     7f0:	9c 01       	movw	r18, r24
     7f2:	44 e0       	ldi	r20, 0x04	; 4
     7f4:	35 95       	asr	r19
     7f6:	27 95       	ror	r18
     7f8:	4a 95       	dec	r20
     7fa:	e1 f7       	brne	.-8      	; 0x7f4 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]+0x38>
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
     7fc:	22 30       	cpi	r18, 0x02	; 2
     7fe:	31 05       	cpc	r19, r1
     800:	09 f4       	brne	.+2      	; 0x804 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]+0x48>
     802:	62 c0       	rjmp	.+196    	; 0x8c8 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]+0x10c>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
     804:	8d 9a       	sbi	0x11, 5	; 17
     806:	89 9a       	sbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:154
    fastDigitalWrite(SckPin,
      MODE_CPHA(Mode) ? MODE_CPOL(Mode) : !MODE_CPOL(Mode));
    if (fastDigitalRead(MisoPin)) *rxData |= 1 << bit;
     808:	7a 99       	sbic	0x0f, 2	; 15
     80a:	c0 61       	ori	r28, 0x10	; 16
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
  } else {
    *address &= ~mask;
     80c:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
     80e:	83 ff       	sbrs	r24, 3
     810:	5d c0       	rjmp	.+186    	; 0x8cc <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]+0x110>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
     812:	8d 9a       	sbi	0x11, 5	; 17
     814:	89 9a       	sbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:154
     816:	7a 99       	sbic	0x0f, 2	; 15
     818:	c8 60       	ori	r28, 0x08	; 8
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
  } else {
    *address &= ~mask;
     81a:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
     81c:	82 ff       	sbrs	r24, 2
     81e:	58 c0       	rjmp	.+176    	; 0x8d0 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]+0x114>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
     820:	8d 9a       	sbi	0x11, 5	; 17
     822:	89 9a       	sbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:154
     824:	7a 99       	sbic	0x0f, 2	; 15
     826:	c4 60       	ori	r28, 0x04	; 4
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
  } else {
    *address &= ~mask;
     828:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
     82a:	81 ff       	sbrs	r24, 1
     82c:	53 c0       	rjmp	.+166    	; 0x8d4 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]+0x118>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
     82e:	8d 9a       	sbi	0x11, 5	; 17
     830:	89 9a       	sbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:154
     832:	7a 99       	sbic	0x0f, 2	; 15
     834:	c2 60       	ori	r28, 0x02	; 2
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
  } else {
    *address &= ~mask;
     836:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
     838:	10 ff       	sbrs	r17, 0
     83a:	4e c0       	rjmp	.+156    	; 0x8d8 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]+0x11c>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
     83c:	8d 9a       	sbi	0x11, 5	; 17
     83e:	89 9a       	sbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:154
     840:	7a 99       	sbic	0x0f, 2	; 15
     842:	c1 60       	ori	r28, 0x01	; 1
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
  } else {
    *address &= ~mask;
     844:	89 98       	cbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:151
  inline __attribute__((always_inline))
  void transferBit(uint8_t bit, uint8_t* rxData, uint8_t txData) {
    if (MODE_CPHA(Mode)) {
      fastDigitalWrite(SckPin, !MODE_CPOL(Mode));
    }
    fastDigitalWrite(MosiPin, txData & (1 << bit));
     846:	8d 2f       	mov	r24, r29
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	9c 01       	movw	r18, r24
     84c:	22 0f       	add	r18, r18
     84e:	23 2f       	mov	r18, r19
     850:	22 1f       	adc	r18, r18
     852:	33 0b       	sbc	r19, r19
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
     854:	23 2b       	or	r18, r19
     856:	09 f4       	brne	.+2      	; 0x85a <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]+0x9e>
     858:	41 c0       	rjmp	.+130    	; 0x8dc <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]+0x120>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
     85a:	8d 9a       	sbi	0x11, 5	; 17
     85c:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
     85e:	2f b1       	in	r18, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
     860:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
     862:	86 ff       	sbrs	r24, 6
     864:	3d c0       	rjmp	.+122    	; 0x8e0 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]+0x124>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
     866:	8d 9a       	sbi	0x11, 5	; 17
     868:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
     86a:	2f b1       	in	r18, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
     86c:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
     86e:	85 ff       	sbrs	r24, 5
     870:	39 c0       	rjmp	.+114    	; 0x8e4 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]+0x128>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
     872:	8d 9a       	sbi	0x11, 5	; 17
     874:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
     876:	2f b1       	in	r18, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
     878:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
     87a:	84 ff       	sbrs	r24, 4
     87c:	35 c0       	rjmp	.+106    	; 0x8e8 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]+0x12c>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
     87e:	8d 9a       	sbi	0x11, 5	; 17
     880:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
     882:	2f b1       	in	r18, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
     884:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
     886:	83 ff       	sbrs	r24, 3
     888:	31 c0       	rjmp	.+98     	; 0x8ec <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]+0x130>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
     88a:	8d 9a       	sbi	0x11, 5	; 17
     88c:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
     88e:	2f b1       	in	r18, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
     890:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
     892:	82 ff       	sbrs	r24, 2
     894:	2d c0       	rjmp	.+90     	; 0x8f0 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]+0x134>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
     896:	8d 9a       	sbi	0x11, 5	; 17
     898:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
     89a:	9f b1       	in	r25, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
     89c:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
     89e:	81 ff       	sbrs	r24, 1
     8a0:	29 c0       	rjmp	.+82     	; 0x8f4 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]+0x138>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
     8a2:	8d 9a       	sbi	0x11, 5	; 17
     8a4:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
     8a6:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
     8a8:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
     8aa:	d0 ff       	sbrs	r29, 0
     8ac:	25 c0       	rjmp	.+74     	; 0x8f8 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]+0x13c>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
     8ae:	8d 9a       	sbi	0x11, 5	; 17
     8b0:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
     8b2:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
     8b4:	89 98       	cbi	0x11, 1	; 17
write_register():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:208
  _SPI.transfer(value);
  endTransaction();
     8b6:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <RF24::endTransaction() [clone .constprop.34]>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:213

  #endif

  return status;
}
     8ba:	8c 2f       	mov	r24, r28
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	1f 91       	pop	r17
     8c2:	08 95       	ret
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:98
   * @param[in] txData Data byte to send.
   * @return Data byte received.
   */
  inline __attribute__((always_inline))
  uint8_t transfer(uint8_t txData) {
    uint8_t rxData = 0;
     8c4:	c0 e0       	ldi	r28, 0x00	; 0
     8c6:	89 cf       	rjmp	.-238    	; 0x7da <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]+0x1e>
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
     8c8:	8d 98       	cbi	0x11, 5	; 17
     8ca:	9d cf       	rjmp	.-198    	; 0x806 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]+0x4a>
     8cc:	8d 98       	cbi	0x11, 5	; 17
     8ce:	a2 cf       	rjmp	.-188    	; 0x814 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]+0x58>
     8d0:	8d 98       	cbi	0x11, 5	; 17
     8d2:	a7 cf       	rjmp	.-178    	; 0x822 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]+0x66>
     8d4:	8d 98       	cbi	0x11, 5	; 17
     8d6:	ac cf       	rjmp	.-168    	; 0x830 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]+0x74>
     8d8:	8d 98       	cbi	0x11, 5	; 17
     8da:	b1 cf       	rjmp	.-158    	; 0x83e <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]+0x82>
     8dc:	8d 98       	cbi	0x11, 5	; 17
     8de:	be cf       	rjmp	.-132    	; 0x85c <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]+0xa0>
     8e0:	8d 98       	cbi	0x11, 5	; 17
     8e2:	c2 cf       	rjmp	.-124    	; 0x868 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]+0xac>
     8e4:	8d 98       	cbi	0x11, 5	; 17
     8e6:	c6 cf       	rjmp	.-116    	; 0x874 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]+0xb8>
     8e8:	8d 98       	cbi	0x11, 5	; 17
     8ea:	ca cf       	rjmp	.-108    	; 0x880 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]+0xc4>
     8ec:	8d 98       	cbi	0x11, 5	; 17
     8ee:	ce cf       	rjmp	.-100    	; 0x88c <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]+0xd0>
     8f0:	8d 98       	cbi	0x11, 5	; 17
     8f2:	d2 cf       	rjmp	.-92     	; 0x898 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]+0xdc>
     8f4:	8d 98       	cbi	0x11, 5	; 17
     8f6:	d6 cf       	rjmp	.-84     	; 0x8a4 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]+0xe8>
     8f8:	8d 98       	cbi	0x11, 5	; 17
     8fa:	da cf       	rjmp	.-76     	; 0x8b0 <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]+0xf4>

000008fc <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.31]>:
write_register():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:155
  return result;
}

/****************************************************************************/

uint8_t RF24::write_register(uint8_t reg, const uint8_t* buf, uint8_t len)
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	c8 2f       	mov	r28, r24
     902:	d6 2f       	mov	r29, r22
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:174
  _SPI.transfernb( (char *) spi_txbuff, (char *) spi_rxbuff, size);
  status = *prx; // status is 1st byte of receive buffer
  endTransaction();
  #else

  beginTransaction();
     904:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <RF24::beginTransaction() [clone .constprop.33]>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:175
  status = _SPI.transfer( W_REGISTER | ( REGISTER_MASK & reg ) );
     908:	c0 62       	ori	r28, 0x20	; 32
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:151
  inline __attribute__((always_inline))
  void transferBit(uint8_t bit, uint8_t* rxData, uint8_t txData) {
    if (MODE_CPHA(Mode)) {
      fastDigitalWrite(SckPin, !MODE_CPOL(Mode));
    }
    fastDigitalWrite(MosiPin, txData & (1 << bit));
     90a:	8c 2f       	mov	r24, r28
     90c:	90 e0       	ldi	r25, 0x00	; 0
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
     90e:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
     910:	89 9a       	sbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:154
    fastDigitalWrite(SckPin,
      MODE_CPHA(Mode) ? MODE_CPOL(Mode) : !MODE_CPOL(Mode));
    if (fastDigitalRead(MisoPin)) *rxData |= 1 << bit;
     912:	7a 99       	sbic	0x0f, 2	; 15
     914:	70 c0       	rjmp	.+224    	; 0x9f6 <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.31]+0xfa>
write_register():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:98
   * @param[in] txData Data byte to send.
   * @return Data byte received.
   */
  inline __attribute__((always_inline))
  uint8_t transfer(uint8_t txData) {
    uint8_t rxData = 0;
     916:	c0 e0       	ldi	r28, 0x00	; 0
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
  } else {
    *address &= ~mask;
     918:	89 98       	cbi	0x11, 1	; 17
     91a:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
     91c:	89 9a       	sbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:154
      fastDigitalWrite(SckPin, !MODE_CPOL(Mode));
    }
    fastDigitalWrite(MosiPin, txData & (1 << bit));
    fastDigitalWrite(SckPin,
      MODE_CPHA(Mode) ? MODE_CPOL(Mode) : !MODE_CPOL(Mode));
    if (fastDigitalRead(MisoPin)) *rxData |= 1 << bit;
     91e:	7a 99       	sbic	0x0f, 2	; 15
     920:	c0 64       	ori	r28, 0x40	; 64
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
  } else {
    *address &= ~mask;
     922:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
     924:	8d 9a       	sbi	0x11, 5	; 17
     926:	89 9a       	sbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:154
     928:	7a 99       	sbic	0x0f, 2	; 15
     92a:	c0 62       	ori	r28, 0x20	; 32
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
  } else {
    *address &= ~mask;
     92c:	89 98       	cbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:151
  inline __attribute__((always_inline))
  void transferBit(uint8_t bit, uint8_t* rxData, uint8_t txData) {
    if (MODE_CPHA(Mode)) {
      fastDigitalWrite(SckPin, !MODE_CPOL(Mode));
    }
    fastDigitalWrite(MosiPin, txData & (1 << bit));
     92e:	9c 01       	movw	r18, r24
     930:	44 e0       	ldi	r20, 0x04	; 4
     932:	35 95       	asr	r19
     934:	27 95       	ror	r18
     936:	4a 95       	dec	r20
     938:	e1 f7       	brne	.-8      	; 0x932 <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.31]+0x36>
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
     93a:	22 30       	cpi	r18, 0x02	; 2
     93c:	31 05       	cpc	r19, r1
     93e:	09 f4       	brne	.+2      	; 0x942 <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.31]+0x46>
     940:	5c c0       	rjmp	.+184    	; 0x9fa <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.31]+0xfe>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
     942:	8d 9a       	sbi	0x11, 5	; 17
     944:	89 9a       	sbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:154
    fastDigitalWrite(SckPin,
      MODE_CPHA(Mode) ? MODE_CPOL(Mode) : !MODE_CPOL(Mode));
    if (fastDigitalRead(MisoPin)) *rxData |= 1 << bit;
     946:	7a 99       	sbic	0x0f, 2	; 15
     948:	c0 61       	ori	r28, 0x10	; 16
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
  } else {
    *address &= ~mask;
     94a:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
     94c:	83 ff       	sbrs	r24, 3
     94e:	57 c0       	rjmp	.+174    	; 0x9fe <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.31]+0x102>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
     950:	8d 9a       	sbi	0x11, 5	; 17
     952:	89 9a       	sbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:154
     954:	7a 99       	sbic	0x0f, 2	; 15
     956:	c8 60       	ori	r28, 0x08	; 8
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
  } else {
    *address &= ~mask;
     958:	89 98       	cbi	0x11, 1	; 17
     95a:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
     95c:	89 9a       	sbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:154
     95e:	7a 99       	sbic	0x0f, 2	; 15
     960:	c4 60       	ori	r28, 0x04	; 4
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
  } else {
    *address &= ~mask;
     962:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
     964:	81 ff       	sbrs	r24, 1
     966:	4d c0       	rjmp	.+154    	; 0xa02 <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.31]+0x106>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
     968:	8d 9a       	sbi	0x11, 5	; 17
     96a:	89 9a       	sbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:154
     96c:	7a 99       	sbic	0x0f, 2	; 15
     96e:	c2 60       	ori	r28, 0x02	; 2
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
  } else {
    *address &= ~mask;
     970:	89 98       	cbi	0x11, 1	; 17
     972:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
     974:	89 9a       	sbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:154
     976:	7a 99       	sbic	0x0f, 2	; 15
     978:	c1 60       	ori	r28, 0x01	; 1
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
  } else {
    *address &= ~mask;
     97a:	89 98       	cbi	0x11, 1	; 17
     97c:	e4 e0       	ldi	r30, 0x04	; 4
     97e:	f1 e0       	ldi	r31, 0x01	; 1
write_register():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:176
  while ( len-- )
     980:	d1 50       	subi	r29, 0x01	; 1
     982:	08 f4       	brcc	.+2      	; 0x986 <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.31]+0x8a>
     984:	50 c0       	rjmp	.+160    	; 0xa26 <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.31]+0x12a>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:177
    _SPI.transfer(*buf++);
     986:	81 91       	ld	r24, Z+
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:151
  inline __attribute__((always_inline))
  void transferBit(uint8_t bit, uint8_t* rxData, uint8_t txData) {
    if (MODE_CPHA(Mode)) {
      fastDigitalWrite(SckPin, !MODE_CPOL(Mode));
    }
    fastDigitalWrite(MosiPin, txData & (1 << bit));
     988:	28 2f       	mov	r18, r24
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	22 0f       	add	r18, r18
     98e:	23 2f       	mov	r18, r19
     990:	22 1f       	adc	r18, r18
     992:	33 0b       	sbc	r19, r19
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
     994:	23 2b       	or	r18, r19
     996:	b9 f1       	breq	.+110    	; 0xa06 <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.31]+0x10a>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
     998:	8d 9a       	sbi	0x11, 5	; 17
     99a:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
     99c:	9f b1       	in	r25, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
     99e:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
     9a0:	86 ff       	sbrs	r24, 6
     9a2:	33 c0       	rjmp	.+102    	; 0xa0a <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.31]+0x10e>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
     9a4:	8d 9a       	sbi	0x11, 5	; 17
     9a6:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
     9a8:	9f b1       	in	r25, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
     9aa:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
     9ac:	85 ff       	sbrs	r24, 5
     9ae:	2f c0       	rjmp	.+94     	; 0xa0e <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.31]+0x112>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
     9b0:	8d 9a       	sbi	0x11, 5	; 17
     9b2:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
     9b4:	9f b1       	in	r25, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
     9b6:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
     9b8:	84 ff       	sbrs	r24, 4
     9ba:	2b c0       	rjmp	.+86     	; 0xa12 <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.31]+0x116>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
     9bc:	8d 9a       	sbi	0x11, 5	; 17
     9be:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
     9c0:	9f b1       	in	r25, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
     9c2:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
     9c4:	83 ff       	sbrs	r24, 3
     9c6:	27 c0       	rjmp	.+78     	; 0xa16 <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.31]+0x11a>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
     9c8:	8d 9a       	sbi	0x11, 5	; 17
     9ca:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
     9cc:	9f b1       	in	r25, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
     9ce:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
     9d0:	82 ff       	sbrs	r24, 2
     9d2:	23 c0       	rjmp	.+70     	; 0xa1a <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.31]+0x11e>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
     9d4:	8d 9a       	sbi	0x11, 5	; 17
     9d6:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
     9d8:	9f b1       	in	r25, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
     9da:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
     9dc:	81 ff       	sbrs	r24, 1
     9de:	1f c0       	rjmp	.+62     	; 0xa1e <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.31]+0x122>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
     9e0:	8d 9a       	sbi	0x11, 5	; 17
     9e2:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
     9e4:	9f b1       	in	r25, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
     9e6:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
     9e8:	80 ff       	sbrs	r24, 0
     9ea:	1b c0       	rjmp	.+54     	; 0xa22 <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.31]+0x126>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
     9ec:	8d 9a       	sbi	0x11, 5	; 17
     9ee:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
     9f0:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
     9f2:	89 98       	cbi	0x11, 1	; 17
     9f4:	c5 cf       	rjmp	.-118    	; 0x980 <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.31]+0x84>
write_register():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:154
    fastDigitalWrite(SckPin,
      MODE_CPHA(Mode) ? MODE_CPOL(Mode) : !MODE_CPOL(Mode));
    if (fastDigitalRead(MisoPin)) *rxData |= 1 << bit;
     9f6:	c0 e8       	ldi	r28, 0x80	; 128
     9f8:	8f cf       	rjmp	.-226    	; 0x918 <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.31]+0x1c>
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
     9fa:	8d 98       	cbi	0x11, 5	; 17
     9fc:	a3 cf       	rjmp	.-186    	; 0x944 <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.31]+0x48>
     9fe:	8d 98       	cbi	0x11, 5	; 17
     a00:	a8 cf       	rjmp	.-176    	; 0x952 <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.31]+0x56>
     a02:	8d 98       	cbi	0x11, 5	; 17
     a04:	b2 cf       	rjmp	.-156    	; 0x96a <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.31]+0x6e>
     a06:	8d 98       	cbi	0x11, 5	; 17
     a08:	c8 cf       	rjmp	.-112    	; 0x99a <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.31]+0x9e>
     a0a:	8d 98       	cbi	0x11, 5	; 17
     a0c:	cc cf       	rjmp	.-104    	; 0x9a6 <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.31]+0xaa>
     a0e:	8d 98       	cbi	0x11, 5	; 17
     a10:	d0 cf       	rjmp	.-96     	; 0x9b2 <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.31]+0xb6>
     a12:	8d 98       	cbi	0x11, 5	; 17
     a14:	d4 cf       	rjmp	.-88     	; 0x9be <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.31]+0xc2>
     a16:	8d 98       	cbi	0x11, 5	; 17
     a18:	d8 cf       	rjmp	.-80     	; 0x9ca <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.31]+0xce>
     a1a:	8d 98       	cbi	0x11, 5	; 17
     a1c:	dc cf       	rjmp	.-72     	; 0x9d6 <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.31]+0xda>
     a1e:	8d 98       	cbi	0x11, 5	; 17
     a20:	e0 cf       	rjmp	.-64     	; 0x9e2 <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.31]+0xe6>
     a22:	8d 98       	cbi	0x11, 5	; 17
     a24:	e4 cf       	rjmp	.-56     	; 0x9ee <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.31]+0xf2>
write_register():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:178
  endTransaction();
     a26:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <RF24::endTransaction() [clone .constprop.34]>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:183

  #endif

  return status;
}
     a2a:	8c 2f       	mov	r24, r28
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	08 95       	ret

00000a32 <RF24::read_register(unsigned char) [clone .constprop.28]>:
read_register():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:124
  return status;
}

/****************************************************************************/

uint8_t RF24::read_register(uint8_t reg)
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	c8 2f       	mov	r28, r24
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:143
  result = *++prx;   // result is 2nd byte of receive buffer
  
  endTransaction();
  #else

  beginTransaction();
     a38:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <RF24::beginTransaction() [clone .constprop.33]>
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:151
  inline __attribute__((always_inline))
  void transferBit(uint8_t bit, uint8_t* rxData, uint8_t txData) {
    if (MODE_CPHA(Mode)) {
      fastDigitalWrite(SckPin, !MODE_CPOL(Mode));
    }
    fastDigitalWrite(MosiPin, txData & (1 << bit));
     a3c:	d0 e0       	ldi	r29, 0x00	; 0
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
     a3e:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
     a40:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
     a42:	2f b1       	in	r18, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
     a44:	89 98       	cbi	0x11, 1	; 17
     a46:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
     a48:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
     a4a:	2f b1       	in	r18, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
     a4c:	89 98       	cbi	0x11, 1	; 17
     a4e:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
     a50:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
     a52:	2f b1       	in	r18, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
     a54:	89 98       	cbi	0x11, 1	; 17
     a56:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
     a58:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
     a5a:	2f b1       	in	r18, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
     a5c:	89 98       	cbi	0x11, 1	; 17
     a5e:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
     a60:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
     a62:	2f b1       	in	r18, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
     a64:	89 98       	cbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:151
     a66:	9e 01       	movw	r18, r28
     a68:	35 95       	asr	r19
     a6a:	27 95       	ror	r18
     a6c:	35 95       	asr	r19
     a6e:	27 95       	ror	r18
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
     a70:	23 2b       	or	r18, r19
     a72:	09 f4       	brne	.+2      	; 0xa76 <RF24::read_register(unsigned char) [clone .constprop.28]+0x44>
     a74:	3d c0       	rjmp	.+122    	; 0xaf0 <RF24::read_register(unsigned char) [clone .constprop.28]+0xbe>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
     a76:	8d 9a       	sbi	0x11, 5	; 17
     a78:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
     a7a:	9f b1       	in	r25, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
     a7c:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
     a7e:	c1 ff       	sbrs	r28, 1
     a80:	39 c0       	rjmp	.+114    	; 0xaf4 <RF24::read_register(unsigned char) [clone .constprop.28]+0xc2>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
     a82:	8d 9a       	sbi	0x11, 5	; 17
     a84:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
     a86:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
     a88:	89 98       	cbi	0x11, 1	; 17
     a8a:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
     a8c:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
     a8e:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
     a90:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
     a92:	8d 9a       	sbi	0x11, 5	; 17
     a94:	89 9a       	sbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:154
    fastDigitalWrite(SckPin,
      MODE_CPHA(Mode) ? MODE_CPOL(Mode) : !MODE_CPOL(Mode));
    if (fastDigitalRead(MisoPin)) *rxData |= 1 << bit;
     a96:	7a 9b       	sbis	0x0f, 2	; 15
     a98:	2f c0       	rjmp	.+94     	; 0xaf8 <RF24::read_register(unsigned char) [clone .constprop.28]+0xc6>
read_register():
     a9a:	c0 e8       	ldi	r28, 0x80	; 128
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
  } else {
    *address &= ~mask;
     a9c:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
     a9e:	8d 9a       	sbi	0x11, 5	; 17
     aa0:	89 9a       	sbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:154
     aa2:	7a 99       	sbic	0x0f, 2	; 15
     aa4:	c0 64       	ori	r28, 0x40	; 64
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
  } else {
    *address &= ~mask;
     aa6:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
     aa8:	8d 9a       	sbi	0x11, 5	; 17
     aaa:	89 9a       	sbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:154
     aac:	7a 99       	sbic	0x0f, 2	; 15
     aae:	c0 62       	ori	r28, 0x20	; 32
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
  } else {
    *address &= ~mask;
     ab0:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
     ab2:	8d 9a       	sbi	0x11, 5	; 17
     ab4:	89 9a       	sbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:154
     ab6:	7a 99       	sbic	0x0f, 2	; 15
     ab8:	c0 61       	ori	r28, 0x10	; 16
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
  } else {
    *address &= ~mask;
     aba:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
     abc:	8d 9a       	sbi	0x11, 5	; 17
     abe:	89 9a       	sbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:154
     ac0:	7a 99       	sbic	0x0f, 2	; 15
     ac2:	c8 60       	ori	r28, 0x08	; 8
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
  } else {
    *address &= ~mask;
     ac4:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
     ac6:	8d 9a       	sbi	0x11, 5	; 17
     ac8:	89 9a       	sbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:154
     aca:	7a 99       	sbic	0x0f, 2	; 15
     acc:	c4 60       	ori	r28, 0x04	; 4
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
  } else {
    *address &= ~mask;
     ace:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
     ad0:	8d 9a       	sbi	0x11, 5	; 17
     ad2:	89 9a       	sbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:154
     ad4:	7a 99       	sbic	0x0f, 2	; 15
     ad6:	c2 60       	ori	r28, 0x02	; 2
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
  } else {
    *address &= ~mask;
     ad8:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
     ada:	8d 9a       	sbi	0x11, 5	; 17
     adc:	89 9a       	sbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:154
     ade:	7a 99       	sbic	0x0f, 2	; 15
     ae0:	c1 60       	ori	r28, 0x01	; 1
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
  } else {
    *address &= ~mask;
     ae2:	89 98       	cbi	0x11, 1	; 17
read_register():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:146
  _SPI.transfer( R_REGISTER | ( REGISTER_MASK & reg ) );
  result = _SPI.transfer(0xff);
  endTransaction();
     ae4:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <RF24::endTransaction() [clone .constprop.34]>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:151

  #endif

  return result;
}
     ae8:	8c 2f       	mov	r24, r28
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	08 95       	ret
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
     af0:	8d 98       	cbi	0x11, 5	; 17
     af2:	c2 cf       	rjmp	.-124    	; 0xa78 <RF24::read_register(unsigned char) [clone .constprop.28]+0x46>
     af4:	8d 98       	cbi	0x11, 5	; 17
     af6:	c6 cf       	rjmp	.-116    	; 0xa84 <RF24::read_register(unsigned char) [clone .constprop.28]+0x52>
read_register():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:98
   * @param[in] txData Data byte to send.
   * @return Data byte received.
   */
  inline __attribute__((always_inline))
  uint8_t transfer(uint8_t txData) {
    uint8_t rxData = 0;
     af8:	c0 e0       	ldi	r28, 0x00	; 0
     afa:	d0 cf       	rjmp	.-96     	; 0xa9c <RF24::read_register(unsigned char) [clone .constprop.28]+0x6a>

00000afc <RF24::setDataRate(rf24_datarate_e) [clone .constprop.27]>:
setDataRate():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1404
  return (read_register(RF_SETUP) & (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH))) >> 1 ;
}

/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	cf 93       	push	r28
     b02:	8c 01       	movw	r16, r24
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1407
{
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;
     b04:	86 e0       	ldi	r24, 0x06	; 6
     b06:	0e 94 19 05 	call	0xa32	; 0xa32 <RF24::read_register(unsigned char) [clone .constprop.28]>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1410

  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
     b0a:	c8 2f       	mov	r28, r24
     b0c:	c7 7d       	andi	r28, 0xD7	; 215
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1415
  
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txRxDelay=250;
  #else //16Mhz Arduino
    txRxDelay=85;
     b0e:	85 e5       	ldi	r24, 0x55	; 85
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	a0 e0       	ldi	r26, 0x00	; 0
     b14:	b0 e0       	ldi	r27, 0x00	; 0
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1417
  #endif
  if( speed == RF24_250KBPS )
     b16:	02 30       	cpi	r16, 0x02	; 2
     b18:	11 05       	cpc	r17, r1
     b1a:	29 f4       	brne	.+10     	; 0xb26 <RF24::setDataRate(rf24_datarate_e) [clone .constprop.27]+0x2a>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1421
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    setup |= _BV( RF_DR_LOW ) ;
     b1c:	c0 62       	ori	r28, 0x20	; 32
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1425
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txRxDelay=450;
  #else //16Mhz Arduino
	txRxDelay=155;
     b1e:	8b e9       	ldi	r24, 0x9B	; 155
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	b0 e0       	ldi	r27, 0x00	; 0
     b26:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <radio+0xe>
     b2a:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <radio+0xf>
     b2e:	a0 93 2d 02 	sts	0x022D, r26	; 0x80022d <radio+0x10>
     b32:	b0 93 2e 02 	sts	0x022E, r27	; 0x80022e <radio+0x11>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1442
      #else //16Mhz Arduino	  
	  txRxDelay=65;
	  #endif
    }
  }
  write_register(RF_SETUP,setup);
     b36:	6c 2f       	mov	r22, r28
     b38:	86 e0       	ldi	r24, 0x06	; 6
     b3a:	0e 94 de 03 	call	0x7bc	; 0x7bc <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1445

  // Verify our result
  if ( read_register(RF_SETUP) == setup )
     b3e:	86 e0       	ldi	r24, 0x06	; 6
     b40:	0e 94 19 05 	call	0xa32	; 0xa32 <RF24::read_register(unsigned char) [clone .constprop.28]>
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	c8 13       	cpse	r28, r24
     b48:	90 e0       	ldi	r25, 0x00	; 0
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1450
  {
    result = true;
  }
  return result;
}
     b4a:	89 2f       	mov	r24, r25
     b4c:	cf 91       	pop	r28
     b4e:	1f 91       	pop	r17
     b50:	0f 91       	pop	r16
     b52:	08 95       	ret

00000b54 <RF24::spiTrans(unsigned char) [clone .constprop.25]>:
spiTrans():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:333
  return spiTrans( FLUSH_TX );
}

/****************************************************************************/

uint8_t RF24::spiTrans(uint8_t cmd){
     b54:	cf 93       	push	r28
     b56:	df 93       	push	r29
     b58:	d8 2f       	mov	r29, r24
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:337

  uint8_t status;
  
  beginTransaction();
     b5a:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <RF24::beginTransaction() [clone .constprop.33]>
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:151
  inline __attribute__((always_inline))
  void transferBit(uint8_t bit, uint8_t* rxData, uint8_t txData) {
    if (MODE_CPHA(Mode)) {
      fastDigitalWrite(SckPin, !MODE_CPOL(Mode));
    }
    fastDigitalWrite(MosiPin, txData & (1 << bit));
     b5e:	8d 2f       	mov	r24, r29
     b60:	90 e0       	ldi	r25, 0x00	; 0
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
     b62:	8d 9a       	sbi	0x11, 5	; 17
     b64:	89 9a       	sbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:154
    fastDigitalWrite(SckPin,
      MODE_CPHA(Mode) ? MODE_CPOL(Mode) : !MODE_CPOL(Mode));
    if (fastDigitalRead(MisoPin)) *rxData |= 1 << bit;
     b66:	7a 9b       	sbis	0x0f, 2	; 15
     b68:	3c c0       	rjmp	.+120    	; 0xbe2 <RF24::spiTrans(unsigned char) [clone .constprop.25]+0x8e>
spiTrans():
     b6a:	c0 e8       	ldi	r28, 0x80	; 128
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
  } else {
    *address &= ~mask;
     b6c:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
     b6e:	8d 9a       	sbi	0x11, 5	; 17
     b70:	89 9a       	sbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:154
     b72:	7a 99       	sbic	0x0f, 2	; 15
     b74:	c0 64       	ori	r28, 0x40	; 64
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
  } else {
    *address &= ~mask;
     b76:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
     b78:	8d 9a       	sbi	0x11, 5	; 17
     b7a:	89 9a       	sbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:154
     b7c:	7a 99       	sbic	0x0f, 2	; 15
     b7e:	c0 62       	ori	r28, 0x20	; 32
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
  } else {
    *address &= ~mask;
     b80:	89 98       	cbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:151
  inline __attribute__((always_inline))
  void transferBit(uint8_t bit, uint8_t* rxData, uint8_t txData) {
    if (MODE_CPHA(Mode)) {
      fastDigitalWrite(SckPin, !MODE_CPOL(Mode));
    }
    fastDigitalWrite(MosiPin, txData & (1 << bit));
     b82:	9c 01       	movw	r18, r24
     b84:	94 e0       	ldi	r25, 0x04	; 4
     b86:	35 95       	asr	r19
     b88:	27 95       	ror	r18
     b8a:	9a 95       	dec	r25
     b8c:	e1 f7       	brne	.-8      	; 0xb86 <RF24::spiTrans(unsigned char) [clone .constprop.25]+0x32>
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
     b8e:	2e 30       	cpi	r18, 0x0E	; 14
     b90:	31 05       	cpc	r19, r1
     b92:	49 f1       	breq	.+82     	; 0xbe6 <RF24::spiTrans(unsigned char) [clone .constprop.25]+0x92>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
     b94:	8d 9a       	sbi	0x11, 5	; 17
     b96:	89 9a       	sbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:154
    fastDigitalWrite(SckPin,
      MODE_CPHA(Mode) ? MODE_CPOL(Mode) : !MODE_CPOL(Mode));
    if (fastDigitalRead(MisoPin)) *rxData |= 1 << bit;
     b98:	7a 99       	sbic	0x0f, 2	; 15
     b9a:	c0 61       	ori	r28, 0x10	; 16
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
  } else {
    *address &= ~mask;
     b9c:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
     b9e:	83 ff       	sbrs	r24, 3
     ba0:	24 c0       	rjmp	.+72     	; 0xbea <RF24::spiTrans(unsigned char) [clone .constprop.25]+0x96>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
     ba2:	8d 9a       	sbi	0x11, 5	; 17
     ba4:	89 9a       	sbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:154
     ba6:	7a 99       	sbic	0x0f, 2	; 15
     ba8:	c8 60       	ori	r28, 0x08	; 8
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
  } else {
    *address &= ~mask;
     baa:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
     bac:	82 ff       	sbrs	r24, 2
     bae:	1f c0       	rjmp	.+62     	; 0xbee <RF24::spiTrans(unsigned char) [clone .constprop.25]+0x9a>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
     bb0:	8d 9a       	sbi	0x11, 5	; 17
     bb2:	89 9a       	sbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:154
     bb4:	7a 99       	sbic	0x0f, 2	; 15
     bb6:	c4 60       	ori	r28, 0x04	; 4
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
  } else {
    *address &= ~mask;
     bb8:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
     bba:	81 ff       	sbrs	r24, 1
     bbc:	1a c0       	rjmp	.+52     	; 0xbf2 <RF24::spiTrans(unsigned char) [clone .constprop.25]+0x9e>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
     bbe:	8d 9a       	sbi	0x11, 5	; 17
     bc0:	89 9a       	sbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:154
     bc2:	7a 99       	sbic	0x0f, 2	; 15
     bc4:	c2 60       	ori	r28, 0x02	; 2
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
  } else {
    *address &= ~mask;
     bc6:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
     bc8:	d0 ff       	sbrs	r29, 0
     bca:	15 c0       	rjmp	.+42     	; 0xbf6 <RF24::spiTrans(unsigned char) [clone .constprop.25]+0xa2>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
     bcc:	8d 9a       	sbi	0x11, 5	; 17
     bce:	89 9a       	sbi	0x11, 1	; 17
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:154
     bd0:	7a 99       	sbic	0x0f, 2	; 15
     bd2:	c1 60       	ori	r28, 0x01	; 1
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
  } else {
    *address &= ~mask;
     bd4:	89 98       	cbi	0x11, 1	; 17
spiTrans():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:339
  status = _SPI.transfer( cmd );
  endTransaction();
     bd6:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <RF24::endTransaction() [clone .constprop.34]>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:342
  
  return status;
}
     bda:	8c 2f       	mov	r24, r28
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	08 95       	ret
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:98
   * @param[in] txData Data byte to send.
   * @return Data byte received.
   */
  inline __attribute__((always_inline))
  uint8_t transfer(uint8_t txData) {
    uint8_t rxData = 0;
     be2:	c0 e0       	ldi	r28, 0x00	; 0
     be4:	c3 cf       	rjmp	.-122    	; 0xb6c <RF24::spiTrans(unsigned char) [clone .constprop.25]+0x18>
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
     be6:	8d 98       	cbi	0x11, 5	; 17
     be8:	d6 cf       	rjmp	.-84     	; 0xb96 <RF24::spiTrans(unsigned char) [clone .constprop.25]+0x42>
     bea:	8d 98       	cbi	0x11, 5	; 17
     bec:	db cf       	rjmp	.-74     	; 0xba4 <RF24::spiTrans(unsigned char) [clone .constprop.25]+0x50>
     bee:	8d 98       	cbi	0x11, 5	; 17
     bf0:	e0 cf       	rjmp	.-64     	; 0xbb2 <RF24::spiTrans(unsigned char) [clone .constprop.25]+0x5e>
     bf2:	8d 98       	cbi	0x11, 5	; 17
     bf4:	e5 cf       	rjmp	.-54     	; 0xbc0 <RF24::spiTrans(unsigned char) [clone .constprop.25]+0x6c>
     bf6:	8d 98       	cbi	0x11, 5	; 17
     bf8:	ea cf       	rjmp	.-44     	; 0xbce <RF24::spiTrans(unsigned char) [clone .constprop.25]+0x7a>

00000bfa <Print::printFloat(double, unsigned char) [clone .constprop.5]>:
printFloat():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:249
  } while(n);

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
     bfa:	4f 92       	push	r4
     bfc:	5f 92       	push	r5
     bfe:	6f 92       	push	r6
     c00:	7f 92       	push	r7
     c02:	8f 92       	push	r8
     c04:	9f 92       	push	r9
     c06:	af 92       	push	r10
     c08:	bf 92       	push	r11
     c0a:	cf 92       	push	r12
     c0c:	df 92       	push	r13
     c0e:	ef 92       	push	r14
     c10:	ff 92       	push	r15
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	cf 93       	push	r28
     c18:	6b 01       	movw	r12, r22
     c1a:	7c 01       	movw	r14, r24
     c1c:	74 2e       	mov	r7, r20
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:253
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
     c1e:	ac 01       	movw	r20, r24
     c20:	9b 01       	movw	r18, r22
     c22:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__unordsf2>
     c26:	88 23       	and	r24, r24
     c28:	99 f0       	breq	.+38     	; 0xc50 <Print::printFloat(double, unsigned char) [clone .constprop.5]+0x56>
write():
     c2a:	8b e1       	ldi	r24, 0x1B	; 27
     c2c:	91 e0       	ldi	r25, 0x01	; 1
printFloat():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:292
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
     c2e:	cf 91       	pop	r28
     c30:	1f 91       	pop	r17
     c32:	0f 91       	pop	r16
     c34:	ff 90       	pop	r15
     c36:	ef 90       	pop	r14
     c38:	df 90       	pop	r13
     c3a:	cf 90       	pop	r12
     c3c:	bf 90       	pop	r11
     c3e:	af 90       	pop	r10
     c40:	9f 90       	pop	r9
     c42:	8f 90       	pop	r8
     c44:	7f 90       	pop	r7
     c46:	6f 90       	pop	r6
     c48:	5f 90       	pop	r5
     c4a:	4f 90       	pop	r4
write():
     c4c:	0c 94 6a 03 	jmp	0x6d4	; 0x6d4 <Print::write(char const*) [clone .part.2] [clone .constprop.61]>
printFloat():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:254
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
     c50:	46 01       	movw	r8, r12
     c52:	57 01       	movw	r10, r14
     c54:	e8 94       	clt
     c56:	b7 f8       	bld	r11, 7
     c58:	2f ef       	ldi	r18, 0xFF	; 255
     c5a:	3f ef       	ldi	r19, 0xFF	; 255
     c5c:	4f e7       	ldi	r20, 0x7F	; 127
     c5e:	5f e7       	ldi	r21, 0x7F	; 127
     c60:	c5 01       	movw	r24, r10
     c62:	b4 01       	movw	r22, r8
     c64:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__unordsf2>
     c68:	81 11       	cpse	r24, r1
     c6a:	0d c0       	rjmp	.+26     	; 0xc86 <Print::printFloat(double, unsigned char) [clone .constprop.5]+0x8c>
     c6c:	2f ef       	ldi	r18, 0xFF	; 255
     c6e:	3f ef       	ldi	r19, 0xFF	; 255
     c70:	4f e7       	ldi	r20, 0x7F	; 127
     c72:	5f e7       	ldi	r21, 0x7F	; 127
     c74:	c5 01       	movw	r24, r10
     c76:	b4 01       	movw	r22, r8
     c78:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <__cmpsf2>
     c7c:	18 16       	cp	r1, r24
     c7e:	1c f4       	brge	.+6      	; 0xc86 <Print::printFloat(double, unsigned char) [clone .constprop.5]+0x8c>
write():
     c80:	8f e1       	ldi	r24, 0x1F	; 31
     c82:	91 e0       	ldi	r25, 0x01	; 1
     c84:	d4 cf       	rjmp	.-88     	; 0xc2e <Print::printFloat(double, unsigned char) [clone .constprop.5]+0x34>
printFloat():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:255
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     c86:	2f ef       	ldi	r18, 0xFF	; 255
     c88:	3f ef       	ldi	r19, 0xFF	; 255
     c8a:	4f e7       	ldi	r20, 0x7F	; 127
     c8c:	5f e4       	ldi	r21, 0x4F	; 79
     c8e:	c7 01       	movw	r24, r14
     c90:	b6 01       	movw	r22, r12
     c92:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <__gesf2>
     c96:	18 16       	cp	r1, r24
     c98:	1c f4       	brge	.+6      	; 0xca0 <Print::printFloat(double, unsigned char) [clone .constprop.5]+0xa6>
write():
     c9a:	83 e2       	ldi	r24, 0x23	; 35
     c9c:	91 e0       	ldi	r25, 0x01	; 1
     c9e:	c7 cf       	rjmp	.-114    	; 0xc2e <Print::printFloat(double, unsigned char) [clone .constprop.5]+0x34>
printFloat():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:256
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
     ca0:	2f ef       	ldi	r18, 0xFF	; 255
     ca2:	3f ef       	ldi	r19, 0xFF	; 255
     ca4:	4f e7       	ldi	r20, 0x7F	; 127
     ca6:	5f ec       	ldi	r21, 0xCF	; 207
     ca8:	c7 01       	movw	r24, r14
     caa:	b6 01       	movw	r22, r12
     cac:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <__cmpsf2>
     cb0:	87 fd       	sbrc	r24, 7
     cb2:	f3 cf       	rjmp	.-26     	; 0xc9a <Print::printFloat(double, unsigned char) [clone .constprop.5]+0xa0>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:259

  // Handle negative numbers
  if (number < 0.0)
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	a9 01       	movw	r20, r18
     cba:	c7 01       	movw	r24, r14
     cbc:	b6 01       	movw	r22, r12
     cbe:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <__cmpsf2>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:251
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
     cc2:	10 e0       	ldi	r17, 0x00	; 0
     cc4:	00 e0       	ldi	r16, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:259
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
     cc6:	87 ff       	sbrs	r24, 7
     cc8:	08 c0       	rjmp	.+16     	; 0xcda <Print::printFloat(double, unsigned char) [clone .constprop.5]+0xe0>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:261
  {
     n += print('-');
     cca:	8d e2       	ldi	r24, 0x2D	; 45
     ccc:	0e 94 8b 01 	call	0x316	; 0x316 <Print::print(char) [clone .constprop.63]>
     cd0:	8c 01       	movw	r16, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:262
     number = -number;
     cd2:	f7 fa       	bst	r15, 7
     cd4:	f0 94       	com	r15
     cd6:	f7 f8       	bld	r15, 7
     cd8:	f0 94       	com	r15
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:267
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     cda:	c0 e0       	ldi	r28, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:266
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
     cdc:	60 e0       	ldi	r22, 0x00	; 0
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	80 e0       	ldi	r24, 0x00	; 0
     ce2:	9f e3       	ldi	r25, 0x3F	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:267
  for (uint8_t i=0; i<digits; ++i)
     ce4:	7c 16       	cp	r7, r28
     ce6:	41 f0       	breq	.+16     	; 0xcf8 <Print::printFloat(double, unsigned char) [clone .constprop.5]+0xfe>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:268
    rounding /= 10.0;
     ce8:	20 e0       	ldi	r18, 0x00	; 0
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	40 e2       	ldi	r20, 0x20	; 32
     cee:	51 e4       	ldi	r21, 0x41	; 65
     cf0:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <__divsf3>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:267
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     cf4:	cf 5f       	subi	r28, 0xFF	; 255
     cf6:	f6 cf       	rjmp	.-20     	; 0xce4 <Print::printFloat(double, unsigned char) [clone .constprop.5]+0xea>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:270
    rounding /= 10.0;

  number += rounding;
     cf8:	a7 01       	movw	r20, r14
     cfa:	96 01       	movw	r18, r12
     cfc:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__addsf3>
     d00:	2b 01       	movw	r4, r22
     d02:	3c 01       	movw	r6, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:273

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
     d04:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <__fixunssfsi>
     d08:	4b 01       	movw	r8, r22
     d0a:	5c 01       	movw	r10, r24
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:103
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     d0c:	4a e0       	ldi	r20, 0x0A	; 10
     d0e:	0e 94 77 03 	call	0x6ee	; 0x6ee <Print::printNumber(unsigned long, unsigned char) [clone .constprop.59]>
printFloat():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:275
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
     d12:	7c 01       	movw	r14, r24
     d14:	e0 0e       	add	r14, r16
     d16:	f1 1e       	adc	r15, r17
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:278

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
     d18:	cc 23       	and	r28, r28
     d1a:	09 f4       	brne	.+2      	; 0xd1e <Print::printFloat(double, unsigned char) [clone .constprop.5]+0x124>
     d1c:	4b c0       	rjmp	.+150    	; 0xdb4 <Print::printFloat(double, unsigned char) [clone .constprop.5]+0x1ba>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:274

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
     d1e:	c5 01       	movw	r24, r10
     d20:	b4 01       	movw	r22, r8
     d22:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__floatunsisf>
     d26:	9b 01       	movw	r18, r22
     d28:	ac 01       	movw	r20, r24
     d2a:	c3 01       	movw	r24, r6
     d2c:	b2 01       	movw	r22, r4
     d2e:	0e 94 ed 0c 	call	0x19da	; 0x19da <__subsf3>
     d32:	4b 01       	movw	r8, r22
     d34:	5c 01       	movw	r10, r24
write():
     d36:	87 e2       	ldi	r24, 0x27	; 39
     d38:	91 e0       	ldi	r25, 0x01	; 1
     d3a:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <Print::write(char const*) [clone .part.2] [clone .constprop.61]>
printFloat():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:279
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
     d3e:	e8 0e       	add	r14, r24
     d40:	f9 1e       	adc	r15, r25
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:283
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
     d42:	c1 50       	subi	r28, 0x01	; 1
     d44:	b8 f1       	brcs	.+110    	; 0xdb4 <Print::printFloat(double, unsigned char) [clone .constprop.5]+0x1ba>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:285
  {
    remainder *= 10.0;
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	40 e2       	ldi	r20, 0x20	; 32
     d4c:	51 e4       	ldi	r21, 0x41	; 65
     d4e:	c5 01       	movw	r24, r10
     d50:	b4 01       	movw	r22, r8
     d52:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__mulsf3>
     d56:	2b 01       	movw	r4, r22
     d58:	3c 01       	movw	r6, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:286
    int toPrint = int(remainder);
     d5a:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <__fixsfsi>
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:76
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
     d5e:	4b 01       	movw	r8, r22
     d60:	77 0f       	add	r23, r23
     d62:	aa 08       	sbc	r10, r10
     d64:	bb 08       	sbc	r11, r11
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:89
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
     d66:	b7 fe       	sbrs	r11, 7
     d68:	1f c0       	rjmp	.+62     	; 0xda8 <Print::printFloat(double, unsigned char) [clone .constprop.5]+0x1ae>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:90
      int t = print('-');
     d6a:	8d e2       	ldi	r24, 0x2D	; 45
     d6c:	0e 94 8b 01 	call	0x316	; 0x316 <Print::print(char) [clone .constprop.63]>
     d70:	6c 01       	movw	r12, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:91
      n = -n;
     d72:	66 27       	eor	r22, r22
     d74:	77 27       	eor	r23, r23
     d76:	cb 01       	movw	r24, r22
     d78:	68 19       	sub	r22, r8
     d7a:	79 09       	sbc	r23, r9
     d7c:	8a 09       	sbc	r24, r10
     d7e:	9b 09       	sbc	r25, r11
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:92
      return printNumber(n, 10) + t;
     d80:	4a e0       	ldi	r20, 0x0A	; 10
     d82:	0e 94 77 03 	call	0x6ee	; 0x6ee <Print::printNumber(unsigned long, unsigned char) [clone .constprop.59]>
     d86:	8c 0d       	add	r24, r12
     d88:	9d 1d       	adc	r25, r13
printFloat():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:287
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
     d8a:	e8 0e       	add	r14, r24
     d8c:	f9 1e       	adc	r15, r25
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:288
    remainder -= toPrint;
     d8e:	c5 01       	movw	r24, r10
     d90:	b4 01       	movw	r22, r8
     d92:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <__floatsisf>
     d96:	9b 01       	movw	r18, r22
     d98:	ac 01       	movw	r20, r24
     d9a:	c3 01       	movw	r24, r6
     d9c:	b2 01       	movw	r22, r4
     d9e:	0e 94 ed 0c 	call	0x19da	; 0x19da <__subsf3>
     da2:	4b 01       	movw	r8, r22
     da4:	5c 01       	movw	r10, r24
     da6:	cd cf       	rjmp	.-102    	; 0xd42 <Print::printFloat(double, unsigned char) [clone .constprop.5]+0x148>
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:94
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     da8:	4a e0       	ldi	r20, 0x0A	; 10
     daa:	c5 01       	movw	r24, r10
     dac:	b4 01       	movw	r22, r8
     dae:	0e 94 77 03 	call	0x6ee	; 0x6ee <Print::printNumber(unsigned long, unsigned char) [clone .constprop.59]>
     db2:	eb cf       	rjmp	.-42     	; 0xd8a <Print::printFloat(double, unsigned char) [clone .constprop.5]+0x190>
printFloat():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:292
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
     db4:	c7 01       	movw	r24, r14
     db6:	cf 91       	pop	r28
     db8:	1f 91       	pop	r17
     dba:	0f 91       	pop	r16
     dbc:	ff 90       	pop	r15
     dbe:	ef 90       	pop	r14
     dc0:	df 90       	pop	r13
     dc2:	cf 90       	pop	r12
     dc4:	bf 90       	pop	r11
     dc6:	af 90       	pop	r10
     dc8:	9f 90       	pop	r9
     dca:	8f 90       	pop	r8
     dcc:	7f 90       	pop	r7
     dce:	6f 90       	pop	r6
     dd0:	5f 90       	pop	r5
     dd2:	4f 90       	pop	r4
     dd4:	08 95       	ret

00000dd6 <Print::println(double, int) [clone .constprop.3]>:
println():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:186
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:108
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
     dda:	42 e0       	ldi	r20, 0x02	; 2
     ddc:	0e 94 fd 05 	call	0xbfa	; 0xbfa <Print::printFloat(double, unsigned char) [clone .constprop.5]>
     de0:	ec 01       	movw	r28, r24
println():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:189
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
     de2:	0e 94 90 01 	call	0x320	; 0x320 <Print::println() [clone .constprop.62]>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:191
  return n;
}
     de6:	8c 0f       	add	r24, r28
     de8:	9d 1f       	adc	r25, r29
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	08 95       	ret

00000df0 <__vector_17>:
__vector_17():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial0.cpp:63
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     df0:	1f 92       	push	r1
     df2:	0f 92       	push	r0
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	0f 92       	push	r0
     df8:	11 24       	eor	r1, r1
     dfa:	2f 93       	push	r18
     dfc:	3f 93       	push	r19
     dfe:	4f 93       	push	r20
     e00:	5f 93       	push	r21
     e02:	6f 93       	push	r22
     e04:	7f 93       	push	r23
     e06:	8f 93       	push	r24
     e08:	9f 93       	push	r25
     e0a:	af 93       	push	r26
     e0c:	bf 93       	push	r27
     e0e:	ef 93       	push	r30
     e10:	ff 93       	push	r31
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
     e12:	86 eb       	ldi	r24, 0xB6	; 182
     e14:	91 e0       	ldi	r25, 0x01	; 1
     e16:	0e 94 1f 01 	call	0x23e	; 0x23e <HardwareSerial::_tx_udr_empty_irq()>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial0.cpp:65
}
     e1a:	ff 91       	pop	r31
     e1c:	ef 91       	pop	r30
     e1e:	bf 91       	pop	r27
     e20:	af 91       	pop	r26
     e22:	9f 91       	pop	r25
     e24:	8f 91       	pop	r24
     e26:	7f 91       	pop	r23
     e28:	6f 91       	pop	r22
     e2a:	5f 91       	pop	r21
     e2c:	4f 91       	pop	r20
     e2e:	3f 91       	pop	r19
     e30:	2f 91       	pop	r18
     e32:	0f 90       	pop	r0
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	0f 90       	pop	r0
     e38:	1f 90       	pop	r1
     e3a:	18 95       	reti

00000e3c <__vector_16>:
__vector_16():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial0.cpp:48
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     e3c:	1f 92       	push	r1
     e3e:	0f 92       	push	r0
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	0f 92       	push	r0
     e44:	11 24       	eor	r1, r1
     e46:	2f 93       	push	r18
     e48:	8f 93       	push	r24
     e4a:	9f 93       	push	r25
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
_rx_complete_irq():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     e50:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <Serial+0x10>
     e54:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <Serial+0x11>
     e58:	80 81       	ld	r24, Z
     e5a:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <Serial+0x16>
     e5e:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <Serial+0x17>
     e62:	82 fd       	sbrc	r24, 2
     e64:	1b c0       	rjmp	.+54     	; 0xe9c <__vector_16+0x60>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     e66:	90 81       	ld	r25, Z
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     e68:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <Serial+0x19>
     e6c:	8f 5f       	subi	r24, 0xFF	; 255
     e6e:	8f 71       	andi	r24, 0x1F	; 31
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     e70:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <Serial+0x1a>
     e74:	82 17       	cp	r24, r18
     e76:	41 f0       	breq	.+16     	; 0xe88 <__vector_16+0x4c>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
     e78:	e0 91 cf 01 	lds	r30, 0x01CF	; 0x8001cf <Serial+0x19>
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	ea 54       	subi	r30, 0x4A	; 74
     e80:	fe 4f       	sbci	r31, 0xFE	; 254
     e82:	95 8f       	std	Z+29, r25	; 0x1d
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial_private.h:115
      _rx_buffer_head = i;
     e84:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <Serial+0x19>
__vector_16():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial0.cpp:50
    Serial._rx_complete_irq();
  }
     e88:	ff 91       	pop	r31
     e8a:	ef 91       	pop	r30
     e8c:	9f 91       	pop	r25
     e8e:	8f 91       	pop	r24
     e90:	2f 91       	pop	r18
     e92:	0f 90       	pop	r0
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	0f 90       	pop	r0
     e98:	1f 90       	pop	r1
     e9a:	18 95       	reti
_rx_complete_irq():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     e9c:	80 81       	ld	r24, Z
     e9e:	f4 cf       	rjmp	.-24     	; 0xe88 <__vector_16+0x4c>

00000ea0 <__vector_12>:
__vector_12():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:86
volatile unsigned long millis_timer_overflow_count = 0;
volatile unsigned long millis_timer_millis = 0;
static unsigned char millis_timer_fract = 0;

ISR(MILLISTIMER_OVF_vect)
{
     ea0:	1f 92       	push	r1
     ea2:	0f 92       	push	r0
     ea4:	0f b6       	in	r0, 0x3f	; 63
     ea6:	0f 92       	push	r0
     ea8:	11 24       	eor	r1, r1
     eaa:	2f 93       	push	r18
     eac:	3f 93       	push	r19
     eae:	8f 93       	push	r24
     eb0:	9f 93       	push	r25
     eb2:	af 93       	push	r26
     eb4:	bf 93       	push	r27
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:89
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access)
  unsigned long m = millis_timer_millis;
     eb6:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <millis_timer_millis>
     eba:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <millis_timer_millis+0x1>
     ebe:	a0 91 a4 01 	lds	r26, 0x01A4	; 0x8001a4 <millis_timer_millis+0x2>
     ec2:	b0 91 a5 01 	lds	r27, 0x01A5	; 0x8001a5 <millis_timer_millis+0x3>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:90
  unsigned char f = millis_timer_fract;
     ec6:	30 91 a1 01 	lds	r19, 0x01A1	; 0x8001a1 <millis_timer_fract>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:102
    f -= FRACT_MAX;
    m += 1;
  }
...rmv */

  f += FRACT_INC;
     eca:	26 e0       	ldi	r18, 0x06	; 6
     ecc:	23 0f       	add	r18, r19
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:104

  if (f >= FRACT_MAX)
     ece:	2d 37       	cpi	r18, 0x7D	; 125
     ed0:	68 f1       	brcs	.+90     	; 0xf2c <__vector_12+0x8c>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:106
  {
    f -= FRACT_MAX;
     ed2:	29 e8       	ldi	r18, 0x89	; 137
     ed4:	23 0f       	add	r18, r19
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:107
    m = m + MILLIS_INC + 1;
     ed6:	03 96       	adiw	r24, 0x03	; 3
     ed8:	a1 1d       	adc	r26, r1
     eda:	b1 1d       	adc	r27, r1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:114
  else
  {
    m += MILLIS_INC;
  }

  millis_timer_fract = f;
     edc:	20 93 a1 01 	sts	0x01A1, r18	; 0x8001a1 <millis_timer_fract>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:115
  millis_timer_millis = m;
     ee0:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <millis_timer_millis>
     ee4:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <millis_timer_millis+0x1>
     ee8:	a0 93 a4 01 	sts	0x01A4, r26	; 0x8001a4 <millis_timer_millis+0x2>
     eec:	b0 93 a5 01 	sts	0x01A5, r27	; 0x8001a5 <millis_timer_millis+0x3>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:116
  millis_timer_overflow_count++;
     ef0:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <millis_timer_overflow_count>
     ef4:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <millis_timer_overflow_count+0x1>
     ef8:	a0 91 a8 01 	lds	r26, 0x01A8	; 0x8001a8 <millis_timer_overflow_count+0x2>
     efc:	b0 91 a9 01 	lds	r27, 0x01A9	; 0x8001a9 <millis_timer_overflow_count+0x3>
     f00:	01 96       	adiw	r24, 0x01	; 1
     f02:	a1 1d       	adc	r26, r1
     f04:	b1 1d       	adc	r27, r1
     f06:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <millis_timer_overflow_count>
     f0a:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <millis_timer_overflow_count+0x1>
     f0e:	a0 93 a8 01 	sts	0x01A8, r26	; 0x8001a8 <millis_timer_overflow_count+0x2>
     f12:	b0 93 a9 01 	sts	0x01A9, r27	; 0x8001a9 <millis_timer_overflow_count+0x3>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:117
}
     f16:	bf 91       	pop	r27
     f18:	af 91       	pop	r26
     f1a:	9f 91       	pop	r25
     f1c:	8f 91       	pop	r24
     f1e:	3f 91       	pop	r19
     f20:	2f 91       	pop	r18
     f22:	0f 90       	pop	r0
     f24:	0f be       	out	0x3f, r0	; 63
     f26:	0f 90       	pop	r0
     f28:	1f 90       	pop	r1
     f2a:	18 95       	reti
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:111
    f -= FRACT_MAX;
    m = m + MILLIS_INC + 1;
  }
  else
  {
    m += MILLIS_INC;
     f2c:	02 96       	adiw	r24, 0x02	; 2
     f2e:	a1 1d       	adc	r26, r1
     f30:	b1 1d       	adc	r27, r1
     f32:	d4 cf       	rjmp	.-88     	; 0xedc <__vector_12+0x3c>

00000f34 <__vector_24>:
__vector_24():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:207
/*----------------------------------------------------------
 Handles all the communication. Is disabled only when waiting
 for new Start Condition.
----------------------------------------------------------*/
ISR(USI_OVERFLOW_VECTOR)
{
     f34:	1f 92       	push	r1
     f36:	0f 92       	push	r0
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	0f 92       	push	r0
     f3c:	11 24       	eor	r1, r1
     f3e:	2f 93       	push	r18
     f40:	8f 93       	push	r24
     f42:	9f 93       	push	r25
     f44:	ef 93       	push	r30
     f46:	ff 93       	push	r31
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:212
  unsigned char tmpRxHead;
  unsigned char tmpTxTail; // Temporary variables to store volatiles
  unsigned char tmpUSIDR;

  switch (USI_TWI_Overflow_State) {
     f48:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <USI_TWI_Overflow_State>
     f4c:	82 30       	cpi	r24, 0x02	; 2
     f4e:	09 f4       	brne	.+2      	; 0xf52 <__vector_24+0x1e>
     f50:	5f c0       	rjmp	.+190    	; 0x1010 <__vector_24+0xdc>
     f52:	78 f4       	brcc	.+30     	; 0xf72 <__vector_24+0x3e>
     f54:	88 23       	and	r24, r24
     f56:	49 f1       	breq	.+82     	; 0xfaa <__vector_24+0x76>
     f58:	81 30       	cpi	r24, 0x01	; 1
     f5a:	09 f4       	brne	.+2      	; 0xf5e <__vector_24+0x2a>
     f5c:	3f c0       	rjmp	.+126    	; 0xfdc <__vector_24+0xa8>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:306
    {
      SET_USI_TO_SEND_NACK();
    }
    break;
  }
}
     f5e:	ff 91       	pop	r31
     f60:	ef 91       	pop	r30
     f62:	9f 91       	pop	r25
     f64:	8f 91       	pop	r24
     f66:	2f 91       	pop	r18
     f68:	0f 90       	pop	r0
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	0f 90       	pop	r0
     f6e:	1f 90       	pop	r1
     f70:	18 95       	reti
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:212
{
  unsigned char tmpRxHead;
  unsigned char tmpTxTail; // Temporary variables to store volatiles
  unsigned char tmpUSIDR;

  switch (USI_TWI_Overflow_State) {
     f72:	84 30       	cpi	r24, 0x04	; 4
     f74:	09 f4       	brne	.+2      	; 0xf78 <__vector_24+0x44>
     f76:	52 c0       	rjmp	.+164    	; 0x101c <__vector_24+0xe8>
     f78:	50 f1       	brcs	.+84     	; 0xfce <__vector_24+0x9a>
     f7a:	85 30       	cpi	r24, 0x05	; 5
     f7c:	81 f7       	brne	.-32     	; 0xf5e <__vector_24+0x2a>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:293
    break;

  // Copy data from USIDR and send ACK. Next USI_SLAVE_REQUEST_DATA
  case USI_SLAVE_GET_DATA_AND_SEND_ACK:
    // Put data into Buffer
    USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
     f7e:	84 e0       	ldi	r24, 0x04	; 4
     f80:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <USI_TWI_Overflow_State>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:294
    tmpUSIDR              = USIDR; // Not necessary, but prevents warnings
     f84:	9c b5       	in	r25, 0x2c	; 44
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:295
    tmpRxHead = (TWI_RxHead + 1) & TWI_RX_BUFFER_MASK;
     f86:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <TWI_RxHead>
     f8a:	8f 5f       	subi	r24, 0xFF	; 255
     f8c:	8f 70       	andi	r24, 0x0F	; 15
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:296
    if (TWI_RxTail != tmpRxHead) {
     f8e:	20 91 ab 01 	lds	r18, 0x01AB	; 0x8001ab <TWI_RxTail>
     f92:	28 17       	cp	r18, r24
     f94:	09 f4       	brne	.+2      	; 0xf98 <__vector_24+0x64>
     f96:	47 c0       	rjmp	.+142    	; 0x1026 <__vector_24+0xf2>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:297
      TWI_RxHead            = tmpRxHead;
     f98:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <TWI_RxHead>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:298
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
     f9c:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <TWI_RxHead>
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	e0 58       	subi	r30, 0x80	; 128
     fa4:	fe 4f       	sbci	r31, 0xFE	; 254
     fa6:	90 83       	st	Z, r25
     fa8:	0c c0       	rjmp	.+24     	; 0xfc2 <__vector_24+0x8e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:216

  switch (USI_TWI_Overflow_State) {
  // ---------- Address mode ----------
  // Check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK, else reset USI.
  case USI_SLAVE_CHECK_ADDRESS:
    if ((USIDR == 0) || ((USIDR >> 1) == TWI_slaveAddress)) {
     faa:	8c b5       	in	r24, 0x2c	; 44
     fac:	88 23       	and	r24, r24
     fae:	19 f0       	breq	.+6      	; 0xfb6 <__vector_24+0x82>
     fb0:	8c b5       	in	r24, 0x2c	; 44
     fb2:	86 95       	lsr	r24
     fb4:	79 f4       	brne	.+30     	; 0xfd4 <__vector_24+0xa0>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:217
      if (USIDR & 0x01) {
     fb6:	0c b4       	in	r0, 0x2c	; 44
     fb8:	00 fe       	sbrs	r0, 0
     fba:	07 c0       	rjmp	.+14     	; 0xfca <__vector_24+0x96>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:224
          // reset tx buffer and call callback
          tmpTxTail = TWI_TxHead;
          TWI_TxTail = tmpTxTail;
          USI_TWI_On_Slave_Transmit();
        }
        USI_TWI_Overflow_State = USI_SLAVE_SEND_DATA;
     fbc:	81 e0       	ldi	r24, 0x01	; 1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:226
      } else {
        USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
     fbe:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <USI_TWI_Overflow_State>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:228
      }
      SET_USI_TO_SEND_ACK();
     fc2:	1c bc       	out	0x2c, r1	; 44
     fc4:	61 9a       	sbi	0x0c, 1	; 12
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:302
      TWI_RxHead            = tmpRxHead;
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
      SET_USI_TO_SEND_ACK();
    } else // If the buffer is full then:
    {
      SET_USI_TO_SEND_NACK();
     fc6:	8e e7       	ldi	r24, 0x7E	; 126
     fc8:	21 c0       	rjmp	.+66     	; 0x100c <__vector_24+0xd8>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:226
          TWI_TxTail = tmpTxTail;
          USI_TWI_On_Slave_Transmit();
        }
        USI_TWI_Overflow_State = USI_SLAVE_SEND_DATA;
      } else {
        USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
     fca:	84 e0       	ldi	r24, 0x04	; 4
     fcc:	f8 cf       	rjmp	.-16     	; 0xfbe <__vector_24+0x8a>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:237
    break;

  // ----- Master write data mode ------
  // Check reply and goto USI_SLAVE_SEND_DATA if OK, else reset USI.
  case USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA:
    if (USIDR) // If NACK, the master does not want more data.
     fce:	8c b5       	in	r24, 0x2c	; 44
     fd0:	88 23       	and	r24, r24
     fd2:	21 f0       	breq	.+8      	; 0xfdc <__vector_24+0xa8>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:255
    if (TWI_TxHead != tmpTxTail) {
      TWI_TxTail = (TWI_TxTail + 1) & TWI_TX_BUFFER_MASK;
      USIDR      = TWI_TxBuf[TWI_TxTail];
    } else // If the buffer is empty then:
    {
      SET_USI_TO_TWI_START_CONDITION_MODE();
     fd4:	61 98       	cbi	0x0c, 1	; 12
     fd6:	88 ea       	ldi	r24, 0xA8	; 168
     fd8:	8a bd       	out	0x2a, r24	; 42
     fda:	17 c0       	rjmp	.+46     	; 0x100a <__vector_24+0xd6>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:249
  // Copy data from buffer to USIDR and set USI to shift byte. Next USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA
  /* Falls through. */
  case USI_SLAVE_SEND_DATA:

    // Get data from Buffer
    tmpTxTail = TWI_TxTail; // Not necessary, but prevents warnings
     fdc:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <TWI_TxTail>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:250
    if (TWI_TxHead != tmpTxTail) {
     fe0:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <TWI_TxHead>
     fe4:	98 17       	cp	r25, r24
     fe6:	b1 f3       	breq	.-20     	; 0xfd4 <__vector_24+0xa0>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:251
      TWI_TxTail = (TWI_TxTail + 1) & TWI_TX_BUFFER_MASK;
     fe8:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <TWI_TxTail>
     fec:	8f 5f       	subi	r24, 0xFF	; 255
     fee:	8f 70       	andi	r24, 0x0F	; 15
     ff0:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <TWI_TxTail>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:252
      USIDR      = TWI_TxBuf[TWI_TxTail];
     ff4:	e0 91 b1 01 	lds	r30, 0x01B1	; 0x8001b1 <TWI_TxTail>
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	e0 57       	subi	r30, 0x70	; 112
     ffc:	fe 4f       	sbci	r31, 0xFE	; 254
     ffe:	80 81       	ld	r24, Z
    1000:	8c bd       	out	0x2c, r24	; 44
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:258
    } else // If the buffer is empty then:
    {
      SET_USI_TO_TWI_START_CONDITION_MODE();
      return;
    }
    USI_TWI_Overflow_State = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
    1002:	82 e0       	ldi	r24, 0x02	; 2
    1004:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <USI_TWI_Overflow_State>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:259
    SET_USI_TO_SEND_DATA();
    1008:	61 9a       	sbi	0x0c, 1	; 12
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:272

  // ----- Master read data mode ------
  // Set USI to sample data from master. Next USI_SLAVE_GET_DATA_AND_SEND_ACK.
  case USI_SLAVE_REQUEST_DATA:
    USI_TWI_Overflow_State = USI_SLAVE_GET_DATA_AND_SEND_ACK;
    SET_USI_TO_READ_DATA();
    100a:	80 e7       	ldi	r24, 0x70	; 112
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:302
      TWI_RxHead            = tmpRxHead;
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
      SET_USI_TO_SEND_ACK();
    } else // If the buffer is full then:
    {
      SET_USI_TO_SEND_NACK();
    100c:	8b bd       	out	0x2b, r24	; 43
    100e:	a7 cf       	rjmp	.-178    	; 0xf5e <__vector_24+0x2a>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:264
    SET_USI_TO_SEND_DATA();
    break;

  // Set USI to sample reply from master. Next USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA
  case USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA:
    USI_TWI_Overflow_State = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
    1010:	83 e0       	ldi	r24, 0x03	; 3
    1012:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <USI_TWI_Overflow_State>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:265
    SET_USI_TO_READ_ACK();
    1016:	61 98       	cbi	0x0c, 1	; 12
    1018:	1c bc       	out	0x2c, r1	; 44
    101a:	d5 cf       	rjmp	.-86     	; 0xfc6 <__vector_24+0x92>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:271
    break;

  // ----- Master read data mode ------
  // Set USI to sample data from master. Next USI_SLAVE_GET_DATA_AND_SEND_ACK.
  case USI_SLAVE_REQUEST_DATA:
    USI_TWI_Overflow_State = USI_SLAVE_GET_DATA_AND_SEND_ACK;
    101c:	85 e0       	ldi	r24, 0x05	; 5
    101e:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <USI_TWI_Overflow_State>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:272
    SET_USI_TO_READ_DATA();
    1022:	61 98       	cbi	0x0c, 1	; 12
    1024:	f2 cf       	rjmp	.-28     	; 0x100a <__vector_24+0xd6>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:302
      TWI_RxHead            = tmpRxHead;
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
      SET_USI_TO_SEND_ACK();
    } else // If the buffer is full then:
    {
      SET_USI_TO_SEND_NACK();
    1026:	61 98       	cbi	0x0c, 1	; 12
    1028:	ce cf       	rjmp	.-100    	; 0xfc6 <__vector_24+0x92>

0000102a <__vector_23>:
__vector_23():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:165
ISR(USI_START_VECTOR)
#elif __ICCAVR__
#pragma vector = USI_START_VECTOR
__interrupt void USI_Start_Condition_ISR(void)
#endif
{
    102a:	1f 92       	push	r1
    102c:	0f 92       	push	r0
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	0f 92       	push	r0
    1032:	11 24       	eor	r1, r1
    1034:	8f 93       	push	r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:178
      // reset rx buffer
      TWI_RxTail = tmpRxHead;
    }
  }

  USI_TWI_Overflow_State = USI_SLAVE_CHECK_ADDRESS;
    1036:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <USI_TWI_Overflow_State>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:179
  DDR_USI &= ~(1 << PORT_USI_SDA); // Set SDA as input
    103a:	61 98       	cbi	0x0c, 1	; 12
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:180
  while ((tmpPin = (PIN_USI_CL & (1 << PORT_USI_SCL))) && ((PIN_USI & (1 << PIN_USI_SDA)) == 0))
    103c:	39 9b       	sbis	0x07, 1	; 7
    103e:	04 c0       	rjmp	.+8      	; 0x1048 <__vector_23+0x1e>
    1040:	59 9b       	sbis	0x0b, 1	; 11
    1042:	fc cf       	rjmp	.-8      	; 0x103c <__vector_23+0x12>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:185
    ; // Wait for SCL to go low to ensure the "Start Condition" has completed.
        // If a Stop condition arises then leave the interrupt to prevent waiting forever.
  if (tmpPin) {
    // Stop Condition (waiting for next Start Condition)
    USICR = (1 << USISIE) | (0 << USIOIE) | // Enable Start Condition Interrupt. Disable Overflow Interrupt.
    1044:	88 ea       	ldi	r24, 0xA8	; 168
    1046:	01 c0       	rjmp	.+2      	; 0x104a <__vector_23+0x20>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:192
                                            // to first Start Condition (potential failure)
            (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
            (0 << USITC);
  } else {
    // really Start Condition (Enable Overflow Interrupt)
    USICR = (1 << USISIE) | (1 << USIOIE)
    1048:	88 ef       	ldi	r24, 0xF8	; 248
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:185
  while ((tmpPin = (PIN_USI_CL & (1 << PORT_USI_SCL))) && ((PIN_USI & (1 << PIN_USI_SDA)) == 0))
    ; // Wait for SCL to go low to ensure the "Start Condition" has completed.
        // If a Stop condition arises then leave the interrupt to prevent waiting forever.
  if (tmpPin) {
    // Stop Condition (waiting for next Start Condition)
    USICR = (1 << USISIE) | (0 << USIOIE) | // Enable Start Condition Interrupt. Disable Overflow Interrupt.
    104a:	8a bd       	out	0x2a, r24	; 42
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:198
            | // Enable Overflow and Start Condition Interrupt. (Keep StartCondInt to detect RESTART)
            (1 << USIWM1) | (1 << USIWM0) |                 // Set USI in Two-wire mode.
            (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
            (0 << USITC);
  }
  USISR = (1 << USI_START_COND_INT) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC) | // Clear flags
    104c:	80 ef       	ldi	r24, 0xF0	; 240
    104e:	8b bd       	out	0x2b, r24	; 43
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:200
          (0x0 << USICNT0); // Set USI to sample 8 bits i.e. count 16 external pin toggles.
}
    1050:	8f 91       	pop	r24
    1052:	0f 90       	pop	r0
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	0f 90       	pop	r0
    1058:	1f 90       	pop	r1
    105a:	18 95       	reti

0000105c <__vector_1>:
__vector_1():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:110
        Serial.print("Mode :");
        Serial.println(log_mode);
    }
}

ISR(INT0_vect) {
    105c:	1f 92       	push	r1
    105e:	0f 92       	push	r0
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	0f 92       	push	r0
    1064:	11 24       	eor	r1, r1
    1066:	8f 93       	push	r24
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:111
    alt_data.newDataReady = true;
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <alt_data+0x9>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:112
}
    106e:	8f 91       	pop	r24
    1070:	0f 90       	pop	r0
    1072:	0f be       	out	0x3f, r0	; 63
    1074:	0f 90       	pop	r0
    1076:	1f 90       	pop	r1
    1078:	18 95       	reti

0000107a <__vector_4>:
__vector_4():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:101
        digitalWrite(LED0, LOW);
    }
    //GOTO sleep
}

ISR(PCINT2_vect) {
    107a:	1f 92       	push	r1
    107c:	0f 92       	push	r0
    107e:	0f b6       	in	r0, 0x3f	; 63
    1080:	0f 92       	push	r0
    1082:	11 24       	eor	r1, r1
    1084:	2f 93       	push	r18
    1086:	3f 93       	push	r19
    1088:	4f 93       	push	r20
    108a:	5f 93       	push	r21
    108c:	6f 93       	push	r22
    108e:	7f 93       	push	r23
    1090:	8f 93       	push	r24
    1092:	9f 93       	push	r25
    1094:	af 93       	push	r26
    1096:	bf 93       	push	r27
    1098:	ef 93       	push	r30
    109a:	ff 93       	push	r31
digitalRead():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:248
#endif

int digitalRead(uint8_t pin)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t bit = digitalPinToBitMask(pin);
    109c:	ef e9       	ldi	r30, 0x9F	; 159
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	84 91       	lpm	r24, Z
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:249
  uint8_t port = digitalPinToPort(pin);
    10a2:	ed e8       	ldi	r30, 0x8D	; 141
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	e4 91       	lpm	r30, Z
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:251

  if (port == NOT_A_PIN) return LOW;
    10a8:	ee 23       	and	r30, r30
    10aa:	41 f0       	breq	.+16     	; 0x10bc <__vector_4+0x42>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:259
  // "read" should *NEVER* change the behavior of the thing you're using it on.
  // That's why it's called "read" not "write". As an added bonus, sets the
  // stage for auto-fast-digitalRead() for compile time known pins.
  // turnOffPWM( pin );

  if (*portInputRegister(port) & bit) return HIGH;
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	e0 59       	subi	r30, 0x90	; 144
    10b0:	ff 4f       	sbci	r31, 0xFF	; 255
    10b2:	a4 91       	lpm	r26, Z
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	ec 91       	ld	r30, X
    10b8:	e8 23       	and	r30, r24
    10ba:	a9 f4       	brne	.+42     	; 0x10e6 <__vector_4+0x6c>
__vector_4():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:104

    if (!digitalRead(USER_SW)) {
        if (++log_mode > 4)log_mode = 0;
    10bc:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <log_mode>
    10c0:	8f 5f       	subi	r24, 0xFF	; 255
    10c2:	85 30       	cpi	r24, 0x05	; 5
    10c4:	08 f5       	brcc	.+66     	; 0x1108 <__vector_4+0x8e>
    10c6:	80 93 ad 01 	sts	0x01AD, r24	; 0x8001ad <log_mode>
write():
    10ca:	89 e7       	ldi	r24, 0x79	; 121
    10cc:	91 e0       	ldi	r25, 0x01	; 1
    10ce:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <Print::write(char const*) [clone .part.2] [clone .constprop.61]>
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:71
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    10d2:	60 91 ad 01 	lds	r22, 0x01AD	; 0x8001ad <log_mode>
    10d6:	70 e0       	ldi	r23, 0x00	; 0
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	80 e0       	ldi	r24, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:103
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    10dc:	4a e0       	ldi	r20, 0x0A	; 10
    10de:	0e 94 77 03 	call	0x6ee	; 0x6ee <Print::printNumber(unsigned long, unsigned char) [clone .constprop.59]>
println():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:154
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    10e2:	0e 94 90 01 	call	0x320	; 0x320 <Print::println() [clone .constprop.62]>
__vector_4():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:108
        Serial.print("Mode :");
        Serial.println(log_mode);
    }
}
    10e6:	ff 91       	pop	r31
    10e8:	ef 91       	pop	r30
    10ea:	bf 91       	pop	r27
    10ec:	af 91       	pop	r26
    10ee:	9f 91       	pop	r25
    10f0:	8f 91       	pop	r24
    10f2:	7f 91       	pop	r23
    10f4:	6f 91       	pop	r22
    10f6:	5f 91       	pop	r21
    10f8:	4f 91       	pop	r20
    10fa:	3f 91       	pop	r19
    10fc:	2f 91       	pop	r18
    10fe:	0f 90       	pop	r0
    1100:	0f be       	out	0x3f, r0	; 63
    1102:	0f 90       	pop	r0
    1104:	1f 90       	pop	r1
    1106:	18 95       	reti
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:104
}

ISR(PCINT2_vect) {

    if (!digitalRead(USER_SW)) {
        if (++log_mode > 4)log_mode = 0;
    1108:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <log_mode>
    110c:	de cf       	rjmp	.-68     	; 0x10ca <__vector_4+0x50>

0000110e <global constructors keyed to 65535_0_Alt.cpp.o.2447>:
_GLOBAL__I_65535_0_Alt.cpp.o.2447():
    110e:	e6 eb       	ldi	r30, 0xB6	; 182
    1110:	f1 e0       	ldi	r31, 0x01	; 1
    1112:	13 82       	std	Z+3, r1	; 0x03
    1114:	12 82       	std	Z+2, r1	; 0x02
    1116:	88 ee       	ldi	r24, 0xE8	; 232
    1118:	93 e0       	ldi	r25, 0x03	; 3
    111a:	a0 e0       	ldi	r26, 0x00	; 0
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	84 83       	std	Z+4, r24	; 0x04
    1120:	95 83       	std	Z+5, r25	; 0x05
    1122:	a6 83       	std	Z+6, r26	; 0x06
    1124:	b7 83       	std	Z+7, r27	; 0x07
    1126:	8d e0       	ldi	r24, 0x0D	; 13
    1128:	91 e0       	ldi	r25, 0x01	; 1
    112a:	91 83       	std	Z+1, r25	; 0x01
    112c:	80 83       	st	Z, r24
    112e:	82 e4       	ldi	r24, 0x42	; 66
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	95 87       	std	Z+13, r25	; 0x0d
    1134:	84 87       	std	Z+12, r24	; 0x0c
    1136:	81 e4       	ldi	r24, 0x41	; 65
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	97 87       	std	Z+15, r25	; 0x0f
    113c:	86 87       	std	Z+14, r24	; 0x0e
    113e:	86 e4       	ldi	r24, 0x46	; 70
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	91 8b       	std	Z+17, r25	; 0x11
    1144:	80 8b       	std	Z+16, r24	; 0x10
    1146:	85 e4       	ldi	r24, 0x45	; 69
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	93 8b       	std	Z+19, r25	; 0x13
    114c:	82 8b       	std	Z+18, r24	; 0x12
    114e:	84 e4       	ldi	r24, 0x44	; 68
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	95 8b       	std	Z+21, r25	; 0x15
    1154:	84 8b       	std	Z+20, r24	; 0x14
    1156:	80 e4       	ldi	r24, 0x40	; 64
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	97 8b       	std	Z+23, r25	; 0x17
    115c:	86 8b       	std	Z+22, r24	; 0x16
    115e:	11 8e       	std	Z+25, r1	; 0x19
    1160:	12 8e       	std	Z+26, r1	; 0x1a
    1162:	13 8e       	std	Z+27, r1	; 0x1b
    1164:	14 8e       	std	Z+28, r1	; 0x1c
    1166:	ed e1       	ldi	r30, 0x1D	; 29
    1168:	f2 e0       	ldi	r31, 0x02	; 2
    116a:	88 e0       	ldi	r24, 0x08	; 8
    116c:	81 83       	std	Z+1, r24	; 0x01
    116e:	82 e0       	ldi	r24, 0x02	; 2
    1170:	82 83       	std	Z+2, r24	; 0x02
    1172:	15 82       	std	Z+5, r1	; 0x05
    1174:	80 e2       	ldi	r24, 0x20	; 32
    1176:	86 83       	std	Z+6, r24	; 0x06
    1178:	17 82       	std	Z+7, r1	; 0x07
    117a:	85 e0       	ldi	r24, 0x05	; 5
    117c:	85 87       	std	Z+13, r24	; 0x0d
    117e:	10 86       	std	Z+8, r1	; 0x08
    1180:	e3 e1       	ldi	r30, 0x13	; 19
    1182:	f2 e0       	ldi	r31, 0x02	; 2
    1184:	80 e2       	ldi	r24, 0x20	; 32
    1186:	98 e0       	ldi	r25, 0x08	; 8
    1188:	a0 e0       	ldi	r26, 0x00	; 0
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	85 83       	std	Z+5, r24	; 0x05
    118e:	96 83       	std	Z+6, r25	; 0x06
    1190:	a7 83       	std	Z+7, r26	; 0x07
    1192:	b0 87       	std	Z+8, r27	; 0x08
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	81 87       	std	Z+9, r24	; 0x09
    1198:	08 95       	ret

0000119a <main>:
init():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:572
  #else
  CLKPR=1<<CLKPCE; //enable change of protected register
  #endif
  CLKPR=1; //prescale by 2 for 4MHz
  #endif
  sei();
    119a:	78 94       	sei
Timer0_SetWaveformGenerationMode():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:677
}
timer0_wgm_t;

__attribute__((always_inline)) static inline void Timer0_SetWaveformGenerationMode( timer0_wgm_t wgm )
{
  TCCR0A = (TCCR0A & ~MASK2(WGM01,WGM00)) | (((wgm & B011) >> 0) << WGM00);
    119c:	8b b3       	in	r24, 0x1b	; 27
    119e:	83 60       	ori	r24, 0x03	; 3
    11a0:	8b bb       	out	0x1b, r24	; 27
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:678
  TCCR0B = (TCCR0B & ~MASK1(WGM02))       | (((wgm & B100) >> 2) << WGM02);
    11a2:	d3 98       	cbi	0x1a, 3	; 26
Timer0_ClockSelect():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:659
}
timer0_cs_t;

__attribute__((always_inline)) static inline void Timer0_ClockSelect( timer0_cs_t cs )
{
  TCCR0B = (TCCR0B & ~MASK3(CS02,CS01,CS00)) | (cs << CS00);
    11a4:	8a b3       	in	r24, 0x1a	; 26
    11a6:	88 7f       	andi	r24, 0xF8	; 248
    11a8:	82 60       	ori	r24, 0x02	; 2
    11aa:	8a bb       	out	0x1a, r24	; 26
Timer0_EnableOverflowInterrupt():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:733
  TIMSK |= (1<<OCIE0A);
}

__attribute__((always_inline)) static inline void Timer0_EnableOverflowInterrupt( void )
{
  TIMSK |= (1<<TOIE0);
    11ac:	8a b7       	in	r24, 0x3a	; 58
    11ae:	82 60       	ori	r24, 0x02	; 2
    11b0:	8a bf       	out	0x3a, r24	; 58
Timer1_ClockSelect():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:811
}
timer1_cs_t;

__attribute__((always_inline)) static inline void Timer1_ClockSelect( timer1_cs_t cs )
{
  TCCR1B = (TCCR1B & ~MASK3(CS12,CS11,CS10)) | (cs << CS10);
    11b2:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
    11b6:	88 7f       	andi	r24, 0xF8	; 248
    11b8:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
Timer1_SetWaveformGenerationMode():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:837
}
timer1_wgm_t;

__attribute__((always_inline)) static inline void Timer1_SetWaveformGenerationMode( timer1_wgm_t wgm )
{
  TCCR1A = (TCCR1A & ~MASK2(WGM11,WGM10)) | (((wgm & B0011) >> 0) << WGM10);
    11bc:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__DATA_REGION_ORIGIN__+0x12>
    11c0:	8c 7f       	andi	r24, 0xFC	; 252
    11c2:	81 60       	ori	r24, 0x01	; 1
    11c4:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__DATA_REGION_ORIGIN__+0x12>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:838
  TCCR1B = (TCCR1B & ~MASK2(WGM13,WGM12)) | (((wgm & B1100) >> 2) << WGM12);
    11c8:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
    11cc:	87 7e       	andi	r24, 0xE7	; 231
    11ce:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
Timer1_ClockSelect():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:811
}
timer1_cs_t;

__attribute__((always_inline)) static inline void Timer1_ClockSelect( timer1_cs_t cs )
{
  TCCR1B = (TCCR1B & ~MASK3(CS12,CS11,CS10)) | (cs << CS10);
    11d2:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
    11d6:	88 7f       	andi	r24, 0xF8	; 248
    11d8:	82 60       	ori	r24, 0x02	; 2
    11da:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
ADC_PrescalerSelect():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_adc.h:89
}
adc_ps_t;

__attribute__((always_inline)) static inline void ADC_PrescalerSelect( adc_ps_t ps )
{
  ADCSRA = (ADCSRA & ~MASK3(ADPS2,ADPS1,ADPS0)) | (ps << ADPS0);
    11de:	83 b1       	in	r24, 0x03	; 3
    11e0:	88 7f       	andi	r24, 0xF8	; 248
    11e2:	83 60       	ori	r24, 0x03	; 3
    11e4:	83 b9       	out	0x03, r24	; 3
ADC_Enable():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_adc.h:94
}

__attribute__((always_inline)) static inline void ADC_Enable( void )
{
  ADCSRA |= MASK1( ADEN );
    11e6:	1f 9a       	sbi	0x03, 7	; 3
setup():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:31
uint8_t log_mode = 0;
uint16_t batt_v = 0;
Alt_Data alt_data;

void setup() {
    pinMode(LED0, OUTPUT);
    11e8:	61 e0       	ldi	r22, 0x01	; 1
    11ea:	8a e0       	ldi	r24, 0x0A	; 10
    11ec:	0e 94 12 02 	call	0x424	; 0x424 <pinMode>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:32
    pinMode(LED1, OUTPUT);
    11f0:	61 e0       	ldi	r22, 0x01	; 1
    11f2:	89 e0       	ldi	r24, 0x09	; 9
    11f4:	0e 94 12 02 	call	0x424	; 0x424 <pinMode>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:33
    pinMode(USER_SW, INPUT_PULLUP);
    11f8:	62 e0       	ldi	r22, 0x02	; 2
    11fa:	8d e0       	ldi	r24, 0x0D	; 13
    11fc:	0e 94 12 02 	call	0x424	; 0x424 <pinMode>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:34
    pinMode(MPL_INT1, INPUT);
    1200:	60 e0       	ldi	r22, 0x00	; 0
    1202:	8b e0       	ldi	r24, 0x0B	; 11
    1204:	0e 94 12 02 	call	0x424	; 0x424 <pinMode>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:35
    pinMode(NRF_CE, OUTPUT);
    1208:	61 e0       	ldi	r22, 0x01	; 1
    120a:	88 e0       	ldi	r24, 0x08	; 8
    120c:	0e 94 12 02 	call	0x424	; 0x424 <pinMode>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:36
    pinMode(NRF_SCK, OUTPUT);
    1210:	61 e0       	ldi	r22, 0x01	; 1
    1212:	87 e0       	ldi	r24, 0x07	; 7
    1214:	0e 94 12 02 	call	0x424	; 0x424 <pinMode>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:37
    pinMode(NRF_MOSI, OUTPUT);
    1218:	61 e0       	ldi	r22, 0x01	; 1
    121a:	83 e0       	ldi	r24, 0x03	; 3
    121c:	0e 94 12 02 	call	0x424	; 0x424 <pinMode>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:38
    pinMode(NRF_CSN, OUTPUT);
    1220:	61 e0       	ldi	r22, 0x01	; 1
    1222:	82 e0       	ldi	r24, 0x02	; 2
    1224:	0e 94 12 02 	call	0x424	; 0x424 <pinMode>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:39
    pinMode(NRF_IRQ, INPUT);
    1228:	60 e0       	ldi	r22, 0x00	; 0
    122a:	84 e0       	ldi	r24, 0x04	; 4
    122c:	0e 94 12 02 	call	0x424	; 0x424 <pinMode>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:40
    pinMode(NRF_MISO, INPUT);
    1230:	60 e0       	ldi	r22, 0x00	; 0
    1232:	86 e0       	ldi	r24, 0x06	; 6
    1234:	0e 94 12 02 	call	0x424	; 0x424 <pinMode>
begin():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    1238:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <Serial+0x10>
    123c:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <Serial+0x11>
    1240:	c2 e0       	ldi	r28, 0x02	; 2
    1242:	c0 83       	st	Z, r28
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1244:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <Serial+0xc>
    1248:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <Serial+0xd>
    124c:	10 82       	st	Z, r1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    124e:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <Serial+0xe>
    1252:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <Serial+0xf>
    1256:	8c e0       	ldi	r24, 0x0C	; 12
    1258:	80 83       	st	Z, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:138

  _written = false;
    125a:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <Serial+0x18>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:144

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    125e:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <Serial+0x14>
    1262:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <Serial+0x15>
    1266:	86 e0       	ldi	r24, 0x06	; 6
    1268:	80 83       	st	Z, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:146

  sbi(*_ucsrb, RXEN0);
    126a:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <Serial+0x12>
    126e:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <Serial+0x13>
    1272:	80 81       	ld	r24, Z
    1274:	80 61       	ori	r24, 0x10	; 16
    1276:	80 83       	st	Z, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:147
  sbi(*_ucsrb, TXEN0);
    1278:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <Serial+0x12>
    127c:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <Serial+0x13>
    1280:	80 81       	ld	r24, Z
    1282:	88 60       	ori	r24, 0x08	; 8
    1284:	80 83       	st	Z, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:148
  sbi(*_ucsrb, RXCIE0);
    1286:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <Serial+0x12>
    128a:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <Serial+0x13>
    128e:	80 81       	ld	r24, Z
    1290:	80 68       	ori	r24, 0x80	; 128
    1292:	80 83       	st	Z, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:149
  cbi(*_ucsrb, UDRIE0);
    1294:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <Serial+0x12>
    1298:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <Serial+0x13>
    129c:	80 81       	ld	r24, Z
    129e:	8f 7d       	andi	r24, 0xDF	; 223
    12a0:	80 83       	st	Z, r24
setup():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:42
    Serial.begin(9600);
    Serial.println("Reboot");
    12a2:	89 e2       	ldi	r24, 0x29	; 41
    12a4:	91 e0       	ldi	r25, 0x01	; 1
    12a6:	0e 94 c8 03 	call	0x790	; 0x790 <Print::println(char const*) [clone .constprop.40]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:43
    delay(50);
    12aa:	62 e3       	ldi	r22, 0x32	; 50
    12ac:	70 e0       	ldi	r23, 0x00	; 0
    12ae:	80 e0       	ldi	r24, 0x00	; 0
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	0e 94 8f 02 	call	0x51e	; 0x51e <delay>
begin():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:364
}

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void) {
  BufferIndex = 0;
    12b6:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <TwoWire::BufferIndex>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:365
  BufferLength = 0;
    12ba:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <TwoWire::BufferLength>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:367

  transmitting = 0;
    12be:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <TwoWire::transmitting>
USI_TWI_Master_Initialise():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:61
{
  #ifdef PUE_USI
  PUE_USI |=(1 << PIN_USI_SDA);
  PUE_USI_CL |=(1 << PIN_USI_SCL);
  #endif
  PORT_USI |= (1 << PIN_USI_SDA); // Enable pullup on SDA, to set high as released state.
    12c2:	69 9a       	sbi	0x0d, 1	; 13
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:62
  PORT_USI_CL |= (1 << PIN_USI_SCL); // Enable pullup on SCL, to set high as released state.
    12c4:	49 9a       	sbi	0x09, 1	; 9
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:64

  DDR_USI_CL |= (1 << PIN_USI_SCL); // Enable SCL as output.
    12c6:	41 9a       	sbi	0x08, 1	; 8
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:65
  DDR_USI |= (1 << PIN_USI_SDA); // Enable SDA as output.
    12c8:	61 9a       	sbi	0x0c, 1	; 12
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:67

  USIDR = 0xFF;                                           // Preload dataregister with "released level" data.
    12ca:	8f ef       	ldi	r24, 0xFF	; 255
    12cc:	8c bd       	out	0x2c, r24	; 44
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:68
  USICR = (0 << USISIE) | (0 << USIOIE) |                 // Disable Interrupts.
    12ce:	8a e2       	ldi	r24, 0x2A	; 42
    12d0:	8a bd       	out	0x2a, r24	; 42
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:72
          (1 << USIWM1) | (0 << USIWM0) |                 // Set USI in Two-wire mode.
          (1 << USICS1) | (0 << USICS0) | (1 << USICLK) | // Software stobe as counter clock source
          (0 << USITC);
  USISR = (1 << USISIF) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC) | // Clear flags,
    12d2:	80 ef       	ldi	r24, 0xF0	; 240
    12d4:	8b bd       	out	0x2b, r24	; 43
beginTransmission():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:471
  BufferIndex = 1; // reserved by slave address
  BufferLength = BufferIndex;
}

void TwoWire::beginTransmission(int address) {
  beginTransmission((uint8_t)address);
    12d6:	80 e6       	ldi	r24, 0x60	; 96
    12d8:	0e 94 b0 00 	call	0x160	; 0x160 <TwoWire::beginTransmission(unsigned char) [clone .constprop.50]>
MPL_init():
/tmp/arduino_build_376412/sketch/Alt.cpp:48


void MPL_init() {
    Wire.begin();
    Wire.beginTransmission(ALTI_ADDR);
    Wire.write(ALTI_REG_CTRL1);
    12dc:	86 e2       	ldi	r24, 0x26	; 38
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	0e 94 7d 00 	call	0xfa	; 0xfa <TwoWire::write(int) [clone .constprop.65]>
/tmp/arduino_build_376412/sketch/Alt.cpp:49
    Wire.write(0xB8);//0b10111000);//Altimeter mode, OSR=0b111(128,512ms)
    12e4:	88 eb       	ldi	r24, 0xB8	; 184
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	0e 94 7d 00 	call	0xfa	; 0xfa <TwoWire::write(int) [clone .constprop.65]>
/tmp/arduino_build_376412/sketch/Alt.cpp:50
    Wire.endTransmission();
    12ec:	0e 94 49 03 	call	0x692	; 0x692 <TwoWire::endTransmission() [clone .constprop.51]>
beginTransmission():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:471
    12f0:	80 e6       	ldi	r24, 0x60	; 96
    12f2:	0e 94 b0 00 	call	0x160	; 0x160 <TwoWire::beginTransmission(unsigned char) [clone .constprop.50]>
MPL_init():
/tmp/arduino_build_376412/sketch/Alt.cpp:53

    Wire.beginTransmission(ALTI_ADDR);
    Wire.write(ALTI_REG_PT_DATA_CFG);
    12f6:	83 e1       	ldi	r24, 0x13	; 19
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	0e 94 7d 00 	call	0xfa	; 0xfa <TwoWire::write(int) [clone .constprop.65]>
/tmp/arduino_build_376412/sketch/Alt.cpp:54
    Wire.write(0x07);//0b00000111);//DREM=PDEFE=TDEFE=1: data ready event on new temperature or altitude readings.
    12fe:	87 e0       	ldi	r24, 0x07	; 7
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	0e 94 7d 00 	call	0xfa	; 0xfa <TwoWire::write(int) [clone .constprop.65]>
/tmp/arduino_build_376412/sketch/Alt.cpp:55
    Wire.endTransmission();
    1306:	0e 94 49 03 	call	0x692	; 0x692 <TwoWire::endTransmission() [clone .constprop.51]>
beginTransmission():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:471
    130a:	80 e6       	ldi	r24, 0x60	; 96
    130c:	0e 94 b0 00 	call	0x160	; 0x160 <TwoWire::beginTransmission(unsigned char) [clone .constprop.50]>
MPL_init():
/tmp/arduino_build_376412/sketch/Alt.cpp:58

    Wire.beginTransmission(ALTI_ADDR);
    Wire.write(ALTI_REG_CTRL4);
    1310:	89 e2       	ldi	r24, 0x29	; 41
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	0e 94 7d 00 	call	0xfa	; 0xfa <TwoWire::write(int) [clone .constprop.65]>
/tmp/arduino_build_376412/sketch/Alt.cpp:59
    Wire.write(0x80);//INT_EN_DRDY=1 enable data ready interrupt
    1318:	80 e8       	ldi	r24, 0x80	; 128
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	0e 94 7d 00 	call	0xfa	; 0xfa <TwoWire::write(int) [clone .constprop.65]>
/tmp/arduino_build_376412/sketch/Alt.cpp:60
    Wire.endTransmission();
    1320:	0e 94 49 03 	call	0x692	; 0x692 <TwoWire::endTransmission() [clone .constprop.51]>
beginTransmission():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:471
    1324:	80 e6       	ldi	r24, 0x60	; 96
    1326:	0e 94 b0 00 	call	0x160	; 0x160 <TwoWire::beginTransmission(unsigned char) [clone .constprop.50]>
MPL_init():
/tmp/arduino_build_376412/sketch/Alt.cpp:63

    Wire.beginTransmission(ALTI_ADDR);
    Wire.write(ALTI_REG_CTRL5);
    132a:	8a e2       	ldi	r24, 0x2A	; 42
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	0e 94 7d 00 	call	0xfa	; 0xfa <TwoWire::write(int) [clone .constprop.65]>
/tmp/arduino_build_376412/sketch/Alt.cpp:64
    Wire.write(0x80);//INT_EN_DRDY=1 route Data ready interrupt to INT1
    1332:	80 e8       	ldi	r24, 0x80	; 128
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	0e 94 7d 00 	call	0xfa	; 0xfa <TwoWire::write(int) [clone .constprop.65]>
/tmp/arduino_build_376412/sketch/Alt.cpp:65
    Wire.endTransmission();
    133a:	0e 94 49 03 	call	0x692	; 0x692 <TwoWire::endTransmission() [clone .constprop.51]>
beginTransmission():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:471
    133e:	80 e6       	ldi	r24, 0x60	; 96
    1340:	0e 94 b0 00 	call	0x160	; 0x160 <TwoWire::beginTransmission(unsigned char) [clone .constprop.50]>
MPL_init():
/tmp/arduino_build_376412/sketch/Alt.cpp:68

    Wire.beginTransmission(ALTI_ADDR);
    Wire.write(ALTI_REG_CTRL1);
    1344:	86 e2       	ldi	r24, 0x26	; 38
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	0e 94 7d 00 	call	0xfa	; 0xfa <TwoWire::write(int) [clone .constprop.65]>
/tmp/arduino_build_376412/sketch/Alt.cpp:69
    Wire.write(0xB9);//0b10111001);//Altimeter mode, OSR=0b111(128,512ms), Active
    134c:	89 eb       	ldi	r24, 0xB9	; 185
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	0e 94 7d 00 	call	0xfa	; 0xfa <TwoWire::write(int) [clone .constprop.65]>
/tmp/arduino_build_376412/sketch/Alt.cpp:70
    Wire.endTransmission();
    1354:	0e 94 49 03 	call	0x692	; 0x692 <TwoWire::endTransmission() [clone .constprop.51]>
setup():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:46
    MPL_init();

    MCUCR = (1 << ISC01); //Interrupt on falling edge of INTO
    1358:	c6 bf       	out	0x36, r28	; 54
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:47
    GIMSK |= (1 << PCIE2) | (1 << INT0);
    135a:	8c b7       	in	r24, 0x3c	; 60
    135c:	80 66       	ori	r24, 0x60	; 96
    135e:	8c bf       	out	0x3c, r24	; 60
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:48
    PCMSK2 |= (1 << PCINT12);
    1360:	89 b5       	in	r24, 0x29	; 41
    1362:	81 60       	ori	r24, 0x01	; 1
    1364:	89 bd       	out	0x29, r24	; 41
analogReference():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_analog.c:44
{
  // can't actually set the register here because the default setting
  // will connect AVCC and the AREF pin, which would cause a short if
  // there's something connected to AREF.
  // fix? Validate the mode?
  analog_reference = mode;
    1366:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <analog_reference>
begin():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:613
	ce(LOW);
	csn(HIGH);
	delay(200);
  #else
    // Initialize pins
    if (ce_pin != csn_pin) pinMode(ce_pin,OUTPUT);  
    136a:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <radio+0x1>
    136e:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <radio+0x2>
    1372:	89 17       	cp	r24, r25
    1374:	19 f0       	breq	.+6      	; 0x137c <main+0x1e2>
    1376:	61 e0       	ldi	r22, 0x01	; 1
    1378:	0e 94 12 02 	call	0x424	; 0x424 <pinMode>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:616
  
    #if ! defined(LITTLEWIRE)
      if (ce_pin != csn_pin)
    137c:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <radio+0x2>
    1380:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <radio+0x1>
    1384:	98 17       	cp	r25, r24
    1386:	19 f0       	breq	.+6      	; 0x138e <main+0x1f4>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:618
    #endif
        pinMode(csn_pin,OUTPUT);
    1388:	61 e0       	ldi	r22, 0x01	; 1
    138a:	0e 94 12 02 	call	0x424	; 0x424 <pinMode>
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    138e:	82 98       	cbi	0x10, 2	; 16
    1390:	8a 98       	cbi	0x11, 2	; 17
    1392:	8a 98       	cbi	0x11, 2	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
    1394:	85 9a       	sbi	0x10, 5	; 16
    1396:	8d 9a       	sbi	0x11, 5	; 17
    1398:	81 9a       	sbi	0x10, 1	; 16
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
  } else {
    *address &= ~mask;
    139a:	89 98       	cbi	0x11, 1	; 17
ce():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:63
/****************************************************************************/

void RF24::ce(bool level)
{
  //Allow for 3-pin use on ATTiny
  if (ce_pin != csn_pin) digitalWrite(ce_pin,level);
    139c:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <radio+0x1>
    13a0:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <radio+0x2>
    13a4:	89 17       	cp	r24, r25
    13a6:	19 f0       	breq	.+6      	; 0x13ae <main+0x214>
    13a8:	60 e0       	ldi	r22, 0x00	; 0
    13aa:	0e 94 be 01 	call	0x37c	; 0x37c <digitalWrite>
csn():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:52
      if(!mode)
	    _SPI.chipSelect(csn_pin);
#endif

#if !defined (RF24_LINUX)
	digitalWrite(csn_pin,mode);
    13ae:	61 e0       	ldi	r22, 0x01	; 1
    13b0:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <radio+0x2>
    13b4:	0e 94 be 01 	call	0x37c	; 0x37c <digitalWrite>
begin():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:634
  // This is actually only required following power up but some settling time also appears to
  // be required after resets too. For full coverage, we'll always assume the worst.
  // Enabling 16b CRC is by far the most obvious case if the wrong timing is used - or skipped.
  // Technically we require 4.5ms + 14us as a worst case. We'll just call it 5ms for good measure.
  // WARNING: Delay is based on P-variant whereby non-P *may* require different timing.
  delay( 5 ) ;
    13b8:	65 e0       	ldi	r22, 0x05	; 5
    13ba:	70 e0       	ldi	r23, 0x00	; 0
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	0e 94 8f 02 	call	0x51e	; 0x51e <delay>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:637

  // Reset NRF_CONFIG and enable 16-bit CRC.
  write_register( NRF_CONFIG, 0b00001100 ) ;
    13c4:	6c e0       	ldi	r22, 0x0C	; 12
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	0e 94 de 03 	call	0x7bc	; 0x7bc <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]>
setRetries():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1533
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
 write_register(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
    13cc:	6f e5       	ldi	r22, 0x5F	; 95
    13ce:	84 e0       	ldi	r24, 0x04	; 4
    13d0:	0e 94 de 03 	call	0x7bc	; 0x7bc <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]>
begin():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:649
  // Reset value is MAX
  //setPALevel( RF24_PA_MAX ) ;

  // check for connected module and if this is a p nRF24l01 variant
  //
  if( setDataRate( RF24_250KBPS ) )
    13d4:	82 e0       	ldi	r24, 0x02	; 2
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	0e 94 7e 05 	call	0xafc	; 0xafc <RF24::setDataRate(rf24_datarate_e) [clone .constprop.27]>
    13dc:	88 23       	and	r24, r24
    13de:	19 f0       	breq	.+6      	; 0x13e6 <main+0x24c>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:651
  {
    p_variant = true ;
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <radio+0x5>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:653
  }
  setup = read_register(RF_SETUP);
    13e6:	86 e0       	ldi	r24, 0x06	; 6
    13e8:	0e 94 19 05 	call	0xa32	; 0xa32 <RF24::read_register(unsigned char) [clone .constprop.28]>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:661
    p_variant = true ;
  }*/
  
  // Then set the data rate to the slowest (and most reliable) speed supported by all
  // hardware.
  setDataRate( RF24_1MBPS ) ;
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	0e 94 7e 05 	call	0xafc	; 0xafc <RF24::setDataRate(rf24_datarate_e) [clone .constprop.27]>
toggle_features():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1227

/****************************************************************************/

void RF24::toggle_features(void)
{
    beginTransaction();
    13f4:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <RF24::beginTransaction() [clone .constprop.33]>
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    13f8:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
    13fa:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    13fc:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    13fe:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
    1400:	8d 9a       	sbi	0x11, 5	; 17
    1402:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    1404:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    1406:	89 98       	cbi	0x11, 1	; 17
    1408:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
    140a:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    140c:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    140e:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
    1410:	8d 9a       	sbi	0x11, 5	; 17
    1412:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    1414:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    1416:	89 98       	cbi	0x11, 1	; 17
    1418:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
    141a:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    141c:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    141e:	89 98       	cbi	0x11, 1	; 17
    1420:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
    1422:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    1424:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    1426:	89 98       	cbi	0x11, 1	; 17
    1428:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
    142a:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    142c:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    142e:	89 98       	cbi	0x11, 1	; 17
    1430:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
    1432:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    1434:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    1436:	89 98       	cbi	0x11, 1	; 17
    1438:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
    143a:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    143c:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    143e:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
    1440:	8d 9a       	sbi	0x11, 5	; 17
    1442:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    1444:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    1446:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
    1448:	8d 9a       	sbi	0x11, 5	; 17
    144a:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    144c:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    144e:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
    1450:	8d 9a       	sbi	0x11, 5	; 17
    1452:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    1454:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    1456:	89 98       	cbi	0x11, 1	; 17
    1458:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
    145a:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    145c:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    145e:	89 98       	cbi	0x11, 1	; 17
    1460:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
    1462:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    1464:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    1466:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
    1468:	8d 9a       	sbi	0x11, 5	; 17
    146a:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    146c:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    146e:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
    1470:	8d 9a       	sbi	0x11, 5	; 17
    1472:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    1474:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    1476:	89 98       	cbi	0x11, 1	; 17
toggle_features():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1230
	_SPI.transfer( ACTIVATE );
    _SPI.transfer( 0x73 );
	endTransaction();
    1478:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <RF24::endTransaction() [clone .constprop.34]>
begin():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:668
  // Initialize CRC and request 2-byte (16bit) CRC
  //setCRCLength( RF24_CRC_16 ) ;

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
  toggle_features();
  write_register(FEATURE,0 );
    147c:	60 e0       	ldi	r22, 0x00	; 0
    147e:	8d e1       	ldi	r24, 0x1D	; 29
    1480:	0e 94 de 03 	call	0x7bc	; 0x7bc <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:669
  write_register(DYNPD,0);
    1484:	60 e0       	ldi	r22, 0x00	; 0
    1486:	8c e1       	ldi	r24, 0x1C	; 28
    1488:	0e 94 de 03 	call	0x7bc	; 0x7bc <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:673

  // Reset current status
  // Notice reset and flush is the last thing we do
  write_register(NRF_STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
    148c:	60 e7       	ldi	r22, 0x70	; 112
    148e:	87 e0       	ldi	r24, 0x07	; 7
    1490:	0e 94 de 03 	call	0x7bc	; 0x7bc <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]>
setChannel():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:440
/****************************************************************************/

void RF24::setChannel(uint8_t channel)
{
  const uint8_t max_channel = 125;
  write_register(RF_CH,rf24_min(channel,max_channel));
    1494:	6c e4       	ldi	r22, 0x4C	; 76
    1496:	85 e0       	ldi	r24, 0x05	; 5
    1498:	0e 94 de 03 	call	0x7bc	; 0x7bc <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]>
flush_rx():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:321

/****************************************************************************/

uint8_t RF24::flush_rx(void)
{
  return spiTrans( FLUSH_RX );
    149c:	82 ee       	ldi	r24, 0xE2	; 226
    149e:	0e 94 aa 05 	call	0xb54	; 0xb54 <RF24::spiTrans(unsigned char) [clone .constprop.25]>
flush_tx():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:328

/****************************************************************************/

uint8_t RF24::flush_tx(void)
{
  return spiTrans( FLUSH_TX );
    14a2:	81 ee       	ldi	r24, 0xE1	; 225
    14a4:	0e 94 aa 05 	call	0xb54	; 0xb54 <RF24::spiTrans(unsigned char) [clone .constprop.25]>
powerUp():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:766
/****************************************************************************/

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void RF24::powerUp(void)
{
   uint8_t cfg = read_register(NRF_CONFIG);
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	0e 94 19 05 	call	0xa32	; 0xa32 <RF24::read_register(unsigned char) [clone .constprop.28]>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:769

   // if not powered up then power up and wait for the radio to initialize
   if (!(cfg & _BV(PWR_UP))){
    14ae:	81 fd       	sbrc	r24, 1
    14b0:	0b c0       	rjmp	.+22     	; 0x14c8 <main+0x32e>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:770
      write_register(NRF_CONFIG, cfg | _BV(PWR_UP));
    14b2:	68 2f       	mov	r22, r24
    14b4:	62 60       	ori	r22, 0x02	; 2
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	0e 94 de 03 	call	0x7bc	; 0x7bc <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:775

      // For nRF24L01+ to go from power down mode to TX or RX mode it must first pass through stand-by mode.
	  // There must be a delay of Tpd2stby (see Table 16.) after the nRF24L01+ leaves power down mode before
	  // the CEis set high. - Tpd2stby can be up to 5ms per the 1.0 datasheet
      delay(5);
    14bc:	65 e0       	ldi	r22, 0x05	; 5
    14be:	70 e0       	ldi	r23, 0x00	; 0
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	0e 94 8f 02 	call	0x51e	; 0x51e <delay>
begin():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:688

  powerUp(); //Power up by default when begin() is called

  // Enable PTX, do not write CE high so radio will remain in standby I mode ( 130us max to transition to RX or TX instead of 1500us from powerUp )
  // PTX should use only 22uA of power
  write_register(NRF_CONFIG, ( read_register(NRF_CONFIG) ) & ~_BV(PRIM_RX) );
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	0e 94 19 05 	call	0xa32	; 0xa32 <RF24::read_register(unsigned char) [clone .constprop.28]>
    14ce:	68 2f       	mov	r22, r24
    14d0:	6e 7f       	andi	r22, 0xFE	; 254
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	0e 94 de 03 	call	0x7bc	; 0x7bc <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]>
setup():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:52
    analogReference(DEFAULT);

    radio.begin();
    radio.setDataRate( RF24_250KBPS );
    14d8:	82 e0       	ldi	r24, 0x02	; 2
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	0e 94 7e 05 	call	0xafc	; 0xafc <RF24::setDataRate(rf24_datarate_e) [clone .constprop.27]>
setRetries():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1533
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
 write_register(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
    14e0:	65 e3       	ldi	r22, 0x35	; 53
    14e2:	84 e0       	ldi	r24, 0x04	; 4
    14e4:	0e 94 de 03 	call	0x7bc	; 0x7bc <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]>
openWritingPipe():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1133
void RF24::openWritingPipe(const uint8_t *address)
{
  // Note that AVR 8-bit uC's store this LSB first, and the NRF24L01(+)
  // expects it LSB first too, so we're good.

  write_register(RX_ADDR_P0,address, addr_width);
    14e8:	60 91 2a 02 	lds	r22, 0x022A	; 0x80022a <radio+0xd>
    14ec:	8a e0       	ldi	r24, 0x0A	; 10
    14ee:	0e 94 7e 04 	call	0x8fc	; 0x8fc <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.31]>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1134
  write_register(TX_ADDR, address, addr_width);
    14f2:	60 91 2a 02 	lds	r22, 0x022A	; 0x80022a <radio+0xd>
    14f6:	80 e1       	ldi	r24, 0x10	; 16
    14f8:	0e 94 7e 04 	call	0x8fc	; 0x8fc <RF24::write_register(unsigned char, unsigned char const*, unsigned char) [clone .constprop.31]>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:1138

  //const uint8_t max_payload_size = 32;
  //write_register(RX_PW_P0,rf24_min(payload_size,max_payload_size));
  write_register(RX_PW_P0,payload_size);
    14fc:	60 91 23 02 	lds	r22, 0x0223	; 0x800223 <radio+0x6>
    1500:	81 e1       	ldi	r24, 0x11	; 17
    1502:	0e 94 de 03 	call	0x7bc	; 0x7bc <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]>
setup():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:55
    radio.setRetries(3, 5); // delay, count
    radio.openWritingPipe(slaveAddress);
    Serial.println("Initialized radio !");
    1506:	80 e3       	ldi	r24, 0x30	; 48
    1508:	91 e0       	ldi	r25, 0x01	; 1
    150a:	0e 94 c8 03 	call	0x790	; 0x790 <Print::println(char const*) [clone .constprop.40]>
requestFrom():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:426
  // clamp to buffer length
  if (quantity > TWI_BUFFER_SIZE) {
    quantity = TWI_BUFFER_SIZE;
  }
  // set address of targeted slave and read mode
  Buffer[0] = (address << TWI_ADR_BITS) | (1 << TWI_READ_BIT);
    150e:	11 ec       	ldi	r17, 0xC1	; 193
loop():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:60

}

void loop() {
    if (alt_data.newDataReady) {
    1510:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <alt_data+0x9>
    1514:	88 23       	and	r24, r24
    1516:	e1 f3       	breq	.-8      	; 0x1510 <main+0x376>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:61
        digitalWrite(LED1, HIGH);
    1518:	61 e0       	ldi	r22, 0x01	; 1
    151a:	89 e0       	ldi	r24, 0x09	; 9
    151c:	0e 94 be 01 	call	0x37c	; 0x37c <digitalWrite>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:62
        alt_data.newDataReady = false;
    1520:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <alt_data+0x9>
ADC_SetVoltageReference():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_adc.h:256
}
adc_ic_t;

__attribute__((always_inline)) static inline void ADC_SetVoltageReference( adc_vr_t vr )
{
  ADMUX = (ADMUX & ~MASK2(REFS1,REFS0)) | (((vr & B11) >> 0) << REFS0);
    1524:	94 b1       	in	r25, 0x04	; 4
    1526:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <analog_reference>
    152a:	82 95       	swap	r24
    152c:	88 0f       	add	r24, r24
    152e:	88 0f       	add	r24, r24
    1530:	80 7c       	andi	r24, 0xC0	; 192
    1532:	9f 73       	andi	r25, 0x3F	; 63
    1534:	89 2b       	or	r24, r25
    1536:	84 b9       	out	0x04, r24	; 4
ADC_SetInputChannel():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_adc.h:261
}

__attribute__((always_inline)) static inline void ADC_SetInputChannel( adc_ic_t ic )
{
  ADMUX = (ADMUX & ~MASK4(MUX3,MUX2,MUX1,MUX0)) | (ic << MUX0);
    1538:	84 b1       	in	r24, 0x04	; 4
    153a:	80 7f       	andi	r24, 0xF0	; 240
    153c:	84 b9       	out	0x04, r24	; 4
ADC_StartConversion():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_adc.h:266
}

__attribute__((always_inline)) static inline void ADC_StartConversion( void )
{
  ADCSRA |= MASK1( ADSC );
    153e:	1e 9a       	sbi	0x03, 6	; 3
analogRead():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_analog.c:61
  ADC_SetVoltageReference( analog_reference );
  ADC_SetInputChannel( pin );

  ADC_StartConversion();

  while( ADC_ConversionInProgress() );
    1540:	1e 99       	sbic	0x03, 6	; 3
    1542:	fe cf       	rjmp	.-4      	; 0x1540 <main+0x3a6>
ADC_GetDataRegister():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_adc.h:276
  return( (ADCSRA & (1<<ADSC)) != 0 );
}

__attribute__((always_inline)) static inline uint16_t ADC_GetDataRegister( void )
{
  return( ADC );
    1544:	80 b1       	in	r24, 0x00	; 0
    1546:	91 b1       	in	r25, 0x01	; 1
loop():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:63
        batt_v = analogRead(Batt_sense);// ;
    1548:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <batt_v+0x1>
    154c:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <batt_v>
beginTransmission():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:471
  BufferIndex = 1; // reserved by slave address
  BufferLength = BufferIndex;
}

void TwoWire::beginTransmission(int address) {
  beginTransmission((uint8_t)address);
    1550:	80 e6       	ldi	r24, 0x60	; 96
    1552:	0e 94 b0 00 	call	0x160	; 0x160 <TwoWire::beginTransmission(unsigned char) [clone .constprop.50]>
MPL_readAltTemp():
/tmp/arduino_build_376412/sketch/Alt.cpp:101
}

void MPL_readAltTemp(uint32_t *alt, uint16_t *temp) {

    Wire.beginTransmission(ALTI_ADDR);
    Wire.write(0); //STATUS register (reads DR_STATUS reg (0x06))
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	0e 94 7d 00 	call	0xfa	; 0xfa <TwoWire::write(int) [clone .constprop.65]>
requestFrom():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:426
  // clamp to buffer length
  if (quantity > TWI_BUFFER_SIZE) {
    quantity = TWI_BUFFER_SIZE;
  }
  // set address of targeted slave and read mode
  Buffer[0] = (address << TWI_ADR_BITS) | (1 << TWI_READ_BIT);
    155e:	10 93 80 01 	sts	0x0180, r17	; 0x800180 <__data_end>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:429
  // perform blocking read into buffer
  uint8_t ret = USI_TWI_Start_Transceiver_With_Data_Stop(Buffer, quantity,
                                                         sendStop);
    1562:	41 e0       	ldi	r20, 0x01	; 1
    1564:	67 e0       	ldi	r22, 0x07	; 7
    1566:	80 e8       	ldi	r24, 0x80	; 128
    1568:	91 e0       	ldi	r25, 0x01	; 1
    156a:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <USI_TWI_Start_Transceiver_With_Data_Stop>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:431
  // set rx buffer iterator vars
  BufferIndex = 1; // ignore slave address
    156e:	91 e0       	ldi	r25, 0x01	; 1
    1570:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <TwoWire::BufferIndex>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:433
  // check for error
  if (ret == FALSE) {
    1574:	81 11       	cpse	r24, r1
    1576:	37 c1       	rjmp	.+622    	; 0x17e6 <main+0x64c>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:434
    BufferLength = BufferIndex;
    1578:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <TwoWire::BufferLength>
available():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:551

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void) {
  if (BufferLength) {
    157c:	40 91 b4 01 	lds	r20, 0x01B4	; 0x8001b4 <TwoWire::BufferLength>
    1580:	21 e0       	ldi	r18, 0x01	; 1
    1582:	d0 e0       	ldi	r29, 0x00	; 0
    1584:	c0 e0       	ldi	r28, 0x00	; 0
    1586:	81 2c       	mov	r8, r1
    1588:	91 2c       	mov	r9, r1
    158a:	54 01       	movw	r10, r8
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	44 23       	and	r20, r20
    1590:	09 f4       	brne	.+2      	; 0x1594 <main+0x3fa>
    1592:	2d c1       	rjmp	.+602    	; 0x17ee <main+0x654>
read():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:565
// or after requestFrom(address, numBytes)
int TwoWire::read(void) {
  int value = -1;

  // get each successive byte on each call
  if (available()) {
    1594:	24 13       	cpse	r18, r20
    1596:	44 c1       	rjmp	.+648    	; 0x1820 <main+0x686>
main():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:562

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void) {
  int value = -1;
    1598:	8f ef       	ldi	r24, 0xFF	; 255
    159a:	9f ef       	ldi	r25, 0xFF	; 255
MPL_readAltTemp():
/tmp/arduino_build_376412/sketch/Alt.cpp:108
    uint32_t alti = 0; // in 16*meters
    uint16_t tempe = 0; //in 16*degrees
    Wire.requestFrom(ALTI_ADDR, n);//request n bytes from slave device, free up bus after transmission
    for (uint8_t i = 0; i < n; i++) {
        uint8_t d = Wire.read();
        if (i == 0) {
    159c:	33 23       	and	r19, r19
    159e:	41 f0       	breq	.+16     	; 0x15b0 <main+0x416>
/tmp/arduino_build_376412/sketch/Alt.cpp:116
            } else if ( d & 0xF0) { //PTOW-POW-TOW some data was overwritten
                //Serial.print(",ok");
            } else { //no new data available

            }
        } else if (i < 4) {
    15a0:	34 30       	cpi	r19, 0x04	; 4
    15a2:	08 f0       	brcs	.+2      	; 0x15a6 <main+0x40c>
    15a4:	44 c1       	rjmp	.+648    	; 0x182e <main+0x694>
/tmp/arduino_build_376412/sketch/Alt.cpp:117
            alti = (alti << 8) | d;
    15a6:	ba 2c       	mov	r11, r10
    15a8:	a9 2c       	mov	r10, r9
    15aa:	98 2c       	mov	r9, r8
    15ac:	88 24       	eor	r8, r8
    15ae:	88 2a       	or	r8, r24
/tmp/arduino_build_376412/sketch/Alt.cpp:106
    Wire.write(0); //STATUS register (reads DR_STATUS reg (0x06))
    uint8_t n = 6;
    uint32_t alti = 0; // in 16*meters
    uint16_t tempe = 0; //in 16*degrees
    Wire.requestFrom(ALTI_ADDR, n);//request n bytes from slave device, free up bus after transmission
    for (uint8_t i = 0; i < n; i++) {
    15b0:	3f 5f       	subi	r19, 0xFF	; 255
    15b2:	36 30       	cpi	r19, 0x06	; 6
    15b4:	61 f7       	brne	.-40     	; 0x158e <main+0x3f4>
    15b6:	20 93 b3 01 	sts	0x01B3, r18	; 0x8001b3 <TwoWire::BufferIndex>
/tmp/arduino_build_376412/sketch/Alt.cpp:122
            alti = (alti << 8) | d;
        } else {
            tempe = (tempe << 8) | d; //temp is 8MSBs=int value, 8LSBs=[4 decimal, 0b0000].
        }
    }
    *alt = alti >> 4;
    15ba:	75 01       	movw	r14, r10
    15bc:	64 01       	movw	r12, r8
    15be:	44 e0       	ldi	r20, 0x04	; 4
    15c0:	f6 94       	lsr	r15
    15c2:	e7 94       	ror	r14
    15c4:	d7 94       	ror	r13
    15c6:	c7 94       	ror	r12
    15c8:	4a 95       	dec	r20
    15ca:	d1 f7       	brne	.-12     	; 0x15c0 <main+0x426>
/tmp/arduino_build_376412/sketch/Alt.cpp:123
    *temp = tempe >> 4;
    15cc:	54 e0       	ldi	r21, 0x04	; 4
    15ce:	d6 95       	lsr	r29
    15d0:	c7 95       	ror	r28
    15d2:	5a 95       	dec	r21
    15d4:	e1 f7       	brne	.-8      	; 0x15ce <main+0x434>
getEtage():
/tmp/arduino_build_376412/sketch/Alt.cpp:19
    newDataReady = true;

}

uint8_t Alt_Data::getEtage(uint32_t alt) {
    alti = alt;
    15d6:	c0 92 13 02 	sts	0x0213, r12	; 0x800213 <alt_data>
    15da:	d0 92 14 02 	sts	0x0214, r13	; 0x800214 <alt_data+0x1>
    15de:	e0 92 15 02 	sts	0x0215, r14	; 0x800215 <alt_data+0x2>
    15e2:	f0 92 16 02 	sts	0x0216, r15	; 0x800216 <alt_data+0x3>
/tmp/arduino_build_376412/sketch/Alt.cpp:21

    if (alti < alt_RdC) {
    15e6:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <alt_data+0x5>
    15ea:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <alt_data+0x6>
    15ee:	a0 91 1a 02 	lds	r26, 0x021A	; 0x80021a <alt_data+0x7>
    15f2:	b0 91 1b 02 	lds	r27, 0x021B	; 0x80021b <alt_data+0x8>
    15f6:	c8 16       	cp	r12, r24
    15f8:	d9 06       	cpc	r13, r25
    15fa:	ea 06       	cpc	r14, r26
    15fc:	fb 06       	cpc	r15, r27
    15fe:	08 f0       	brcs	.+2      	; 0x1602 <main+0x468>
    1600:	1a c1       	rjmp	.+564    	; 0x1836 <main+0x69c>
/tmp/arduino_build_376412/sketch/Alt.cpp:22
        alt_RdC = alti;
    1602:	c0 92 18 02 	sts	0x0218, r12	; 0x800218 <alt_data+0x5>
    1606:	d0 92 19 02 	sts	0x0219, r13	; 0x800219 <alt_data+0x6>
    160a:	e0 92 1a 02 	sts	0x021A, r14	; 0x80021a <alt_data+0x7>
    160e:	f0 92 1b 02 	sts	0x021B, r15	; 0x80021b <alt_data+0x8>
write():
    1612:	84 e4       	ldi	r24, 0x44	; 68
    1614:	91 e0       	ldi	r25, 0x01	; 1
    1616:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <Print::write(char const*) [clone .part.2] [clone .constprop.61]>
getEtage():
/tmp/arduino_build_376412/sketch/Alt.cpp:33
#ifdef DEBUG_Alt
        Serial.print("rs up, ");
#endif
    }

    etage = (alti - alt_RdC) / FLOOR_HEIGHT;
    161a:	40 90 13 02 	lds	r4, 0x0213	; 0x800213 <alt_data>
    161e:	50 90 14 02 	lds	r5, 0x0214	; 0x800214 <alt_data+0x1>
    1622:	60 90 15 02 	lds	r6, 0x0215	; 0x800215 <alt_data+0x2>
    1626:	70 90 16 02 	lds	r7, 0x0216	; 0x800216 <alt_data+0x3>
    162a:	80 91 18 02 	lds	r24, 0x0218	; 0x800218 <alt_data+0x5>
    162e:	90 91 19 02 	lds	r25, 0x0219	; 0x800219 <alt_data+0x6>
    1632:	a0 91 1a 02 	lds	r26, 0x021A	; 0x80021a <alt_data+0x7>
    1636:	b0 91 1b 02 	lds	r27, 0x021B	; 0x80021b <alt_data+0x8>
    163a:	a3 01       	movw	r20, r6
    163c:	92 01       	movw	r18, r4
    163e:	28 1b       	sub	r18, r24
    1640:	39 0b       	sbc	r19, r25
    1642:	4a 0b       	sbc	r20, r26
    1644:	5b 0b       	sbc	r21, r27
    1646:	ca 01       	movw	r24, r20
    1648:	b9 01       	movw	r22, r18
    164a:	20 e3       	ldi	r18, 0x30	; 48
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	40 e0       	ldi	r20, 0x00	; 0
    1650:	50 e0       	ldi	r21, 0x00	; 0
    1652:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <__udivmodsi4>
    1656:	20 93 17 02 	sts	0x0217, r18	; 0x800217 <alt_data+0x4>
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:103
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    165a:	4a e0       	ldi	r20, 0x0A	; 10
    165c:	c3 01       	movw	r24, r6
    165e:	b2 01       	movw	r22, r4
    1660:	0e 94 77 03 	call	0x6ee	; 0x6ee <Print::printNumber(unsigned long, unsigned char) [clone .constprop.59]>
getEtage():
/tmp/arduino_build_376412/sketch/Alt.cpp:36
#ifdef DEBUG_Alt
    Serial.print(alti);
    Serial.print(',');
    1664:	8c e2       	ldi	r24, 0x2C	; 44
    1666:	0e 94 8b 01 	call	0x316	; 0x316 <Print::print(char) [clone .constprop.63]>
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:103
    166a:	60 91 18 02 	lds	r22, 0x0218	; 0x800218 <alt_data+0x5>
    166e:	70 91 19 02 	lds	r23, 0x0219	; 0x800219 <alt_data+0x6>
    1672:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <alt_data+0x7>
    1676:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <alt_data+0x8>
    167a:	4a e0       	ldi	r20, 0x0A	; 10
    167c:	0e 94 77 03 	call	0x6ee	; 0x6ee <Print::printNumber(unsigned long, unsigned char) [clone .constprop.59]>
getEtage():
/tmp/arduino_build_376412/sketch/Alt.cpp:38
    Serial.print(alt_RdC);
    Serial.print(',');
    1680:	8c e2       	ldi	r24, 0x2C	; 44
    1682:	0e 94 8b 01 	call	0x316	; 0x316 <Print::print(char) [clone .constprop.63]>
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:71
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    1686:	60 91 17 02 	lds	r22, 0x0217	; 0x800217 <alt_data+0x4>
    168a:	70 e0       	ldi	r23, 0x00	; 0
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	80 e0       	ldi	r24, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:103
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    1690:	4a e0       	ldi	r20, 0x0A	; 10
    1692:	0e 94 77 03 	call	0x6ee	; 0x6ee <Print::printNumber(unsigned long, unsigned char) [clone .constprop.59]>
println():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:154
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    1696:	0e 94 90 01 	call	0x320	; 0x320 <Print::println() [clone .constprop.62]>
getEtage():
/tmp/arduino_build_376412/sketch/Alt.cpp:41
    Serial.println(etage);
#endif
    return etage;
    169a:	00 91 17 02 	lds	r16, 0x0217	; 0x800217 <alt_data+0x4>
loop():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:68
        uint32_t alti;
        uint16_t temp;
        MPL_readAltTemp(&alti, &temp);
        uint8_t etage = alt_data.getEtage(alti);
        switch (log_mode) {
    169e:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <log_mode>
    16a2:	81 30       	cpi	r24, 0x01	; 1
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <main+0x50e>
    16a6:	1e c1       	rjmp	.+572    	; 0x18e4 <main+0x74a>
    16a8:	08 f4       	brcc	.+2      	; 0x16ac <main+0x512>
    16aa:	e0 c0       	rjmp	.+448    	; 0x186c <main+0x6d2>
    16ac:	82 30       	cpi	r24, 0x02	; 2
    16ae:	09 f4       	brne	.+2      	; 0x16b2 <main+0x518>
    16b0:	26 c1       	rjmp	.+588    	; 0x18fe <main+0x764>
    16b2:	83 30       	cpi	r24, 0x03	; 3
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <main+0x51e>
    16b6:	fd c0       	rjmp	.+506    	; 0x18b2 <main+0x718>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:88
                Serial.println(batt_v / 1024.0 * 2.5 * 2.0);
                break;
            default:
                break;
        }
        digitalWrite(LED1, LOW);
    16b8:	60 e0       	ldi	r22, 0x00	; 0
    16ba:	89 e0       	ldi	r24, 0x09	; 9
    16bc:	0e 94 be 01 	call	0x37c	; 0x37c <digitalWrite>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:89
        digitalWrite(LED0, HIGH);
    16c0:	61 e0       	ldi	r22, 0x01	; 1
    16c2:	8a e0       	ldi	r24, 0x0A	; 10
    16c4:	0e 94 be 01 	call	0x37c	; 0x37c <digitalWrite>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:91

        dataToSend[3] = (etage << 4) | ((alti >> 14) & 0x0F);
    16c8:	d5 01       	movw	r26, r10
    16ca:	c4 01       	movw	r24, r8
    16cc:	22 e1       	ldi	r18, 0x12	; 18
    16ce:	b6 95       	lsr	r27
    16d0:	a7 95       	ror	r26
    16d2:	97 95       	ror	r25
    16d4:	87 95       	ror	r24
    16d6:	2a 95       	dec	r18
    16d8:	d1 f7       	brne	.-12     	; 0x16ce <main+0x534>
    16da:	8f 70       	andi	r24, 0x0F	; 15
    16dc:	02 95       	swap	r16
    16de:	00 7f       	andi	r16, 0xF0	; 240
    16e0:	80 2b       	or	r24, r16
    16e2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__data_start+0x3>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:92
        dataToSend[2] = alti >> 6;
    16e6:	3a e0       	ldi	r19, 0x0A	; 10
    16e8:	b6 94       	lsr	r11
    16ea:	a7 94       	ror	r10
    16ec:	97 94       	ror	r9
    16ee:	87 94       	ror	r8
    16f0:	3a 95       	dec	r19
    16f2:	d1 f7       	brne	.-12     	; 0x16e8 <main+0x54e>
    16f4:	80 92 02 01 	sts	0x0102, r8	; 0x800102 <__data_start+0x2>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:93
        dataToSend[1] = ((alti << 2) & 0xFC) | ((batt_v >> 8) & 0x03);
    16f8:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <batt_v>
    16fc:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <batt_v+0x1>
    1700:	83 70       	andi	r24, 0x03	; 3
    1702:	cc 0c       	add	r12, r12
    1704:	cc 0c       	add	r12, r12
    1706:	c8 2a       	or	r12, r24
    1708:	c0 92 01 01 	sts	0x0101, r12	; 0x800101 <__data_start+0x1>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:94
        dataToSend[0] = batt_v;
    170c:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
write_payload():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:222
uint8_t RF24::write_payload(const void* buf, uint8_t data_len, const uint8_t writeType)
{
  uint8_t status;
  const uint8_t* current = reinterpret_cast<const uint8_t*>(buf);

   data_len = rf24_min(data_len, payload_size);
    1710:	c0 91 23 02 	lds	r28, 0x0223	; 0x800223 <radio+0x6>
    1714:	dc 2f       	mov	r29, r28
    1716:	c5 30       	cpi	r28, 0x05	; 5
    1718:	08 f0       	brcs	.+2      	; 0x171c <main+0x582>
    171a:	d4 e0       	ldi	r29, 0x04	; 4
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:223
   uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
    171c:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <radio+0x7>
    1720:	cd 1b       	sub	r28, r29
    1722:	81 11       	cpse	r24, r1
main():
    1724:	c0 e0       	ldi	r28, 0x00	; 0
write_payload():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:247
	status = *prx; // status is 1st byte of receive buffer
	endTransaction();

  #else

  beginTransaction();
    1726:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <RF24::beginTransaction() [clone .constprop.33]>
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
    172a:	8d 9a       	sbi	0x11, 5	; 17
    172c:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    172e:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    1730:	89 98       	cbi	0x11, 1	; 17
    1732:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
    1734:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    1736:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    1738:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
    173a:	8d 9a       	sbi	0x11, 5	; 17
    173c:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    173e:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    1740:	89 98       	cbi	0x11, 1	; 17
    1742:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
    1744:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    1746:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    1748:	89 98       	cbi	0x11, 1	; 17
    174a:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
    174c:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    174e:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    1750:	89 98       	cbi	0x11, 1	; 17
    1752:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
    1754:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    1756:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    1758:	89 98       	cbi	0x11, 1	; 17
    175a:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
    175c:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    175e:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    1760:	89 98       	cbi	0x11, 1	; 17
    1762:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
    1764:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    1766:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    1768:	89 98       	cbi	0x11, 1	; 17
    176a:	e0 e0       	ldi	r30, 0x00	; 0
    176c:	f1 e0       	ldi	r31, 0x01	; 1
write_payload():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:249
  status = _SPI.transfer( writeType );
  while ( data_len-- ) {
    176e:	d1 50       	subi	r29, 0x01	; 1
    1770:	08 f4       	brcc	.+2      	; 0x1774 <main+0x5da>
    1772:	d9 c0       	rjmp	.+434    	; 0x1926 <main+0x78c>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:250
    _SPI.transfer(*current++);
    1774:	81 91       	ld	r24, Z+
_ZN7SoftSPIILh6ELh3ELh7ELh0EE11transferBitEhPhh():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/SoftSPI.h:151
  inline __attribute__((always_inline))
  void transferBit(uint8_t bit, uint8_t* rxData, uint8_t txData) {
    if (MODE_CPHA(Mode)) {
      fastDigitalWrite(SckPin, !MODE_CPOL(Mode));
    }
    fastDigitalWrite(MosiPin, txData & (1 << bit));
    1776:	28 2f       	mov	r18, r24
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	22 0f       	add	r18, r18
    177c:	23 2f       	mov	r18, r19
    177e:	22 1f       	adc	r18, r18
    1780:	33 0b       	sbc	r19, r19
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    1782:	23 2b       	or	r18, r19
    1784:	09 f4       	brne	.+2      	; 0x1788 <main+0x5ee>
    1786:	bf c0       	rjmp	.+382    	; 0x1906 <main+0x76c>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
    1788:	8d 9a       	sbi	0x11, 5	; 17
    178a:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    178c:	9f b1       	in	r25, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    178e:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    1790:	86 ff       	sbrs	r24, 6
    1792:	bb c0       	rjmp	.+374    	; 0x190a <main+0x770>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
    1794:	8d 9a       	sbi	0x11, 5	; 17
    1796:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    1798:	9f b1       	in	r25, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    179a:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    179c:	85 ff       	sbrs	r24, 5
    179e:	b7 c0       	rjmp	.+366    	; 0x190e <main+0x774>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
    17a0:	8d 9a       	sbi	0x11, 5	; 17
    17a2:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    17a4:	9f b1       	in	r25, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    17a6:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    17a8:	84 ff       	sbrs	r24, 4
    17aa:	b3 c0       	rjmp	.+358    	; 0x1912 <main+0x778>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
    17ac:	8d 9a       	sbi	0x11, 5	; 17
    17ae:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    17b0:	9f b1       	in	r25, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    17b2:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    17b4:	83 ff       	sbrs	r24, 3
    17b6:	af c0       	rjmp	.+350    	; 0x1916 <main+0x77c>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
    17b8:	8d 9a       	sbi	0x11, 5	; 17
    17ba:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    17bc:	9f b1       	in	r25, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    17be:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    17c0:	82 ff       	sbrs	r24, 2
    17c2:	ab c0       	rjmp	.+342    	; 0x191a <main+0x780>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
    17c4:	8d 9a       	sbi	0x11, 5	; 17
    17c6:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    17c8:	9f b1       	in	r25, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    17ca:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    17cc:	81 ff       	sbrs	r24, 1
    17ce:	a7 c0       	rjmp	.+334    	; 0x191e <main+0x784>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
    17d0:	8d 9a       	sbi	0x11, 5	; 17
    17d2:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    17d4:	9f b1       	in	r25, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    17d6:	89 98       	cbi	0x11, 1	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:112
  uint8_t s;
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    17d8:	80 ff       	sbrs	r24, 0
    17da:	a3 c0       	rjmp	.+326    	; 0x1922 <main+0x788>
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
    *address |= mask;
    17dc:	8d 9a       	sbi	0x11, 5	; 17
    17de:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    17e0:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    17e2:	89 98       	cbi	0x11, 1	; 17
    17e4:	c4 cf       	rjmp	.-120    	; 0x176e <main+0x5d4>
requestFrom():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:437
  // check for error
  if (ret == FALSE) {
    BufferLength = BufferIndex;
    return 0;
  }
  BufferLength = quantity;
    17e6:	87 e0       	ldi	r24, 0x07	; 7
    17e8:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <TwoWire::BufferLength>
    17ec:	c7 ce       	rjmp	.-626    	; 0x157c <main+0x3e2>
USI_TWI_Data_In_Receive_Buffer():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:136

// Check if there is data in the receive buffer.
unsigned char USI_TWI_Data_In_Receive_Buffer(void)
{
  unsigned char tmpRxTail;          // Temporary variable to store volatile
  tmpRxTail = TWI_RxTail;           // Not necessary, but prevents warnings
    17ee:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <TWI_RxTail>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:137
  return (TWI_RxHead - tmpRxTail) & TWI_RX_BUFFER_MASK; // Return 0 (FALSE) if the receive buffer is empty.
    17f2:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <TWI_RxHead>
    17f6:	89 1b       	sub	r24, r25
    17f8:	8f 70       	andi	r24, 0x0F	; 15
read():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:565
// or after requestFrom(address, numBytes)
int TwoWire::read(void) {
  int value = -1;

  // get each successive byte on each call
  if (available()) {
    17fa:	09 f4       	brne	.+2      	; 0x17fe <main+0x664>
    17fc:	cd ce       	rjmp	.-614    	; 0x1598 <main+0x3fe>
USI_TWI_Receive_Byte():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:112
// Returns a byte from the receive buffer. Waits if buffer is empty.
unsigned char USI_TWI_Receive_Byte(void)
{
  unsigned char tmptail;
  unsigned char tmpRxTail; // Temporary variable to store volatile
  tmpRxTail = TWI_RxTail;  // Not necessary, but prevents warnings
    17fe:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <TWI_RxTail>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:113
  while (TWI_RxHead == tmpRxTail)
    1802:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <TWI_RxHead>
    1806:	98 17       	cp	r25, r24
    1808:	e1 f3       	breq	.-8      	; 0x1802 <main+0x668>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:115
    ;
  tmptail    = (TWI_RxTail + 1) & TWI_RX_BUFFER_MASK; // Calculate buffer index
    180a:	e0 91 ab 01 	lds	r30, 0x01AB	; 0x8001ab <TWI_RxTail>
    180e:	ef 5f       	subi	r30, 0xFF	; 255
    1810:	ef 70       	andi	r30, 0x0F	; 15
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:116
  TWI_RxTail = tmptail;                               // Store new index
    1812:	e0 93 ab 01 	sts	0x01AB, r30	; 0x8001ab <TWI_RxTail>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:117
  return TWI_RxBuf[tmptail];                          // Return data from the buffer.
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	e0 58       	subi	r30, 0x80	; 128
    181a:	fe 4f       	sbci	r31, 0xFE	; 254
read():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:570
    if (BufferLength) {
      value = Buffer[BufferIndex];
      ++BufferIndex;
    } else {
      value = USI_TWI_Receive_Byte();
    181c:	80 81       	ld	r24, Z
    181e:	be ce       	rjmp	.-644    	; 0x159c <main+0x402>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:567
  int value = -1;

  // get each successive byte on each call
  if (available()) {
    if (BufferLength) {
      value = Buffer[BufferIndex];
    1820:	e2 2f       	mov	r30, r18
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	e0 58       	subi	r30, 0x80	; 128
    1826:	fe 4f       	sbci	r31, 0xFE	; 254
    1828:	80 81       	ld	r24, Z
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:568
      ++BufferIndex;
    182a:	2f 5f       	subi	r18, 0xFF	; 255
    182c:	b7 ce       	rjmp	.-658    	; 0x159c <main+0x402>
MPL_readAltTemp():
/tmp/arduino_build_376412/sketch/Alt.cpp:119

            }
        } else if (i < 4) {
            alti = (alti << 8) | d;
        } else {
            tempe = (tempe << 8) | d; //temp is 8MSBs=int value, 8LSBs=[4 decimal, 0b0000].
    182e:	68 2f       	mov	r22, r24
    1830:	7c 2f       	mov	r23, r28
    1832:	eb 01       	movw	r28, r22
    1834:	bd ce       	rjmp	.-646    	; 0x15b0 <main+0x416>
getEtage():
/tmp/arduino_build_376412/sketch/Alt.cpp:26
    if (alti < alt_RdC) {
        alt_RdC = alti;
#ifdef DEBUG_Alt
        Serial.print("rs down, ");
#endif
    } else if (alti > (alt_RdC + 15 * FLOOR_HEIGHT)) {
    1836:	80 53       	subi	r24, 0x30	; 48
    1838:	9d 4f       	sbci	r25, 0xFD	; 253
    183a:	af 4f       	sbci	r26, 0xFF	; 255
    183c:	bf 4f       	sbci	r27, 0xFF	; 255
    183e:	8c 15       	cp	r24, r12
    1840:	9d 05       	cpc	r25, r13
    1842:	ae 05       	cpc	r26, r14
    1844:	bf 05       	cpc	r27, r15
    1846:	08 f0       	brcs	.+2      	; 0x184a <main+0x6b0>
    1848:	e8 ce       	rjmp	.-560    	; 0x161a <main+0x480>
/tmp/arduino_build_376412/sketch/Alt.cpp:27
        alt_RdC = alti - (15 * FLOOR_HEIGHT);
    184a:	d7 01       	movw	r26, r14
    184c:	c6 01       	movw	r24, r12
    184e:	80 5d       	subi	r24, 0xD0	; 208
    1850:	92 40       	sbci	r25, 0x02	; 2
    1852:	a1 09       	sbc	r26, r1
    1854:	b1 09       	sbc	r27, r1
    1856:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <alt_data+0x5>
    185a:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <alt_data+0x6>
    185e:	a0 93 1a 02 	sts	0x021A, r26	; 0x80021a <alt_data+0x7>
    1862:	b0 93 1b 02 	sts	0x021B, r27	; 0x80021b <alt_data+0x8>
write():
    1866:	8e e4       	ldi	r24, 0x4E	; 78
    1868:	91 e0       	ldi	r25, 0x01	; 1
    186a:	d5 ce       	rjmp	.-598    	; 0x1616 <main+0x47c>
loop():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:70
        uint16_t temp;
        MPL_readAltTemp(&alti, &temp);
        uint8_t etage = alt_data.getEtage(alti);
        switch (log_mode) {
            case 0://All: alt,temp,batt
                Serial.print(alti / 16.0); //in meters
    186c:	c7 01       	movw	r24, r14
    186e:	b6 01       	movw	r22, r12
    1870:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__floatunsisf>
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	40 e8       	ldi	r20, 0x80	; 128
    187a:	5d e3       	ldi	r21, 0x3D	; 61
    187c:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__mulsf3>
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:108
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1880:	42 e0       	ldi	r20, 0x02	; 2
    1882:	0e 94 fd 05 	call	0xbfa	; 0xbfa <Print::printFloat(double, unsigned char) [clone .constprop.5]>
write():
    1886:	86 e5       	ldi	r24, 0x56	; 86
    1888:	91 e0       	ldi	r25, 0x01	; 1
    188a:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <Print::write(char const*) [clone .part.2] [clone .constprop.61]>
loop():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:72
                Serial.print(",");
                Serial.print(temp / 16.0); //in degrees C
    188e:	be 01       	movw	r22, r28
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__floatunsisf>
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	40 e8       	ldi	r20, 0x80	; 128
    189e:	5d e3       	ldi	r21, 0x3D	; 61
    18a0:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__mulsf3>
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:108
    18a4:	42 e0       	ldi	r20, 0x02	; 2
    18a6:	0e 94 fd 05 	call	0xbfa	; 0xbfa <Print::printFloat(double, unsigned char) [clone .constprop.5]>
write():
    18aa:	86 e5       	ldi	r24, 0x56	; 86
    18ac:	91 e0       	ldi	r25, 0x01	; 1
    18ae:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <Print::write(char const*) [clone .part.2] [clone .constprop.61]>
loop():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:83
                break;
            case 2://temp only
                Serial.println(temp / 16.0); //in degrees C
                break;
            case 3://batt only
                Serial.println(batt_v / 1024.0 * 2.5 * 2.0);
    18b2:	60 91 ae 01 	lds	r22, 0x01AE	; 0x8001ae <batt_v>
    18b6:	70 91 af 01 	lds	r23, 0x01AF	; 0x8001af <batt_v+0x1>
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__floatunsisf>
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	40 e8       	ldi	r20, 0x80	; 128
    18c8:	5a e3       	ldi	r21, 0x3A	; 58
    18ca:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__mulsf3>
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	40 e2       	ldi	r20, 0x20	; 32
    18d4:	50 e4       	ldi	r21, 0x40	; 64
    18d6:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__mulsf3>
    18da:	9b 01       	movw	r18, r22
    18dc:	ac 01       	movw	r20, r24
    18de:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <__addsf3>
    18e2:	0a c0       	rjmp	.+20     	; 0x18f8 <main+0x75e>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:77
                Serial.print(temp / 16.0); //in degrees C
                Serial.print(",");
                Serial.println(batt_v / 1024.0 * 2.5 * 2.0);
                break;
            case 1://alt only
                Serial.println(alti / 16.0); //in meters
    18e4:	c7 01       	movw	r24, r14
    18e6:	b6 01       	movw	r22, r12
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:80
                break;
            case 2://temp only
                Serial.println(temp / 16.0); //in degrees C
    18e8:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <__floatunsisf>
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	40 e8       	ldi	r20, 0x80	; 128
    18f2:	5d e3       	ldi	r21, 0x3D	; 61
    18f4:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__mulsf3>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:83
                break;
            case 3://batt only
                Serial.println(batt_v / 1024.0 * 2.5 * 2.0);
    18f8:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <Print::println(double, int) [clone .constprop.3]>
    18fc:	dd ce       	rjmp	.-582    	; 0x16b8 <main+0x51e>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:80
                break;
            case 1://alt only
                Serial.println(alti / 16.0); //in meters
                break;
            case 2://temp only
                Serial.println(temp / 16.0); //in degrees C
    18fe:	be 01       	movw	r22, r28
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	f1 cf       	rjmp	.-30     	; 0x18e8 <main+0x74e>
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    1906:	8d 98       	cbi	0x11, 5	; 17
    1908:	40 cf       	rjmp	.-384    	; 0x178a <main+0x5f0>
    190a:	8d 98       	cbi	0x11, 5	; 17
    190c:	44 cf       	rjmp	.-376    	; 0x1796 <main+0x5fc>
    190e:	8d 98       	cbi	0x11, 5	; 17
    1910:	48 cf       	rjmp	.-368    	; 0x17a2 <main+0x608>
    1912:	8d 98       	cbi	0x11, 5	; 17
    1914:	4c cf       	rjmp	.-360    	; 0x17ae <main+0x614>
    1916:	8d 98       	cbi	0x11, 5	; 17
    1918:	50 cf       	rjmp	.-352    	; 0x17ba <main+0x620>
    191a:	8d 98       	cbi	0x11, 5	; 17
    191c:	54 cf       	rjmp	.-344    	; 0x17c6 <main+0x62c>
    191e:	8d 98       	cbi	0x11, 5	; 17
    1920:	58 cf       	rjmp	.-336    	; 0x17d2 <main+0x638>
    1922:	8d 98       	cbi	0x11, 5	; 17
    1924:	5c cf       	rjmp	.-328    	; 0x17de <main+0x644>
write_payload():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:252
  }
  while ( blank_len-- ) {
    1926:	c1 50       	subi	r28, 0x01	; 1
    1928:	08 f1       	brcs	.+66     	; 0x196c <main+0x7d2>
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    192a:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
    192c:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    192e:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    1930:	89 98       	cbi	0x11, 1	; 17
    1932:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
    1934:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    1936:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    1938:	89 98       	cbi	0x11, 1	; 17
    193a:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
    193c:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    193e:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    1940:	89 98       	cbi	0x11, 1	; 17
    1942:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
    1944:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    1946:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    1948:	89 98       	cbi	0x11, 1	; 17
    194a:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
    194c:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    194e:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    1950:	89 98       	cbi	0x11, 1	; 17
    1952:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
    1954:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    1956:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    1958:	89 98       	cbi	0x11, 1	; 17
    195a:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
    195c:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    195e:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    1960:	89 98       	cbi	0x11, 1	; 17
    1962:	8d 98       	cbi	0x11, 5	; 17
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:113
  if (address > reinterpret_cast<uint8_t*>(0X3F)) {
    s = SREG;
    cli();
  }
  if (level) {
    *address |= mask;
    1964:	89 9a       	sbi	0x11, 1	; 17
fastDigitalRead():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:128
 * @param[in] pin Arduino pin number
 * @return value read
 */
static inline __attribute__((always_inline))
bool fastDigitalRead(uint8_t pin) {
  return *pinReg(pin) & pinMask(pin);
    1966:	8f b1       	in	r24, 0x0f	; 15
fastBitWriteSafe():
/media/user/Data/Documents/AVR/AVR/libraries/DigitalIO/src/DigitalPin.h:115
    cli();
  }
  if (level) {
    *address |= mask;
  } else {
    *address &= ~mask;
    1968:	89 98       	cbi	0x11, 1	; 17
    196a:	dd cf       	rjmp	.-70     	; 0x1926 <main+0x78c>
write_payload():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:255
    _SPI.transfer(0);
  }  
  endTransaction();
    196c:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <RF24::endTransaction() [clone .constprop.34]>
ce():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:63
/****************************************************************************/

void RF24::ce(bool level)
{
  //Allow for 3-pin use on ATTiny
  if (ce_pin != csn_pin) digitalWrite(ce_pin,level);
    1970:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <radio+0x1>
    1974:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <radio+0x2>
    1978:	89 17       	cp	r24, r25
    197a:	19 f0       	breq	.+6      	; 0x1982 <main+0x7e8>
    197c:	61 e0       	ldi	r22, 0x01	; 1
    197e:	0e 94 be 01 	call	0x37c	; 0x37c <digitalWrite>
get_status():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:348

/****************************************************************************/

uint8_t RF24::get_status(void)
{
  return spiTrans(NOP);
    1982:	8f ef       	ldi	r24, 0xFF	; 255
    1984:	0e 94 aa 05 	call	0xb54	; 0xb54 <RF24::spiTrans(unsigned char) [clone .constprop.25]>
write():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:805
	//Wait until complete or failed
	#if defined (FAILURE_HANDLING) || defined (RF24_LINUX)
		uint32_t timer = millis();
	#endif 
	
	while( ! ( get_status()  & ( _BV(TX_DS) | _BV(MAX_RT) ))) { 
    1988:	80 73       	andi	r24, 0x30	; 48
    198a:	d9 f3       	breq	.-10     	; 0x1982 <main+0x7e8>
ce():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:63
/****************************************************************************/

void RF24::ce(bool level)
{
  //Allow for 3-pin use on ATTiny
  if (ce_pin != csn_pin) digitalWrite(ce_pin,level);
    198c:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <radio+0x1>
    1990:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <radio+0x2>
    1994:	89 17       	cp	r24, r25
    1996:	19 f0       	breq	.+6      	; 0x199e <main+0x804>
    1998:	60 e0       	ldi	r22, 0x00	; 0
    199a:	0e 94 be 01 	call	0x37c	; 0x37c <digitalWrite>
write():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:820
		#endif
	}
    
	ce(LOW);

	uint8_t status = write_register(NRF_STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
    199e:	60 e7       	ldi	r22, 0x70	; 112
    19a0:	87 e0       	ldi	r24, 0x07	; 7
    19a2:	0e 94 de 03 	call	0x7bc	; 0x7bc <RF24::write_register(unsigned char, unsigned char) [clone .constprop.32]>
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:823

  //Max retries exceeded
  if( status & _BV(MAX_RT)){
    19a6:	84 fd       	sbrc	r24, 4
    19a8:	09 c0       	rjmp	.+18     	; 0x19bc <main+0x822>
send():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:130
    //    Serial.print('\t');
    //    Serial.print(batt);
    //    Serial.print('\t');
    //    Serial.print(alti);
    if (rslt) {
        Serial.println("\tAcknowledge received");
    19aa:	88 e5       	ldi	r24, 0x58	; 88
    19ac:	91 e0       	ldi	r25, 0x01	; 1
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:133
    }
    else {
        Serial.println("\tTx failed");
    19ae:	0e 94 c8 03 	call	0x790	; 0x790 <Print::println(char const*) [clone .constprop.40]>
loop():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:96
        dataToSend[3] = (etage << 4) | ((alti >> 14) & 0x0F);
        dataToSend[2] = alti >> 6;
        dataToSend[1] = ((alti << 2) & 0xFC) | ((batt_v >> 8) & 0x03);
        dataToSend[0] = batt_v;
        send();
        digitalWrite(LED0, LOW);
    19b2:	60 e0       	ldi	r22, 0x00	; 0
    19b4:	8a e0       	ldi	r24, 0x0A	; 10
    19b6:	0e 94 be 01 	call	0x37c	; 0x37c <digitalWrite>
    19ba:	aa cd       	rjmp	.-1196   	; 0x1510 <main+0x376>
flush_tx():
/media/user/Data/Documents/AVR/AVR/libraries/RF24/RF24.cpp:328

/****************************************************************************/

uint8_t RF24::flush_tx(void)
{
  return spiTrans( FLUSH_TX );
    19bc:	81 ee       	ldi	r24, 0xE1	; 225
    19be:	0e 94 aa 05 	call	0xb54	; 0xb54 <RF24::spiTrans(unsigned char) [clone .constprop.25]>
send():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:133
    //    Serial.print(alti);
    if (rslt) {
        Serial.println("\tAcknowledge received");
    }
    else {
        Serial.println("\tTx failed");
    19c2:	8e e6       	ldi	r24, 0x6E	; 110
    19c4:	91 e0       	ldi	r25, 0x01	; 1
    19c6:	f3 cf       	rjmp	.-26     	; 0x19ae <main+0x814>

000019c8 <__mulqi3>:
__mulqi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:224
    19c8:	00 24       	eor	r0, r0

000019ca <__mulqi3_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:226
    19ca:	80 fd       	sbrc	r24, 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:227
    19cc:	06 0e       	add	r0, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:228
    19ce:	66 0f       	add	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:229
    19d0:	11 f0       	breq	.+4      	; 0x19d6 <__mulqi3_exit>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:230
    19d2:	86 95       	lsr	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:231
    19d4:	d1 f7       	brne	.-12     	; 0x19ca <__mulqi3_loop>

000019d6 <__mulqi3_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:233
    19d6:	80 2d       	mov	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:234
    19d8:	08 95       	ret

000019da <__subsf3>:
__subsf3():
    19da:	50 58       	subi	r21, 0x80	; 128

000019dc <__addsf3>:
    19dc:	bb 27       	eor	r27, r27
    19de:	aa 27       	eor	r26, r26
    19e0:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <__addsf3x>
    19e4:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__fp_round>
__addsf3():
    19e8:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__fp_pscA>
    19ec:	38 f0       	brcs	.+14     	; 0x19fc <__addsf3+0x20>
    19ee:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__fp_pscB>
    19f2:	20 f0       	brcs	.+8      	; 0x19fc <__addsf3+0x20>
    19f4:	39 f4       	brne	.+14     	; 0x1a04 <__addsf3+0x28>
    19f6:	9f 3f       	cpi	r25, 0xFF	; 255
    19f8:	19 f4       	brne	.+6      	; 0x1a00 <__addsf3+0x24>
    19fa:	26 f4       	brtc	.+8      	; 0x1a04 <__addsf3+0x28>
    19fc:	0c 94 6e 0e 	jmp	0x1cdc	; 0x1cdc <__fp_nan>
    1a00:	0e f4       	brtc	.+2      	; 0x1a04 <__addsf3+0x28>
    1a02:	e0 95       	com	r30
    1a04:	e7 fb       	bst	r30, 7
    1a06:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <__fp_inf>

00001a0a <__addsf3x>:
__addsf3x():
    1a0a:	e9 2f       	mov	r30, r25
    1a0c:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__fp_split3>
    1a10:	58 f3       	brcs	.-42     	; 0x19e8 <__addsf3+0xc>
    1a12:	ba 17       	cp	r27, r26
    1a14:	62 07       	cpc	r22, r18
    1a16:	73 07       	cpc	r23, r19
    1a18:	84 07       	cpc	r24, r20
    1a1a:	95 07       	cpc	r25, r21
    1a1c:	20 f0       	brcs	.+8      	; 0x1a26 <__addsf3x+0x1c>
    1a1e:	79 f4       	brne	.+30     	; 0x1a3e <__addsf3x+0x34>
    1a20:	a6 f5       	brtc	.+104    	; 0x1a8a <__addsf3x+0x80>
    1a22:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__fp_zero>
    1a26:	0e f4       	brtc	.+2      	; 0x1a2a <__addsf3x+0x20>
    1a28:	e0 95       	com	r30
    1a2a:	0b 2e       	mov	r0, r27
    1a2c:	ba 2f       	mov	r27, r26
    1a2e:	a0 2d       	mov	r26, r0
    1a30:	0b 01       	movw	r0, r22
    1a32:	b9 01       	movw	r22, r18
    1a34:	90 01       	movw	r18, r0
    1a36:	0c 01       	movw	r0, r24
    1a38:	ca 01       	movw	r24, r20
    1a3a:	a0 01       	movw	r20, r0
    1a3c:	11 24       	eor	r1, r1
    1a3e:	ff 27       	eor	r31, r31
    1a40:	59 1b       	sub	r21, r25
    1a42:	99 f0       	breq	.+38     	; 0x1a6a <__addsf3x+0x60>
    1a44:	59 3f       	cpi	r21, 0xF9	; 249
    1a46:	50 f4       	brcc	.+20     	; 0x1a5c <__addsf3x+0x52>
    1a48:	50 3e       	cpi	r21, 0xE0	; 224
    1a4a:	68 f1       	brcs	.+90     	; 0x1aa6 <__addsf3x+0x9c>
    1a4c:	1a 16       	cp	r1, r26
    1a4e:	f0 40       	sbci	r31, 0x00	; 0
    1a50:	a2 2f       	mov	r26, r18
    1a52:	23 2f       	mov	r18, r19
    1a54:	34 2f       	mov	r19, r20
    1a56:	44 27       	eor	r20, r20
    1a58:	58 5f       	subi	r21, 0xF8	; 248
    1a5a:	f3 cf       	rjmp	.-26     	; 0x1a42 <__addsf3x+0x38>
    1a5c:	46 95       	lsr	r20
    1a5e:	37 95       	ror	r19
    1a60:	27 95       	ror	r18
    1a62:	a7 95       	ror	r26
    1a64:	f0 40       	sbci	r31, 0x00	; 0
    1a66:	53 95       	inc	r21
    1a68:	c9 f7       	brne	.-14     	; 0x1a5c <__addsf3x+0x52>
    1a6a:	7e f4       	brtc	.+30     	; 0x1a8a <__addsf3x+0x80>
    1a6c:	1f 16       	cp	r1, r31
    1a6e:	ba 0b       	sbc	r27, r26
    1a70:	62 0b       	sbc	r22, r18
    1a72:	73 0b       	sbc	r23, r19
    1a74:	84 0b       	sbc	r24, r20
    1a76:	ba f0       	brmi	.+46     	; 0x1aa6 <__addsf3x+0x9c>
    1a78:	91 50       	subi	r25, 0x01	; 1
    1a7a:	a1 f0       	breq	.+40     	; 0x1aa4 <__addsf3x+0x9a>
    1a7c:	ff 0f       	add	r31, r31
    1a7e:	bb 1f       	adc	r27, r27
    1a80:	66 1f       	adc	r22, r22
    1a82:	77 1f       	adc	r23, r23
    1a84:	88 1f       	adc	r24, r24
    1a86:	c2 f7       	brpl	.-16     	; 0x1a78 <__addsf3x+0x6e>
    1a88:	0e c0       	rjmp	.+28     	; 0x1aa6 <__addsf3x+0x9c>
    1a8a:	ba 0f       	add	r27, r26
    1a8c:	62 1f       	adc	r22, r18
    1a8e:	73 1f       	adc	r23, r19
    1a90:	84 1f       	adc	r24, r20
    1a92:	48 f4       	brcc	.+18     	; 0x1aa6 <__addsf3x+0x9c>
    1a94:	87 95       	ror	r24
    1a96:	77 95       	ror	r23
    1a98:	67 95       	ror	r22
    1a9a:	b7 95       	ror	r27
    1a9c:	f7 95       	ror	r31
    1a9e:	9e 3f       	cpi	r25, 0xFE	; 254
    1aa0:	08 f0       	brcs	.+2      	; 0x1aa4 <__addsf3x+0x9a>
    1aa2:	b0 cf       	rjmp	.-160    	; 0x1a04 <__addsf3+0x28>
    1aa4:	93 95       	inc	r25
    1aa6:	88 0f       	add	r24, r24
    1aa8:	08 f0       	brcs	.+2      	; 0x1aac <__addsf3x+0xa2>
    1aaa:	99 27       	eor	r25, r25
    1aac:	ee 0f       	add	r30, r30
    1aae:	97 95       	ror	r25
    1ab0:	87 95       	ror	r24
    1ab2:	08 95       	ret

00001ab4 <__cmpsf2>:
    1ab4:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <__fp_cmp>
    1ab8:	08 f4       	brcc	.+2      	; 0x1abc <__cmpsf2+0x8>
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	08 95       	ret

00001abe <__divsf3>:
    1abe:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__divsf3x>
    1ac2:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__fp_round>
    1ac6:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__fp_pscB>
    1aca:	58 f0       	brcs	.+22     	; 0x1ae2 <__divsf3+0x24>
    1acc:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__fp_pscA>
    1ad0:	40 f0       	brcs	.+16     	; 0x1ae2 <__divsf3+0x24>
    1ad2:	29 f4       	brne	.+10     	; 0x1ade <__divsf3+0x20>
    1ad4:	5f 3f       	cpi	r21, 0xFF	; 255
__divsf3():
    1ad6:	29 f0       	breq	.+10     	; 0x1ae2 <__divsf3+0x24>
    1ad8:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <__fp_inf>
    1adc:	51 11       	cpse	r21, r1
    1ade:	0c 94 b3 0e 	jmp	0x1d66	; 0x1d66 <__fp_szero>
    1ae2:	0c 94 6e 0e 	jmp	0x1cdc	; 0x1cdc <__fp_nan>

00001ae6 <__divsf3x>:
__divsf3x():
    1ae6:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__fp_split3>
    1aea:	68 f3       	brcs	.-38     	; 0x1ac6 <__divsf3+0x8>

00001aec <__divsf3_pse>:
    1aec:	99 23       	and	r25, r25
    1aee:	b1 f3       	breq	.-20     	; 0x1adc <__divsf3+0x1e>
    1af0:	55 23       	and	r21, r21
    1af2:	91 f3       	breq	.-28     	; 0x1ad8 <__divsf3+0x1a>
    1af4:	95 1b       	sub	r25, r21
    1af6:	55 0b       	sbc	r21, r21
    1af8:	bb 27       	eor	r27, r27
    1afa:	aa 27       	eor	r26, r26
    1afc:	62 17       	cp	r22, r18
    1afe:	73 07       	cpc	r23, r19
    1b00:	84 07       	cpc	r24, r20
    1b02:	38 f0       	brcs	.+14     	; 0x1b12 <__divsf3_pse+0x26>
    1b04:	9f 5f       	subi	r25, 0xFF	; 255
    1b06:	5f 4f       	sbci	r21, 0xFF	; 255
    1b08:	22 0f       	add	r18, r18
    1b0a:	33 1f       	adc	r19, r19
    1b0c:	44 1f       	adc	r20, r20
    1b0e:	aa 1f       	adc	r26, r26
    1b10:	a9 f3       	breq	.-22     	; 0x1afc <__divsf3_pse+0x10>
    1b12:	35 d0       	rcall	.+106    	; 0x1b7e <__divsf3_pse+0x92>
    1b14:	0e 2e       	mov	r0, r30
    1b16:	3a f0       	brmi	.+14     	; 0x1b26 <__divsf3_pse+0x3a>
    1b18:	e0 e8       	ldi	r30, 0x80	; 128
    1b1a:	32 d0       	rcall	.+100    	; 0x1b80 <__divsf3_pse+0x94>
    1b1c:	91 50       	subi	r25, 0x01	; 1
    1b1e:	50 40       	sbci	r21, 0x00	; 0
    1b20:	e6 95       	lsr	r30
    1b22:	00 1c       	adc	r0, r0
    1b24:	ca f7       	brpl	.-14     	; 0x1b18 <__divsf3_pse+0x2c>
    1b26:	2b d0       	rcall	.+86     	; 0x1b7e <__divsf3_pse+0x92>
    1b28:	fe 2f       	mov	r31, r30
    1b2a:	29 d0       	rcall	.+82     	; 0x1b7e <__divsf3_pse+0x92>
    1b2c:	66 0f       	add	r22, r22
    1b2e:	77 1f       	adc	r23, r23
    1b30:	88 1f       	adc	r24, r24
    1b32:	bb 1f       	adc	r27, r27
    1b34:	26 17       	cp	r18, r22
    1b36:	37 07       	cpc	r19, r23
    1b38:	48 07       	cpc	r20, r24
    1b3a:	ab 07       	cpc	r26, r27
    1b3c:	b0 e8       	ldi	r27, 0x80	; 128
    1b3e:	09 f0       	breq	.+2      	; 0x1b42 <__divsf3_pse+0x56>
    1b40:	bb 0b       	sbc	r27, r27
    1b42:	80 2d       	mov	r24, r0
    1b44:	bf 01       	movw	r22, r30
    1b46:	ff 27       	eor	r31, r31
    1b48:	93 58       	subi	r25, 0x83	; 131
    1b4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b4c:	3a f0       	brmi	.+14     	; 0x1b5c <__divsf3_pse+0x70>
    1b4e:	9e 3f       	cpi	r25, 0xFE	; 254
    1b50:	51 05       	cpc	r21, r1
    1b52:	78 f0       	brcs	.+30     	; 0x1b72 <__divsf3_pse+0x86>
    1b54:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <__fp_inf>
    1b58:	0c 94 b3 0e 	jmp	0x1d66	; 0x1d66 <__fp_szero>
    1b5c:	5f 3f       	cpi	r21, 0xFF	; 255
    1b5e:	e4 f3       	brlt	.-8      	; 0x1b58 <__divsf3_pse+0x6c>
    1b60:	98 3e       	cpi	r25, 0xE8	; 232
    1b62:	d4 f3       	brlt	.-12     	; 0x1b58 <__divsf3_pse+0x6c>
    1b64:	86 95       	lsr	r24
    1b66:	77 95       	ror	r23
    1b68:	67 95       	ror	r22
    1b6a:	b7 95       	ror	r27
    1b6c:	f7 95       	ror	r31
    1b6e:	9f 5f       	subi	r25, 0xFF	; 255
    1b70:	c9 f7       	brne	.-14     	; 0x1b64 <__divsf3_pse+0x78>
    1b72:	88 0f       	add	r24, r24
    1b74:	91 1d       	adc	r25, r1
    1b76:	96 95       	lsr	r25
    1b78:	87 95       	ror	r24
    1b7a:	97 f9       	bld	r25, 7
    1b7c:	08 95       	ret
    1b7e:	e1 e0       	ldi	r30, 0x01	; 1
    1b80:	66 0f       	add	r22, r22
    1b82:	77 1f       	adc	r23, r23
    1b84:	88 1f       	adc	r24, r24
    1b86:	bb 1f       	adc	r27, r27
    1b88:	62 17       	cp	r22, r18
    1b8a:	73 07       	cpc	r23, r19
    1b8c:	84 07       	cpc	r24, r20
    1b8e:	ba 07       	cpc	r27, r26
    1b90:	20 f0       	brcs	.+8      	; 0x1b9a <__divsf3_pse+0xae>
    1b92:	62 1b       	sub	r22, r18
    1b94:	73 0b       	sbc	r23, r19
    1b96:	84 0b       	sbc	r24, r20
    1b98:	ba 0b       	sbc	r27, r26
    1b9a:	ee 1f       	adc	r30, r30
    1b9c:	88 f7       	brcc	.-30     	; 0x1b80 <__divsf3_pse+0x94>
    1b9e:	e0 95       	com	r30
    1ba0:	08 95       	ret

00001ba2 <__fixsfsi>:
    1ba2:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <__fixunssfsi>
    1ba6:	68 94       	set
    1ba8:	b1 11       	cpse	r27, r1
    1baa:	0c 94 b3 0e 	jmp	0x1d66	; 0x1d66 <__fp_szero>
    1bae:	08 95       	ret

00001bb0 <__fixunssfsi>:
    1bb0:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <__fp_splitA>
    1bb4:	88 f0       	brcs	.+34     	; 0x1bd8 <__fixunssfsi+0x28>
    1bb6:	9f 57       	subi	r25, 0x7F	; 127
    1bb8:	98 f0       	brcs	.+38     	; 0x1be0 <__fixunssfsi+0x30>
    1bba:	b9 2f       	mov	r27, r25
    1bbc:	99 27       	eor	r25, r25
    1bbe:	b7 51       	subi	r27, 0x17	; 23
    1bc0:	b0 f0       	brcs	.+44     	; 0x1bee <__fixunssfsi+0x3e>
__fixunssfsi():
    1bc2:	e1 f0       	breq	.+56     	; 0x1bfc <__fixunssfsi+0x4c>
    1bc4:	66 0f       	add	r22, r22
    1bc6:	77 1f       	adc	r23, r23
    1bc8:	88 1f       	adc	r24, r24
    1bca:	99 1f       	adc	r25, r25
    1bcc:	1a f0       	brmi	.+6      	; 0x1bd4 <__fixunssfsi+0x24>
    1bce:	ba 95       	dec	r27
    1bd0:	c9 f7       	brne	.-14     	; 0x1bc4 <__fixunssfsi+0x14>
    1bd2:	14 c0       	rjmp	.+40     	; 0x1bfc <__fixunssfsi+0x4c>
    1bd4:	b1 30       	cpi	r27, 0x01	; 1
    1bd6:	91 f0       	breq	.+36     	; 0x1bfc <__fixunssfsi+0x4c>
    1bd8:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <__fp_zero>
    1bdc:	b1 e0       	ldi	r27, 0x01	; 1
    1bde:	08 95       	ret
    1be0:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__fp_zero>
    1be4:	67 2f       	mov	r22, r23
    1be6:	78 2f       	mov	r23, r24
    1be8:	88 27       	eor	r24, r24
    1bea:	b8 5f       	subi	r27, 0xF8	; 248
    1bec:	39 f0       	breq	.+14     	; 0x1bfc <__fixunssfsi+0x4c>
    1bee:	b9 3f       	cpi	r27, 0xF9	; 249
    1bf0:	cc f3       	brlt	.-14     	; 0x1be4 <__fixunssfsi+0x34>
    1bf2:	86 95       	lsr	r24
    1bf4:	77 95       	ror	r23
    1bf6:	67 95       	ror	r22
    1bf8:	b3 95       	inc	r27
    1bfa:	d9 f7       	brne	.-10     	; 0x1bf2 <__fixunssfsi+0x42>
    1bfc:	3e f4       	brtc	.+14     	; 0x1c0c <__fixunssfsi+0x5c>
    1bfe:	90 95       	com	r25
    1c00:	80 95       	com	r24
    1c02:	70 95       	com	r23
    1c04:	61 95       	neg	r22
    1c06:	7f 4f       	sbci	r23, 0xFF	; 255
    1c08:	8f 4f       	sbci	r24, 0xFF	; 255
    1c0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1c0c:	08 95       	ret

00001c0e <__floatunsisf>:
__floatunsisf():
    1c0e:	e8 94       	clt
    1c10:	09 c0       	rjmp	.+18     	; 0x1c24 <__floatsisf+0x12>

00001c12 <__floatsisf>:
    1c12:	97 fb       	bst	r25, 7
    1c14:	3e f4       	brtc	.+14     	; 0x1c24 <__floatsisf+0x12>
    1c16:	90 95       	com	r25
    1c18:	80 95       	com	r24
    1c1a:	70 95       	com	r23
    1c1c:	61 95       	neg	r22
    1c1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c20:	8f 4f       	sbci	r24, 0xFF	; 255
    1c22:	9f 4f       	sbci	r25, 0xFF	; 255
    1c24:	99 23       	and	r25, r25
    1c26:	a9 f0       	breq	.+42     	; 0x1c52 <__floatsisf+0x40>
    1c28:	f9 2f       	mov	r31, r25
    1c2a:	96 e9       	ldi	r25, 0x96	; 150
    1c2c:	bb 27       	eor	r27, r27
    1c2e:	93 95       	inc	r25
    1c30:	f6 95       	lsr	r31
    1c32:	87 95       	ror	r24
    1c34:	77 95       	ror	r23
    1c36:	67 95       	ror	r22
    1c38:	b7 95       	ror	r27
    1c3a:	f1 11       	cpse	r31, r1
    1c3c:	f8 cf       	rjmp	.-16     	; 0x1c2e <__floatsisf+0x1c>
    1c3e:	fa f4       	brpl	.+62     	; 0x1c7e <__floatsisf+0x6c>
    1c40:	bb 0f       	add	r27, r27
    1c42:	11 f4       	brne	.+4      	; 0x1c48 <__floatsisf+0x36>
    1c44:	60 ff       	sbrs	r22, 0
    1c46:	1b c0       	rjmp	.+54     	; 0x1c7e <__floatsisf+0x6c>
    1c48:	6f 5f       	subi	r22, 0xFF	; 255
    1c4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4c:	8f 4f       	sbci	r24, 0xFF	; 255
    1c4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c50:	16 c0       	rjmp	.+44     	; 0x1c7e <__floatsisf+0x6c>
    1c52:	88 23       	and	r24, r24
    1c54:	11 f0       	breq	.+4      	; 0x1c5a <__floatsisf+0x48>
    1c56:	96 e9       	ldi	r25, 0x96	; 150
    1c58:	11 c0       	rjmp	.+34     	; 0x1c7c <__floatsisf+0x6a>
    1c5a:	77 23       	and	r23, r23
    1c5c:	21 f0       	breq	.+8      	; 0x1c66 <__floatsisf+0x54>
    1c5e:	9e e8       	ldi	r25, 0x8E	; 142
    1c60:	87 2f       	mov	r24, r23
    1c62:	76 2f       	mov	r23, r22
    1c64:	05 c0       	rjmp	.+10     	; 0x1c70 <__floatsisf+0x5e>
    1c66:	66 23       	and	r22, r22
    1c68:	71 f0       	breq	.+28     	; 0x1c86 <__floatsisf+0x74>
    1c6a:	96 e8       	ldi	r25, 0x86	; 134
    1c6c:	86 2f       	mov	r24, r22
    1c6e:	70 e0       	ldi	r23, 0x00	; 0
    1c70:	60 e0       	ldi	r22, 0x00	; 0
    1c72:	2a f0       	brmi	.+10     	; 0x1c7e <__floatsisf+0x6c>
    1c74:	9a 95       	dec	r25
    1c76:	66 0f       	add	r22, r22
    1c78:	77 1f       	adc	r23, r23
    1c7a:	88 1f       	adc	r24, r24
    1c7c:	da f7       	brpl	.-10     	; 0x1c74 <__floatsisf+0x62>
    1c7e:	88 0f       	add	r24, r24
    1c80:	96 95       	lsr	r25
    1c82:	87 95       	ror	r24
    1c84:	97 f9       	bld	r25, 7
    1c86:	08 95       	ret

00001c88 <__fp_cmp>:
__fp_cmp():
    1c88:	99 0f       	add	r25, r25
    1c8a:	00 08       	sbc	r0, r0
    1c8c:	55 0f       	add	r21, r21
    1c8e:	aa 0b       	sbc	r26, r26
    1c90:	e0 e8       	ldi	r30, 0x80	; 128
    1c92:	fe ef       	ldi	r31, 0xFE	; 254
    1c94:	16 16       	cp	r1, r22
    1c96:	17 06       	cpc	r1, r23
    1c98:	e8 07       	cpc	r30, r24
    1c9a:	f9 07       	cpc	r31, r25
    1c9c:	c0 f0       	brcs	.+48     	; 0x1cce <__fp_cmp+0x46>
    1c9e:	12 16       	cp	r1, r18
    1ca0:	13 06       	cpc	r1, r19
    1ca2:	e4 07       	cpc	r30, r20
    1ca4:	f5 07       	cpc	r31, r21
    1ca6:	98 f0       	brcs	.+38     	; 0x1cce <__fp_cmp+0x46>
    1ca8:	62 1b       	sub	r22, r18
    1caa:	73 0b       	sbc	r23, r19
    1cac:	84 0b       	sbc	r24, r20
    1cae:	95 0b       	sbc	r25, r21
    1cb0:	39 f4       	brne	.+14     	; 0x1cc0 <__fp_cmp+0x38>
    1cb2:	0a 26       	eor	r0, r26
    1cb4:	61 f0       	breq	.+24     	; 0x1cce <__fp_cmp+0x46>
    1cb6:	23 2b       	or	r18, r19
    1cb8:	24 2b       	or	r18, r20
    1cba:	25 2b       	or	r18, r21
    1cbc:	21 f4       	brne	.+8      	; 0x1cc6 <__fp_cmp+0x3e>
    1cbe:	08 95       	ret
    1cc0:	0a 26       	eor	r0, r26
    1cc2:	09 f4       	brne	.+2      	; 0x1cc6 <__fp_cmp+0x3e>
    1cc4:	a1 40       	sbci	r26, 0x01	; 1
    1cc6:	a6 95       	lsr	r26
    1cc8:	8f ef       	ldi	r24, 0xFF	; 255
    1cca:	81 1d       	adc	r24, r1
    1ccc:	81 1d       	adc	r24, r1
    1cce:	08 95       	ret

00001cd0 <__fp_inf>:
__fp_inf():
    1cd0:	97 f9       	bld	r25, 7
    1cd2:	9f 67       	ori	r25, 0x7F	; 127
    1cd4:	80 e8       	ldi	r24, 0x80	; 128
    1cd6:	70 e0       	ldi	r23, 0x00	; 0
    1cd8:	60 e0       	ldi	r22, 0x00	; 0
    1cda:	08 95       	ret

00001cdc <__fp_nan>:
__fp_nan():
    1cdc:	9f ef       	ldi	r25, 0xFF	; 255
    1cde:	80 ec       	ldi	r24, 0xC0	; 192
    1ce0:	08 95       	ret

00001ce2 <__fp_pscA>:
__fp_pscA():
    1ce2:	00 24       	eor	r0, r0
    1ce4:	0a 94       	dec	r0
    1ce6:	16 16       	cp	r1, r22
    1ce8:	17 06       	cpc	r1, r23
    1cea:	18 06       	cpc	r1, r24
    1cec:	09 06       	cpc	r0, r25
    1cee:	08 95       	ret

00001cf0 <__fp_pscB>:
__fp_pscB():
    1cf0:	00 24       	eor	r0, r0
    1cf2:	0a 94       	dec	r0
    1cf4:	12 16       	cp	r1, r18
    1cf6:	13 06       	cpc	r1, r19
    1cf8:	14 06       	cpc	r1, r20
    1cfa:	05 06       	cpc	r0, r21
    1cfc:	08 95       	ret

00001cfe <__fp_round>:
__fp_round():
    1cfe:	09 2e       	mov	r0, r25
    1d00:	03 94       	inc	r0
    1d02:	00 0c       	add	r0, r0
    1d04:	11 f4       	brne	.+4      	; 0x1d0a <__fp_round+0xc>
    1d06:	88 23       	and	r24, r24
    1d08:	52 f0       	brmi	.+20     	; 0x1d1e <__fp_round+0x20>
    1d0a:	bb 0f       	add	r27, r27
    1d0c:	40 f4       	brcc	.+16     	; 0x1d1e <__fp_round+0x20>
    1d0e:	bf 2b       	or	r27, r31
    1d10:	11 f4       	brne	.+4      	; 0x1d16 <__fp_round+0x18>
    1d12:	60 ff       	sbrs	r22, 0
    1d14:	04 c0       	rjmp	.+8      	; 0x1d1e <__fp_round+0x20>
    1d16:	6f 5f       	subi	r22, 0xFF	; 255
    1d18:	7f 4f       	sbci	r23, 0xFF	; 255
    1d1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1e:	08 95       	ret

00001d20 <__fp_split3>:
__fp_split3():
    1d20:	57 fd       	sbrc	r21, 7
    1d22:	90 58       	subi	r25, 0x80	; 128
    1d24:	44 0f       	add	r20, r20
    1d26:	55 1f       	adc	r21, r21
    1d28:	59 f0       	breq	.+22     	; 0x1d40 <__fp_splitA+0x10>
    1d2a:	5f 3f       	cpi	r21, 0xFF	; 255
    1d2c:	71 f0       	breq	.+28     	; 0x1d4a <__fp_splitA+0x1a>
    1d2e:	47 95       	ror	r20

00001d30 <__fp_splitA>:
    1d30:	88 0f       	add	r24, r24
    1d32:	97 fb       	bst	r25, 7
    1d34:	99 1f       	adc	r25, r25
    1d36:	61 f0       	breq	.+24     	; 0x1d50 <__fp_splitA+0x20>
    1d38:	9f 3f       	cpi	r25, 0xFF	; 255
    1d3a:	79 f0       	breq	.+30     	; 0x1d5a <__fp_splitA+0x2a>
    1d3c:	87 95       	ror	r24
    1d3e:	08 95       	ret
    1d40:	12 16       	cp	r1, r18
    1d42:	13 06       	cpc	r1, r19
    1d44:	14 06       	cpc	r1, r20
    1d46:	55 1f       	adc	r21, r21
    1d48:	f2 cf       	rjmp	.-28     	; 0x1d2e <__fp_split3+0xe>
    1d4a:	46 95       	lsr	r20
    1d4c:	f1 df       	rcall	.-30     	; 0x1d30 <__fp_splitA>
    1d4e:	08 c0       	rjmp	.+16     	; 0x1d60 <__fp_splitA+0x30>
    1d50:	16 16       	cp	r1, r22
    1d52:	17 06       	cpc	r1, r23
    1d54:	18 06       	cpc	r1, r24
    1d56:	99 1f       	adc	r25, r25
    1d58:	f1 cf       	rjmp	.-30     	; 0x1d3c <__fp_splitA+0xc>
    1d5a:	86 95       	lsr	r24
    1d5c:	71 05       	cpc	r23, r1
    1d5e:	61 05       	cpc	r22, r1
    1d60:	08 94       	sec
    1d62:	08 95       	ret

00001d64 <__fp_zero>:
__fp_zero():
    1d64:	e8 94       	clt

00001d66 <__fp_szero>:
    1d66:	bb 27       	eor	r27, r27
    1d68:	66 27       	eor	r22, r22
    1d6a:	77 27       	eor	r23, r23
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	97 f9       	bld	r25, 7
    1d70:	08 95       	ret

00001d72 <__gesf2>:
__gesf2():
    1d72:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <__fp_cmp>
    1d76:	08 f4       	brcc	.+2      	; 0x1d7a <__gesf2+0x8>
    1d78:	8f ef       	ldi	r24, 0xFF	; 255
    1d7a:	08 95       	ret

00001d7c <__mulsf3>:
__mulsf3():
    1d7c:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__mulsf3x>
    1d80:	0c 94 7f 0e 	jmp	0x1cfe	; 0x1cfe <__fp_round>
    1d84:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__fp_pscA>
    1d88:	38 f0       	brcs	.+14     	; 0x1d98 <__mulsf3+0x1c>
    1d8a:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__fp_pscB>
    1d8e:	20 f0       	brcs	.+8      	; 0x1d98 <__mulsf3+0x1c>
    1d90:	95 23       	and	r25, r21
    1d92:	11 f0       	breq	.+4      	; 0x1d98 <__mulsf3+0x1c>
    1d94:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <__fp_inf>
    1d98:	0c 94 6e 0e 	jmp	0x1cdc	; 0x1cdc <__fp_nan>
    1d9c:	0c 94 b3 0e 	jmp	0x1d66	; 0x1d66 <__fp_szero>

00001da0 <__mulsf3x>:
__mulsf3x():
    1da0:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__fp_split3>
    1da4:	78 f3       	brcs	.-34     	; 0x1d84 <__mulsf3+0x8>

00001da6 <__mulsf3_pse>:
    1da6:	99 23       	and	r25, r25
    1da8:	c9 f3       	breq	.-14     	; 0x1d9c <__mulsf3+0x20>
    1daa:	55 23       	and	r21, r21
    1dac:	b9 f3       	breq	.-18     	; 0x1d9c <__mulsf3+0x20>
    1dae:	95 0f       	add	r25, r21
    1db0:	50 e0       	ldi	r21, 0x00	; 0
    1db2:	55 1f       	adc	r21, r21
    1db4:	aa 27       	eor	r26, r26
    1db6:	ee 27       	eor	r30, r30
    1db8:	ff 27       	eor	r31, r31
    1dba:	bb 27       	eor	r27, r27
    1dbc:	00 24       	eor	r0, r0
    1dbe:	08 94       	sec
    1dc0:	67 95       	ror	r22
    1dc2:	20 f4       	brcc	.+8      	; 0x1dcc <__mulsf3_pse+0x26>
    1dc4:	e2 0f       	add	r30, r18
    1dc6:	f3 1f       	adc	r31, r19
    1dc8:	b4 1f       	adc	r27, r20
    1dca:	0a 1e       	adc	r0, r26
    1dcc:	22 0f       	add	r18, r18
    1dce:	33 1f       	adc	r19, r19
    1dd0:	44 1f       	adc	r20, r20
    1dd2:	aa 1f       	adc	r26, r26
    1dd4:	66 95       	lsr	r22
    1dd6:	a9 f7       	brne	.-22     	; 0x1dc2 <__mulsf3_pse+0x1c>
    1dd8:	77 95       	ror	r23
    1dda:	30 f4       	brcc	.+12     	; 0x1de8 <__mulsf3_pse+0x42>
    1ddc:	f3 0f       	add	r31, r19
    1dde:	b4 1f       	adc	r27, r20
    1de0:	0a 1e       	adc	r0, r26
    1de2:	12 1e       	adc	r1, r18
    1de4:	08 f4       	brcc	.+2      	; 0x1de8 <__mulsf3_pse+0x42>
    1de6:	63 95       	inc	r22
    1de8:	33 0f       	add	r19, r19
    1dea:	44 1f       	adc	r20, r20
    1dec:	aa 1f       	adc	r26, r26
    1dee:	22 1f       	adc	r18, r18
    1df0:	76 95       	lsr	r23
    1df2:	99 f7       	brne	.-26     	; 0x1dda <__mulsf3_pse+0x34>
    1df4:	87 95       	ror	r24
    1df6:	20 f4       	brcc	.+8      	; 0x1e00 <__mulsf3_pse+0x5a>
    1df8:	b4 0f       	add	r27, r20
    1dfa:	0a 1e       	adc	r0, r26
    1dfc:	12 1e       	adc	r1, r18
    1dfe:	63 1f       	adc	r22, r19
    1e00:	44 0f       	add	r20, r20
    1e02:	aa 1f       	adc	r26, r26
    1e04:	22 1f       	adc	r18, r18
    1e06:	33 1f       	adc	r19, r19
    1e08:	86 95       	lsr	r24
    1e0a:	a9 f7       	brne	.-22     	; 0x1df6 <__mulsf3_pse+0x50>
    1e0c:	86 2f       	mov	r24, r22
    1e0e:	71 2d       	mov	r23, r1
    1e10:	60 2d       	mov	r22, r0
    1e12:	11 24       	eor	r1, r1
    1e14:	9f 57       	subi	r25, 0x7F	; 127
    1e16:	50 40       	sbci	r21, 0x00	; 0
    1e18:	9a f0       	brmi	.+38     	; 0x1e40 <__mulsf3_pse+0x9a>
    1e1a:	f1 f0       	breq	.+60     	; 0x1e58 <__mulsf3_pse+0xb2>
    1e1c:	88 23       	and	r24, r24
    1e1e:	4a f0       	brmi	.+18     	; 0x1e32 <__mulsf3_pse+0x8c>
    1e20:	ee 0f       	add	r30, r30
    1e22:	ff 1f       	adc	r31, r31
    1e24:	bb 1f       	adc	r27, r27
    1e26:	66 1f       	adc	r22, r22
    1e28:	77 1f       	adc	r23, r23
    1e2a:	88 1f       	adc	r24, r24
    1e2c:	91 50       	subi	r25, 0x01	; 1
    1e2e:	50 40       	sbci	r21, 0x00	; 0
    1e30:	a9 f7       	brne	.-22     	; 0x1e1c <__mulsf3_pse+0x76>
    1e32:	9e 3f       	cpi	r25, 0xFE	; 254
    1e34:	51 05       	cpc	r21, r1
    1e36:	80 f0       	brcs	.+32     	; 0x1e58 <__mulsf3_pse+0xb2>
    1e38:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <__fp_inf>
    1e3c:	0c 94 b3 0e 	jmp	0x1d66	; 0x1d66 <__fp_szero>
    1e40:	5f 3f       	cpi	r21, 0xFF	; 255
    1e42:	e4 f3       	brlt	.-8      	; 0x1e3c <__mulsf3_pse+0x96>
    1e44:	98 3e       	cpi	r25, 0xE8	; 232
    1e46:	d4 f3       	brlt	.-12     	; 0x1e3c <__mulsf3_pse+0x96>
    1e48:	86 95       	lsr	r24
    1e4a:	77 95       	ror	r23
    1e4c:	67 95       	ror	r22
    1e4e:	b7 95       	ror	r27
    1e50:	f7 95       	ror	r31
    1e52:	e7 95       	ror	r30
    1e54:	9f 5f       	subi	r25, 0xFF	; 255
    1e56:	c1 f7       	brne	.-16     	; 0x1e48 <__mulsf3_pse+0xa2>
    1e58:	fe 2b       	or	r31, r30
    1e5a:	88 0f       	add	r24, r24
    1e5c:	91 1d       	adc	r25, r1
    1e5e:	96 95       	lsr	r25
    1e60:	87 95       	ror	r24
    1e62:	97 f9       	bld	r25, 7
    1e64:	08 95       	ret

00001e66 <__unordsf2>:
    1e66:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <__fp_cmp>
    1e6a:	88 0b       	sbc	r24, r24
    1e6c:	99 0b       	sbc	r25, r25
    1e6e:	08 95       	ret

00001e70 <__udivmodsi4>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    1e70:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    1e72:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    1e74:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    1e76:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    1e78:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    1e7a:	0d c0       	rjmp	.+26     	; 0x1e96 <__udivmodsi4_ep>

00001e7c <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    1e7c:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    1e7e:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    1e80:	ee 1f       	adc	r30, r30
__udivmodsi4_loop():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    1e82:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    1e84:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    1e86:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    1e88:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    1e8a:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    1e8c:	20 f0       	brcs	.+8      	; 0x1e96 <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    1e8e:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    1e90:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    1e92:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    1e94:	f5 0b       	sbc	r31, r21

00001e96 <__udivmodsi4_ep>:
__udivmodsi4_ep():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    1e96:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    1e98:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    1e9a:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    1e9c:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1e9e:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1ea0:	69 f7       	brne	.-38     	; 0x1e7c <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1ea2:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1ea4:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    1ea6:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    1ea8:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    1eaa:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    1eac:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1eae:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1eb0:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1eb2:	08 95       	ret

00001eb4 <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1eb4:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1eb6:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    1eb8:	05 90       	lpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1eba:	f4 91       	lpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1ebc:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1ebe:	09 94       	ijmp

00001ec0 <_exit>:
exit():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1ec0:	f8 94       	cli

00001ec2 <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1ec2:	ff cf       	rjmp	.-2      	; 0x1ec2 <__stop_program>
