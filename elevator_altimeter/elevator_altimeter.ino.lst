
/tmp/arduino_build_776089/elevator_altimeter.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__ctors_end>
       4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
       8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
       c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      10:	0c 94 ce 05 	jmp	0xb9c	; 0xb9c <__vector_4>
      14:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      18:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      1c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      20:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      24:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      28:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      2c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      30:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <__vector_12>
      34:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      38:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      3c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      40:	0c 94 be 04 	jmp	0x97c	; 0x97c <__vector_16>
      44:	0c 94 98 04 	jmp	0x930	; 0x930 <__vector_17>
      48:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      4c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      50:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      54:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      58:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      5c:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__vector_23>
      60:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__vector_24>
      64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      68:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      6c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>

00000070 <__trampolines_end>:
__trampolines_start():
      70:	00 2f       	mov	r16, r16
      72:	2b 27       	eor	r18, r27

00000074 <port_to_mode_PGM>:
      74:	00 30 2c 28                                         .0,(

00000078 <port_to_pullup_PGM>:
      78:	00 32 2e 2a                                         .2.*

0000007c <port_to_output_PGM>:
      7c:	00 31 2d 29                                         .1-)

00000080 <digital_pin_to_port_PGM>:
      80:	02 01 01 01 01 01 01 01 01 03 03 03 03 03 02 02     ................
      90:	02 03                                               ..

00000092 <digital_pin_to_bit_mask_PGM>:
      92:	01 80 40 20 10 08 04 02 01 20 10 04 02 01 08 04     ..@ ..... ......
      a2:	02 08                                               ..

000000a4 <__ctors_start>:
__ctors_start():
      a4:	e9 07       	cpc	r30, r25

000000a6 <__ctors_end>:
__dtors_end():
      a6:	11 24       	eor	r1, r1
      a8:	1f be       	out	0x3f, r1	; 63
      aa:	cf ef       	ldi	r28, 0xFF	; 255
      ac:	d4 e0       	ldi	r29, 0x04	; 4
      ae:	de bf       	out	0x3e, r29	; 62
      b0:	cd bf       	out	0x3d, r28	; 61

000000b2 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      b2:	21 e0       	ldi	r18, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      b4:	a0 e3       	ldi	r26, 0x30	; 48
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      b6:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      bc:	a1 3c       	cpi	r26, 0xC1	; 193
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
      be:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>

000000c2 <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      c2:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      c4:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      c6:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      c8:	e8 e2       	ldi	r30, 0x28	; 40
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      ca:	f5 e1       	ldi	r31, 0x15	; 21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      cc:	02 c0       	rjmp	.+4      	; 0xd2 <__do_copy_data+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      ce:	05 90       	lpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      d0:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      d2:	a0 33       	cpi	r26, 0x30	; 48
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      d4:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      d6:	d9 f7       	brne	.-10     	; 0xce <__do_copy_data+0xc>

000000d8 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
      d8:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
      da:	c3 e5       	ldi	r28, 0x53	; 83
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
      dc:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
      de:	04 c0       	rjmp	.+8      	; 0xe8 <__do_global_ctors+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
      e0:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
      e2:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
      e4:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
      e8:	c2 35       	cpi	r28, 0x52	; 82
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
      ea:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
      ec:	c9 f7       	brne	.-14     	; 0xe0 <__do_global_ctors+0x8>
      ee:	0e 94 18 06 	call	0xc30	; 0xc30 <main>
      f2:	0c 94 92 0a 	jmp	0x1524	; 0x1524 <_exit>

000000f6 <__bad_interrupt>:
__vector_22():
      f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fa <TwoWire::write(int) [clone .constprop.36]>:
_ZN7TwoWire5writeEi.constprop.36():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:507

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data) {
  if (transmitting) { // in master transmitter mode
      fa:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <TwoWire::transmitting>
      fe:	99 23       	and	r25, r25
     100:	a1 f0       	breq	.+40     	; 0x12a <TwoWire::write(int) [clone .constprop.36]+0x30>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:509
    // don't bother if buffer is full
    if (BufferLength >= TWI_BUFFER_SIZE) {
     102:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <TwoWire::BufferLength>
     106:	90 32       	cpi	r25, 0x20	; 32
     108:	40 f5       	brcc	.+80     	; 0x15a <TwoWire::write(int) [clone .constprop.36]+0x60>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:513
      return 0;
    }
    // put byte in tx buffer
    Buffer[BufferIndex] = data;
     10a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <TwoWire::BufferIndex>
     10e:	e9 2f       	mov	r30, r25
     110:	f0 e0       	ldi	r31, 0x00	; 0
     112:	e0 5d       	subi	r30, 0xD0	; 208
     114:	fe 4f       	sbci	r31, 0xFE	; 254
     116:	80 83       	st	Z, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:514
    ++BufferIndex;
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	89 0f       	add	r24, r25
     11c:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <TwoWire::BufferIndex>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:516
    // update amount in buffer
    BufferLength = BufferIndex;
     120:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <TwoWire::BufferLength>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:525
      return 0;
    }
    // reply to master
    USI_TWI_Transmit_Byte(data);
  }
  return 1;
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	08 95       	ret
USI_TWI_Space_In_Transmission_Buffer():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:144

// Check if there is space in the transmission buffer.
unsigned char USI_TWI_Space_In_Transmission_Buffer(void)
{
  unsigned char tmpTxHead;
  tmpTxHead = (TWI_TxHead + 1) & TWI_TX_BUFFER_MASK; // Calculate next buffer index.
     12a:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <TWI_TxHead>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:145
  return (TWI_TxTail - tmpTxHead) & TWI_TX_BUFFER_MASK; // Return 0 (FALSE) if the transmission buffer is full.
     12e:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <TWI_TxTail>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:144

// Check if there is space in the transmission buffer.
unsigned char USI_TWI_Space_In_Transmission_Buffer(void)
{
  unsigned char tmpTxHead;
  tmpTxHead = (TWI_TxHead + 1) & TWI_TX_BUFFER_MASK; // Calculate next buffer index.
     132:	2f 5f       	subi	r18, 0xFF	; 255
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:145
  return (TWI_TxTail - tmpTxHead) & TWI_TX_BUFFER_MASK; // Return 0 (FALSE) if the transmission buffer is full.
     134:	92 1b       	sub	r25, r18
     136:	9f 70       	andi	r25, 0x0F	; 15
_ZN7TwoWire5writeEi.constprop.36():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:519
    ++BufferIndex;
    // update amount in buffer
    BufferLength = BufferIndex;
  } else { // in slave send mode
    // don't bother if buffer is full
    if (!USI_TWI_Space_In_Transmission_Buffer()) {
     138:	81 f0       	breq	.+32     	; 0x15a <TwoWire::write(int) [clone .constprop.36]+0x60>
USI_TWI_Transmit_Byte():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:100
// Puts data in the transmission buffer, Waits if buffer is full.
void USI_TWI_Transmit_Byte(unsigned char data)
{
  unsigned char tmphead;

  tmphead = (TWI_TxHead + 1) & TWI_TX_BUFFER_MASK; // Calculate buffer index.
     13a:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <TWI_TxHead>
     13e:	9f 5f       	subi	r25, 0xFF	; 255
     140:	9f 70       	andi	r25, 0x0F	; 15
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:101
  while (tmphead == TWI_TxTail)
     142:	20 91 bc 01 	lds	r18, 0x01BC	; 0x8001bc <TWI_TxTail>
     146:	92 17       	cp	r25, r18
     148:	e1 f3       	breq	.-8      	; 0x142 <TwoWire::write(int) [clone .constprop.36]+0x48>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:103
    ;                         // Wait for free space in buffer.
  TWI_TxBuf[tmphead] = data;    // Store data in buffer.
     14a:	e9 2f       	mov	r30, r25
     14c:	f0 e0       	ldi	r31, 0x00	; 0
     14e:	e0 5c       	subi	r30, 0xC0	; 192
     150:	fe 4f       	sbci	r31, 0xFE	; 254
     152:	80 83       	st	Z, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:104
  TWI_TxHead         = tmphead; // Store new index.
     154:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <TWI_TxHead>
     158:	e5 cf       	rjmp	.-54     	; 0x124 <TwoWire::write(int) [clone .constprop.36]+0x2a>
_ZN7TwoWire5writeEi.constprop.36():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:510
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data) {
  if (transmitting) { // in master transmitter mode
    // don't bother if buffer is full
    if (BufferLength >= TWI_BUFFER_SIZE) {
      return 0;
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	80 e0       	ldi	r24, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.h:157
    uint8_t isActive(void);

    inline size_t write(unsigned long n) { return write((uint8_t)n); }
    inline size_t write(long n) { return write((uint8_t)n); }
    inline size_t write(unsigned int n) { return write((uint8_t)n); }
    inline size_t write(int n) { return write((uint8_t)n); }
     15e:	08 95       	ret

00000160 <TwoWire::beginTransmission(unsigned char) [clone .constprop.33]>:
_ZN7TwoWire17beginTransmissionEh.constprop.33():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:462
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address) {
  // indicate that we are transmitting
  transmitting = 1;
     160:	91 e0       	ldi	r25, 0x01	; 1
     162:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <TwoWire::transmitting>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:464
  // set address of targeted slave and write mode
  Buffer[0] = (address << TWI_ADR_BITS) | (0 << TWI_READ_BIT);
     166:	88 0f       	add	r24, r24
     168:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <__data_end>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:466
  // reset tx buffer iterator vars
  BufferIndex = 1; // reserved by slave address
     16c:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <TwoWire::BufferIndex>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:467
  BufferLength = BufferIndex;
     170:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <TwoWire::BufferLength>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:468
}
     174:	08 95       	ret

00000176 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:34

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     176:	cf 92       	push	r12
     178:	df 92       	push	r13
     17a:	ef 92       	push	r14
     17c:	ff 92       	push	r15
     17e:	0f 93       	push	r16
     180:	1f 93       	push	r17
     182:	cf 93       	push	r28
     184:	df 93       	push	r29
     186:	6c 01       	movw	r12, r24
     188:	eb 01       	movw	r28, r22
     18a:	7b 01       	movw	r14, r22
     18c:	e4 0e       	add	r14, r20
     18e:	f5 1e       	adc	r15, r21
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:35
  size_t n = 0;
     190:	10 e0       	ldi	r17, 0x00	; 0
     192:	00 e0       	ldi	r16, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:36
  while (size--) {
     194:	ce 15       	cp	r28, r14
     196:	df 05       	cpc	r29, r15
     198:	61 f0       	breq	.+24     	; 0x1b2 <Print::write(unsigned char const*, unsigned int)+0x3c>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:37
    n += write(*buffer++);
     19a:	69 91       	ld	r22, Y+
     19c:	d6 01       	movw	r26, r12
     19e:	ed 91       	ld	r30, X+
     1a0:	fc 91       	ld	r31, X
     1a2:	01 90       	ld	r0, Z+
     1a4:	f0 81       	ld	r31, Z
     1a6:	e0 2d       	mov	r30, r0
     1a8:	c6 01       	movw	r24, r12
     1aa:	09 95       	icall
     1ac:	08 0f       	add	r16, r24
     1ae:	19 1f       	adc	r17, r25
     1b0:	f1 cf       	rjmp	.-30     	; 0x194 <Print::write(unsigned char const*, unsigned int)+0x1e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:40
  }
  return n;
}
     1b2:	c8 01       	movw	r24, r16
     1b4:	df 91       	pop	r29
     1b6:	cf 91       	pop	r28
     1b8:	1f 91       	pop	r17
     1ba:	0f 91       	pop	r16
     1bc:	ff 90       	pop	r15
     1be:	ef 90       	pop	r14
     1c0:	df 90       	pop	r13
     1c2:	cf 90       	pop	r12
     1c4:	08 95       	ret

000001c6 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:198
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     1c6:	fc 01       	movw	r30, r24
     1c8:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:199
    tail = _tx_buffer_tail;
     1ca:	44 8d       	ldd	r20, Z+28	; 0x1c
     1cc:	25 2f       	mov	r18, r21
     1ce:	30 e0       	ldi	r19, 0x00	; 0
     1d0:	84 2f       	mov	r24, r20
     1d2:	90 e0       	ldi	r25, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:201
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     1d4:	82 1b       	sub	r24, r18
     1d6:	93 0b       	sbc	r25, r19
     1d8:	54 17       	cp	r21, r20
     1da:	10 f0       	brcs	.+4      	; 0x1e0 <HardwareSerial::availableForWrite()+0x1a>
     1dc:	4f 96       	adiw	r24, 0x1f	; 31
     1de:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:202
  return tail - head - 1;
     1e0:	01 97       	sbiw	r24, 0x01	; 1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:203
}
     1e2:	08 95       	ret

000001e4 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:181
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     1e4:	fc 01       	movw	r30, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:183
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     1e6:	91 8d       	ldd	r25, Z+25	; 0x19
     1e8:	82 8d       	ldd	r24, Z+26	; 0x1a
     1ea:	98 17       	cp	r25, r24
     1ec:	61 f0       	breq	.+24     	; 0x206 <HardwareSerial::read()+0x22>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:186
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     1ee:	a2 8d       	ldd	r26, Z+26	; 0x1a
     1f0:	ae 0f       	add	r26, r30
     1f2:	bf 2f       	mov	r27, r31
     1f4:	b1 1d       	adc	r27, r1
     1f6:	5d 96       	adiw	r26, 0x1d	; 29
     1f8:	8c 91       	ld	r24, X
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:187
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     1fa:	92 8d       	ldd	r25, Z+26	; 0x1a
     1fc:	9f 5f       	subi	r25, 0xFF	; 255
     1fe:	9f 71       	andi	r25, 0x1F	; 31
     200:	92 8f       	std	Z+26, r25	; 0x1a
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:188
    return c;
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:184

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     206:	8f ef       	ldi	r24, 0xFF	; 255
     208:	9f ef       	ldi	r25, 0xFF	; 255
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:190
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     20a:	08 95       	ret

0000020c <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:172
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     20c:	fc 01       	movw	r30, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:173
  if (_rx_buffer_head == _rx_buffer_tail) {
     20e:	91 8d       	ldd	r25, Z+25	; 0x19
     210:	82 8d       	ldd	r24, Z+26	; 0x1a
     212:	98 17       	cp	r25, r24
     214:	31 f0       	breq	.+12     	; 0x222 <HardwareSerial::peek()+0x16>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:176
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     216:	82 8d       	ldd	r24, Z+26	; 0x1a
     218:	e8 0f       	add	r30, r24
     21a:	f1 1d       	adc	r31, r1
     21c:	85 8d       	ldd	r24, Z+29	; 0x1d
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:174
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     222:	8f ef       	ldi	r24, 0xFF	; 255
     224:	9f ef       	ldi	r25, 0xFF	; 255
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:178
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     226:	08 95       	ret

00000228 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:167
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     228:	fc 01       	movw	r30, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:168
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     22a:	91 8d       	ldd	r25, Z+25	; 0x19
     22c:	22 8d       	ldd	r18, Z+26	; 0x1a
     22e:	89 2f       	mov	r24, r25
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	80 96       	adiw	r24, 0x20	; 32
     234:	82 1b       	sub	r24, r18
     236:	91 09       	sbc	r25, r1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:169
}
     238:	8f 71       	andi	r24, 0x1F	; 31
     23a:	99 27       	eor	r25, r25
     23c:	08 95       	ret

0000023e <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     23e:	fc 01       	movw	r30, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     240:	a4 8d       	ldd	r26, Z+28	; 0x1c
     242:	a8 0f       	add	r26, r24
     244:	b9 2f       	mov	r27, r25
     246:	b1 1d       	adc	r27, r1
     248:	dd 96       	adiw	r26, 0x3d	; 61
     24a:	2c 91       	ld	r18, X
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     24c:	84 8d       	ldd	r24, Z+28	; 0x1c
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	01 96       	adiw	r24, 0x01	; 1
     252:	8f 71       	andi	r24, 0x1F	; 31
     254:	99 27       	eor	r25, r25
     256:	84 8f       	std	Z+28, r24	; 0x1c
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:96

  *_udr = c;
     258:	a6 89       	ldd	r26, Z+22	; 0x16
     25a:	b7 89       	ldd	r27, Z+23	; 0x17
     25c:	2c 93       	st	X, r18
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     25e:	a0 89       	ldd	r26, Z+16	; 0x10
     260:	b1 89       	ldd	r27, Z+17	; 0x11
     262:	8c 91       	ld	r24, X
     264:	83 70       	andi	r24, 0x03	; 3
     266:	80 64       	ori	r24, 0x40	; 64
     268:	8c 93       	st	X, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:109
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     26a:	93 8d       	ldd	r25, Z+27	; 0x1b
     26c:	84 8d       	ldd	r24, Z+28	; 0x1c
     26e:	98 13       	cpse	r25, r24
     270:	06 c0       	rjmp	.+12     	; 0x27e <HardwareSerial::_tx_udr_empty_irq()+0x40>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     272:	02 88       	ldd	r0, Z+18	; 0x12
     274:	f3 89       	ldd	r31, Z+19	; 0x13
     276:	e0 2d       	mov	r30, r0
     278:	80 81       	ld	r24, Z
     27a:	8f 7d       	andi	r24, 0xDF	; 223
     27c:	80 83       	st	Z, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:113
  }
}
     27e:	08 95       	ret

00000280 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:226
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished transmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     280:	ef 92       	push	r14
     282:	ff 92       	push	r15
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	ec 01       	movw	r28, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:227
  _written = true;
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	88 8f       	std	Y+24, r24	; 0x18
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:232
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     292:	9b 8d       	ldd	r25, Y+27	; 0x1b
     294:	8c 8d       	ldd	r24, Y+28	; 0x1c
     296:	98 13       	cpse	r25, r24
     298:	1a c0       	rjmp	.+52     	; 0x2ce <HardwareSerial::write(unsigned char)+0x4e>
     29a:	e8 89       	ldd	r30, Y+16	; 0x10
     29c:	f9 89       	ldd	r31, Y+17	; 0x11
     29e:	80 81       	ld	r24, Z
     2a0:	85 ff       	sbrs	r24, 5
     2a2:	15 c0       	rjmp	.+42     	; 0x2ce <HardwareSerial::write(unsigned char)+0x4e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:241
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     2a4:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     2a6:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:242
      *_udr = c;
     2a8:	ee 89       	ldd	r30, Y+22	; 0x16
     2aa:	ff 89       	ldd	r31, Y+23	; 0x17
     2ac:	60 83       	st	Z, r22
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:244
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     2ae:	e8 89       	ldd	r30, Y+16	; 0x10
     2b0:	f9 89       	ldd	r31, Y+17	; 0x11
     2b2:	80 81       	ld	r24, Z
     2b4:	83 70       	andi	r24, 0x03	; 3
     2b6:	80 64       	ori	r24, 0x40	; 64
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:275
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
     2b8:	80 83       	st	Z, r24
__iRestore():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     2ba:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:279
  }

  return 1;
}
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	ff 90       	pop	r15
     2ca:	ef 90       	pop	r14
     2cc:	08 95       	ret
     2ce:	f6 2e       	mov	r15, r22
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:251
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     2d0:	0b 8d       	ldd	r16, Y+27	; 0x1b
     2d2:	10 e0       	ldi	r17, 0x00	; 0
     2d4:	0f 5f       	subi	r16, 0xFF	; 255
     2d6:	1f 4f       	sbci	r17, 0xFF	; 255
     2d8:	0f 71       	andi	r16, 0x1F	; 31
     2da:	11 27       	eor	r17, r17
     2dc:	e0 2e       	mov	r14, r16
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:255

  // If the output buffer is full, there's nothing for it other than to
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     2de:	8c 8d       	ldd	r24, Y+28	; 0x1c
     2e0:	8e 11       	cpse	r24, r14
     2e2:	0c c0       	rjmp	.+24     	; 0x2fc <HardwareSerial::write(unsigned char)+0x7c>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:256
    if (bit_is_clear(SREG, SREG_I)) {
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	07 fc       	sbrc	r0, 7
     2e8:	fa cf       	rjmp	.-12     	; 0x2de <HardwareSerial::write(unsigned char)+0x5e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:261
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     2ea:	e8 89       	ldd	r30, Y+16	; 0x10
     2ec:	f9 89       	ldd	r31, Y+17	; 0x11
     2ee:	80 81       	ld	r24, Z
     2f0:	85 ff       	sbrs	r24, 5
     2f2:	f5 cf       	rjmp	.-22     	; 0x2de <HardwareSerial::write(unsigned char)+0x5e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:262
  _tx_udr_empty_irq();
     2f4:	ce 01       	movw	r24, r28
     2f6:	0e 94 1f 01 	call	0x23e	; 0x23e <HardwareSerial::_tx_udr_empty_irq()>
     2fa:	f1 cf       	rjmp	.-30     	; 0x2de <HardwareSerial::write(unsigned char)+0x5e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:268
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     2fc:	eb 8d       	ldd	r30, Y+27	; 0x1b
     2fe:	ec 0f       	add	r30, r28
     300:	fd 2f       	mov	r31, r29
     302:	f1 1d       	adc	r31, r1
     304:	f5 ae       	std	Z+61, r15	; 0x3d
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:273

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     306:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     308:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:274
    _tx_buffer_head = i;
     30a:	0b 8f       	std	Y+27, r16	; 0x1b
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:275
    sbi(*_ucsrb, UDRIE0);
     30c:	ea 89       	ldd	r30, Y+18	; 0x12
     30e:	fb 89       	ldd	r31, Y+19	; 0x13
     310:	80 81       	ld	r24, Z
     312:	80 62       	ori	r24, 0x20	; 32
     314:	d1 cf       	rjmp	.-94     	; 0x2b8 <HardwareSerial::write(unsigned char)+0x38>

00000316 <Print::println() [clone .constprop.21]>:
_ZN5Print7printlnEv.constprop.21():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:123
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:66
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     31a:	6d e0       	ldi	r22, 0x0D	; 13
     31c:	8e e5       	ldi	r24, 0x5E	; 94
     31e:	91 e0       	ldi	r25, 0x01	; 1
     320:	0e 94 40 01 	call	0x280	; 0x280 <HardwareSerial::write(unsigned char)>
     324:	ec 01       	movw	r28, r24
     326:	6a e0       	ldi	r22, 0x0A	; 10
     328:	8e e5       	ldi	r24, 0x5E	; 94
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	0e 94 40 01 	call	0x280	; 0x280 <HardwareSerial::write(unsigned char)>
_ZN5Print7printlnEv.constprop.21():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:128
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
     330:	8c 0f       	add	r24, r28
     332:	9d 1f       	adc	r25, r29
     334:	df 91       	pop	r29
     336:	cf 91       	pop	r28
     338:	08 95       	ret

0000033a <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:206
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
     33e:	ec 01       	movw	r28, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:210
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     340:	88 8d       	ldd	r24, Y+24	; 0x18
     342:	88 23       	and	r24, r24
     344:	b9 f0       	breq	.+46     	; 0x374 <HardwareSerial::flush()+0x3a>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:213
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     346:	aa 89       	ldd	r26, Y+18	; 0x12
     348:	bb 89       	ldd	r27, Y+19	; 0x13
     34a:	e8 89       	ldd	r30, Y+16	; 0x10
     34c:	f9 89       	ldd	r31, Y+17	; 0x11
     34e:	8c 91       	ld	r24, X
     350:	85 fd       	sbrc	r24, 5
     352:	03 c0       	rjmp	.+6      	; 0x35a <HardwareSerial::flush()+0x20>
     354:	80 81       	ld	r24, Z
     356:	86 fd       	sbrc	r24, 6
     358:	0d c0       	rjmp	.+26     	; 0x374 <HardwareSerial::flush()+0x3a>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:214
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     35a:	0f b6       	in	r0, 0x3f	; 63
     35c:	07 fc       	sbrc	r0, 7
     35e:	f7 cf       	rjmp	.-18     	; 0x34e <HardwareSerial::flush()+0x14>
     360:	8c 91       	ld	r24, X
     362:	85 ff       	sbrs	r24, 5
     364:	f2 cf       	rjmp	.-28     	; 0x34a <HardwareSerial::flush()+0x10>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:218
  // Interrupts are globally disabled, but the DR empty
  // interrupt should be enabled, so poll the DR empty flag to
  // prevent deadlock
  if (bit_is_set(*_ucsra, UDRE0))
     366:	80 81       	ld	r24, Z
     368:	85 ff       	sbrs	r24, 5
     36a:	ed cf       	rjmp	.-38     	; 0x346 <HardwareSerial::flush()+0xc>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:219
    _tx_udr_empty_irq();
     36c:	ce 01       	movw	r24, r28
     36e:	0e 94 1f 01 	call	0x23e	; 0x23e <HardwareSerial::_tx_udr_empty_irq()>
     372:	e9 cf       	rjmp	.-46     	; 0x346 <HardwareSerial::flush()+0xc>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:223
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished transmission (TXC is set).
}
     374:	df 91       	pop	r29
     376:	cf 91       	pop	r28
     378:	08 95       	ret

0000037a <digitalWrite>:
digitalWrite():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:181
}

#if defined(__AVR_ATtinyX41__ ) || defined(__AVR_ATtiny1634__) || defined(__AVR_ATtiny828__)

void digitalWrite(uint8_t pin, uint8_t val)
{
     37a:	cf 93       	push	r28
     37c:	df 93       	push	r29
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:185
  #ifndef __AVR_ATtiny828__
  if (pin&64) {pin=analogInputToDigitalPin((pin&63));}
  #endif
  uint8_t bit = digitalPinToBitMask(pin);
     37e:	a8 2f       	mov	r26, r24
     380:	b0 e0       	ldi	r27, 0x00	; 0
     382:	fd 01       	movw	r30, r26
     384:	ee 56       	subi	r30, 0x6E	; 110
     386:	ff 4f       	sbci	r31, 0xFF	; 255
     388:	84 91       	lpm	r24, Z
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:186
  uint8_t port = digitalPinToPort(pin);
     38a:	a0 58       	subi	r26, 0x80	; 128
     38c:	bf 4f       	sbci	r27, 0xFF	; 255
     38e:	fd 01       	movw	r30, r26
     390:	a4 91       	lpm	r26, Z
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:189
  volatile uint8_t *out, *pue;

  if (port == NOT_A_PIN) return;
     392:	aa 23       	and	r26, r26
     394:	c9 f0       	breq	.+50     	; 0x3c8 <digitalWrite+0x4e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:195

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  turnOffPWM( pin );

  out = portOutputRegister(port);
     396:	b0 e0       	ldi	r27, 0x00	; 0
     398:	fd 01       	movw	r30, r26
     39a:	e4 58       	subi	r30, 0x84	; 132
     39c:	ff 4f       	sbci	r31, 0xFF	; 255
     39e:	e4 91       	lpm	r30, Z
     3a0:	ce 2f       	mov	r28, r30
     3a2:	d0 e0       	ldi	r29, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:196
  pue = portPullupRegister(port);
     3a4:	a8 58       	subi	r26, 0x88	; 136
     3a6:	bf 4f       	sbci	r27, 0xFF	; 255
     3a8:	fd 01       	movw	r30, r26
     3aa:	a4 91       	lpm	r26, Z
     3ac:	b0 e0       	ldi	r27, 0x00	; 0
     3ae:	98 2f       	mov	r25, r24
     3b0:	90 95       	com	r25
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:199

  if (val == LOW) {
    uint8_t oldSREG = SREG;
     3b2:	2f b7       	in	r18, 0x3f	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:198
  turnOffPWM( pin );

  out = portOutputRegister(port);
  pue = portPullupRegister(port);

  if (val == LOW) {
     3b4:	61 11       	cpse	r22, r1
     3b6:	0b c0       	rjmp	.+22     	; 0x3ce <digitalWrite+0x54>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:200
    uint8_t oldSREG = SREG;
    cli();
     3b8:	f8 94       	cli
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:201
    *out &= ~bit;
     3ba:	88 81       	ld	r24, Y
     3bc:	89 23       	and	r24, r25
     3be:	88 83       	st	Y, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:208
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    cli();
    *out |= bit;
    *pue &= ~bit;
     3c0:	8c 91       	ld	r24, X
     3c2:	89 23       	and	r24, r25
     3c4:	8c 93       	st	X, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:209
    SREG = oldSREG;
     3c6:	2f bf       	out	0x3f, r18	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:211
  }
}
     3c8:	df 91       	pop	r29
     3ca:	cf 91       	pop	r28
     3cc:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:206
    *out &= ~bit;
    *pue &= ~bit; //Turn off the pullups
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    cli();
     3ce:	f8 94       	cli
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:207
    *out |= bit;
     3d0:	e8 81       	ld	r30, Y
     3d2:	e8 2b       	or	r30, r24
     3d4:	e8 83       	st	Y, r30
     3d6:	f4 cf       	rjmp	.-24     	; 0x3c0 <digitalWrite+0x46>

000003d8 <pinMode>:
pinMode():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:37
#include "core_timers.h"
#include "PwmTimer.h"

#if defined(__AVR_ATtinyX41__ ) || defined(__AVR_ATtiny1634__) || defined(__AVR_ATtiny828__)
void pinMode(uint8_t pin, uint8_t mode)
{
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:41
  #ifndef __AVR_ATtiny828__
  if (pin&64) {pin=analogInputToDigitalPin((pin & 63));}
  #endif
  uint8_t bit = digitalPinToBitMask(pin);
     3dc:	a8 2f       	mov	r26, r24
     3de:	b0 e0       	ldi	r27, 0x00	; 0
     3e0:	fd 01       	movw	r30, r26
     3e2:	ee 56       	subi	r30, 0x6E	; 110
     3e4:	ff 4f       	sbci	r31, 0xFF	; 255
     3e6:	24 91       	lpm	r18, Z
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:42
  uint8_t port = digitalPinToPort(pin);
     3e8:	a0 58       	subi	r26, 0x80	; 128
     3ea:	bf 4f       	sbci	r27, 0xFF	; 255
     3ec:	fd 01       	movw	r30, r26
     3ee:	a4 91       	lpm	r26, Z
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:45
  volatile uint8_t *reg, *out, *pue;

  if (port == NOT_A_PIN) return;
     3f0:	aa 23       	and	r26, r26
     3f2:	19 f1       	breq	.+70     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:48

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
     3f4:	b0 e0       	ldi	r27, 0x00	; 0
     3f6:	fd 01       	movw	r30, r26
     3f8:	ec 58       	subi	r30, 0x8C	; 140
     3fa:	ff 4f       	sbci	r31, 0xFF	; 255
     3fc:	e4 91       	lpm	r30, Z
     3fe:	ce 2f       	mov	r28, r30
     400:	d0 e0       	ldi	r29, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:49
  out = portOutputRegister(port);
     402:	fd 01       	movw	r30, r26
     404:	e4 58       	subi	r30, 0x84	; 132
     406:	ff 4f       	sbci	r31, 0xFF	; 255
     408:	e4 91       	lpm	r30, Z
     40a:	8e 2f       	mov	r24, r30
     40c:	90 e0       	ldi	r25, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:50
  pue = portPullupRegister(port);
     40e:	a8 58       	subi	r26, 0x88	; 136
     410:	bf 4f       	sbci	r27, 0xFF	; 255
     412:	fd 01       	movw	r30, r26
     414:	a4 91       	lpm	r26, Z
     416:	b0 e0       	ldi	r27, 0x00	; 0
     418:	32 2f       	mov	r19, r18
     41a:	30 95       	com	r19
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:52

  if (mode == INPUT) {
     41c:	61 11       	cpse	r22, r1
     41e:	10 c0       	rjmp	.+32     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:53
    uint8_t oldSREG = SREG;
     420:	4f b7       	in	r20, 0x3f	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:54
                cli();
     422:	f8 94       	cli
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:55
    *reg &= ~bit;
     424:	28 81       	ld	r18, Y
     426:	23 23       	and	r18, r19
     428:	28 83       	st	Y, r18
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:56
    *out &= ~bit;
     42a:	fc 01       	movw	r30, r24
     42c:	20 81       	ld	r18, Z
     42e:	23 23       	and	r18, r19
     430:	20 83       	st	Z, r18
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:57
    *pue &= ~bit;
     432:	8c 91       	ld	r24, X
     434:	38 23       	and	r19, r24
     436:	3c 93       	st	X, r19
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:58
    SREG = oldSREG;
     438:	4f bf       	out	0x3f, r20	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:73
                cli();
    *pue &= ~bit;
    *reg |= bit;
    SREG = oldSREG;
  }
}
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:59
                cli();
    *reg &= ~bit;
    *out &= ~bit;
    *pue &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
     440:	62 30       	cpi	r22, 0x02	; 2
     442:	71 f4       	brne	.+28     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:60
    uint8_t oldSREG = SREG;
     444:	5f b7       	in	r21, 0x3f	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:61
                cli();
     446:	f8 94       	cli
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:62
    *reg &= ~bit;
     448:	48 81       	ld	r20, Y
     44a:	34 23       	and	r19, r20
     44c:	38 83       	st	Y, r19
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:63
    *out |= bit;
     44e:	fc 01       	movw	r30, r24
     450:	30 81       	ld	r19, Z
     452:	32 2b       	or	r19, r18
     454:	30 83       	st	Z, r19
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:64
    *pue |= bit;
     456:	ec 91       	ld	r30, X
     458:	2e 2b       	or	r18, r30
     45a:	2c 93       	st	X, r18
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:65
    SREG = oldSREG;
     45c:	5f bf       	out	0x3f, r21	; 63
     45e:	ed cf       	rjmp	.-38     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:67
  } else {
    uint8_t oldSREG = SREG;
     460:	9f b7       	in	r25, 0x3f	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:68
                cli();
     462:	f8 94       	cli
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:69
    *pue &= ~bit;
     464:	8c 91       	ld	r24, X
     466:	38 23       	and	r19, r24
     468:	3c 93       	st	X, r19
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:70
    *reg |= bit;
     46a:	e8 81       	ld	r30, Y
     46c:	2e 2b       	or	r18, r30
     46e:	28 83       	st	Y, r18
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:71
    SREG = oldSREG;
     470:	9f bf       	out	0x3f, r25	; 63
     472:	e3 cf       	rjmp	.-58     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>

00000474 <micros>:
micros():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:134
  return m;
}
unsigned long micros()
{
  unsigned long m;
  uint8_t oldSREG = SREG, t;
     474:	3f b7       	in	r19, 0x3f	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:136

  cli();
     476:	f8 94       	cli
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:137
  m = millis_timer_overflow_count;
     478:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <millis_timer_overflow_count>
     47c:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <millis_timer_overflow_count+0x1>
     480:	a0 91 58 01 	lds	r26, 0x0158	; 0x800158 <millis_timer_overflow_count+0x2>
     484:	b0 91 59 01 	lds	r27, 0x0159	; 0x800159 <millis_timer_overflow_count+0x3>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:139
#if defined(TCNT0) && (TIMER_TO_USE_FOR_MILLIS == 0) && !defined(TCW0)
  t = TCNT0;
     488:	29 b3       	in	r18, 0x19	; 25
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:154

#if defined(TIFR0) && (TIMER_TO_USE_FOR_MILLIS == 0)
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    m++;
#elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 0)
  if ((TIFR & _BV(TOV0)) && (t < 255))
     48a:	09 b6       	in	r0, 0x39	; 57
     48c:	01 fe       	sbrs	r0, 1
     48e:	05 c0       	rjmp	.+10     	; 0x49a <micros+0x26>
     490:	2f 3f       	cpi	r18, 0xFF	; 255
     492:	19 f0       	breq	.+6      	; 0x49a <micros+0x26>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:155
    m++;
     494:	01 96       	adiw	r24, 0x01	; 1
     496:	a1 1d       	adc	r26, r1
     498:	b1 1d       	adc	r27, r1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:164
#elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 1)
  if ((TIFR & _BV(TOV1)) && (t < 255))
    m++;
#endif

  SREG = oldSREG;
     49a:	3f bf       	out	0x3f, r19	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:171

#if F_CPU < 1000000L
  return ((m << 8) + t) * MillisTimer_Prescale_Value * (1000000L/F_CPU);
#else
#if (MillisTimer_Prescale_Value % clockCyclesPerMicrosecond() == 0 ) // Can we just do it the naive way? If so great!
  return ((m << 8) + t) * (MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
     49c:	ba 2f       	mov	r27, r26
     49e:	a9 2f       	mov	r26, r25
     4a0:	98 2f       	mov	r25, r24
     4a2:	88 27       	eor	r24, r24
     4a4:	bc 01       	movw	r22, r24
     4a6:	cd 01       	movw	r24, r26
     4a8:	62 0f       	add	r22, r18
     4aa:	71 1d       	adc	r23, r1
     4ac:	81 1d       	adc	r24, r1
     4ae:	91 1d       	adc	r25, r1
     4b0:	43 e0       	ldi	r20, 0x03	; 3
     4b2:	66 0f       	add	r22, r22
     4b4:	77 1f       	adc	r23, r23
     4b6:	88 1f       	adc	r24, r24
     4b8:	99 1f       	adc	r25, r25
     4ba:	4a 95       	dec	r20
     4bc:	d1 f7       	brne	.-12     	; 0x4b2 <micros+0x3e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:217
  //the high part gets divided by cCPuS then multiplied by the prescaler. Then take the low 8 bits plus the high part modulo-cCPuS to correct for the division, then multiply that by the prescaler value first before dividing by cCPuS, and finally add the two together.
  //return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + ((t+(((m<<8)%clockCyclesPerMicrosecond())) * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond()));
  return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + (t * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
#endif
#endif
}
     4be:	08 95       	ret

000004c0 <delay>:
delay():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:225
  // Empty
}
void yield(void) __attribute__ ((weak, alias("__empty")));

void delay(unsigned long ms)
{
     4c0:	cf 92       	push	r12
     4c2:	df 92       	push	r13
     4c4:	ef 92       	push	r14
     4c6:	ff 92       	push	r15
     4c8:	cf 93       	push	r28
     4ca:	df 93       	push	r29
     4cc:	6b 01       	movw	r12, r22
     4ce:	7c 01       	movw	r14, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:227
  #if (F_CPU>=1000000L)
  uint16_t start = (uint16_t)micros();
     4d0:	0e 94 3a 02 	call	0x474	; 0x474 <micros>
     4d4:	eb 01       	movw	r28, r22
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:231

  while (ms > 0) {
    yield();
    while (((uint16_t)micros() - start) >= 1000 && ms) {
     4d6:	0e 94 3a 02 	call	0x474	; 0x474 <micros>
     4da:	6c 1b       	sub	r22, r28
     4dc:	7d 0b       	sbc	r23, r29
     4de:	68 3e       	cpi	r22, 0xE8	; 232
     4e0:	73 40       	sbci	r23, 0x03	; 3
     4e2:	a0 f0       	brcs	.+40     	; 0x50c <__stack+0xd>
     4e4:	c1 14       	cp	r12, r1
     4e6:	d1 04       	cpc	r13, r1
     4e8:	e1 04       	cpc	r14, r1
     4ea:	f1 04       	cpc	r15, r1
     4ec:	39 f4       	brne	.+14     	; 0x4fc <delay+0x3c>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:241
  #else
  uint32_t start = millis();
  while((millis() - start) < ms)  /* NOP */yield();
  return;
  #endif
}
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	ff 90       	pop	r15
     4f4:	ef 90       	pop	r14
     4f6:	df 90       	pop	r13
     4f8:	cf 90       	pop	r12
     4fa:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:232
  uint16_t start = (uint16_t)micros();

  while (ms > 0) {
    yield();
    while (((uint16_t)micros() - start) >= 1000 && ms) {
      ms--;
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	c8 1a       	sub	r12, r24
     500:	d1 08       	sbc	r13, r1
     502:	e1 08       	sbc	r14, r1
     504:	f1 08       	sbc	r15, r1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:233
      start += 1000;
     506:	c8 51       	subi	r28, 0x18	; 24
     508:	dc 4f       	sbci	r29, 0xFC	; 252
     50a:	e5 cf       	rjmp	.-54     	; 0x4d6 <delay+0x16>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:229
void delay(unsigned long ms)
{
  #if (F_CPU>=1000000L)
  uint16_t start = (uint16_t)micros();

  while (ms > 0) {
     50c:	c1 14       	cp	r12, r1
     50e:	d1 04       	cpc	r13, r1
     510:	e1 04       	cpc	r14, r1
     512:	f1 04       	cpc	r15, r1
     514:	01 f7       	brne	.-64     	; 0x4d6 <delay+0x16>
     516:	eb cf       	rjmp	.-42     	; 0x4ee <delay+0x2e>

00000518 <USI_TWI_Master_Transfer>:
USI_TWI_Master_Transfer():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:225
 Data to be sent has to be placed into the USIDR prior to calling
 this function. Data read, will be return'ed from the function.
---------------------------------------------------------------*/
unsigned char USI_TWI_Master_Transfer(unsigned char temp)
{
  USISR = temp;                                          // Set USISR according to temp.
     518:	8b bd       	out	0x2b, r24	; 43
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     51a:	35 e0       	ldi	r19, 0x05	; 5
USI_TWI_Master_Transfer():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:233
         (1 << USIWM1) | (0 << USIWM0) |                 // Set USI in Two-wire mode.
         (1 << USICS1) | (0 << USICS0) | (1 << USICLK) | // Software clock strobe as source.
         (1 << USITC);                                   // Toggle Clock Port.
  do {
    if (USI_TWI_MASTER_SPEED) DELAY_T2TWI_FM; else DELAY_T2TWI;
    USICR = temp; // Generate positive SCL edge.
     51c:	8b e2       	ldi	r24, 0x2B	; 43
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     51e:	24 e0       	ldi	r18, 0x04	; 4
     520:	93 2f       	mov	r25, r19
     522:	9a 95       	dec	r25
     524:	f1 f7       	brne	.-4      	; 0x522 <USI_TWI_Master_Transfer+0xa>
USI_TWI_Master_Transfer():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:233
     526:	8a bd       	out	0x2a, r24	; 42
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:234
    while (!(PIN_USI_CL & (1 << PIN_USI_SCL)))
     528:	39 9b       	sbis	0x07, 1	; 7
     52a:	fe cf       	rjmp	.-4      	; 0x528 <USI_TWI_Master_Transfer+0x10>
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     52c:	92 2f       	mov	r25, r18
     52e:	9a 95       	dec	r25
     530:	f1 f7       	brne	.-4      	; 0x52e <USI_TWI_Master_Transfer+0x16>
USI_TWI_Master_Transfer():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:237
      ; // Wait for SCL to go high.
    if (USI_TWI_MASTER_SPEED) DELAY_T4TWI_FM; else DELAY_T4TWI;
    USICR = temp;                   // Generate negative SCL edge.
     532:	8a bd       	out	0x2a, r24	; 42
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:238
  } while (!(USISR & (1 << USIOIF))); // Check for transfer complete.
     534:	0b b4       	in	r0, 0x2b	; 43
     536:	06 fe       	sbrs	r0, 6
     538:	f3 cf       	rjmp	.-26     	; 0x520 <USI_TWI_Master_Transfer+0x8>
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     53a:	85 e0       	ldi	r24, 0x05	; 5
     53c:	8a 95       	dec	r24
     53e:	f1 f7       	brne	.-4      	; 0x53c <USI_TWI_Master_Transfer+0x24>
USI_TWI_Master_Transfer():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:241

  if (USI_TWI_MASTER_SPEED) DELAY_T2TWI_FM; else DELAY_T2TWI;
  temp  = USIDR;                 // Read out data.
     540:	8c b5       	in	r24, 0x2c	; 44
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:242
  USIDR = 0xFF;                  // Release SDA.
     542:	9f ef       	ldi	r25, 0xFF	; 255
     544:	9c bd       	out	0x2c, r25	; 44
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:243
  DDR_USI |= (1 << PIN_USI_SDA); // Enable SDA as output.
     546:	61 9a       	sbi	0x0c, 1	; 12
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:246

  return temp; // Return the data from the USIDR
}
     548:	08 95       	ret

0000054a <USI_TWI_Start_Transceiver_With_Data_Stop>:
USI_TWI_Start_Transceiver_With_Data_Stop():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:108
 parameter that defines if a Stop Condition should be send at the end
 of the transmission.
---------------------------------------------------------------*/

unsigned char USI_TWI_Start_Transceiver_With_Data_Stop(unsigned char *msg, unsigned char msgSize, unsigned char stop)
{
     54a:	ff 92       	push	r15
     54c:	0f 93       	push	r16
     54e:	1f 93       	push	r17
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	06 2f       	mov	r16, r22
     556:	14 2f       	mov	r17, r20
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:115
  // Prepare register value to: Clear flags set USI to shift 8 bits i.e. count 16 clock edges.

  unsigned char tempUSISR_1bit = (1 << USISIF) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC) | (0xE << USICNT0);
  // Prepare register value to: Clear flags, and set USI to shift 1 bit i.e. count 2 clock edges.

  USI_TWI_state.errorState  = 0;
     558:	21 e0       	ldi	r18, 0x01	; 1
     55a:	20 93 bb 01 	sts	0x01BB, r18	; 0x8001bb <USI_TWI_state>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:146
    USI_TWI_state.errorState = USI_TWI_UE_DATA_COL;
    return (FALSE);
  }
#endif

  if (!(*msg & (1 << TWI_READ_BIT))) // The LSB in the address byte determines if is a masterRead or masterWrite operation.
     55e:	fc 01       	movw	r30, r24
     560:	20 81       	ld	r18, Z
     562:	20 fd       	sbrc	r18, 0
     564:	03 c0       	rjmp	.+6      	; 0x56c <USI_TWI_Start_Transceiver_With_Data_Stop+0x22>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:148
  {
    USI_TWI_state.masterWriteDataMode = TRUE;
     566:	23 e0       	ldi	r18, 0x03	; 3
     568:	20 93 bb 01 	sts	0x01BB, r18	; 0x8001bb <USI_TWI_state>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:152
  }

  /* Release SCL to ensure that (repeated) Start can be performed */
  PORT_USI_CL |= (1 << PIN_USI_SCL); // Release SCL.
     56c:	49 9a       	sbi	0x09, 1	; 9
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:153
  while (!(PIN_USI_CL & (1 << PIN_USI_SCL)))
     56e:	39 9b       	sbis	0x07, 1	; 7
     570:	fe cf       	rjmp	.-4      	; 0x56e <USI_TWI_Start_Transceiver_With_Data_Stop+0x24>
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     572:	25 e0       	ldi	r18, 0x05	; 5
     574:	2a 95       	dec	r18
     576:	f1 f7       	brne	.-4      	; 0x574 <USI_TWI_Start_Transceiver_With_Data_Stop+0x2a>
USI_TWI_Start_Transceiver_With_Data_Stop():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:159
    ; // Verify that SCL becomes high.
  if (USI_TWI_MASTER_SPEED) DELAY_T4TWI_FM; // Delay for T4TWI if TWI_FAST_MODE
  else DELAY_T2TWI;    // Delay for T2TWI if TWI_STANDARD_MODE

  /* Generate Start Condition */
  PORT_USI &= ~(1 << PIN_USI_SDA); // Force SDA LOW.
     578:	69 98       	cbi	0x0d, 1	; 13
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     57a:	24 e0       	ldi	r18, 0x04	; 4
     57c:	2a 95       	dec	r18
     57e:	f1 f7       	brne	.-4      	; 0x57c <USI_TWI_Start_Transceiver_With_Data_Stop+0x32>
USI_TWI_Start_Transceiver_With_Data_Stop():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:163

  if (USI_TWI_MASTER_SPEED) DELAY_T4TWI_FM; else DELAY_T4TWI; // UGGGGLLLYYYYY - but if you never call clock() which is the only thing that could change USI_TWI_MASTER_SPEED, should be optimized out

  PORT_USI_CL &= ~(1 << PIN_USI_SCL); // Pull SCL LOW.
     580:	49 98       	cbi	0x09, 1	; 9
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:164
  PORT_USI |= (1 << PIN_USI_SDA);  // Release SDA.
     582:	69 9a       	sbi	0x0d, 1	; 13
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:167

#ifdef SIGNAL_VERIFY
  if (!(USISR & (1 << USISIF))) {
     584:	0b b4       	in	r0, 0x2b	; 43
     586:	07 fc       	sbrc	r0, 7
     588:	0b c0       	rjmp	.+22     	; 0x5a0 <USI_TWI_Start_Transceiver_With_Data_Stop+0x56>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:168
    USI_TWI_state.errorState = USI_TWI_MISSING_START_CON;
     58a:	87 e0       	ldi	r24, 0x07	; 7
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:186

      /* Clock and verify (N)ACK from slave */
      DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
      if (USI_TWI_Master_Transfer(tempUSISR_1bit) & (1 << TWI_NACK_BIT)) {
        if (USI_TWI_state.addressMode)
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
     58c:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <USI_TWI_state>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:189
        else
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_DATA;
        return (FALSE);
     590:	10 e0       	ldi	r17, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:216
    USI_TWI_Master_Stop(); // Send a STOP condition on the TWI bus.
  }

  /* Transmission successfully completed*/
  return (TRUE);
}
     592:	81 2f       	mov	r24, r17
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	1f 91       	pop	r17
     59a:	0f 91       	pop	r16
     59c:	ff 90       	pop	r15
     59e:	08 95       	ret
     5a0:	ec 01       	movw	r28, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:202
      *(msg++) = USI_TWI_Master_Transfer(tempUSISR_8bit);

      /* Prepare to generate ACK (or NACK in case of End Of Transmission) */
      if (msgSize == 1) // If transmission of last byte was performed.
      {
        USIDR = 0xFF; // Load NACK to confirm End Of Transmission.
     5a2:	ff 24       	eor	r15, r15
     5a4:	fa 94       	dec	r15
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:176
#endif

  /*Write address and Read/Write data */
  do {
    /* If masterWrite cycle (or initial address transmission)*/
    if (USI_TWI_state.addressMode || USI_TWI_state.masterWriteDataMode) {
     5a6:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <USI_TWI_state>
     5aa:	83 70       	andi	r24, 0x03	; 3
     5ac:	29 f1       	breq	.+74     	; 0x5f8 <USI_TWI_Start_Transceiver_With_Data_Stop+0xae>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:178
      /* Write a byte */
      PORT_USI_CL &= ~(1 << PIN_USI_SCL);         // Pull SCL LOW.
     5ae:	49 98       	cbi	0x09, 1	; 9
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:179
      USIDR = *(msg++);                        // Setup data.
     5b0:	88 81       	ld	r24, Y
     5b2:	8c bd       	out	0x2c, r24	; 44
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:180
      USI_TWI_Master_Transfer(tempUSISR_8bit); // Send 8 bits on bus.
     5b4:	80 ef       	ldi	r24, 0xF0	; 240
     5b6:	0e 94 8c 02 	call	0x518	; 0x518 <USI_TWI_Master_Transfer>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:183

      /* Clock and verify (N)ACK from slave */
      DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
     5ba:	61 98       	cbi	0x0c, 1	; 12
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:184
      if (USI_TWI_Master_Transfer(tempUSISR_1bit) & (1 << TWI_NACK_BIT)) {
     5bc:	8e ef       	ldi	r24, 0xFE	; 254
     5be:	0e 94 8c 02 	call	0x518	; 0x518 <USI_TWI_Master_Transfer>
     5c2:	80 ff       	sbrs	r24, 0
     5c4:	0c c0       	rjmp	.+24     	; 0x5de <USI_TWI_Start_Transceiver_With_Data_Stop+0x94>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:185
        if (USI_TWI_state.addressMode)
     5c6:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <USI_TWI_state>
     5ca:	18 2f       	mov	r17, r24
     5cc:	11 70       	andi	r17, 0x01	; 1
     5ce:	80 ff       	sbrs	r24, 0
     5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <USI_TWI_Start_Transceiver_With_Data_Stop+0x8c>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:186
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
     5d2:	86 e0       	ldi	r24, 0x06	; 6
     5d4:	db cf       	rjmp	.-74     	; 0x58c <USI_TWI_Start_Transceiver_With_Data_Stop+0x42>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:188
        else
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_DATA;
     5d6:	85 e0       	ldi	r24, 0x05	; 5
USI_TWI_Master_Stop():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:264
  PORT_USI |= (1 << PIN_USI_SDA); // Release SDA.
  if (USI_TWI_MASTER_SPEED) DELAY_T2TWI_FM; else DELAY_T2TWI;

#ifdef SIGNAL_VERIFY
  if (!(USISR & (1 << USIPF))) {
    USI_TWI_state.errorState = USI_TWI_MISSING_STOP_CON;
     5d8:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <USI_TWI_state>
     5dc:	da cf       	rjmp	.-76     	; 0x592 <USI_TWI_Start_Transceiver_With_Data_Stop+0x48>
USI_TWI_Start_Transceiver_With_Data_Stop():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:191
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
        else
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_DATA;
        return (FALSE);
      }
      USI_TWI_state.addressMode = FALSE; // Only perform address transmission once.
     5de:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <USI_TWI_state>
     5e2:	8e 7f       	andi	r24, 0xFE	; 254
     5e4:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <USI_TWI_state>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:208
      } else {
        USIDR = 0x00; // Load ACK. Set data register bit 7 (output for SDA) low.
      }
      USI_TWI_Master_Transfer(tempUSISR_1bit); // Generate ACK/NACK.
    }
  } while (--msgSize); // Until all data sent/received.
     5e8:	01 50       	subi	r16, 0x01	; 1
     5ea:	21 96       	adiw	r28, 0x01	; 1
     5ec:	01 11       	cpse	r16, r1
     5ee:	db cf       	rjmp	.-74     	; 0x5a6 <USI_TWI_Start_Transceiver_With_Data_Stop+0x5c>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:210

  if (stop) {
     5f0:	11 11       	cpse	r17, r1
     5f2:	10 c0       	rjmp	.+32     	; 0x614 <USI_TWI_Start_Transceiver_With_Data_Stop+0xca>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:215
    USI_TWI_Master_Stop(); // Send a STOP condition on the TWI bus.
  }

  /* Transmission successfully completed*/
  return (TRUE);
     5f4:	11 e0       	ldi	r17, 0x01	; 1
     5f6:	cd cf       	rjmp	.-102    	; 0x592 <USI_TWI_Start_Transceiver_With_Data_Stop+0x48>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:196
      USI_TWI_state.addressMode = FALSE; // Only perform address transmission once.
    }
    /* Else masterRead cycle*/
    else {
      /* Read a data byte */
      DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
     5f8:	61 98       	cbi	0x0c, 1	; 12
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:197
      *(msg++) = USI_TWI_Master_Transfer(tempUSISR_8bit);
     5fa:	80 ef       	ldi	r24, 0xF0	; 240
     5fc:	0e 94 8c 02 	call	0x518	; 0x518 <USI_TWI_Master_Transfer>
     600:	88 83       	st	Y, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:200

      /* Prepare to generate ACK (or NACK in case of End Of Transmission) */
      if (msgSize == 1) // If transmission of last byte was performed.
     602:	01 30       	cpi	r16, 0x01	; 1
     604:	29 f4       	brne	.+10     	; 0x610 <USI_TWI_Start_Transceiver_With_Data_Stop+0xc6>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:202
      {
        USIDR = 0xFF; // Load NACK to confirm End Of Transmission.
     606:	fc bc       	out	0x2c, r15	; 44
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:206
      } else {
        USIDR = 0x00; // Load ACK. Set data register bit 7 (output for SDA) low.
      }
      USI_TWI_Master_Transfer(tempUSISR_1bit); // Generate ACK/NACK.
     608:	8e ef       	ldi	r24, 0xFE	; 254
     60a:	0e 94 8c 02 	call	0x518	; 0x518 <USI_TWI_Master_Transfer>
     60e:	ec cf       	rjmp	.-40     	; 0x5e8 <USI_TWI_Start_Transceiver_With_Data_Stop+0x9e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:204
      /* Prepare to generate ACK (or NACK in case of End Of Transmission) */
      if (msgSize == 1) // If transmission of last byte was performed.
      {
        USIDR = 0xFF; // Load NACK to confirm End Of Transmission.
      } else {
        USIDR = 0x00; // Load ACK. Set data register bit 7 (output for SDA) low.
     610:	1c bc       	out	0x2c, r1	; 44
     612:	fa cf       	rjmp	.-12     	; 0x608 <USI_TWI_Start_Transceiver_With_Data_Stop+0xbe>
USI_TWI_Master_Stop():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:254
 Function for generating a TWI Stop Condition. Used to release
 the TWI bus.
---------------------------------------------------------------*/
unsigned char USI_TWI_Master_Stop(void)
{
  PORT_USI &= ~(1 << PIN_USI_SDA); // Pull SDA low.
     614:	69 98       	cbi	0x0d, 1	; 13
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:255
  PORT_USI_CL |= (1 << PIN_USI_SCL);  // Release SCL.
     616:	49 9a       	sbi	0x09, 1	; 9
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:256
  while (!(PIN_USI_CL & (1 << PIN_USI_SCL)))
     618:	39 9b       	sbis	0x07, 1	; 7
     61a:	fe cf       	rjmp	.-4      	; 0x618 <USI_TWI_Start_Transceiver_With_Data_Stop+0xce>
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     61c:	84 e0       	ldi	r24, 0x04	; 4
     61e:	8a 95       	dec	r24
     620:	f1 f7       	brne	.-4      	; 0x61e <USI_TWI_Start_Transceiver_With_Data_Stop+0xd4>
USI_TWI_Master_Stop():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:259
    ; // Wait for SCL to go high.
  if (USI_TWI_MASTER_SPEED) DELAY_T4TWI_FM; else DELAY_T4TWI;
  PORT_USI |= (1 << PIN_USI_SDA); // Release SDA.
     622:	69 9a       	sbi	0x0d, 1	; 13
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     624:	85 e0       	ldi	r24, 0x05	; 5
     626:	8a 95       	dec	r24
     628:	f1 f7       	brne	.-4      	; 0x626 <USI_TWI_Start_Transceiver_With_Data_Stop+0xdc>
USI_TWI_Master_Stop():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:263
  if (USI_TWI_MASTER_SPEED) DELAY_T2TWI_FM; else DELAY_T2TWI;

#ifdef SIGNAL_VERIFY
  if (!(USISR & (1 << USIPF))) {
     62a:	0b b4       	in	r0, 0x2b	; 43
     62c:	05 fc       	sbrc	r0, 5
     62e:	e2 cf       	rjmp	.-60     	; 0x5f4 <USI_TWI_Start_Transceiver_With_Data_Stop+0xaa>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:264
    USI_TWI_state.errorState = USI_TWI_MISSING_STOP_CON;
     630:	88 e0       	ldi	r24, 0x08	; 8
     632:	d2 cf       	rjmp	.-92     	; 0x5d8 <USI_TWI_Start_Transceiver_With_Data_Stop+0x8e>

00000634 <TwoWire::endTransmission() [clone .constprop.34]>:
_ZN7TwoWire15endTransmissionEv.constprop.34():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:478

uint8_t TwoWire::endTransmission(uint8_t sendStop) {
  // transmit buffer (blocking)
  uint8_t ret = USI_TWI_Start_Transceiver_With_Data_Stop(Buffer,
                                                         BufferLength,
                                                         sendStop);
     634:	41 e0       	ldi	r20, 0x01	; 1
     636:	60 91 bf 01 	lds	r22, 0x01BF	; 0x8001bf <TwoWire::BufferLength>
     63a:	80 e3       	ldi	r24, 0x30	; 48
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	0e 94 a5 02 	call	0x54a	; 0x54a <USI_TWI_Start_Transceiver_With_Data_Stop>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:480
  // reset tx buffer iterator vars
  BufferIndex = 0;
     642:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <TwoWire::BufferIndex>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:481
  BufferLength = 0;
     646:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <TwoWire::BufferLength>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:483
  // indicate that we are done transmitting
  transmitting = 0;
     64a:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <TwoWire::transmitting>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:485
  // check for error
  if (ret == FALSE) {
     64e:	81 11       	cpse	r24, r1
     650:	10 c0       	rjmp	.+32     	; 0x672 <TwoWire::endTransmission() [clone .constprop.34]+0x3e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:486
    switch (USI_TWI_Get_State_Info()) {
     652:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <USI_TWI_state>
     656:	85 30       	cpi	r24, 0x05	; 5
     658:	41 f0       	breq	.+16     	; 0x66a <TwoWire::endTransmission() [clone .constprop.34]+0x36>
     65a:	86 30       	cpi	r24, 0x06	; 6
     65c:	21 f0       	breq	.+8      	; 0x666 <TwoWire::endTransmission() [clone .constprop.34]+0x32>
     65e:	81 30       	cpi	r24, 0x01	; 1
     660:	31 f4       	brne	.+12     	; 0x66e <TwoWire::endTransmission() [clone .constprop.34]+0x3a>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:488
    case USI_TWI_DATA_OUT_OF_BOUND:
      return 1; //data too long to fit in transmit buffer
     662:	81 e0       	ldi	r24, 0x01	; 1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:501
  return 0; //success
}

uint8_t TwoWire::endTransmission(void) {
  return endTransmission(true);
}
     664:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:490
  if (ret == FALSE) {
    switch (USI_TWI_Get_State_Info()) {
    case USI_TWI_DATA_OUT_OF_BOUND:
      return 1; //data too long to fit in transmit buffer
    case USI_TWI_NO_ACK_ON_ADDRESS:
      return 2; //received NACK on transmit of address
     666:	82 e0       	ldi	r24, 0x02	; 2
     668:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:492
    case USI_TWI_NO_ACK_ON_DATA:
      return 3; //received NACK on transmit of data
     66a:	83 e0       	ldi	r24, 0x03	; 3
     66c:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:494
    }
    return 4; //other error
     66e:	84 e0       	ldi	r24, 0x04	; 4
     670:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:496
  }
  return 0; //success
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	08 95       	ret

00000676 <Print::write(char const*) [clone .part.2] [clone .constprop.20]>:
_ZN5Print5writeEPKc.part.2.constprop.20():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.h:51
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
     676:	fc 01       	movw	r30, r24
     678:	01 90       	ld	r0, Z+
     67a:	00 20       	and	r0, r0
     67c:	e9 f7       	brne	.-6      	; 0x678 <Print::write(char const*) [clone .part.2] [clone .constprop.20]+0x2>
     67e:	31 97       	sbiw	r30, 0x01	; 1
     680:	af 01       	movw	r20, r30
     682:	48 1b       	sub	r20, r24
     684:	59 0b       	sbc	r21, r25
     686:	bc 01       	movw	r22, r24
     688:	8e e5       	ldi	r24, 0x5E	; 94
     68a:	91 e0       	ldi	r25, 0x01	; 1
     68c:	0c 94 bb 00 	jmp	0x176	; 0x176 <Print::write(unsigned char const*, unsigned int)>

00000690 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]>:
_ZN5Print11printNumberEmh.constprop.17():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:230
  return vfprintf_P(&f, (const char *)ifsh, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     690:	8f 92       	push	r8
     692:	9f 92       	push	r9
     694:	af 92       	push	r10
     696:	bf 92       	push	r11
     698:	ef 92       	push	r14
     69a:	ff 92       	push	r15
     69c:	0f 93       	push	r16
     69e:	1f 93       	push	r17
     6a0:	cf 93       	push	r28
     6a2:	df 93       	push	r29
     6a4:	cd b7       	in	r28, 0x3d	; 61
     6a6:	de b7       	in	r29, 0x3e	; 62
     6a8:	a1 97       	sbiw	r28, 0x21	; 33
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	f8 94       	cli
     6ae:	de bf       	out	0x3e, r29	; 62
     6b0:	0f be       	out	0x3f, r0	; 63
     6b2:	cd bf       	out	0x3d, r28	; 61
     6b4:	16 2f       	mov	r17, r22
     6b6:	04 2f       	mov	r16, r20
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:234
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     6b8:	19 a2       	std	Y+33, r1	; 0x21
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:237

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     6ba:	42 30       	cpi	r20, 0x02	; 2
     6bc:	08 f4       	brcc	.+2      	; 0x6c0 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]+0x30>
     6be:	0a e0       	ldi	r16, 0x0A	; 10
     6c0:	7e 01       	movw	r14, r28
     6c2:	21 e2       	ldi	r18, 0x21	; 33
     6c4:	e2 0e       	add	r14, r18
     6c6:	f1 1c       	adc	r15, r1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:241

  do {
    unsigned long m = n;
    n /= base;
     6c8:	80 2e       	mov	r8, r16
     6ca:	91 2c       	mov	r9, r1
     6cc:	b1 2c       	mov	r11, r1
     6ce:	a1 2c       	mov	r10, r1
     6d0:	61 2f       	mov	r22, r17
     6d2:	a5 01       	movw	r20, r10
     6d4:	94 01       	movw	r18, r8
     6d6:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__udivmodsi4>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:242
    char c = m - base * n;
     6da:	80 2f       	mov	r24, r16
     6dc:	62 2f       	mov	r22, r18
     6de:	0e 94 16 08 	call	0x102c	; 0x102c <__mulqi3>
     6e2:	18 1b       	sub	r17, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:243
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     6e4:	1a 30       	cpi	r17, 0x0A	; 10
     6e6:	1c f5       	brge	.+70     	; 0x72e <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]+0x9e>
     6e8:	10 5d       	subi	r17, 0xD0	; 208
     6ea:	f7 01       	movw	r30, r14
     6ec:	12 93       	st	-Z, r17
     6ee:	7f 01       	movw	r14, r30
     6f0:	12 2f       	mov	r17, r18
     6f2:	73 2f       	mov	r23, r19
     6f4:	ca 01       	movw	r24, r20
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:244
  } while(n);
     6f6:	23 2b       	or	r18, r19
     6f8:	24 2b       	or	r18, r20
     6fa:	25 2b       	or	r18, r21
     6fc:	49 f7       	brne	.-46     	; 0x6d0 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]+0x40>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.h:50
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
write():
     702:	30 97       	sbiw	r30, 0x00	; 0
     704:	19 f0       	breq	.+6      	; 0x70c <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]+0x7c>
     706:	cf 01       	movw	r24, r30
     708:	0e 94 3b 03 	call	0x676	; 0x676 <Print::write(char const*) [clone .part.2] [clone .constprop.20]>
_ZN5Print11printNumberEmh.constprop.17():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:247

  return write(str);
}
     70c:	a1 96       	adiw	r28, 0x21	; 33
     70e:	0f b6       	in	r0, 0x3f	; 63
     710:	f8 94       	cli
     712:	de bf       	out	0x3e, r29	; 62
     714:	0f be       	out	0x3f, r0	; 63
     716:	cd bf       	out	0x3d, r28	; 61
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	1f 91       	pop	r17
     71e:	0f 91       	pop	r16
     720:	ff 90       	pop	r15
     722:	ef 90       	pop	r14
     724:	bf 90       	pop	r11
     726:	af 90       	pop	r10
     728:	9f 90       	pop	r9
     72a:	8f 90       	pop	r8
     72c:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:243

  do {
    unsigned long m = n;
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     72e:	19 5c       	subi	r17, 0xC9	; 201
     730:	dc cf       	rjmp	.-72     	; 0x6ea <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]+0x5a>

00000732 <Print::printFloat(double, unsigned char) [clone .constprop.12]>:
_ZN5Print10printFloatEdh.constprop.12():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:249
  } while(n);

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
     732:	4f 92       	push	r4
     734:	5f 92       	push	r5
     736:	6f 92       	push	r6
     738:	7f 92       	push	r7
     73a:	8f 92       	push	r8
     73c:	9f 92       	push	r9
     73e:	af 92       	push	r10
     740:	bf 92       	push	r11
     742:	cf 92       	push	r12
     744:	df 92       	push	r13
     746:	ef 92       	push	r14
     748:	ff 92       	push	r15
     74a:	0f 93       	push	r16
     74c:	1f 93       	push	r17
     74e:	cf 93       	push	r28
     750:	6b 01       	movw	r12, r22
     752:	7c 01       	movw	r14, r24
     754:	74 2e       	mov	r7, r20
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:253
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
     756:	ac 01       	movw	r20, r24
     758:	9b 01       	movw	r18, r22
     75a:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__unordsf2>
     75e:	88 23       	and	r24, r24
     760:	99 f0       	breq	.+38     	; 0x788 <Print::printFloat(double, unsigned char) [clone .constprop.12]+0x56>
write():
     762:	82 e1       	ldi	r24, 0x12	; 18
     764:	91 e0       	ldi	r25, 0x01	; 1
_ZN5Print10printFloatEdh.constprop.12():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:292
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
     766:	cf 91       	pop	r28
     768:	1f 91       	pop	r17
     76a:	0f 91       	pop	r16
     76c:	ff 90       	pop	r15
     76e:	ef 90       	pop	r14
     770:	df 90       	pop	r13
     772:	cf 90       	pop	r12
     774:	bf 90       	pop	r11
     776:	af 90       	pop	r10
     778:	9f 90       	pop	r9
     77a:	8f 90       	pop	r8
     77c:	7f 90       	pop	r7
     77e:	6f 90       	pop	r6
     780:	5f 90       	pop	r5
     782:	4f 90       	pop	r4
write():
     784:	0c 94 3b 03 	jmp	0x676	; 0x676 <Print::write(char const*) [clone .part.2] [clone .constprop.20]>
_ZN5Print10printFloatEdh.constprop.12():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:254
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
     788:	46 01       	movw	r8, r12
     78a:	57 01       	movw	r10, r14
     78c:	e8 94       	clt
     78e:	b7 f8       	bld	r11, 7
     790:	2f ef       	ldi	r18, 0xFF	; 255
     792:	3f ef       	ldi	r19, 0xFF	; 255
     794:	4f e7       	ldi	r20, 0x7F	; 127
     796:	5f e7       	ldi	r21, 0x7F	; 127
     798:	c5 01       	movw	r24, r10
     79a:	b4 01       	movw	r22, r8
     79c:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__unordsf2>
     7a0:	81 11       	cpse	r24, r1
     7a2:	0d c0       	rjmp	.+26     	; 0x7be <Print::printFloat(double, unsigned char) [clone .constprop.12]+0x8c>
     7a4:	2f ef       	ldi	r18, 0xFF	; 255
     7a6:	3f ef       	ldi	r19, 0xFF	; 255
     7a8:	4f e7       	ldi	r20, 0x7F	; 127
     7aa:	5f e7       	ldi	r21, 0x7F	; 127
     7ac:	c5 01       	movw	r24, r10
     7ae:	b4 01       	movw	r22, r8
     7b0:	0e 94 8c 08 	call	0x1118	; 0x1118 <__cmpsf2>
     7b4:	18 16       	cp	r1, r24
     7b6:	1c f4       	brge	.+6      	; 0x7be <Print::printFloat(double, unsigned char) [clone .constprop.12]+0x8c>
write():
     7b8:	86 e1       	ldi	r24, 0x16	; 22
     7ba:	91 e0       	ldi	r25, 0x01	; 1
     7bc:	d4 cf       	rjmp	.-88     	; 0x766 <Print::printFloat(double, unsigned char) [clone .constprop.12]+0x34>
_ZN5Print10printFloatEdh.constprop.12():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:255
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     7be:	2f ef       	ldi	r18, 0xFF	; 255
     7c0:	3f ef       	ldi	r19, 0xFF	; 255
     7c2:	4f e7       	ldi	r20, 0x7F	; 127
     7c4:	5f e4       	ldi	r21, 0x4F	; 79
     7c6:	c7 01       	movw	r24, r14
     7c8:	b6 01       	movw	r22, r12
     7ca:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <__gesf2>
     7ce:	18 16       	cp	r1, r24
     7d0:	1c f4       	brge	.+6      	; 0x7d8 <Print::printFloat(double, unsigned char) [clone .constprop.12]+0xa6>
write():
     7d2:	8a e1       	ldi	r24, 0x1A	; 26
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	c7 cf       	rjmp	.-114    	; 0x766 <Print::printFloat(double, unsigned char) [clone .constprop.12]+0x34>
_ZN5Print10printFloatEdh.constprop.12():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:256
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
     7d8:	2f ef       	ldi	r18, 0xFF	; 255
     7da:	3f ef       	ldi	r19, 0xFF	; 255
     7dc:	4f e7       	ldi	r20, 0x7F	; 127
     7de:	5f ec       	ldi	r21, 0xCF	; 207
     7e0:	c7 01       	movw	r24, r14
     7e2:	b6 01       	movw	r22, r12
     7e4:	0e 94 8c 08 	call	0x1118	; 0x1118 <__cmpsf2>
     7e8:	87 fd       	sbrc	r24, 7
     7ea:	f3 cf       	rjmp	.-26     	; 0x7d2 <Print::printFloat(double, unsigned char) [clone .constprop.12]+0xa0>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:259

  // Handle negative numbers
  if (number < 0.0)
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	a9 01       	movw	r20, r18
     7f2:	c7 01       	movw	r24, r14
     7f4:	b6 01       	movw	r22, r12
     7f6:	0e 94 8c 08 	call	0x1118	; 0x1118 <__cmpsf2>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:251
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
     7fa:	10 e0       	ldi	r17, 0x00	; 0
     7fc:	00 e0       	ldi	r16, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:259
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
     7fe:	87 ff       	sbrs	r24, 7
     800:	0a c0       	rjmp	.+20     	; 0x816 <Print::printFloat(double, unsigned char) [clone .constprop.12]+0xe4>
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:66
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     802:	6d e2       	ldi	r22, 0x2D	; 45
     804:	8e e5       	ldi	r24, 0x5E	; 94
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	0e 94 40 01 	call	0x280	; 0x280 <HardwareSerial::write(unsigned char)>
     80c:	8c 01       	movw	r16, r24
_ZN5Print10printFloatEdh.constprop.12():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:262

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
     number = -number;
     80e:	f7 fa       	bst	r15, 7
     810:	f0 94       	com	r15
     812:	f7 f8       	bld	r15, 7
     814:	f0 94       	com	r15
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:267
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     816:	c0 e0       	ldi	r28, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:266
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
     818:	60 e0       	ldi	r22, 0x00	; 0
     81a:	70 e0       	ldi	r23, 0x00	; 0
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	9f e3       	ldi	r25, 0x3F	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:267
  for (uint8_t i=0; i<digits; ++i)
     820:	7c 16       	cp	r7, r28
     822:	41 f0       	breq	.+16     	; 0x834 <Print::printFloat(double, unsigned char) [clone .constprop.12]+0x102>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:268
    rounding /= 10.0;
     824:	20 e0       	ldi	r18, 0x00	; 0
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	40 e2       	ldi	r20, 0x20	; 32
     82a:	51 e4       	ldi	r21, 0x41	; 65
     82c:	0e 94 91 08 	call	0x1122	; 0x1122 <__divsf3>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:267
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     830:	cf 5f       	subi	r28, 0xFF	; 255
     832:	f6 cf       	rjmp	.-20     	; 0x820 <Print::printFloat(double, unsigned char) [clone .constprop.12]+0xee>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:270
    rounding /= 10.0;

  number += rounding;
     834:	a7 01       	movw	r20, r14
     836:	96 01       	movw	r18, r12
     838:	0e 94 20 08 	call	0x1040	; 0x1040 <__addsf3>
     83c:	2b 01       	movw	r4, r22
     83e:	3c 01       	movw	r6, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:273

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
     840:	0e 94 0a 09 	call	0x1214	; 0x1214 <__fixunssfsi>
     844:	4b 01       	movw	r8, r22
     846:	5c 01       	movw	r10, r24
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:103
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     848:	4a e0       	ldi	r20, 0x0A	; 10
     84a:	0e 94 48 03 	call	0x690	; 0x690 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]>
_ZN5Print10printFloatEdh.constprop.12():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:275
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
     84e:	7c 01       	movw	r14, r24
     850:	e0 0e       	add	r14, r16
     852:	f1 1e       	adc	r15, r17
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:278

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
     854:	cc 23       	and	r28, r28
     856:	09 f4       	brne	.+2      	; 0x85a <Print::printFloat(double, unsigned char) [clone .constprop.12]+0x128>
     858:	4d c0       	rjmp	.+154    	; 0x8f4 <Print::printFloat(double, unsigned char) [clone .constprop.12]+0x1c2>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:274

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
     85a:	c5 01       	movw	r24, r10
     85c:	b4 01       	movw	r22, r8
     85e:	0e 94 39 09 	call	0x1272	; 0x1272 <__floatunsisf>
     862:	9b 01       	movw	r18, r22
     864:	ac 01       	movw	r20, r24
     866:	c3 01       	movw	r24, r6
     868:	b2 01       	movw	r22, r4
     86a:	0e 94 1f 08 	call	0x103e	; 0x103e <__subsf3>
     86e:	4b 01       	movw	r8, r22
     870:	5c 01       	movw	r10, r24
write():
     872:	8e e1       	ldi	r24, 0x1E	; 30
     874:	91 e0       	ldi	r25, 0x01	; 1
     876:	0e 94 3b 03 	call	0x676	; 0x676 <Print::write(char const*) [clone .part.2] [clone .constprop.20]>
_ZN5Print10printFloatEdh.constprop.12():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:279
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
     87a:	e8 0e       	add	r14, r24
     87c:	f9 1e       	adc	r15, r25
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:283
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
     87e:	c1 50       	subi	r28, 0x01	; 1
     880:	c8 f1       	brcs	.+114    	; 0x8f4 <Print::printFloat(double, unsigned char) [clone .constprop.12]+0x1c2>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:285
  {
    remainder *= 10.0;
     882:	20 e0       	ldi	r18, 0x00	; 0
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	40 e2       	ldi	r20, 0x20	; 32
     888:	51 e4       	ldi	r21, 0x41	; 65
     88a:	c5 01       	movw	r24, r10
     88c:	b4 01       	movw	r22, r8
     88e:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <__mulsf3>
     892:	2b 01       	movw	r4, r22
     894:	3c 01       	movw	r6, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:286
    int toPrint = int(remainder);
     896:	0e 94 03 09 	call	0x1206	; 0x1206 <__fixsfsi>
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:76
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
     89a:	4b 01       	movw	r8, r22
     89c:	77 0f       	add	r23, r23
     89e:	aa 08       	sbc	r10, r10
     8a0:	bb 08       	sbc	r11, r11
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:89
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
     8a2:	b7 fe       	sbrs	r11, 7
     8a4:	21 c0       	rjmp	.+66     	; 0x8e8 <Print::printFloat(double, unsigned char) [clone .constprop.12]+0x1b6>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:66
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     8a6:	6d e2       	ldi	r22, 0x2D	; 45
     8a8:	8e e5       	ldi	r24, 0x5E	; 94
     8aa:	91 e0       	ldi	r25, 0x01	; 1
     8ac:	0e 94 40 01 	call	0x280	; 0x280 <HardwareSerial::write(unsigned char)>
     8b0:	6c 01       	movw	r12, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:91
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
     8b2:	66 27       	eor	r22, r22
     8b4:	77 27       	eor	r23, r23
     8b6:	cb 01       	movw	r24, r22
     8b8:	68 19       	sub	r22, r8
     8ba:	79 09       	sbc	r23, r9
     8bc:	8a 09       	sbc	r24, r10
     8be:	9b 09       	sbc	r25, r11
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:92
      return printNumber(n, 10) + t;
     8c0:	4a e0       	ldi	r20, 0x0A	; 10
     8c2:	0e 94 48 03 	call	0x690	; 0x690 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]>
     8c6:	8c 0d       	add	r24, r12
     8c8:	9d 1d       	adc	r25, r13
_ZN5Print10printFloatEdh.constprop.12():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:287
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
     8ca:	e8 0e       	add	r14, r24
     8cc:	f9 1e       	adc	r15, r25
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:288
    remainder -= toPrint;
     8ce:	c5 01       	movw	r24, r10
     8d0:	b4 01       	movw	r22, r8
     8d2:	0e 94 3b 09 	call	0x1276	; 0x1276 <__floatsisf>
     8d6:	9b 01       	movw	r18, r22
     8d8:	ac 01       	movw	r20, r24
     8da:	c3 01       	movw	r24, r6
     8dc:	b2 01       	movw	r22, r4
     8de:	0e 94 1f 08 	call	0x103e	; 0x103e <__subsf3>
     8e2:	4b 01       	movw	r8, r22
     8e4:	5c 01       	movw	r10, r24
     8e6:	cb cf       	rjmp	.-106    	; 0x87e <Print::printFloat(double, unsigned char) [clone .constprop.12]+0x14c>
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:94
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     8e8:	4a e0       	ldi	r20, 0x0A	; 10
     8ea:	c5 01       	movw	r24, r10
     8ec:	b4 01       	movw	r22, r8
     8ee:	0e 94 48 03 	call	0x690	; 0x690 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]>
     8f2:	eb cf       	rjmp	.-42     	; 0x8ca <Print::printFloat(double, unsigned char) [clone .constprop.12]+0x198>
_ZN5Print10printFloatEdh.constprop.12():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:292
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
     8f4:	c7 01       	movw	r24, r14
     8f6:	cf 91       	pop	r28
     8f8:	1f 91       	pop	r17
     8fa:	0f 91       	pop	r16
     8fc:	ff 90       	pop	r15
     8fe:	ef 90       	pop	r14
     900:	df 90       	pop	r13
     902:	cf 90       	pop	r12
     904:	bf 90       	pop	r11
     906:	af 90       	pop	r10
     908:	9f 90       	pop	r9
     90a:	8f 90       	pop	r8
     90c:	7f 90       	pop	r7
     90e:	6f 90       	pop	r6
     910:	5f 90       	pop	r5
     912:	4f 90       	pop	r4
     914:	08 95       	ret

00000916 <Print::println(double, int) [clone .constprop.11]>:
_ZN5Print7printlnEdi.constprop.11():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:186
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:108
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
     91a:	42 e0       	ldi	r20, 0x02	; 2
     91c:	0e 94 99 03 	call	0x732	; 0x732 <Print::printFloat(double, unsigned char) [clone .constprop.12]>
     920:	ec 01       	movw	r28, r24
_ZN5Print7printlnEdi.constprop.11():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:189
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
     922:	0e 94 8b 01 	call	0x316	; 0x316 <Print::println() [clone .constprop.21]>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:191
  return n;
}
     926:	8c 0f       	add	r24, r28
     928:	9d 1f       	adc	r25, r29
     92a:	df 91       	pop	r29
     92c:	cf 91       	pop	r28
     92e:	08 95       	ret

00000930 <__vector_17>:
__vector_17():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial0.cpp:63
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     930:	1f 92       	push	r1
     932:	0f 92       	push	r0
     934:	0f b6       	in	r0, 0x3f	; 63
     936:	0f 92       	push	r0
     938:	11 24       	eor	r1, r1
     93a:	2f 93       	push	r18
     93c:	3f 93       	push	r19
     93e:	4f 93       	push	r20
     940:	5f 93       	push	r21
     942:	6f 93       	push	r22
     944:	7f 93       	push	r23
     946:	8f 93       	push	r24
     948:	9f 93       	push	r25
     94a:	af 93       	push	r26
     94c:	bf 93       	push	r27
     94e:	ef 93       	push	r30
     950:	ff 93       	push	r31
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
     952:	8e e5       	ldi	r24, 0x5E	; 94
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	0e 94 1f 01 	call	0x23e	; 0x23e <HardwareSerial::_tx_udr_empty_irq()>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial0.cpp:65
}
     95a:	ff 91       	pop	r31
     95c:	ef 91       	pop	r30
     95e:	bf 91       	pop	r27
     960:	af 91       	pop	r26
     962:	9f 91       	pop	r25
     964:	8f 91       	pop	r24
     966:	7f 91       	pop	r23
     968:	6f 91       	pop	r22
     96a:	5f 91       	pop	r21
     96c:	4f 91       	pop	r20
     96e:	3f 91       	pop	r19
     970:	2f 91       	pop	r18
     972:	0f 90       	pop	r0
     974:	0f be       	out	0x3f, r0	; 63
     976:	0f 90       	pop	r0
     978:	1f 90       	pop	r1
     97a:	18 95       	reti

0000097c <__vector_16>:
__vector_16():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial0.cpp:48
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     97c:	1f 92       	push	r1
     97e:	0f 92       	push	r0
     980:	0f b6       	in	r0, 0x3f	; 63
     982:	0f 92       	push	r0
     984:	11 24       	eor	r1, r1
     986:	2f 93       	push	r18
     988:	8f 93       	push	r24
     98a:	9f 93       	push	r25
     98c:	ef 93       	push	r30
     98e:	ff 93       	push	r31
_rx_complete_irq():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     990:	e0 91 6e 01 	lds	r30, 0x016E	; 0x80016e <Serial+0x10>
     994:	f0 91 6f 01 	lds	r31, 0x016F	; 0x80016f <Serial+0x11>
     998:	80 81       	ld	r24, Z
     99a:	e0 91 74 01 	lds	r30, 0x0174	; 0x800174 <Serial+0x16>
     99e:	f0 91 75 01 	lds	r31, 0x0175	; 0x800175 <Serial+0x17>
     9a2:	82 fd       	sbrc	r24, 2
     9a4:	1b c0       	rjmp	.+54     	; 0x9dc <__vector_16+0x60>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     9a6:	90 81       	ld	r25, Z
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     9a8:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <Serial+0x19>
     9ac:	8f 5f       	subi	r24, 0xFF	; 255
     9ae:	8f 71       	andi	r24, 0x1F	; 31
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     9b0:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <Serial+0x1a>
     9b4:	82 17       	cp	r24, r18
     9b6:	41 f0       	breq	.+16     	; 0x9c8 <__vector_16+0x4c>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
     9b8:	e0 91 77 01 	lds	r30, 0x0177	; 0x800177 <Serial+0x19>
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	e2 5a       	subi	r30, 0xA2	; 162
     9c0:	fe 4f       	sbci	r31, 0xFE	; 254
     9c2:	95 8f       	std	Z+29, r25	; 0x1d
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial_private.h:115
      _rx_buffer_head = i;
     9c4:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <Serial+0x19>
__vector_16():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial0.cpp:50
    Serial._rx_complete_irq();
  }
     9c8:	ff 91       	pop	r31
     9ca:	ef 91       	pop	r30
     9cc:	9f 91       	pop	r25
     9ce:	8f 91       	pop	r24
     9d0:	2f 91       	pop	r18
     9d2:	0f 90       	pop	r0
     9d4:	0f be       	out	0x3f, r0	; 63
     9d6:	0f 90       	pop	r0
     9d8:	1f 90       	pop	r1
     9da:	18 95       	reti
_rx_complete_irq():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     9dc:	80 81       	ld	r24, Z
     9de:	f4 cf       	rjmp	.-24     	; 0x9c8 <__vector_16+0x4c>

000009e0 <__vector_12>:
__vector_12():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:86
volatile unsigned long millis_timer_overflow_count = 0;
volatile unsigned long millis_timer_millis = 0;
static unsigned char millis_timer_fract = 0;

ISR(MILLISTIMER_OVF_vect)
{
     9e0:	1f 92       	push	r1
     9e2:	0f 92       	push	r0
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	0f 92       	push	r0
     9e8:	11 24       	eor	r1, r1
     9ea:	2f 93       	push	r18
     9ec:	3f 93       	push	r19
     9ee:	8f 93       	push	r24
     9f0:	9f 93       	push	r25
     9f2:	af 93       	push	r26
     9f4:	bf 93       	push	r27
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:89
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access)
  unsigned long m = millis_timer_millis;
     9f6:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <millis_timer_millis>
     9fa:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <millis_timer_millis+0x1>
     9fe:	a0 91 54 01 	lds	r26, 0x0154	; 0x800154 <millis_timer_millis+0x2>
     a02:	b0 91 55 01 	lds	r27, 0x0155	; 0x800155 <millis_timer_millis+0x3>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:90
  unsigned char f = millis_timer_fract;
     a06:	30 91 51 01 	lds	r19, 0x0151	; 0x800151 <millis_timer_fract>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:102
    f -= FRACT_MAX;
    m += 1;
  }
...rmv */

  f += FRACT_INC;
     a0a:	26 e0       	ldi	r18, 0x06	; 6
     a0c:	23 0f       	add	r18, r19
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:104

  if (f >= FRACT_MAX)
     a0e:	2d 37       	cpi	r18, 0x7D	; 125
     a10:	68 f1       	brcs	.+90     	; 0xa6c <__vector_12+0x8c>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:106
  {
    f -= FRACT_MAX;
     a12:	29 e8       	ldi	r18, 0x89	; 137
     a14:	23 0f       	add	r18, r19
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:107
    m = m + MILLIS_INC + 1;
     a16:	03 96       	adiw	r24, 0x03	; 3
     a18:	a1 1d       	adc	r26, r1
     a1a:	b1 1d       	adc	r27, r1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:114
  else
  {
    m += MILLIS_INC;
  }

  millis_timer_fract = f;
     a1c:	20 93 51 01 	sts	0x0151, r18	; 0x800151 <millis_timer_fract>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:115
  millis_timer_millis = m;
     a20:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <millis_timer_millis>
     a24:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <millis_timer_millis+0x1>
     a28:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <millis_timer_millis+0x2>
     a2c:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <millis_timer_millis+0x3>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:116
  millis_timer_overflow_count++;
     a30:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <millis_timer_overflow_count>
     a34:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <millis_timer_overflow_count+0x1>
     a38:	a0 91 58 01 	lds	r26, 0x0158	; 0x800158 <millis_timer_overflow_count+0x2>
     a3c:	b0 91 59 01 	lds	r27, 0x0159	; 0x800159 <millis_timer_overflow_count+0x3>
     a40:	01 96       	adiw	r24, 0x01	; 1
     a42:	a1 1d       	adc	r26, r1
     a44:	b1 1d       	adc	r27, r1
     a46:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <millis_timer_overflow_count>
     a4a:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <millis_timer_overflow_count+0x1>
     a4e:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <millis_timer_overflow_count+0x2>
     a52:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <millis_timer_overflow_count+0x3>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:117
}
     a56:	bf 91       	pop	r27
     a58:	af 91       	pop	r26
     a5a:	9f 91       	pop	r25
     a5c:	8f 91       	pop	r24
     a5e:	3f 91       	pop	r19
     a60:	2f 91       	pop	r18
     a62:	0f 90       	pop	r0
     a64:	0f be       	out	0x3f, r0	; 63
     a66:	0f 90       	pop	r0
     a68:	1f 90       	pop	r1
     a6a:	18 95       	reti
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:111
    f -= FRACT_MAX;
    m = m + MILLIS_INC + 1;
  }
  else
  {
    m += MILLIS_INC;
     a6c:	02 96       	adiw	r24, 0x02	; 2
     a6e:	a1 1d       	adc	r26, r1
     a70:	b1 1d       	adc	r27, r1
     a72:	d4 cf       	rjmp	.-88     	; 0xa1c <__vector_12+0x3c>

00000a74 <__vector_24>:
__vector_24():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:207
/*----------------------------------------------------------
 Handles all the communication. Is disabled only when waiting
 for new Start Condition.
----------------------------------------------------------*/
ISR(USI_OVERFLOW_VECTOR)
{
     a74:	1f 92       	push	r1
     a76:	0f 92       	push	r0
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	0f 92       	push	r0
     a7c:	11 24       	eor	r1, r1
     a7e:	2f 93       	push	r18
     a80:	8f 93       	push	r24
     a82:	9f 93       	push	r25
     a84:	ef 93       	push	r30
     a86:	ff 93       	push	r31
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:212
  unsigned char tmpRxHead;
  unsigned char tmpTxTail; // Temporary variables to store volatiles
  unsigned char tmpUSIDR;

  switch (USI_TWI_Overflow_State) {
     a88:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <USI_TWI_Overflow_State>
     a8c:	82 30       	cpi	r24, 0x02	; 2
     a8e:	09 f4       	brne	.+2      	; 0xa92 <__vector_24+0x1e>
     a90:	5f c0       	rjmp	.+190    	; 0xb50 <__vector_24+0xdc>
     a92:	78 f4       	brcc	.+30     	; 0xab2 <__vector_24+0x3e>
     a94:	88 23       	and	r24, r24
     a96:	49 f1       	breq	.+82     	; 0xaea <__vector_24+0x76>
     a98:	81 30       	cpi	r24, 0x01	; 1
     a9a:	09 f4       	brne	.+2      	; 0xa9e <__vector_24+0x2a>
     a9c:	3f c0       	rjmp	.+126    	; 0xb1c <__vector_24+0xa8>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:306
    {
      SET_USI_TO_SEND_NACK();
    }
    break;
  }
}
     a9e:	ff 91       	pop	r31
     aa0:	ef 91       	pop	r30
     aa2:	9f 91       	pop	r25
     aa4:	8f 91       	pop	r24
     aa6:	2f 91       	pop	r18
     aa8:	0f 90       	pop	r0
     aaa:	0f be       	out	0x3f, r0	; 63
     aac:	0f 90       	pop	r0
     aae:	1f 90       	pop	r1
     ab0:	18 95       	reti
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:212
{
  unsigned char tmpRxHead;
  unsigned char tmpTxTail; // Temporary variables to store volatiles
  unsigned char tmpUSIDR;

  switch (USI_TWI_Overflow_State) {
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	09 f4       	brne	.+2      	; 0xab8 <__vector_24+0x44>
     ab6:	52 c0       	rjmp	.+164    	; 0xb5c <__vector_24+0xe8>
     ab8:	50 f1       	brcs	.+84     	; 0xb0e <__vector_24+0x9a>
     aba:	85 30       	cpi	r24, 0x05	; 5
     abc:	81 f7       	brne	.-32     	; 0xa9e <__vector_24+0x2a>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:293
    break;

  // Copy data from USIDR and send ACK. Next USI_SLAVE_REQUEST_DATA
  case USI_SLAVE_GET_DATA_AND_SEND_ACK:
    // Put data into Buffer
    USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
     abe:	84 e0       	ldi	r24, 0x04	; 4
     ac0:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <USI_TWI_Overflow_State>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:294
    tmpUSIDR              = USIDR; // Not necessary, but prevents warnings
     ac4:	9c b5       	in	r25, 0x2c	; 44
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:295
    tmpRxHead = (TWI_RxHead + 1) & TWI_RX_BUFFER_MASK;
     ac6:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <TWI_RxHead>
     aca:	8f 5f       	subi	r24, 0xFF	; 255
     acc:	8f 70       	andi	r24, 0x0F	; 15
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:296
    if (TWI_RxTail != tmpRxHead) {
     ace:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <TWI_RxTail>
     ad2:	28 17       	cp	r18, r24
     ad4:	09 f4       	brne	.+2      	; 0xad8 <__vector_24+0x64>
     ad6:	47 c0       	rjmp	.+142    	; 0xb66 <__vector_24+0xf2>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:297
      TWI_RxHead            = tmpRxHead;
     ad8:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <TWI_RxHead>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:298
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
     adc:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <TWI_RxHead>
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	e0 5d       	subi	r30, 0xD0	; 208
     ae4:	fe 4f       	sbci	r31, 0xFE	; 254
     ae6:	90 83       	st	Z, r25
     ae8:	0c c0       	rjmp	.+24     	; 0xb02 <__vector_24+0x8e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:216

  switch (USI_TWI_Overflow_State) {
  // ---------- Address mode ----------
  // Check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK, else reset USI.
  case USI_SLAVE_CHECK_ADDRESS:
    if ((USIDR == 0) || ((USIDR >> 1) == TWI_slaveAddress)) {
     aea:	8c b5       	in	r24, 0x2c	; 44
     aec:	88 23       	and	r24, r24
     aee:	19 f0       	breq	.+6      	; 0xaf6 <__vector_24+0x82>
     af0:	8c b5       	in	r24, 0x2c	; 44
     af2:	86 95       	lsr	r24
     af4:	79 f4       	brne	.+30     	; 0xb14 <__vector_24+0xa0>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:217
      if (USIDR & 0x01) {
     af6:	0c b4       	in	r0, 0x2c	; 44
     af8:	00 fe       	sbrs	r0, 0
     afa:	07 c0       	rjmp	.+14     	; 0xb0a <__vector_24+0x96>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:224
          // reset tx buffer and call callback
          tmpTxTail = TWI_TxHead;
          TWI_TxTail = tmpTxTail;
          USI_TWI_On_Slave_Transmit();
        }
        USI_TWI_Overflow_State = USI_SLAVE_SEND_DATA;
     afc:	81 e0       	ldi	r24, 0x01	; 1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:226
      } else {
        USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
     afe:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <USI_TWI_Overflow_State>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:228
      }
      SET_USI_TO_SEND_ACK();
     b02:	1c bc       	out	0x2c, r1	; 44
     b04:	61 9a       	sbi	0x0c, 1	; 12
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:302
      TWI_RxHead            = tmpRxHead;
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
      SET_USI_TO_SEND_ACK();
    } else // If the buffer is full then:
    {
      SET_USI_TO_SEND_NACK();
     b06:	8e e7       	ldi	r24, 0x7E	; 126
     b08:	21 c0       	rjmp	.+66     	; 0xb4c <__vector_24+0xd8>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:226
          TWI_TxTail = tmpTxTail;
          USI_TWI_On_Slave_Transmit();
        }
        USI_TWI_Overflow_State = USI_SLAVE_SEND_DATA;
      } else {
        USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
     b0a:	84 e0       	ldi	r24, 0x04	; 4
     b0c:	f8 cf       	rjmp	.-16     	; 0xafe <__vector_24+0x8a>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:237
    break;

  // ----- Master write data mode ------
  // Check reply and goto USI_SLAVE_SEND_DATA if OK, else reset USI.
  case USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA:
    if (USIDR) // If NACK, the master does not want more data.
     b0e:	8c b5       	in	r24, 0x2c	; 44
     b10:	88 23       	and	r24, r24
     b12:	21 f0       	breq	.+8      	; 0xb1c <__vector_24+0xa8>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:255
    if (TWI_TxHead != tmpTxTail) {
      TWI_TxTail = (TWI_TxTail + 1) & TWI_TX_BUFFER_MASK;
      USIDR      = TWI_TxBuf[TWI_TxTail];
    } else // If the buffer is empty then:
    {
      SET_USI_TO_TWI_START_CONDITION_MODE();
     b14:	61 98       	cbi	0x0c, 1	; 12
     b16:	88 ea       	ldi	r24, 0xA8	; 168
     b18:	8a bd       	out	0x2a, r24	; 42
     b1a:	17 c0       	rjmp	.+46     	; 0xb4a <__vector_24+0xd6>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:249
  // Copy data from buffer to USIDR and set USI to shift byte. Next USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA
  /* Falls through. */
  case USI_SLAVE_SEND_DATA:

    // Get data from Buffer
    tmpTxTail = TWI_TxTail; // Not necessary, but prevents warnings
     b1c:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <TWI_TxTail>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:250
    if (TWI_TxHead != tmpTxTail) {
     b20:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <TWI_TxHead>
     b24:	98 17       	cp	r25, r24
     b26:	b1 f3       	breq	.-20     	; 0xb14 <__vector_24+0xa0>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:251
      TWI_TxTail = (TWI_TxTail + 1) & TWI_TX_BUFFER_MASK;
     b28:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <TWI_TxTail>
     b2c:	8f 5f       	subi	r24, 0xFF	; 255
     b2e:	8f 70       	andi	r24, 0x0F	; 15
     b30:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <TWI_TxTail>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:252
      USIDR      = TWI_TxBuf[TWI_TxTail];
     b34:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <TWI_TxTail>
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	e0 5c       	subi	r30, 0xC0	; 192
     b3c:	fe 4f       	sbci	r31, 0xFE	; 254
     b3e:	80 81       	ld	r24, Z
     b40:	8c bd       	out	0x2c, r24	; 44
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:258
    } else // If the buffer is empty then:
    {
      SET_USI_TO_TWI_START_CONDITION_MODE();
      return;
    }
    USI_TWI_Overflow_State = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
     b42:	82 e0       	ldi	r24, 0x02	; 2
     b44:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <USI_TWI_Overflow_State>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:259
    SET_USI_TO_SEND_DATA();
     b48:	61 9a       	sbi	0x0c, 1	; 12
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:272

  // ----- Master read data mode ------
  // Set USI to sample data from master. Next USI_SLAVE_GET_DATA_AND_SEND_ACK.
  case USI_SLAVE_REQUEST_DATA:
    USI_TWI_Overflow_State = USI_SLAVE_GET_DATA_AND_SEND_ACK;
    SET_USI_TO_READ_DATA();
     b4a:	80 e7       	ldi	r24, 0x70	; 112
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:302
      TWI_RxHead            = tmpRxHead;
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
      SET_USI_TO_SEND_ACK();
    } else // If the buffer is full then:
    {
      SET_USI_TO_SEND_NACK();
     b4c:	8b bd       	out	0x2b, r24	; 43
     b4e:	a7 cf       	rjmp	.-178    	; 0xa9e <__vector_24+0x2a>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:264
    SET_USI_TO_SEND_DATA();
    break;

  // Set USI to sample reply from master. Next USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA
  case USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA:
    USI_TWI_Overflow_State = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
     b50:	83 e0       	ldi	r24, 0x03	; 3
     b52:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <USI_TWI_Overflow_State>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:265
    SET_USI_TO_READ_ACK();
     b56:	61 98       	cbi	0x0c, 1	; 12
     b58:	1c bc       	out	0x2c, r1	; 44
     b5a:	d5 cf       	rjmp	.-86     	; 0xb06 <__vector_24+0x92>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:271
    break;

  // ----- Master read data mode ------
  // Set USI to sample data from master. Next USI_SLAVE_GET_DATA_AND_SEND_ACK.
  case USI_SLAVE_REQUEST_DATA:
    USI_TWI_Overflow_State = USI_SLAVE_GET_DATA_AND_SEND_ACK;
     b5c:	85 e0       	ldi	r24, 0x05	; 5
     b5e:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <USI_TWI_Overflow_State>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:272
    SET_USI_TO_READ_DATA();
     b62:	61 98       	cbi	0x0c, 1	; 12
     b64:	f2 cf       	rjmp	.-28     	; 0xb4a <__vector_24+0xd6>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:302
      TWI_RxHead            = tmpRxHead;
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
      SET_USI_TO_SEND_ACK();
    } else // If the buffer is full then:
    {
      SET_USI_TO_SEND_NACK();
     b66:	61 98       	cbi	0x0c, 1	; 12
     b68:	ce cf       	rjmp	.-100    	; 0xb06 <__vector_24+0x92>

00000b6a <__vector_23>:
__vector_23():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:165
ISR(USI_START_VECTOR)
#elif __ICCAVR__
#pragma vector = USI_START_VECTOR
__interrupt void USI_Start_Condition_ISR(void)
#endif
{
     b6a:	1f 92       	push	r1
     b6c:	0f 92       	push	r0
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	0f 92       	push	r0
     b72:	11 24       	eor	r1, r1
     b74:	8f 93       	push	r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:178
      // reset rx buffer
      TWI_RxTail = tmpRxHead;
    }
  }

  USI_TWI_Overflow_State = USI_SLAVE_CHECK_ADDRESS;
     b76:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <USI_TWI_Overflow_State>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:179
  DDR_USI &= ~(1 << PORT_USI_SDA); // Set SDA as input
     b7a:	61 98       	cbi	0x0c, 1	; 12
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:180
  while ((tmpPin = (PIN_USI_CL & (1 << PORT_USI_SCL))) && ((PIN_USI & (1 << PIN_USI_SDA)) == 0))
     b7c:	39 9b       	sbis	0x07, 1	; 7
     b7e:	04 c0       	rjmp	.+8      	; 0xb88 <__vector_23+0x1e>
     b80:	59 9b       	sbis	0x0b, 1	; 11
     b82:	fc cf       	rjmp	.-8      	; 0xb7c <__vector_23+0x12>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:185
    ; // Wait for SCL to go low to ensure the "Start Condition" has completed.
        // If a Stop condition arises then leave the interrupt to prevent waiting forever.
  if (tmpPin) {
    // Stop Condition (waiting for next Start Condition)
    USICR = (1 << USISIE) | (0 << USIOIE) | // Enable Start Condition Interrupt. Disable Overflow Interrupt.
     b84:	88 ea       	ldi	r24, 0xA8	; 168
     b86:	01 c0       	rjmp	.+2      	; 0xb8a <__vector_23+0x20>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:192
                                            // to first Start Condition (potential failure)
            (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
            (0 << USITC);
  } else {
    // really Start Condition (Enable Overflow Interrupt)
    USICR = (1 << USISIE) | (1 << USIOIE)
     b88:	88 ef       	ldi	r24, 0xF8	; 248
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:185
  while ((tmpPin = (PIN_USI_CL & (1 << PORT_USI_SCL))) && ((PIN_USI & (1 << PIN_USI_SDA)) == 0))
    ; // Wait for SCL to go low to ensure the "Start Condition" has completed.
        // If a Stop condition arises then leave the interrupt to prevent waiting forever.
  if (tmpPin) {
    // Stop Condition (waiting for next Start Condition)
    USICR = (1 << USISIE) | (0 << USIOIE) | // Enable Start Condition Interrupt. Disable Overflow Interrupt.
     b8a:	8a bd       	out	0x2a, r24	; 42
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:198
            | // Enable Overflow and Start Condition Interrupt. (Keep StartCondInt to detect RESTART)
            (1 << USIWM1) | (1 << USIWM0) |                 // Set USI in Two-wire mode.
            (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
            (0 << USITC);
  }
  USISR = (1 << USI_START_COND_INT) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC) | // Clear flags
     b8c:	80 ef       	ldi	r24, 0xF0	; 240
     b8e:	8b bd       	out	0x2b, r24	; 43
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:200
          (0x0 << USICNT0); // Set USI to sample 8 bits i.e. count 16 external pin toggles.
}
     b90:	8f 91       	pop	r24
     b92:	0f 90       	pop	r0
     b94:	0f be       	out	0x3f, r0	; 63
     b96:	0f 90       	pop	r0
     b98:	1f 90       	pop	r1
     b9a:	18 95       	reti

00000b9c <__vector_4>:
__vector_4():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:75
        default:
            break;
    }
}

ISR(PCINT2_vect) {
     b9c:	1f 92       	push	r1
     b9e:	0f 92       	push	r0
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	0f 92       	push	r0
     ba4:	11 24       	eor	r1, r1
     ba6:	2f 93       	push	r18
     ba8:	3f 93       	push	r19
     baa:	4f 93       	push	r20
     bac:	5f 93       	push	r21
     bae:	6f 93       	push	r22
     bb0:	7f 93       	push	r23
     bb2:	8f 93       	push	r24
     bb4:	9f 93       	push	r25
     bb6:	af 93       	push	r26
     bb8:	bf 93       	push	r27
     bba:	ef 93       	push	r30
     bbc:	ff 93       	push	r31
digitalRead():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:248
#endif

int digitalRead(uint8_t pin)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t bit = digitalPinToBitMask(pin);
     bbe:	ef e9       	ldi	r30, 0x9F	; 159
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	84 91       	lpm	r24, Z
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:249
  uint8_t port = digitalPinToPort(pin);
     bc4:	ed e8       	ldi	r30, 0x8D	; 141
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	e4 91       	lpm	r30, Z
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:251

  if (port == NOT_A_PIN) return LOW;
     bca:	ee 23       	and	r30, r30
     bcc:	41 f0       	breq	.+16     	; 0xbde <__vector_4+0x42>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_digital.c:259
  // "read" should *NEVER* change the behavior of the thing you're using it on.
  // That's why it's called "read" not "write". As an added bonus, sets the
  // stage for auto-fast-digitalRead() for compile time known pins.
  // turnOffPWM( pin );

  if (*portInputRegister(port) & bit) return HIGH;
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	e0 59       	subi	r30, 0x90	; 144
     bd2:	ff 4f       	sbci	r31, 0xFF	; 255
     bd4:	a4 91       	lpm	r26, Z
     bd6:	b0 e0       	ldi	r27, 0x00	; 0
     bd8:	ec 91       	ld	r30, X
     bda:	e8 23       	and	r30, r24
     bdc:	a9 f4       	brne	.+42     	; 0xc08 <__vector_4+0x6c>
__vector_4():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:78

    if (!digitalRead(USER_SW)) {
        if (++log_mode > 3)log_mode = 0;
     bde:	80 91 5d 01 	lds	r24, 0x015D	; 0x80015d <log_mode>
     be2:	8f 5f       	subi	r24, 0xFF	; 255
     be4:	84 30       	cpi	r24, 0x04	; 4
     be6:	08 f5       	brcc	.+66     	; 0xc2a <__vector_4+0x8e>
     be8:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <log_mode>
write():
     bec:	89 e2       	ldi	r24, 0x29	; 41
     bee:	91 e0       	ldi	r25, 0x01	; 1
     bf0:	0e 94 3b 03 	call	0x676	; 0x676 <Print::write(char const*) [clone .part.2] [clone .constprop.20]>
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:71
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
     bf4:	60 91 5d 01 	lds	r22, 0x015D	; 0x80015d <log_mode>
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	80 e0       	ldi	r24, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:103
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     bfe:	4a e0       	ldi	r20, 0x0A	; 10
     c00:	0e 94 48 03 	call	0x690	; 0x690 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]>
println():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:154
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
     c04:	0e 94 8b 01 	call	0x316	; 0x316 <Print::println() [clone .constprop.21]>
__vector_4():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:82
        Serial.print("Mode :");
        Serial.println(log_mode);
    }
}
     c08:	ff 91       	pop	r31
     c0a:	ef 91       	pop	r30
     c0c:	bf 91       	pop	r27
     c0e:	af 91       	pop	r26
     c10:	9f 91       	pop	r25
     c12:	8f 91       	pop	r24
     c14:	7f 91       	pop	r23
     c16:	6f 91       	pop	r22
     c18:	5f 91       	pop	r21
     c1a:	4f 91       	pop	r20
     c1c:	3f 91       	pop	r19
     c1e:	2f 91       	pop	r18
     c20:	0f 90       	pop	r0
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	0f 90       	pop	r0
     c26:	1f 90       	pop	r1
     c28:	18 95       	reti
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:78
}

ISR(PCINT2_vect) {

    if (!digitalRead(USER_SW)) {
        if (++log_mode > 3)log_mode = 0;
     c2a:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <log_mode>
     c2e:	de cf       	rjmp	.-68     	; 0xbec <__vector_4+0x50>

00000c30 <main>:
main():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:572
  #else
  CLKPR=1<<CLKPCE; //enable change of protected register
  #endif
  CLKPR=1; //prescale by 2 for 4MHz
  #endif
  sei();
     c30:	78 94       	sei
Timer0_SetWaveformGenerationMode():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:677
}
timer0_wgm_t;

__attribute__((always_inline)) static inline void Timer0_SetWaveformGenerationMode( timer0_wgm_t wgm )
{
  TCCR0A = (TCCR0A & ~MASK2(WGM01,WGM00)) | (((wgm & B011) >> 0) << WGM00);
     c32:	8b b3       	in	r24, 0x1b	; 27
     c34:	83 60       	ori	r24, 0x03	; 3
     c36:	8b bb       	out	0x1b, r24	; 27
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:678
  TCCR0B = (TCCR0B & ~MASK1(WGM02))       | (((wgm & B100) >> 2) << WGM02);
     c38:	d3 98       	cbi	0x1a, 3	; 26
Timer0_ClockSelect():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:659
}
timer0_cs_t;

__attribute__((always_inline)) static inline void Timer0_ClockSelect( timer0_cs_t cs )
{
  TCCR0B = (TCCR0B & ~MASK3(CS02,CS01,CS00)) | (cs << CS00);
     c3a:	8a b3       	in	r24, 0x1a	; 26
     c3c:	88 7f       	andi	r24, 0xF8	; 248
     c3e:	82 60       	ori	r24, 0x02	; 2
     c40:	8a bb       	out	0x1a, r24	; 26
Timer0_EnableOverflowInterrupt():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:733
  TIMSK |= (1<<OCIE0A);
}

__attribute__((always_inline)) static inline void Timer0_EnableOverflowInterrupt( void )
{
  TIMSK |= (1<<TOIE0);
     c42:	8a b7       	in	r24, 0x3a	; 58
     c44:	82 60       	ori	r24, 0x02	; 2
     c46:	8a bf       	out	0x3a, r24	; 58
Timer1_ClockSelect():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:811
}
timer1_cs_t;

__attribute__((always_inline)) static inline void Timer1_ClockSelect( timer1_cs_t cs )
{
  TCCR1B = (TCCR1B & ~MASK3(CS12,CS11,CS10)) | (cs << CS10);
     c48:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
     c4c:	88 7f       	andi	r24, 0xF8	; 248
     c4e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
Timer1_SetWaveformGenerationMode():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:837
}
timer1_wgm_t;

__attribute__((always_inline)) static inline void Timer1_SetWaveformGenerationMode( timer1_wgm_t wgm )
{
  TCCR1A = (TCCR1A & ~MASK2(WGM11,WGM10)) | (((wgm & B0011) >> 0) << WGM10);
     c52:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__DATA_REGION_ORIGIN__+0x12>
     c56:	8c 7f       	andi	r24, 0xFC	; 252
     c58:	81 60       	ori	r24, 0x01	; 1
     c5a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__DATA_REGION_ORIGIN__+0x12>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:838
  TCCR1B = (TCCR1B & ~MASK2(WGM13,WGM12)) | (((wgm & B1100) >> 2) << WGM12);
     c5e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
     c62:	87 7e       	andi	r24, 0xE7	; 231
     c64:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
Timer1_ClockSelect():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:811
}
timer1_cs_t;

__attribute__((always_inline)) static inline void Timer1_ClockSelect( timer1_cs_t cs )
{
  TCCR1B = (TCCR1B & ~MASK3(CS12,CS11,CS10)) | (cs << CS10);
     c68:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
     c6c:	88 7f       	andi	r24, 0xF8	; 248
     c6e:	82 60       	ori	r24, 0x02	; 2
     c70:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
ADC_PrescalerSelect():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_adc.h:89
}
adc_ps_t;

__attribute__((always_inline)) static inline void ADC_PrescalerSelect( adc_ps_t ps )
{
  ADCSRA = (ADCSRA & ~MASK3(ADPS2,ADPS1,ADPS0)) | (ps << ADPS0);
     c74:	83 b1       	in	r24, 0x03	; 3
     c76:	88 7f       	andi	r24, 0xF8	; 248
     c78:	83 60       	ori	r24, 0x03	; 3
     c7a:	83 b9       	out	0x03, r24	; 3
ADC_Enable():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_adc.h:94
}

__attribute__((always_inline)) static inline void ADC_Enable( void )
{
  ADCSRA |= MASK1( ADEN );
     c7c:	1f 9a       	sbi	0x03, 7	; 3
setup():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:21
#include "RF24.h"

uint8_t log_mode = 0;

void setup() {
    pinMode(LED0, OUTPUT);
     c7e:	61 e0       	ldi	r22, 0x01	; 1
     c80:	8a e0       	ldi	r24, 0x0A	; 10
     c82:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <pinMode>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:22
    pinMode(LED1, OUTPUT);
     c86:	61 e0       	ldi	r22, 0x01	; 1
     c88:	89 e0       	ldi	r24, 0x09	; 9
     c8a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <pinMode>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:23
    pinMode(USER_SW, INPUT_PULLUP);
     c8e:	62 e0       	ldi	r22, 0x02	; 2
     c90:	8d e0       	ldi	r24, 0x0D	; 13
     c92:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <pinMode>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:24
    GIMSK |= (1 << PCIE2);
     c96:	8c b7       	in	r24, 0x3c	; 60
     c98:	80 62       	ori	r24, 0x20	; 32
     c9a:	8c bf       	out	0x3c, r24	; 60
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:25
    PCMSK2 |= (1 << PCINT12);
     c9c:	89 b5       	in	r24, 0x29	; 41
     c9e:	81 60       	ori	r24, 0x01	; 1
     ca0:	89 bd       	out	0x29, r24	; 41
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:26
    pinMode(NRF_CE, OUTPUT);
     ca2:	61 e0       	ldi	r22, 0x01	; 1
     ca4:	88 e0       	ldi	r24, 0x08	; 8
     ca6:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <pinMode>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:27
    pinMode(NRF_SCK, OUTPUT);
     caa:	61 e0       	ldi	r22, 0x01	; 1
     cac:	87 e0       	ldi	r24, 0x07	; 7
     cae:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <pinMode>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:28
    pinMode(NRF_MOSI, OUTPUT);
     cb2:	61 e0       	ldi	r22, 0x01	; 1
     cb4:	83 e0       	ldi	r24, 0x03	; 3
     cb6:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <pinMode>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:29
    pinMode(NRF_CSN, OUTPUT);
     cba:	61 e0       	ldi	r22, 0x01	; 1
     cbc:	82 e0       	ldi	r24, 0x02	; 2
     cbe:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <pinMode>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:30
    pinMode(NRF_IRQ, INPUT);
     cc2:	60 e0       	ldi	r22, 0x00	; 0
     cc4:	84 e0       	ldi	r24, 0x04	; 4
     cc6:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <pinMode>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:31
    pinMode(NRF_MISO, INPUT);
     cca:	60 e0       	ldi	r22, 0x00	; 0
     ccc:	86 e0       	ldi	r24, 0x06	; 6
     cce:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <pinMode>
begin():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     cd2:	e0 91 6e 01 	lds	r30, 0x016E	; 0x80016e <Serial+0x10>
     cd6:	f0 91 6f 01 	lds	r31, 0x016F	; 0x80016f <Serial+0x11>
     cda:	82 e0       	ldi	r24, 0x02	; 2
     cdc:	80 83       	st	Z, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     cde:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <Serial+0xc>
     ce2:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <Serial+0xd>
     ce6:	10 82       	st	Z, r1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
     ce8:	e0 91 6c 01 	lds	r30, 0x016C	; 0x80016c <Serial+0xe>
     cec:	f0 91 6d 01 	lds	r31, 0x016D	; 0x80016d <Serial+0xf>
     cf0:	8c e0       	ldi	r24, 0x0C	; 12
     cf2:	80 83       	st	Z, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:138

  _written = false;
     cf4:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <Serial+0x18>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:144

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     cf8:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <Serial+0x14>
     cfc:	f0 91 73 01 	lds	r31, 0x0173	; 0x800173 <Serial+0x15>
     d00:	86 e0       	ldi	r24, 0x06	; 6
     d02:	80 83       	st	Z, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:146

  sbi(*_ucsrb, RXEN0);
     d04:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <Serial+0x12>
     d08:	f0 91 71 01 	lds	r31, 0x0171	; 0x800171 <Serial+0x13>
     d0c:	80 81       	ld	r24, Z
     d0e:	80 61       	ori	r24, 0x10	; 16
     d10:	80 83       	st	Z, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:147
  sbi(*_ucsrb, TXEN0);
     d12:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <Serial+0x12>
     d16:	f0 91 71 01 	lds	r31, 0x0171	; 0x800171 <Serial+0x13>
     d1a:	80 81       	ld	r24, Z
     d1c:	88 60       	ori	r24, 0x08	; 8
     d1e:	80 83       	st	Z, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:148
  sbi(*_ucsrb, RXCIE0);
     d20:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <Serial+0x12>
     d24:	f0 91 71 01 	lds	r31, 0x0171	; 0x800171 <Serial+0x13>
     d28:	80 81       	ld	r24, Z
     d2a:	80 68       	ori	r24, 0x80	; 128
     d2c:	80 83       	st	Z, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:149
  cbi(*_ucsrb, UDRIE0);
     d2e:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <Serial+0x12>
     d32:	f0 91 71 01 	lds	r31, 0x0171	; 0x800171 <Serial+0x13>
     d36:	80 81       	ld	r24, Z
     d38:	8f 7d       	andi	r24, 0xDF	; 223
     d3a:	80 83       	st	Z, r24
write():
     d3c:	80 e2       	ldi	r24, 0x20	; 32
     d3e:	91 e0       	ldi	r25, 0x01	; 1
     d40:	0e 94 3b 03 	call	0x676	; 0x676 <Print::write(char const*) [clone .part.2] [clone .constprop.20]>
println():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:140
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
     d44:	0e 94 8b 01 	call	0x316	; 0x316 <Print::println() [clone .constprop.21]>
setup():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:34
    Serial.begin(9600);
    Serial.println("Reboot");
    delay(500);
     d48:	64 ef       	ldi	r22, 0xF4	; 244
     d4a:	71 e0       	ldi	r23, 0x01	; 1
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	0e 94 60 02 	call	0x4c0	; 0x4c0 <delay>
begin():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:364
}

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void) {
  BufferIndex = 0;
     d54:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <TwoWire::BufferIndex>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:365
  BufferLength = 0;
     d58:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <TwoWire::BufferLength>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:367

  transmitting = 0;
     d5c:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <TwoWire::transmitting>
USI_TWI_Master_Initialise():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:61
{
  #ifdef PUE_USI
  PUE_USI |=(1 << PIN_USI_SDA);
  PUE_USI_CL |=(1 << PIN_USI_SCL);
  #endif
  PORT_USI |= (1 << PIN_USI_SDA); // Enable pullup on SDA, to set high as released state.
     d60:	69 9a       	sbi	0x0d, 1	; 13
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:62
  PORT_USI_CL |= (1 << PIN_USI_SCL); // Enable pullup on SCL, to set high as released state.
     d62:	49 9a       	sbi	0x09, 1	; 9
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:64

  DDR_USI_CL |= (1 << PIN_USI_SCL); // Enable SCL as output.
     d64:	41 9a       	sbi	0x08, 1	; 8
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:65
  DDR_USI |= (1 << PIN_USI_SDA); // Enable SDA as output.
     d66:	61 9a       	sbi	0x0c, 1	; 12
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:67

  USIDR = 0xFF;                                           // Preload dataregister with "released level" data.
     d68:	8f ef       	ldi	r24, 0xFF	; 255
     d6a:	8c bd       	out	0x2c, r24	; 44
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:68
  USICR = (0 << USISIE) | (0 << USIOIE) |                 // Disable Interrupts.
     d6c:	8a e2       	ldi	r24, 0x2A	; 42
     d6e:	8a bd       	out	0x2a, r24	; 42
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:72
          (1 << USIWM1) | (0 << USIWM0) |                 // Set USI in Two-wire mode.
          (1 << USICS1) | (0 << USICS0) | (1 << USICLK) | // Software stobe as counter clock source
          (0 << USITC);
  USISR = (1 << USISIF) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC) | // Clear flags,
     d70:	80 ef       	ldi	r24, 0xF0	; 240
     d72:	8b bd       	out	0x2b, r24	; 43
beginTransmission():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:471
  BufferIndex = 1; // reserved by slave address
  BufferLength = BufferIndex;
}

void TwoWire::beginTransmission(int address) {
  beginTransmission((uint8_t)address);
     d74:	80 e6       	ldi	r24, 0x60	; 96
     d76:	0e 94 b0 00 	call	0x160	; 0x160 <TwoWire::beginTransmission(unsigned char) [clone .constprop.33]>
MPL_init():
/tmp/arduino_build_776089/sketch/Alt.cpp:46


void MPL_init() {
    Wire.begin();
    Wire.beginTransmission(ALTI_ADDR);
    Wire.write(ALTI_REG_CTRL1);
     d7a:	86 e2       	ldi	r24, 0x26	; 38
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	0e 94 7d 00 	call	0xfa	; 0xfa <TwoWire::write(int) [clone .constprop.36]>
/tmp/arduino_build_776089/sketch/Alt.cpp:47
    Wire.write(0xB8);//0b10111000);//Altimeter mode, OSR=0b111(128,512ms)
     d82:	88 eb       	ldi	r24, 0xB8	; 184
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	0e 94 7d 00 	call	0xfa	; 0xfa <TwoWire::write(int) [clone .constprop.36]>
/tmp/arduino_build_776089/sketch/Alt.cpp:48
    Wire.endTransmission();
     d8a:	0e 94 1a 03 	call	0x634	; 0x634 <TwoWire::endTransmission() [clone .constprop.34]>
beginTransmission():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:471
     d8e:	80 e6       	ldi	r24, 0x60	; 96
     d90:	0e 94 b0 00 	call	0x160	; 0x160 <TwoWire::beginTransmission(unsigned char) [clone .constprop.33]>
MPL_init():
/tmp/arduino_build_776089/sketch/Alt.cpp:51

    Wire.beginTransmission(ALTI_ADDR);
    Wire.write(ALTI_REG_PT_DATA_CFG);
     d94:	83 e1       	ldi	r24, 0x13	; 19
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	0e 94 7d 00 	call	0xfa	; 0xfa <TwoWire::write(int) [clone .constprop.36]>
/tmp/arduino_build_776089/sketch/Alt.cpp:52
    Wire.write(0x07);//0b00000111);//DREM=PDEFE=TDEFE=1: data ready event on new temperature or altitude readings.
     d9c:	87 e0       	ldi	r24, 0x07	; 7
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	0e 94 7d 00 	call	0xfa	; 0xfa <TwoWire::write(int) [clone .constprop.36]>
/tmp/arduino_build_776089/sketch/Alt.cpp:53
    Wire.endTransmission();
     da4:	0e 94 1a 03 	call	0x634	; 0x634 <TwoWire::endTransmission() [clone .constprop.34]>
beginTransmission():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:471
     da8:	80 e6       	ldi	r24, 0x60	; 96
     daa:	0e 94 b0 00 	call	0x160	; 0x160 <TwoWire::beginTransmission(unsigned char) [clone .constprop.33]>
MPL_init():
/tmp/arduino_build_776089/sketch/Alt.cpp:56

    Wire.beginTransmission(ALTI_ADDR);
    Wire.write(ALTI_REG_CTRL4);
     dae:	89 e2       	ldi	r24, 0x29	; 41
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	0e 94 7d 00 	call	0xfa	; 0xfa <TwoWire::write(int) [clone .constprop.36]>
/tmp/arduino_build_776089/sketch/Alt.cpp:57
    Wire.write(0x80);//INT_EN_DRDY=1 enable data ready interrupt
     db6:	80 e8       	ldi	r24, 0x80	; 128
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	0e 94 7d 00 	call	0xfa	; 0xfa <TwoWire::write(int) [clone .constprop.36]>
/tmp/arduino_build_776089/sketch/Alt.cpp:58
    Wire.endTransmission();
     dbe:	0e 94 1a 03 	call	0x634	; 0x634 <TwoWire::endTransmission() [clone .constprop.34]>
beginTransmission():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:471
     dc2:	80 e6       	ldi	r24, 0x60	; 96
     dc4:	0e 94 b0 00 	call	0x160	; 0x160 <TwoWire::beginTransmission(unsigned char) [clone .constprop.33]>
MPL_init():
/tmp/arduino_build_776089/sketch/Alt.cpp:61

    Wire.beginTransmission(ALTI_ADDR);
    Wire.write(ALTI_REG_CTRL5);
     dc8:	8a e2       	ldi	r24, 0x2A	; 42
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	0e 94 7d 00 	call	0xfa	; 0xfa <TwoWire::write(int) [clone .constprop.36]>
/tmp/arduino_build_776089/sketch/Alt.cpp:62
    Wire.write(0x80);//INT_EN_DRDY=1 route Data ready interrupt to INT1
     dd0:	80 e8       	ldi	r24, 0x80	; 128
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	0e 94 7d 00 	call	0xfa	; 0xfa <TwoWire::write(int) [clone .constprop.36]>
/tmp/arduino_build_776089/sketch/Alt.cpp:63
    Wire.endTransmission();
     dd8:	0e 94 1a 03 	call	0x634	; 0x634 <TwoWire::endTransmission() [clone .constprop.34]>
beginTransmission():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:471
     ddc:	80 e6       	ldi	r24, 0x60	; 96
     dde:	0e 94 b0 00 	call	0x160	; 0x160 <TwoWire::beginTransmission(unsigned char) [clone .constprop.33]>
MPL_init():
/tmp/arduino_build_776089/sketch/Alt.cpp:66

    Wire.beginTransmission(ALTI_ADDR);
    Wire.write(ALTI_REG_CTRL1);
     de2:	86 e2       	ldi	r24, 0x26	; 38
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	0e 94 7d 00 	call	0xfa	; 0xfa <TwoWire::write(int) [clone .constprop.36]>
/tmp/arduino_build_776089/sketch/Alt.cpp:67
    Wire.write(0xB9);//0b10111001);//Altimeter mode, OSR=0b111(128,512ms), Active
     dea:	89 eb       	ldi	r24, 0xB9	; 185
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	0e 94 7d 00 	call	0xfa	; 0xfa <TwoWire::write(int) [clone .constprop.36]>
/tmp/arduino_build_776089/sketch/Alt.cpp:68
    Wire.endTransmission();
     df2:	0e 94 1a 03 	call	0x634	; 0x634 <TwoWire::endTransmission() [clone .constprop.34]>
analogReference():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_analog.c:44
{
  // can't actually set the register here because the default setting
  // will connect AVCC and the AREF pin, which would cause a short if
  // there's something connected to AREF.
  // fix? Validate the mode?
  analog_reference = mode;
     df6:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <analog_reference>
requestFrom():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:426
  // clamp to buffer length
  if (quantity > TWI_BUFFER_SIZE) {
    quantity = TWI_BUFFER_SIZE;
  }
  // set address of targeted slave and read mode
  Buffer[0] = (address << TWI_ADR_BITS) | (1 << TWI_READ_BIT);
     dfa:	c1 ec       	ldi	r28, 0xC1	; 193
loop():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:41
    analogReference(DEFAULT);

}

void loop() {
    digitalWrite(LED1, HIGH);
     dfc:	61 e0       	ldi	r22, 0x01	; 1
     dfe:	89 e0       	ldi	r24, 0x09	; 9
     e00:	0e 94 bd 01 	call	0x37a	; 0x37a <digitalWrite>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:42
    digitalWrite(LED0, LOW);
     e04:	60 e0       	ldi	r22, 0x00	; 0
     e06:	8a e0       	ldi	r24, 0x0A	; 10
     e08:	0e 94 bd 01 	call	0x37a	; 0x37a <digitalWrite>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:43
    delay(200);
     e0c:	68 ec       	ldi	r22, 0xC8	; 200
     e0e:	70 e0       	ldi	r23, 0x00	; 0
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 60 02 	call	0x4c0	; 0x4c0 <delay>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:44
    digitalWrite(LED1, LOW);
     e18:	60 e0       	ldi	r22, 0x00	; 0
     e1a:	89 e0       	ldi	r24, 0x09	; 9
     e1c:	0e 94 bd 01 	call	0x37a	; 0x37a <digitalWrite>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:45
    digitalWrite(LED0, HIGH);
     e20:	61 e0       	ldi	r22, 0x01	; 1
     e22:	8a e0       	ldi	r24, 0x0A	; 10
     e24:	0e 94 bd 01 	call	0x37a	; 0x37a <digitalWrite>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:46
    delay(200);
     e28:	68 ec       	ldi	r22, 0xC8	; 200
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 60 02 	call	0x4c0	; 0x4c0 <delay>
ADC_SetVoltageReference():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_adc.h:256
}
adc_ic_t;

__attribute__((always_inline)) static inline void ADC_SetVoltageReference( adc_vr_t vr )
{
  ADMUX = (ADMUX & ~MASK2(REFS1,REFS0)) | (((vr & B11) >> 0) << REFS0);
     e34:	94 b1       	in	r25, 0x04	; 4
     e36:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <analog_reference>
     e3a:	82 95       	swap	r24
     e3c:	88 0f       	add	r24, r24
     e3e:	88 0f       	add	r24, r24
     e40:	80 7c       	andi	r24, 0xC0	; 192
     e42:	9f 73       	andi	r25, 0x3F	; 63
     e44:	89 2b       	or	r24, r25
     e46:	84 b9       	out	0x04, r24	; 4
ADC_SetInputChannel():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_adc.h:261
}

__attribute__((always_inline)) static inline void ADC_SetInputChannel( adc_ic_t ic )
{
  ADMUX = (ADMUX & ~MASK4(MUX3,MUX2,MUX1,MUX0)) | (ic << MUX0);
     e48:	84 b1       	in	r24, 0x04	; 4
     e4a:	80 7f       	andi	r24, 0xF0	; 240
     e4c:	84 b9       	out	0x04, r24	; 4
ADC_StartConversion():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_adc.h:266
}

__attribute__((always_inline)) static inline void ADC_StartConversion( void )
{
  ADCSRA |= MASK1( ADSC );
     e4e:	1e 9a       	sbi	0x03, 6	; 3
analogRead():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring_analog.c:61
  ADC_SetVoltageReference( analog_reference );
  ADC_SetInputChannel( pin );

  ADC_StartConversion();

  while( ADC_ConversionInProgress() );
     e50:	1e 99       	sbic	0x03, 6	; 3
     e52:	fe cf       	rjmp	.-4      	; 0xe50 <main+0x220>
ADC_GetDataRegister():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_adc.h:276
  return( (ADCSRA & (1<<ADSC)) != 0 );
}

__attribute__((always_inline)) static inline uint16_t ADC_GetDataRegister( void )
{
  return( ADC );
     e54:	60 b1       	in	r22, 0x00	; 0
     e56:	71 b1       	in	r23, 0x01	; 1
loop():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:48

    float batt_v = analogRead(Batt_sense) / 1024.0 * 3.2;
     e58:	07 2e       	mov	r0, r23
     e5a:	00 0c       	add	r0, r0
     e5c:	88 0b       	sbc	r24, r24
     e5e:	99 0b       	sbc	r25, r25
     e60:	0e 94 3b 09 	call	0x1276	; 0x1276 <__floatsisf>
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	40 e8       	ldi	r20, 0x80	; 128
     e6a:	5a e3       	ldi	r21, 0x3A	; 58
     e6c:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <__mulsf3>
     e70:	2d ec       	ldi	r18, 0xCD	; 205
     e72:	3c ec       	ldi	r19, 0xCC	; 204
     e74:	4c e4       	ldi	r20, 0x4C	; 76
     e76:	50 e4       	ldi	r21, 0x40	; 64
     e78:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <__mulsf3>
     e7c:	6b 01       	movw	r12, r22
     e7e:	7c 01       	movw	r14, r24
beginTransmission():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:471
  BufferIndex = 1; // reserved by slave address
  BufferLength = BufferIndex;
}

void TwoWire::beginTransmission(int address) {
  beginTransmission((uint8_t)address);
     e80:	80 e6       	ldi	r24, 0x60	; 96
     e82:	0e 94 b0 00 	call	0x160	; 0x160 <TwoWire::beginTransmission(unsigned char) [clone .constprop.33]>
MPL_readAltTemp():
/tmp/arduino_build_776089/sketch/Alt.cpp:99
}

void MPL_readAltTemp(uint32_t *alt, uint16_t *temp) {

    Wire.beginTransmission(ALTI_ADDR);
    Wire.write(0); //STATUS register (reads DR_STATUS reg (0x06))
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	0e 94 7d 00 	call	0xfa	; 0xfa <TwoWire::write(int) [clone .constprop.36]>
requestFrom():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:426
  // clamp to buffer length
  if (quantity > TWI_BUFFER_SIZE) {
    quantity = TWI_BUFFER_SIZE;
  }
  // set address of targeted slave and read mode
  Buffer[0] = (address << TWI_ADR_BITS) | (1 << TWI_READ_BIT);
     e8e:	c0 93 30 01 	sts	0x0130, r28	; 0x800130 <__data_end>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:429
  // perform blocking read into buffer
  uint8_t ret = USI_TWI_Start_Transceiver_With_Data_Stop(Buffer, quantity,
                                                         sendStop);
     e92:	41 e0       	ldi	r20, 0x01	; 1
     e94:	67 e0       	ldi	r22, 0x07	; 7
     e96:	80 e3       	ldi	r24, 0x30	; 48
     e98:	91 e0       	ldi	r25, 0x01	; 1
     e9a:	0e 94 a5 02 	call	0x54a	; 0x54a <USI_TWI_Start_Transceiver_With_Data_Stop>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:431
  // set rx buffer iterator vars
  BufferIndex = 1; // ignore slave address
     e9e:	91 e0       	ldi	r25, 0x01	; 1
     ea0:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <TwoWire::BufferIndex>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:433
  // check for error
  if (ret == FALSE) {
     ea4:	81 11       	cpse	r24, r1
     ea6:	3e c0       	rjmp	.+124    	; 0xf24 <main+0x2f4>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:434
    BufferLength = BufferIndex;
     ea8:	90 93 bf 01 	sts	0x01BF, r25	; 0x8001bf <TwoWire::BufferLength>
available():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:551

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void) {
  if (BufferLength) {
     eac:	10 91 bf 01 	lds	r17, 0x01BF	; 0x8001bf <TwoWire::BufferLength>
     eb0:	a1 e0       	ldi	r26, 0x01	; 1
     eb2:	b1 2c       	mov	r11, r1
     eb4:	a1 2c       	mov	r10, r1
     eb6:	40 e0       	ldi	r20, 0x00	; 0
     eb8:	50 e0       	ldi	r21, 0x00	; 0
     eba:	ba 01       	movw	r22, r20
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	11 23       	and	r17, r17
     ec0:	a9 f1       	breq	.+106    	; 0xf2c <main+0x2fc>
read():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:565
// or after requestFrom(address, numBytes)
int TwoWire::read(void) {
  int value = -1;

  // get each successive byte on each call
  if (available()) {
     ec2:	1a 13       	cpse	r17, r26
     ec4:	4b c0       	rjmp	.+150    	; 0xf5c <main+0x32c>
main():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:562

// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void) {
  int value = -1;
     ec6:	2f ef       	ldi	r18, 0xFF	; 255
     ec8:	3f ef       	ldi	r19, 0xFF	; 255
MPL_readAltTemp():
/tmp/arduino_build_776089/sketch/Alt.cpp:106
    uint32_t alti = 0; // in 16*meters
    uint16_t tempe = 0; //in 16*degrees
    Wire.requestFrom(ALTI_ADDR, n);//request n bytes from slave device, free up bus after transmission
    for (uint8_t i = 0; i < n; i++) {
        uint8_t d = Wire.read();
        if (i == 0) {
     eca:	bb 23       	and	r27, r27
     ecc:	41 f0       	breq	.+16     	; 0xede <main+0x2ae>
/tmp/arduino_build_776089/sketch/Alt.cpp:114
            } else if ( d & 0xF0) { //PTOW-POW-TOW some data was overwritten
                //Serial.print(",ok");
            } else { //no new data available

            }
        } else if (i < 4) {
     ece:	b4 30       	cpi	r27, 0x04	; 4
     ed0:	08 f0       	brcs	.+2      	; 0xed4 <main+0x2a4>
     ed2:	4b c0       	rjmp	.+150    	; 0xf6a <main+0x33a>
/tmp/arduino_build_776089/sketch/Alt.cpp:115
            alti = (alti << 8) | d;
     ed4:	76 2f       	mov	r23, r22
     ed6:	65 2f       	mov	r22, r21
     ed8:	54 2f       	mov	r21, r20
     eda:	44 27       	eor	r20, r20
     edc:	42 2b       	or	r20, r18
/tmp/arduino_build_776089/sketch/Alt.cpp:104
    Wire.write(0); //STATUS register (reads DR_STATUS reg (0x06))
    uint8_t n = 6;
    uint32_t alti = 0; // in 16*meters
    uint16_t tempe = 0; //in 16*degrees
    Wire.requestFrom(ALTI_ADDR, n);//request n bytes from slave device, free up bus after transmission
    for (uint8_t i = 0; i < n; i++) {
     ede:	bf 5f       	subi	r27, 0xFF	; 255
     ee0:	b6 30       	cpi	r27, 0x06	; 6
     ee2:	69 f7       	brne	.-38     	; 0xebe <main+0x28e>
     ee4:	a0 93 be 01 	sts	0x01BE, r26	; 0x8001be <TwoWire::BufferIndex>
/tmp/arduino_build_776089/sketch/Alt.cpp:120
            alti = (alti << 8) | d;
        } else {
            tempe = (tempe << 8) | d; //temp is 8MSBs=int value, 8LSBs=[4 decimal, 0b0000].
        }
    }
    *alt = alti >> 4;
     ee8:	cb 01       	movw	r24, r22
     eea:	ba 01       	movw	r22, r20
     eec:	24 e0       	ldi	r18, 0x04	; 4
     eee:	96 95       	lsr	r25
     ef0:	87 95       	ror	r24
     ef2:	77 95       	ror	r23
     ef4:	67 95       	ror	r22
     ef6:	2a 95       	dec	r18
     ef8:	d1 f7       	brne	.-12     	; 0xeee <main+0x2be>
/tmp/arduino_build_776089/sketch/Alt.cpp:121
    *temp = tempe >> 4;
     efa:	85 01       	movw	r16, r10
     efc:	34 e0       	ldi	r19, 0x04	; 4
     efe:	16 95       	lsr	r17
     f00:	07 95       	ror	r16
     f02:	3a 95       	dec	r19
     f04:	e1 f7       	brne	.-8      	; 0xefe <main+0x2ce>
loop():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:53
    uint32_t alti;
    uint16_t temp;
    MPL_readAltTemp(&alti,&temp);

    switch (log_mode) {
     f06:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <log_mode>
     f0a:	21 30       	cpi	r18, 0x01	; 1
     f0c:	09 f4       	brne	.+2      	; 0xf10 <main+0x2e0>
     f0e:	56 c0       	rjmp	.+172    	; 0xfbc <main+0x38c>
     f10:	80 f1       	brcs	.+96     	; 0xf72 <main+0x342>
     f12:	22 30       	cpi	r18, 0x02	; 2
     f14:	09 f4       	brne	.+2      	; 0xf18 <main+0x2e8>
     f16:	4f c0       	rjmp	.+158    	; 0xfb6 <main+0x386>
     f18:	23 30       	cpi	r18, 0x03	; 3
     f1a:	09 f0       	breq	.+2      	; 0xf1e <main+0x2ee>
     f1c:	6f cf       	rjmp	.-290    	; 0xdfc <main+0x1cc>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:68
            break;
        case 2://temp only
            Serial.println(temp / 16.0); //in degrees C
            break;
        case 3://batt only
            Serial.println(batt_v);
     f1e:	c7 01       	movw	r24, r14
     f20:	b6 01       	movw	r22, r12
     f22:	54 c0       	rjmp	.+168    	; 0xfcc <main+0x39c>
requestFrom():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:437
  // check for error
  if (ret == FALSE) {
    BufferLength = BufferIndex;
    return 0;
  }
  BufferLength = quantity;
     f24:	87 e0       	ldi	r24, 0x07	; 7
     f26:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <TwoWire::BufferLength>
     f2a:	c0 cf       	rjmp	.-128    	; 0xeac <main+0x27c>
USI_TWI_Data_In_Receive_Buffer():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:136

// Check if there is data in the receive buffer.
unsigned char USI_TWI_Data_In_Receive_Buffer(void)
{
  unsigned char tmpRxTail;          // Temporary variable to store volatile
  tmpRxTail = TWI_RxTail;           // Not necessary, but prevents warnings
     f2c:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <TWI_RxTail>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:137
  return (TWI_RxHead - tmpRxTail) & TWI_RX_BUFFER_MASK; // Return 0 (FALSE) if the receive buffer is empty.
     f30:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <TWI_RxHead>
     f34:	23 1b       	sub	r18, r19
     f36:	2f 70       	andi	r18, 0x0F	; 15
read():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:565
// or after requestFrom(address, numBytes)
int TwoWire::read(void) {
  int value = -1;

  // get each successive byte on each call
  if (available()) {
     f38:	31 f2       	breq	.-116    	; 0xec6 <main+0x296>
USI_TWI_Receive_Byte():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:112
// Returns a byte from the receive buffer. Waits if buffer is empty.
unsigned char USI_TWI_Receive_Byte(void)
{
  unsigned char tmptail;
  unsigned char tmpRxTail; // Temporary variable to store volatile
  tmpRxTail = TWI_RxTail;  // Not necessary, but prevents warnings
     f3a:	30 91 5c 01 	lds	r19, 0x015C	; 0x80015c <TWI_RxTail>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:113
  while (TWI_RxHead == tmpRxTail)
     f3e:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <TWI_RxHead>
     f42:	32 17       	cp	r19, r18
     f44:	e1 f3       	breq	.-8      	; 0xf3e <main+0x30e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:115
    ;
  tmptail    = (TWI_RxTail + 1) & TWI_RX_BUFFER_MASK; // Calculate buffer index
     f46:	e0 91 5c 01 	lds	r30, 0x015C	; 0x80015c <TWI_RxTail>
     f4a:	ef 5f       	subi	r30, 0xFF	; 255
     f4c:	ef 70       	andi	r30, 0x0F	; 15
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:116
  TWI_RxTail = tmptail;                               // Store new index
     f4e:	e0 93 5c 01 	sts	0x015C, r30	; 0x80015c <TWI_RxTail>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:117
  return TWI_RxBuf[tmptail];                          // Return data from the buffer.
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	e0 5d       	subi	r30, 0xD0	; 208
     f56:	fe 4f       	sbci	r31, 0xFE	; 254
read():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:570
    if (BufferLength) {
      value = Buffer[BufferIndex];
      ++BufferIndex;
    } else {
      value = USI_TWI_Receive_Byte();
     f58:	20 81       	ld	r18, Z
     f5a:	b7 cf       	rjmp	.-146    	; 0xeca <main+0x29a>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:567
  int value = -1;

  // get each successive byte on each call
  if (available()) {
    if (BufferLength) {
      value = Buffer[BufferIndex];
     f5c:	ea 2f       	mov	r30, r26
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	e0 5d       	subi	r30, 0xD0	; 208
     f62:	fe 4f       	sbci	r31, 0xFE	; 254
     f64:	20 81       	ld	r18, Z
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:568
      ++BufferIndex;
     f66:	af 5f       	subi	r26, 0xFF	; 255
     f68:	b0 cf       	rjmp	.-160    	; 0xeca <main+0x29a>
MPL_readAltTemp():
/tmp/arduino_build_776089/sketch/Alt.cpp:117

            }
        } else if (i < 4) {
            alti = (alti << 8) | d;
        } else {
            tempe = (tempe << 8) | d; //temp is 8MSBs=int value, 8LSBs=[4 decimal, 0b0000].
     f6a:	82 2f       	mov	r24, r18
     f6c:	9a 2d       	mov	r25, r10
     f6e:	5c 01       	movw	r10, r24
     f70:	b6 cf       	rjmp	.-148    	; 0xede <main+0x2ae>
loop():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:55
    uint16_t temp;
    MPL_readAltTemp(&alti,&temp);

    switch (log_mode) {
        case 0://All: alt,temp,batt
            Serial.print(alti / 16.0); //in meters
     f72:	0e 94 39 09 	call	0x1272	; 0x1272 <__floatunsisf>
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	40 e8       	ldi	r20, 0x80	; 128
     f7c:	5d e3       	ldi	r21, 0x3D	; 61
     f7e:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <__mulsf3>
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:108
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
     f82:	42 e0       	ldi	r20, 0x02	; 2
     f84:	0e 94 99 03 	call	0x732	; 0x732 <Print::printFloat(double, unsigned char) [clone .constprop.12]>
write():
     f88:	87 e2       	ldi	r24, 0x27	; 39
     f8a:	91 e0       	ldi	r25, 0x01	; 1
     f8c:	0e 94 3b 03 	call	0x676	; 0x676 <Print::write(char const*) [clone .part.2] [clone .constprop.20]>
loop():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:57
            Serial.print(",");
            Serial.print(temp / 16.0); //in degrees C
     f90:	b8 01       	movw	r22, r16
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	0e 94 39 09 	call	0x1272	; 0x1272 <__floatunsisf>
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	40 e8       	ldi	r20, 0x80	; 128
     fa0:	5d e3       	ldi	r21, 0x3D	; 61
     fa2:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <__mulsf3>
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:108
     fa6:	42 e0       	ldi	r20, 0x02	; 2
     fa8:	0e 94 99 03 	call	0x732	; 0x732 <Print::printFloat(double, unsigned char) [clone .constprop.12]>
write():
     fac:	87 e2       	ldi	r24, 0x27	; 39
     fae:	91 e0       	ldi	r25, 0x01	; 1
     fb0:	0e 94 3b 03 	call	0x676	; 0x676 <Print::write(char const*) [clone .part.2] [clone .constprop.20]>
     fb4:	b4 cf       	rjmp	.-152    	; 0xf1e <main+0x2ee>
loop():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:65
            break;
        case 1://alt only
            Serial.println(alti / 16.0); //in meters
            break;
        case 2://temp only
            Serial.println(temp / 16.0); //in degrees C
     fb6:	b8 01       	movw	r22, r16
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	0e 94 39 09 	call	0x1272	; 0x1272 <__floatunsisf>
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	40 e8       	ldi	r20, 0x80	; 128
     fc6:	5d e3       	ldi	r21, 0x3D	; 61
     fc8:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <__mulsf3>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:68
            break;
        case 3://batt only
            Serial.println(batt_v);
     fcc:	0e 94 8b 04 	call	0x916	; 0x916 <Print::println(double, int) [clone .constprop.11]>
     fd0:	15 cf       	rjmp	.-470    	; 0xdfc <main+0x1cc>

00000fd2 <_GLOBAL__sub_I___vector_16>:
_ZN5PrintC2Ev():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.h:43
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     fd2:	ee e5       	ldi	r30, 0x5E	; 94
     fd4:	f1 e0       	ldi	r31, 0x01	; 1
     fd6:	13 82       	std	Z+3, r1	; 0x03
     fd8:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC2Ev():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Stream.h:64
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     fda:	88 ee       	ldi	r24, 0xE8	; 232
     fdc:	93 e0       	ldi	r25, 0x03	; 3
     fde:	a0 e0       	ldi	r26, 0x00	; 0
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	84 83       	std	Z+4, r24	; 0x04
     fe4:	95 83       	std	Z+5, r25	; 0x05
     fe6:	a6 83       	std	Z+6, r26	; 0x06
     fe8:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC2EPVhS1_S1_S1_S1_S1_():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     fea:	84 e0       	ldi	r24, 0x04	; 4
     fec:	91 e0       	ldi	r25, 0x01	; 1
     fee:	91 83       	std	Z+1, r25	; 0x01
     ff0:	80 83       	st	Z, r24
     ff2:	82 e4       	ldi	r24, 0x42	; 66
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	95 87       	std	Z+13, r25	; 0x0d
     ff8:	84 87       	std	Z+12, r24	; 0x0c
     ffa:	81 e4       	ldi	r24, 0x41	; 65
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	97 87       	std	Z+15, r25	; 0x0f
    1000:	86 87       	std	Z+14, r24	; 0x0e
    1002:	86 e4       	ldi	r24, 0x46	; 70
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	91 8b       	std	Z+17, r25	; 0x11
    1008:	80 8b       	std	Z+16, r24	; 0x10
    100a:	85 e4       	ldi	r24, 0x45	; 69
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	93 8b       	std	Z+19, r25	; 0x13
    1010:	82 8b       	std	Z+18, r24	; 0x12
    1012:	84 e4       	ldi	r24, 0x44	; 68
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	95 8b       	std	Z+21, r25	; 0x15
    1018:	84 8b       	std	Z+20, r24	; 0x14
    101a:	80 e4       	ldi	r24, 0x40	; 64
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	97 8b       	std	Z+23, r25	; 0x17
    1020:	86 8b       	std	Z+22, r24	; 0x16
    1022:	11 8e       	std	Z+25, r1	; 0x19
    1024:	12 8e       	std	Z+26, r1	; 0x1a
    1026:	13 8e       	std	Z+27, r1	; 0x1b
    1028:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_16():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial0.cpp:77

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    102a:	08 95       	ret

0000102c <__mulqi3>:
__mulqi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:224
    102c:	00 24       	eor	r0, r0

0000102e <__mulqi3_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:226
    102e:	80 fd       	sbrc	r24, 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:227
    1030:	06 0e       	add	r0, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:228
    1032:	66 0f       	add	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:229
    1034:	11 f0       	breq	.+4      	; 0x103a <__mulqi3_exit>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:230
    1036:	86 95       	lsr	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:231
    1038:	d1 f7       	brne	.-12     	; 0x102e <__mulqi3_loop>

0000103a <__mulqi3_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:233
    103a:	80 2d       	mov	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:234
    103c:	08 95       	ret

0000103e <__subsf3>:
__subsf3():
    103e:	50 58       	subi	r21, 0x80	; 128

00001040 <__addsf3>:
    1040:	bb 27       	eor	r27, r27
    1042:	aa 27       	eor	r26, r26
    1044:	0e 94 37 08 	call	0x106e	; 0x106e <__addsf3x>
    1048:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <__fp_round>
__addsf3():
    104c:	0e 94 a3 09 	call	0x1346	; 0x1346 <__fp_pscA>
    1050:	38 f0       	brcs	.+14     	; 0x1060 <__addsf3+0x20>
    1052:	0e 94 aa 09 	call	0x1354	; 0x1354 <__fp_pscB>
    1056:	20 f0       	brcs	.+8      	; 0x1060 <__addsf3+0x20>
    1058:	39 f4       	brne	.+14     	; 0x1068 <__addsf3+0x28>
    105a:	9f 3f       	cpi	r25, 0xFF	; 255
    105c:	19 f4       	brne	.+6      	; 0x1064 <__addsf3+0x24>
    105e:	26 f4       	brtc	.+8      	; 0x1068 <__addsf3+0x28>
    1060:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <__fp_nan>
    1064:	0e f4       	brtc	.+2      	; 0x1068 <__addsf3+0x28>
    1066:	e0 95       	com	r30
    1068:	e7 fb       	bst	r30, 7
    106a:	0c 94 9a 09 	jmp	0x1334	; 0x1334 <__fp_inf>

0000106e <__addsf3x>:
__addsf3x():
    106e:	e9 2f       	mov	r30, r25
    1070:	0e 94 c2 09 	call	0x1384	; 0x1384 <__fp_split3>
    1074:	58 f3       	brcs	.-42     	; 0x104c <__addsf3+0xc>
    1076:	ba 17       	cp	r27, r26
    1078:	62 07       	cpc	r22, r18
    107a:	73 07       	cpc	r23, r19
    107c:	84 07       	cpc	r24, r20
    107e:	95 07       	cpc	r25, r21
    1080:	20 f0       	brcs	.+8      	; 0x108a <__addsf3x+0x1c>
    1082:	79 f4       	brne	.+30     	; 0x10a2 <__addsf3x+0x34>
    1084:	a6 f5       	brtc	.+104    	; 0x10ee <__addsf3x+0x80>
    1086:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <__fp_zero>
    108a:	0e f4       	brtc	.+2      	; 0x108e <__addsf3x+0x20>
    108c:	e0 95       	com	r30
    108e:	0b 2e       	mov	r0, r27
    1090:	ba 2f       	mov	r27, r26
    1092:	a0 2d       	mov	r26, r0
    1094:	0b 01       	movw	r0, r22
    1096:	b9 01       	movw	r22, r18
    1098:	90 01       	movw	r18, r0
    109a:	0c 01       	movw	r0, r24
    109c:	ca 01       	movw	r24, r20
    109e:	a0 01       	movw	r20, r0
    10a0:	11 24       	eor	r1, r1
    10a2:	ff 27       	eor	r31, r31
    10a4:	59 1b       	sub	r21, r25
    10a6:	99 f0       	breq	.+38     	; 0x10ce <__addsf3x+0x60>
    10a8:	59 3f       	cpi	r21, 0xF9	; 249
    10aa:	50 f4       	brcc	.+20     	; 0x10c0 <__addsf3x+0x52>
    10ac:	50 3e       	cpi	r21, 0xE0	; 224
    10ae:	68 f1       	brcs	.+90     	; 0x110a <__addsf3x+0x9c>
    10b0:	1a 16       	cp	r1, r26
    10b2:	f0 40       	sbci	r31, 0x00	; 0
    10b4:	a2 2f       	mov	r26, r18
    10b6:	23 2f       	mov	r18, r19
    10b8:	34 2f       	mov	r19, r20
    10ba:	44 27       	eor	r20, r20
    10bc:	58 5f       	subi	r21, 0xF8	; 248
    10be:	f3 cf       	rjmp	.-26     	; 0x10a6 <__addsf3x+0x38>
    10c0:	46 95       	lsr	r20
    10c2:	37 95       	ror	r19
    10c4:	27 95       	ror	r18
    10c6:	a7 95       	ror	r26
    10c8:	f0 40       	sbci	r31, 0x00	; 0
    10ca:	53 95       	inc	r21
    10cc:	c9 f7       	brne	.-14     	; 0x10c0 <__addsf3x+0x52>
    10ce:	7e f4       	brtc	.+30     	; 0x10ee <__addsf3x+0x80>
    10d0:	1f 16       	cp	r1, r31
    10d2:	ba 0b       	sbc	r27, r26
    10d4:	62 0b       	sbc	r22, r18
    10d6:	73 0b       	sbc	r23, r19
    10d8:	84 0b       	sbc	r24, r20
    10da:	ba f0       	brmi	.+46     	; 0x110a <__addsf3x+0x9c>
    10dc:	91 50       	subi	r25, 0x01	; 1
    10de:	a1 f0       	breq	.+40     	; 0x1108 <__addsf3x+0x9a>
    10e0:	ff 0f       	add	r31, r31
    10e2:	bb 1f       	adc	r27, r27
    10e4:	66 1f       	adc	r22, r22
    10e6:	77 1f       	adc	r23, r23
    10e8:	88 1f       	adc	r24, r24
    10ea:	c2 f7       	brpl	.-16     	; 0x10dc <__addsf3x+0x6e>
    10ec:	0e c0       	rjmp	.+28     	; 0x110a <__addsf3x+0x9c>
    10ee:	ba 0f       	add	r27, r26
    10f0:	62 1f       	adc	r22, r18
    10f2:	73 1f       	adc	r23, r19
    10f4:	84 1f       	adc	r24, r20
    10f6:	48 f4       	brcc	.+18     	; 0x110a <__addsf3x+0x9c>
    10f8:	87 95       	ror	r24
    10fa:	77 95       	ror	r23
    10fc:	67 95       	ror	r22
    10fe:	b7 95       	ror	r27
    1100:	f7 95       	ror	r31
    1102:	9e 3f       	cpi	r25, 0xFE	; 254
    1104:	08 f0       	brcs	.+2      	; 0x1108 <__addsf3x+0x9a>
    1106:	b0 cf       	rjmp	.-160    	; 0x1068 <__addsf3+0x28>
    1108:	93 95       	inc	r25
    110a:	88 0f       	add	r24, r24
    110c:	08 f0       	brcs	.+2      	; 0x1110 <__addsf3x+0xa2>
    110e:	99 27       	eor	r25, r25
    1110:	ee 0f       	add	r30, r30
    1112:	97 95       	ror	r25
    1114:	87 95       	ror	r24
    1116:	08 95       	ret

00001118 <__cmpsf2>:
    1118:	0e 94 76 09 	call	0x12ec	; 0x12ec <__fp_cmp>
    111c:	08 f4       	brcc	.+2      	; 0x1120 <__cmpsf2+0x8>
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	08 95       	ret

00001122 <__divsf3>:
    1122:	0e 94 a5 08 	call	0x114a	; 0x114a <__divsf3x>
    1126:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <__fp_round>
    112a:	0e 94 aa 09 	call	0x1354	; 0x1354 <__fp_pscB>
    112e:	58 f0       	brcs	.+22     	; 0x1146 <__divsf3+0x24>
    1130:	0e 94 a3 09 	call	0x1346	; 0x1346 <__fp_pscA>
    1134:	40 f0       	brcs	.+16     	; 0x1146 <__divsf3+0x24>
    1136:	29 f4       	brne	.+10     	; 0x1142 <__divsf3+0x20>
    1138:	5f 3f       	cpi	r21, 0xFF	; 255
__divsf3():
    113a:	29 f0       	breq	.+10     	; 0x1146 <__divsf3+0x24>
    113c:	0c 94 9a 09 	jmp	0x1334	; 0x1334 <__fp_inf>
    1140:	51 11       	cpse	r21, r1
    1142:	0c 94 e5 09 	jmp	0x13ca	; 0x13ca <__fp_szero>
    1146:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <__fp_nan>

0000114a <__divsf3x>:
__divsf3x():
    114a:	0e 94 c2 09 	call	0x1384	; 0x1384 <__fp_split3>
    114e:	68 f3       	brcs	.-38     	; 0x112a <__divsf3+0x8>

00001150 <__divsf3_pse>:
    1150:	99 23       	and	r25, r25
    1152:	b1 f3       	breq	.-20     	; 0x1140 <__divsf3+0x1e>
    1154:	55 23       	and	r21, r21
    1156:	91 f3       	breq	.-28     	; 0x113c <__divsf3+0x1a>
    1158:	95 1b       	sub	r25, r21
    115a:	55 0b       	sbc	r21, r21
    115c:	bb 27       	eor	r27, r27
    115e:	aa 27       	eor	r26, r26
    1160:	62 17       	cp	r22, r18
    1162:	73 07       	cpc	r23, r19
    1164:	84 07       	cpc	r24, r20
    1166:	38 f0       	brcs	.+14     	; 0x1176 <__divsf3_pse+0x26>
    1168:	9f 5f       	subi	r25, 0xFF	; 255
    116a:	5f 4f       	sbci	r21, 0xFF	; 255
    116c:	22 0f       	add	r18, r18
    116e:	33 1f       	adc	r19, r19
    1170:	44 1f       	adc	r20, r20
    1172:	aa 1f       	adc	r26, r26
    1174:	a9 f3       	breq	.-22     	; 0x1160 <__divsf3_pse+0x10>
    1176:	35 d0       	rcall	.+106    	; 0x11e2 <__divsf3_pse+0x92>
    1178:	0e 2e       	mov	r0, r30
    117a:	3a f0       	brmi	.+14     	; 0x118a <__divsf3_pse+0x3a>
    117c:	e0 e8       	ldi	r30, 0x80	; 128
    117e:	32 d0       	rcall	.+100    	; 0x11e4 <__divsf3_pse+0x94>
    1180:	91 50       	subi	r25, 0x01	; 1
    1182:	50 40       	sbci	r21, 0x00	; 0
    1184:	e6 95       	lsr	r30
    1186:	00 1c       	adc	r0, r0
    1188:	ca f7       	brpl	.-14     	; 0x117c <__divsf3_pse+0x2c>
    118a:	2b d0       	rcall	.+86     	; 0x11e2 <__divsf3_pse+0x92>
    118c:	fe 2f       	mov	r31, r30
    118e:	29 d0       	rcall	.+82     	; 0x11e2 <__divsf3_pse+0x92>
    1190:	66 0f       	add	r22, r22
    1192:	77 1f       	adc	r23, r23
    1194:	88 1f       	adc	r24, r24
    1196:	bb 1f       	adc	r27, r27
    1198:	26 17       	cp	r18, r22
    119a:	37 07       	cpc	r19, r23
    119c:	48 07       	cpc	r20, r24
    119e:	ab 07       	cpc	r26, r27
    11a0:	b0 e8       	ldi	r27, 0x80	; 128
    11a2:	09 f0       	breq	.+2      	; 0x11a6 <__divsf3_pse+0x56>
    11a4:	bb 0b       	sbc	r27, r27
    11a6:	80 2d       	mov	r24, r0
    11a8:	bf 01       	movw	r22, r30
    11aa:	ff 27       	eor	r31, r31
    11ac:	93 58       	subi	r25, 0x83	; 131
    11ae:	5f 4f       	sbci	r21, 0xFF	; 255
    11b0:	3a f0       	brmi	.+14     	; 0x11c0 <__divsf3_pse+0x70>
    11b2:	9e 3f       	cpi	r25, 0xFE	; 254
    11b4:	51 05       	cpc	r21, r1
    11b6:	78 f0       	brcs	.+30     	; 0x11d6 <__divsf3_pse+0x86>
    11b8:	0c 94 9a 09 	jmp	0x1334	; 0x1334 <__fp_inf>
    11bc:	0c 94 e5 09 	jmp	0x13ca	; 0x13ca <__fp_szero>
    11c0:	5f 3f       	cpi	r21, 0xFF	; 255
    11c2:	e4 f3       	brlt	.-8      	; 0x11bc <__divsf3_pse+0x6c>
    11c4:	98 3e       	cpi	r25, 0xE8	; 232
    11c6:	d4 f3       	brlt	.-12     	; 0x11bc <__divsf3_pse+0x6c>
    11c8:	86 95       	lsr	r24
    11ca:	77 95       	ror	r23
    11cc:	67 95       	ror	r22
    11ce:	b7 95       	ror	r27
    11d0:	f7 95       	ror	r31
    11d2:	9f 5f       	subi	r25, 0xFF	; 255
    11d4:	c9 f7       	brne	.-14     	; 0x11c8 <__divsf3_pse+0x78>
    11d6:	88 0f       	add	r24, r24
    11d8:	91 1d       	adc	r25, r1
    11da:	96 95       	lsr	r25
    11dc:	87 95       	ror	r24
    11de:	97 f9       	bld	r25, 7
    11e0:	08 95       	ret
    11e2:	e1 e0       	ldi	r30, 0x01	; 1
    11e4:	66 0f       	add	r22, r22
    11e6:	77 1f       	adc	r23, r23
    11e8:	88 1f       	adc	r24, r24
    11ea:	bb 1f       	adc	r27, r27
    11ec:	62 17       	cp	r22, r18
    11ee:	73 07       	cpc	r23, r19
    11f0:	84 07       	cpc	r24, r20
    11f2:	ba 07       	cpc	r27, r26
    11f4:	20 f0       	brcs	.+8      	; 0x11fe <__divsf3_pse+0xae>
    11f6:	62 1b       	sub	r22, r18
    11f8:	73 0b       	sbc	r23, r19
    11fa:	84 0b       	sbc	r24, r20
    11fc:	ba 0b       	sbc	r27, r26
    11fe:	ee 1f       	adc	r30, r30
    1200:	88 f7       	brcc	.-30     	; 0x11e4 <__divsf3_pse+0x94>
    1202:	e0 95       	com	r30
    1204:	08 95       	ret

00001206 <__fixsfsi>:
    1206:	0e 94 0a 09 	call	0x1214	; 0x1214 <__fixunssfsi>
    120a:	68 94       	set
    120c:	b1 11       	cpse	r27, r1
    120e:	0c 94 e5 09 	jmp	0x13ca	; 0x13ca <__fp_szero>
    1212:	08 95       	ret

00001214 <__fixunssfsi>:
    1214:	0e 94 ca 09 	call	0x1394	; 0x1394 <__fp_splitA>
    1218:	88 f0       	brcs	.+34     	; 0x123c <__fixunssfsi+0x28>
    121a:	9f 57       	subi	r25, 0x7F	; 127
    121c:	98 f0       	brcs	.+38     	; 0x1244 <__fixunssfsi+0x30>
    121e:	b9 2f       	mov	r27, r25
    1220:	99 27       	eor	r25, r25
    1222:	b7 51       	subi	r27, 0x17	; 23
    1224:	b0 f0       	brcs	.+44     	; 0x1252 <__fixunssfsi+0x3e>
__fixunssfsi():
    1226:	e1 f0       	breq	.+56     	; 0x1260 <__fixunssfsi+0x4c>
    1228:	66 0f       	add	r22, r22
    122a:	77 1f       	adc	r23, r23
    122c:	88 1f       	adc	r24, r24
    122e:	99 1f       	adc	r25, r25
    1230:	1a f0       	brmi	.+6      	; 0x1238 <__fixunssfsi+0x24>
    1232:	ba 95       	dec	r27
    1234:	c9 f7       	brne	.-14     	; 0x1228 <__fixunssfsi+0x14>
    1236:	14 c0       	rjmp	.+40     	; 0x1260 <__fixunssfsi+0x4c>
    1238:	b1 30       	cpi	r27, 0x01	; 1
    123a:	91 f0       	breq	.+36     	; 0x1260 <__fixunssfsi+0x4c>
    123c:	0e 94 e4 09 	call	0x13c8	; 0x13c8 <__fp_zero>
    1240:	b1 e0       	ldi	r27, 0x01	; 1
    1242:	08 95       	ret
    1244:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <__fp_zero>
    1248:	67 2f       	mov	r22, r23
    124a:	78 2f       	mov	r23, r24
    124c:	88 27       	eor	r24, r24
    124e:	b8 5f       	subi	r27, 0xF8	; 248
    1250:	39 f0       	breq	.+14     	; 0x1260 <__fixunssfsi+0x4c>
    1252:	b9 3f       	cpi	r27, 0xF9	; 249
    1254:	cc f3       	brlt	.-14     	; 0x1248 <__fixunssfsi+0x34>
    1256:	86 95       	lsr	r24
    1258:	77 95       	ror	r23
    125a:	67 95       	ror	r22
    125c:	b3 95       	inc	r27
    125e:	d9 f7       	brne	.-10     	; 0x1256 <__fixunssfsi+0x42>
    1260:	3e f4       	brtc	.+14     	; 0x1270 <__fixunssfsi+0x5c>
    1262:	90 95       	com	r25
    1264:	80 95       	com	r24
    1266:	70 95       	com	r23
    1268:	61 95       	neg	r22
    126a:	7f 4f       	sbci	r23, 0xFF	; 255
    126c:	8f 4f       	sbci	r24, 0xFF	; 255
    126e:	9f 4f       	sbci	r25, 0xFF	; 255
    1270:	08 95       	ret

00001272 <__floatunsisf>:
__floatunsisf():
    1272:	e8 94       	clt
    1274:	09 c0       	rjmp	.+18     	; 0x1288 <__floatsisf+0x12>

00001276 <__floatsisf>:
    1276:	97 fb       	bst	r25, 7
    1278:	3e f4       	brtc	.+14     	; 0x1288 <__floatsisf+0x12>
    127a:	90 95       	com	r25
    127c:	80 95       	com	r24
    127e:	70 95       	com	r23
    1280:	61 95       	neg	r22
    1282:	7f 4f       	sbci	r23, 0xFF	; 255
    1284:	8f 4f       	sbci	r24, 0xFF	; 255
    1286:	9f 4f       	sbci	r25, 0xFF	; 255
    1288:	99 23       	and	r25, r25
    128a:	a9 f0       	breq	.+42     	; 0x12b6 <__floatsisf+0x40>
    128c:	f9 2f       	mov	r31, r25
    128e:	96 e9       	ldi	r25, 0x96	; 150
    1290:	bb 27       	eor	r27, r27
    1292:	93 95       	inc	r25
    1294:	f6 95       	lsr	r31
    1296:	87 95       	ror	r24
    1298:	77 95       	ror	r23
    129a:	67 95       	ror	r22
    129c:	b7 95       	ror	r27
    129e:	f1 11       	cpse	r31, r1
    12a0:	f8 cf       	rjmp	.-16     	; 0x1292 <__floatsisf+0x1c>
    12a2:	fa f4       	brpl	.+62     	; 0x12e2 <__floatsisf+0x6c>
    12a4:	bb 0f       	add	r27, r27
    12a6:	11 f4       	brne	.+4      	; 0x12ac <__floatsisf+0x36>
    12a8:	60 ff       	sbrs	r22, 0
    12aa:	1b c0       	rjmp	.+54     	; 0x12e2 <__floatsisf+0x6c>
    12ac:	6f 5f       	subi	r22, 0xFF	; 255
    12ae:	7f 4f       	sbci	r23, 0xFF	; 255
    12b0:	8f 4f       	sbci	r24, 0xFF	; 255
    12b2:	9f 4f       	sbci	r25, 0xFF	; 255
    12b4:	16 c0       	rjmp	.+44     	; 0x12e2 <__floatsisf+0x6c>
    12b6:	88 23       	and	r24, r24
    12b8:	11 f0       	breq	.+4      	; 0x12be <__floatsisf+0x48>
    12ba:	96 e9       	ldi	r25, 0x96	; 150
    12bc:	11 c0       	rjmp	.+34     	; 0x12e0 <__floatsisf+0x6a>
    12be:	77 23       	and	r23, r23
    12c0:	21 f0       	breq	.+8      	; 0x12ca <__floatsisf+0x54>
    12c2:	9e e8       	ldi	r25, 0x8E	; 142
    12c4:	87 2f       	mov	r24, r23
    12c6:	76 2f       	mov	r23, r22
    12c8:	05 c0       	rjmp	.+10     	; 0x12d4 <__floatsisf+0x5e>
    12ca:	66 23       	and	r22, r22
    12cc:	71 f0       	breq	.+28     	; 0x12ea <__floatsisf+0x74>
    12ce:	96 e8       	ldi	r25, 0x86	; 134
    12d0:	86 2f       	mov	r24, r22
    12d2:	70 e0       	ldi	r23, 0x00	; 0
    12d4:	60 e0       	ldi	r22, 0x00	; 0
    12d6:	2a f0       	brmi	.+10     	; 0x12e2 <__floatsisf+0x6c>
    12d8:	9a 95       	dec	r25
    12da:	66 0f       	add	r22, r22
    12dc:	77 1f       	adc	r23, r23
    12de:	88 1f       	adc	r24, r24
    12e0:	da f7       	brpl	.-10     	; 0x12d8 <__floatsisf+0x62>
    12e2:	88 0f       	add	r24, r24
    12e4:	96 95       	lsr	r25
    12e6:	87 95       	ror	r24
    12e8:	97 f9       	bld	r25, 7
    12ea:	08 95       	ret

000012ec <__fp_cmp>:
__fp_cmp():
    12ec:	99 0f       	add	r25, r25
    12ee:	00 08       	sbc	r0, r0
    12f0:	55 0f       	add	r21, r21
    12f2:	aa 0b       	sbc	r26, r26
    12f4:	e0 e8       	ldi	r30, 0x80	; 128
    12f6:	fe ef       	ldi	r31, 0xFE	; 254
    12f8:	16 16       	cp	r1, r22
    12fa:	17 06       	cpc	r1, r23
    12fc:	e8 07       	cpc	r30, r24
    12fe:	f9 07       	cpc	r31, r25
    1300:	c0 f0       	brcs	.+48     	; 0x1332 <__fp_cmp+0x46>
    1302:	12 16       	cp	r1, r18
    1304:	13 06       	cpc	r1, r19
    1306:	e4 07       	cpc	r30, r20
    1308:	f5 07       	cpc	r31, r21
    130a:	98 f0       	brcs	.+38     	; 0x1332 <__fp_cmp+0x46>
    130c:	62 1b       	sub	r22, r18
    130e:	73 0b       	sbc	r23, r19
    1310:	84 0b       	sbc	r24, r20
    1312:	95 0b       	sbc	r25, r21
    1314:	39 f4       	brne	.+14     	; 0x1324 <__fp_cmp+0x38>
    1316:	0a 26       	eor	r0, r26
    1318:	61 f0       	breq	.+24     	; 0x1332 <__fp_cmp+0x46>
    131a:	23 2b       	or	r18, r19
    131c:	24 2b       	or	r18, r20
    131e:	25 2b       	or	r18, r21
    1320:	21 f4       	brne	.+8      	; 0x132a <__fp_cmp+0x3e>
    1322:	08 95       	ret
    1324:	0a 26       	eor	r0, r26
    1326:	09 f4       	brne	.+2      	; 0x132a <__fp_cmp+0x3e>
    1328:	a1 40       	sbci	r26, 0x01	; 1
    132a:	a6 95       	lsr	r26
    132c:	8f ef       	ldi	r24, 0xFF	; 255
    132e:	81 1d       	adc	r24, r1
    1330:	81 1d       	adc	r24, r1
    1332:	08 95       	ret

00001334 <__fp_inf>:
__fp_inf():
    1334:	97 f9       	bld	r25, 7
    1336:	9f 67       	ori	r25, 0x7F	; 127
    1338:	80 e8       	ldi	r24, 0x80	; 128
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	60 e0       	ldi	r22, 0x00	; 0
    133e:	08 95       	ret

00001340 <__fp_nan>:
__fp_nan():
    1340:	9f ef       	ldi	r25, 0xFF	; 255
    1342:	80 ec       	ldi	r24, 0xC0	; 192
    1344:	08 95       	ret

00001346 <__fp_pscA>:
__fp_pscA():
    1346:	00 24       	eor	r0, r0
    1348:	0a 94       	dec	r0
    134a:	16 16       	cp	r1, r22
    134c:	17 06       	cpc	r1, r23
    134e:	18 06       	cpc	r1, r24
    1350:	09 06       	cpc	r0, r25
    1352:	08 95       	ret

00001354 <__fp_pscB>:
__fp_pscB():
    1354:	00 24       	eor	r0, r0
    1356:	0a 94       	dec	r0
    1358:	12 16       	cp	r1, r18
    135a:	13 06       	cpc	r1, r19
    135c:	14 06       	cpc	r1, r20
    135e:	05 06       	cpc	r0, r21
    1360:	08 95       	ret

00001362 <__fp_round>:
__fp_round():
    1362:	09 2e       	mov	r0, r25
    1364:	03 94       	inc	r0
    1366:	00 0c       	add	r0, r0
    1368:	11 f4       	brne	.+4      	; 0x136e <__fp_round+0xc>
    136a:	88 23       	and	r24, r24
    136c:	52 f0       	brmi	.+20     	; 0x1382 <__fp_round+0x20>
    136e:	bb 0f       	add	r27, r27
    1370:	40 f4       	brcc	.+16     	; 0x1382 <__fp_round+0x20>
    1372:	bf 2b       	or	r27, r31
    1374:	11 f4       	brne	.+4      	; 0x137a <__fp_round+0x18>
    1376:	60 ff       	sbrs	r22, 0
    1378:	04 c0       	rjmp	.+8      	; 0x1382 <__fp_round+0x20>
    137a:	6f 5f       	subi	r22, 0xFF	; 255
    137c:	7f 4f       	sbci	r23, 0xFF	; 255
    137e:	8f 4f       	sbci	r24, 0xFF	; 255
    1380:	9f 4f       	sbci	r25, 0xFF	; 255
    1382:	08 95       	ret

00001384 <__fp_split3>:
__fp_split3():
    1384:	57 fd       	sbrc	r21, 7
    1386:	90 58       	subi	r25, 0x80	; 128
    1388:	44 0f       	add	r20, r20
    138a:	55 1f       	adc	r21, r21
    138c:	59 f0       	breq	.+22     	; 0x13a4 <__fp_splitA+0x10>
    138e:	5f 3f       	cpi	r21, 0xFF	; 255
    1390:	71 f0       	breq	.+28     	; 0x13ae <__fp_splitA+0x1a>
    1392:	47 95       	ror	r20

00001394 <__fp_splitA>:
    1394:	88 0f       	add	r24, r24
    1396:	97 fb       	bst	r25, 7
    1398:	99 1f       	adc	r25, r25
    139a:	61 f0       	breq	.+24     	; 0x13b4 <__fp_splitA+0x20>
    139c:	9f 3f       	cpi	r25, 0xFF	; 255
    139e:	79 f0       	breq	.+30     	; 0x13be <__fp_splitA+0x2a>
    13a0:	87 95       	ror	r24
    13a2:	08 95       	ret
    13a4:	12 16       	cp	r1, r18
    13a6:	13 06       	cpc	r1, r19
    13a8:	14 06       	cpc	r1, r20
    13aa:	55 1f       	adc	r21, r21
    13ac:	f2 cf       	rjmp	.-28     	; 0x1392 <__fp_split3+0xe>
    13ae:	46 95       	lsr	r20
    13b0:	f1 df       	rcall	.-30     	; 0x1394 <__fp_splitA>
    13b2:	08 c0       	rjmp	.+16     	; 0x13c4 <__fp_splitA+0x30>
    13b4:	16 16       	cp	r1, r22
    13b6:	17 06       	cpc	r1, r23
    13b8:	18 06       	cpc	r1, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	f1 cf       	rjmp	.-30     	; 0x13a0 <__fp_splitA+0xc>
    13be:	86 95       	lsr	r24
    13c0:	71 05       	cpc	r23, r1
    13c2:	61 05       	cpc	r22, r1
    13c4:	08 94       	sec
    13c6:	08 95       	ret

000013c8 <__fp_zero>:
__fp_zero():
    13c8:	e8 94       	clt

000013ca <__fp_szero>:
    13ca:	bb 27       	eor	r27, r27
    13cc:	66 27       	eor	r22, r22
    13ce:	77 27       	eor	r23, r23
    13d0:	cb 01       	movw	r24, r22
    13d2:	97 f9       	bld	r25, 7
    13d4:	08 95       	ret

000013d6 <__gesf2>:
__gesf2():
    13d6:	0e 94 76 09 	call	0x12ec	; 0x12ec <__fp_cmp>
    13da:	08 f4       	brcc	.+2      	; 0x13de <__gesf2+0x8>
    13dc:	8f ef       	ldi	r24, 0xFF	; 255
    13de:	08 95       	ret

000013e0 <__mulsf3>:
__mulsf3():
    13e0:	0e 94 02 0a 	call	0x1404	; 0x1404 <__mulsf3x>
    13e4:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <__fp_round>
    13e8:	0e 94 a3 09 	call	0x1346	; 0x1346 <__fp_pscA>
    13ec:	38 f0       	brcs	.+14     	; 0x13fc <__mulsf3+0x1c>
    13ee:	0e 94 aa 09 	call	0x1354	; 0x1354 <__fp_pscB>
    13f2:	20 f0       	brcs	.+8      	; 0x13fc <__mulsf3+0x1c>
    13f4:	95 23       	and	r25, r21
    13f6:	11 f0       	breq	.+4      	; 0x13fc <__mulsf3+0x1c>
    13f8:	0c 94 9a 09 	jmp	0x1334	; 0x1334 <__fp_inf>
    13fc:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <__fp_nan>
    1400:	0c 94 e5 09 	jmp	0x13ca	; 0x13ca <__fp_szero>

00001404 <__mulsf3x>:
__mulsf3x():
    1404:	0e 94 c2 09 	call	0x1384	; 0x1384 <__fp_split3>
    1408:	78 f3       	brcs	.-34     	; 0x13e8 <__mulsf3+0x8>

0000140a <__mulsf3_pse>:
    140a:	99 23       	and	r25, r25
    140c:	c9 f3       	breq	.-14     	; 0x1400 <__mulsf3+0x20>
    140e:	55 23       	and	r21, r21
    1410:	b9 f3       	breq	.-18     	; 0x1400 <__mulsf3+0x20>
    1412:	95 0f       	add	r25, r21
    1414:	50 e0       	ldi	r21, 0x00	; 0
    1416:	55 1f       	adc	r21, r21
    1418:	aa 27       	eor	r26, r26
    141a:	ee 27       	eor	r30, r30
    141c:	ff 27       	eor	r31, r31
    141e:	bb 27       	eor	r27, r27
    1420:	00 24       	eor	r0, r0
    1422:	08 94       	sec
    1424:	67 95       	ror	r22
    1426:	20 f4       	brcc	.+8      	; 0x1430 <__mulsf3_pse+0x26>
    1428:	e2 0f       	add	r30, r18
    142a:	f3 1f       	adc	r31, r19
    142c:	b4 1f       	adc	r27, r20
    142e:	0a 1e       	adc	r0, r26
    1430:	22 0f       	add	r18, r18
    1432:	33 1f       	adc	r19, r19
    1434:	44 1f       	adc	r20, r20
    1436:	aa 1f       	adc	r26, r26
    1438:	66 95       	lsr	r22
    143a:	a9 f7       	brne	.-22     	; 0x1426 <__mulsf3_pse+0x1c>
    143c:	77 95       	ror	r23
    143e:	30 f4       	brcc	.+12     	; 0x144c <__mulsf3_pse+0x42>
    1440:	f3 0f       	add	r31, r19
    1442:	b4 1f       	adc	r27, r20
    1444:	0a 1e       	adc	r0, r26
    1446:	12 1e       	adc	r1, r18
    1448:	08 f4       	brcc	.+2      	; 0x144c <__mulsf3_pse+0x42>
    144a:	63 95       	inc	r22
    144c:	33 0f       	add	r19, r19
    144e:	44 1f       	adc	r20, r20
    1450:	aa 1f       	adc	r26, r26
    1452:	22 1f       	adc	r18, r18
    1454:	76 95       	lsr	r23
    1456:	99 f7       	brne	.-26     	; 0x143e <__mulsf3_pse+0x34>
    1458:	87 95       	ror	r24
    145a:	20 f4       	brcc	.+8      	; 0x1464 <__mulsf3_pse+0x5a>
    145c:	b4 0f       	add	r27, r20
    145e:	0a 1e       	adc	r0, r26
    1460:	12 1e       	adc	r1, r18
    1462:	63 1f       	adc	r22, r19
    1464:	44 0f       	add	r20, r20
    1466:	aa 1f       	adc	r26, r26
    1468:	22 1f       	adc	r18, r18
    146a:	33 1f       	adc	r19, r19
    146c:	86 95       	lsr	r24
    146e:	a9 f7       	brne	.-22     	; 0x145a <__mulsf3_pse+0x50>
    1470:	86 2f       	mov	r24, r22
    1472:	71 2d       	mov	r23, r1
    1474:	60 2d       	mov	r22, r0
    1476:	11 24       	eor	r1, r1
    1478:	9f 57       	subi	r25, 0x7F	; 127
    147a:	50 40       	sbci	r21, 0x00	; 0
    147c:	9a f0       	brmi	.+38     	; 0x14a4 <__mulsf3_pse+0x9a>
    147e:	f1 f0       	breq	.+60     	; 0x14bc <__mulsf3_pse+0xb2>
    1480:	88 23       	and	r24, r24
    1482:	4a f0       	brmi	.+18     	; 0x1496 <__mulsf3_pse+0x8c>
    1484:	ee 0f       	add	r30, r30
    1486:	ff 1f       	adc	r31, r31
    1488:	bb 1f       	adc	r27, r27
    148a:	66 1f       	adc	r22, r22
    148c:	77 1f       	adc	r23, r23
    148e:	88 1f       	adc	r24, r24
    1490:	91 50       	subi	r25, 0x01	; 1
    1492:	50 40       	sbci	r21, 0x00	; 0
    1494:	a9 f7       	brne	.-22     	; 0x1480 <__mulsf3_pse+0x76>
    1496:	9e 3f       	cpi	r25, 0xFE	; 254
    1498:	51 05       	cpc	r21, r1
    149a:	80 f0       	brcs	.+32     	; 0x14bc <__mulsf3_pse+0xb2>
    149c:	0c 94 9a 09 	jmp	0x1334	; 0x1334 <__fp_inf>
    14a0:	0c 94 e5 09 	jmp	0x13ca	; 0x13ca <__fp_szero>
    14a4:	5f 3f       	cpi	r21, 0xFF	; 255
    14a6:	e4 f3       	brlt	.-8      	; 0x14a0 <__mulsf3_pse+0x96>
    14a8:	98 3e       	cpi	r25, 0xE8	; 232
    14aa:	d4 f3       	brlt	.-12     	; 0x14a0 <__mulsf3_pse+0x96>
    14ac:	86 95       	lsr	r24
    14ae:	77 95       	ror	r23
    14b0:	67 95       	ror	r22
    14b2:	b7 95       	ror	r27
    14b4:	f7 95       	ror	r31
    14b6:	e7 95       	ror	r30
    14b8:	9f 5f       	subi	r25, 0xFF	; 255
    14ba:	c1 f7       	brne	.-16     	; 0x14ac <__mulsf3_pse+0xa2>
    14bc:	fe 2b       	or	r31, r30
    14be:	88 0f       	add	r24, r24
    14c0:	91 1d       	adc	r25, r1
    14c2:	96 95       	lsr	r25
    14c4:	87 95       	ror	r24
    14c6:	97 f9       	bld	r25, 7
    14c8:	08 95       	ret

000014ca <__unordsf2>:
    14ca:	0e 94 76 09 	call	0x12ec	; 0x12ec <__fp_cmp>
    14ce:	88 0b       	sbc	r24, r24
    14d0:	99 0b       	sbc	r25, r25
    14d2:	08 95       	ret

000014d4 <__udivmodsi4>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    14d4:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    14d6:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    14d8:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    14da:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    14dc:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    14de:	0d c0       	rjmp	.+26     	; 0x14fa <__udivmodsi4_ep>

000014e0 <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    14e0:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    14e2:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    14e4:	ee 1f       	adc	r30, r30
__udivmodsi4_loop():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    14e6:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    14e8:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    14ea:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    14ec:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    14ee:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    14f0:	20 f0       	brcs	.+8      	; 0x14fa <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    14f2:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    14f4:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    14f6:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    14f8:	f5 0b       	sbc	r31, r21

000014fa <__udivmodsi4_ep>:
__udivmodsi4_ep():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    14fa:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    14fc:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    14fe:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    1500:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    1502:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    1504:	69 f7       	brne	.-38     	; 0x14e0 <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    1506:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    1508:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    150a:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    150c:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    150e:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    1510:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    1512:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1514:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1516:	08 95       	ret

00001518 <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1518:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    151a:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    151c:	05 90       	lpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    151e:	f4 91       	lpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1520:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1522:	09 94       	ijmp

00001524 <_exit>:
exit():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1524:	f8 94       	cli

00001526 <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1526:	ff cf       	rjmp	.-2      	; 0x1526 <__stop_program>
