
/tmp/arduino_build_596871/elevator_altimeter.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 2e 02 	jmp	0x45c	; 0x45c <__ctors_end>
       4:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
       8:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
       c:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      10:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      14:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      18:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      1c:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      20:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      24:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      28:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      2c:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      30:	0c 94 a1 08 	jmp	0x1142	; 0x1142 <__vector_12>
      34:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      38:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      3c:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      40:	0c 94 6f 08 	jmp	0x10de	; 0x10de <__vector_16>
      44:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__vector_17>
      48:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      4c:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      50:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      54:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      58:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      5c:	0c 94 66 09 	jmp	0x12cc	; 0x12cc <__vector_23>
      60:	0c 94 eb 08 	jmp	0x11d6	; 0x11d6 <__vector_24>
      64:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      68:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>
      6c:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__bad_interrupt>

00000070 <__trampolines_end>:
__trampolines_start():
      70:	09 3f       	cpi	r16, 0xF9	; 249
      72:	20 3d       	cpi	r18, 0xD0	; 208
      74:	20 68       	ori	r18, 0x80	; 128
      76:	65 6c       	ori	r22, 0xC5	; 197
      78:	70 20       	and	r7, r0
      7a:	2d 20       	and	r2, r13
      7c:	74 68       	ori	r23, 0x84	; 132
      7e:	69 73       	andi	r22, 0x39	; 57
      80:	20 70       	andi	r18, 0x00	; 0
      82:	61 67       	ori	r22, 0x71	; 113
      84:	65 00       	.word	0x0065	; ????

00000086 <_ZZ11displayHelpvE3__c__25_>:
      86:	0a 09 72 20 3d 20 72 65 73 65 74 20 74 6f 20 73     ..r = reset to s
      96:	74 61 72 74 75 70 20 64 65 66 61 75 6c 74 73 2e     tartup defaults.
	...

000000a7 <_ZZ11displayHelpvE3__c__24_>:
      a7:	09 50 20 3d 20 31 30 30 20 34 30 30 20 31 30 30     .P = 100 400 100
      b7:	30 20 33 34 30 30 20 35 30 30 30 20 4b 48 7a 20     0 3400 5000 KHz 
      c7:	28 73 74 61 6e 64 61 72 64 73 29 00                 (standards).

000000d3 <_ZZ11displayHelpvE3__c__23_>:
      d3:	09 4f 20 3d 20 35 30 30 30 20 4b 48 7a 00           .O = 5000 KHz.

000000e1 <_ZZ11displayHelpvE3__c__22_>:
      e1:	09 4e 20 3d 20 33 34 30 30 20 4b 48 7a 00           .N = 3400 KHz.

000000ef <_ZZ11displayHelpvE3__c__21_>:
      ef:	09 4d 20 3d 20 31 30 30 30 20 4b 48 7a 00           .M = 1000 KHz.

000000fd <_ZZ11displayHelpvE3__c__20_>:
      fd:	09 38 20 3d 20 20 38 30 30 20 4b 48 7a 00           .8 =  800 KHz.

0000010b <_ZZ11displayHelpvE3__c__19_>:
     10b:	09 21 21 20 48 49 47 48 20 53 50 45 45 44 53 20     .!! HIGH SPEEDS 
     11b:	2d 20 57 41 52 4e 49 4e 47 20 2d 20 63 61 6e 20     - WARNING - can 
     12b:	62 6c 6f 63 6b 20 2d 20 6e 6f 74 20 61 70 70 6c     block - not appl
     13b:	69 63 61 62 6c 65 20 66 6f 72 20 55 4e 4f 00        icable for UNO.

0000014a <_ZZ11displayHelpvE3__c__18_>:
     14a:	09 39 20 3d 20 35 30 2e 2e 34 30 30 20 4b 48 7a     .9 = 50..400 KHz
     15a:	20 2d 20 73 74 65 70 20 35 30 20 20 20 20 20 3c      - step 50     <
     16a:	20 44 45 46 41 55 4c 54 20 3e 00                     DEFAULT >.

00000175 <_ZZ11displayHelpvE3__c__17_>:
     175:	09 34 20 3d 20 34 30 30 20 4b 48 7a 00              .4 = 400 KHz.

00000182 <_ZZ11displayHelpvE3__c__16_>:
     182:	09 32 20 3d 20 32 30 30 20 4b 48 7a 00              .2 = 200 KHz.

0000018f <_ZZ11displayHelpvE3__c__15_>:
     18f:	09 31 20 3d 20 31 30 30 20 4b 48 7a 00              .1 = 100 KHz.

0000019c <_ZZ11displayHelpvE3__c__14_>:
     19c:	09 30 20 3d 20 31 30 30 2e 2e 38 30 30 20 4b 48     .0 = 100..800 KH
     1ac:	7a 20 2d 20 73 74 65 70 20 31 30 30 20 20 28 77     z - step 100  (w
     1bc:	61 72 6e 69 6e 67 20 2d 20 63 61 6e 20 62 6c 6f     arning - can blo
     1cc:	63 6b 21 21 29 00                                   ck!!).

000001d2 <_ZZ11displayHelpvE3__c__13_>:
     1d2:	53 70 65 65 64 73 3a 00                             Speeds:.

000001da <_ZZ11displayHelpvE3__c__12_>:
     1da:	09 61 20 3d 20 74 6f 67 67 6c 65 20 61 64 64 72     .a = toggle addr
     1ea:	65 73 73 20 72 61 6e 67 65 2c 20 30 2e 2e 31 32     ess range, 0..12
     1fa:	37 20 2d 20 38 2e 2e 31 31 39 20 28 64 65 66 61     7 - 8..119 (defa
     20a:	75 6c 74 29 00                                      ult).

0000020f <_ZZ11displayHelpvE3__c__11_>:
     20f:	09 68 20 3d 20 74 6f 67 67 6c 65 20 68 65 61 64     .h = toggle head
     21f:	65 72 20 2d 20 6e 6f 48 65 61 64 65 72 2e 00        er - noHeader..

0000022e <_ZZ11displayHelpvE3__c__10_>:
     22e:	09 70 20 3d 20 74 6f 67 67 6c 65 20 70 72 69 6e     .p = toggle prin
     23e:	74 41 6c 6c 20 2d 20 70 72 69 6e 74 46 6f 75 6e     tAll - printFoun
     24e:	64 2e 00                                            d..

00000251 <displayHelp()::__c>:
     251:	4f 75 74 70 75 74 3a 00                             Output:.

00000259 <displayHelp()::__c>:
     259:	09 69 20 3d 20 74 6f 67 67 6c 65 20 65 6e 61 62     .i = toggle enab
     269:	6c 65 2f 64 69 73 61 62 6c 65 20 69 6e 74 65 72     le/disable inter
     279:	72 75 70 74 73 00                                   rupts.

0000027f <displayHelp()::__c>:
     27f:	09 64 20 3d 20 74 6f 67 67 6c 65 20 6c 61 74 65     .d = toggle late
     28f:	6e 63 79 20 64 65 6c 61 79 20 62 65 74 77 65 65     ncy delay betwee
     29f:	6e 20 73 75 63 63 65 73 73 66 75 6c 20 74 65 73     n successful tes
     2af:	74 73 2e 20 30 20 2d 20 35 20 6d 73 00              ts. 0 - 5 ms.

000002bc <displayHelp()::__c>:
     2bc:	09 71 20 3d 20 71 75 69 74 20 63 6f 6e 74 69 6e     .q = quit contin
     2cc:	75 6f 75 73 20 73 63 61 6e 00                       uous scan.

000002d6 <displayHelp()::__c>:
     2d6:	09 63 20 3d 20 63 6f 6e 74 69 6e 75 6f 75 73 20     .c = continuous 
     2e6:	73 63 61 6e 20 2d 20 31 20 73 65 63 6f 6e 64 20     scan - 1 second 
     2f6:	64 65 6c 61 79 00                                   delay.

000002fc <displayHelp()::__c>:
     2fc:	09 73 20 3d 20 73 69 6e 67 6c 65 20 73 63 61 6e     .s = single scan
	...

0000030d <displayHelp()::__c>:
     30d:	53 63 61 6e 20 6d 6f 64 65 3a 00                    Scan mode:.

00000318 <displayHelp()::__c>:
     318:	09 40 20 3d 20 74 6f 67 67 6c 65 20 57 69 72 65     .@ = toggle Wire
     328:	20 2d 20 57 69 72 65 31 20 2e 2e 20 57 69 72 65      - Wire1 .. Wire
     338:	35 20 5b 65 2e 67 2e 20 54 45 45 4e 53 59 20 6f     5 [e.g. TEENSY o
     348:	72 20 41 72 64 75 69 6e 6f 20 44 75 65 5d 00        r Arduino Due].

00000357 <displayHelp()::__c>:
     357:	20 20 43 75 72 72 65 6e 74 3a 20 57 69 72 65 00       Current: Wire.

00000367 <displayHelp()::__c>:
     367:	49 32 43 20 70 6f 72 74 73 3a 20 00                 I2C ports: .

00000373 <displayHelp()::__c>:
     373:	0a 41 72 64 75 69 6e 6f 20 4d 75 6c 74 69 53 70     .Arduino MultiSp
     383:	65 65 64 20 49 32 43 20 53 63 61 6e 6e 65 72 20     eed I2C Scanner 
     393:	2d 20 00                                            - .

00000396 <_ZZ7I2CscanvE3__c__10_>:
     396:	20 6d 69 6c 6c 69 73 65 63 6f 6e 64 73 2e 00         milliseconds..

000003a5 <I2Cscan()::__c>:
     3a5:	20 64 65 76 69 63 65 73 20 66 6f 75 6e 64 20 69      devices found i
     3b5:	6e 20 00                                            n .

000003b8 <I2Cscan()::__c>:
     3b8:	2e 00                                               ..

000003ba <I2Cscan()::__c>:
     3ba:	56 00                                               V.

000003bc <I2Cscan()::__c>:
     3bc:	09 00                                               ..

000003be <I2Cscan()::__c>:
     3be:	09 00                                               ..

000003c0 <I2Cscan()::__c>:
     3c0:	09 30 78 00                                         .0x.

000003c4 <I2Cscan()::__c>:
     3c4:	09 00                                               ..

000003c6 <I2Cscan()::__c>:
     3c6:	2d 2d 2d 2d 2d 2d 2d 2d 00                          --------.

000003cf <I2Cscan()::__c>:
     3cf:	09 5b 4b 48 7a 5d 00                                .[KHz].

000003d6 <I2Cscan()::__c>:
     3d6:	09 00                                               ..

000003d8 <I2Cscan()::__c>:
     3d8:	54 49 4d 45 09 44 45 43 09 48 45 58 09 00           TIME.DEC.HEX..

000003e6 <setAddress()::__c>:
     3e6:	3e 00                                               >.

000003e8 <setAddress()::__c>:
     3e8:	2e 2e 00                                            ...

000003eb <setAddress()::__c>:
     3eb:	3c 61 64 64 72 65 73 73 20 52 61 6e 67 65 20 3d     <address Range =
     3fb:	20 00                                                .

000003fd <_ZZ4loopE3__c__12_>:
     3fd:	65 6e 61 62 6c 65 64 3e 00                          enabled>.

00000406 <_ZZ4loopE3__c__11_>:
     406:	64 69 61 62 6c 65 64 3e 00                          diabled>.

0000040f <_ZZ4loopE3__c__10_>:
     40f:	3c 69 72 71 3d 00                                   <irq=.

00000415 <loop::__c>:
     415:	66 6f 75 6e 64 3e 00                                found>.

0000041c <loop::__c>:
     41c:	61 6c 6c 3e 00                                      all>.

00000421 <loop::__c>:
     421:	3c 70 72 69 6e 74 3d 00                             <print=.

00000429 <loop::__c>:
     429:	6e 6f 3e 00                                         no>.

0000042d <loop::__c>:
     42d:	79 65 73 3e 00                                      yes>.

00000432 <loop::__c>:
     432:	3c 68 65 61 64 65 72 3d 00                          <header=.

0000043b <loop::__c>:
     43b:	30 3e 00                                            0>.

0000043e <loop::__c>:
     43e:	35 3e 00                                            5>.

00000441 <loop::__c>:
     441:	3c 64 65 6c 61 79 3d 00                             <delay=.

00000449 <loop::__c>:
     449:	3e 00                                               >.

0000044b <loop::__c>:
     44b:	3c 49 32 43 20 50 4f 52 54 3d 57 69 72 65 00        <I2C PORT=Wire.

0000045a <__ctors_start>:
__ctors_start():
     45a:	11 0b       	sbc	r17, r17

0000045c <__ctors_end>:
__dtors_end():
     45c:	11 24       	eor	r1, r1
     45e:	1f be       	out	0x3f, r1	; 63
     460:	cf ef       	ldi	r28, 0xFF	; 255
     462:	d4 e0       	ldi	r29, 0x04	; 4
     464:	de bf       	out	0x3e, r29	; 62
     466:	cd bf       	out	0x3d, r28	; 61

00000468 <__do_copy_data>:
__do_copy_data():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     468:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     46a:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     46c:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     46e:	e4 e1       	ldi	r30, 0x14	; 20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     470:	f7 e1       	ldi	r31, 0x17	; 23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     472:	02 c0       	rjmp	.+4      	; 0x478 <__do_copy_data+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     474:	05 90       	lpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     476:	0d 92       	st	X+, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     478:	a4 35       	cpi	r26, 0x54	; 84
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     47a:	b1 07       	cpc	r27, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     47c:	d9 f7       	brne	.-10     	; 0x474 <__do_copy_data+0xc>

0000047e <__do_clear_bss>:
__do_clear_bss():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     47e:	21 e0       	ldi	r18, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     480:	a4 e5       	ldi	r26, 0x54	; 84
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     482:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     484:	01 c0       	rjmp	.+2      	; 0x488 <.do_clear_bss_start>

00000486 <.do_clear_bss_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     486:	1d 92       	st	X+, r1

00000488 <.do_clear_bss_start>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     488:	a5 3f       	cpi	r26, 0xF5	; 245
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     48a:	b2 07       	cpc	r27, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     48c:	e1 f7       	brne	.-8      	; 0x486 <.do_clear_bss_loop>

0000048e <__do_global_ctors>:
__do_global_ctors():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     48e:	12 e0       	ldi	r17, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     490:	ce e2       	ldi	r28, 0x2E	; 46
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     492:	d2 e0       	ldi	r29, 0x02	; 2
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     494:	04 c0       	rjmp	.+8      	; 0x49e <__do_global_ctors+0x10>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     496:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     498:	fe 01       	movw	r30, r28
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     49a:	0e 94 82 0b 	call	0x1704	; 0x1704 <__tablejump2__>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     49e:	cd 32       	cpi	r28, 0x2D	; 45
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     4a0:	d1 07       	cpc	r29, r17
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     4a2:	c9 f7       	brne	.-14     	; 0x496 <__do_global_ctors+0x8>
     4a4:	0e 94 7f 09 	call	0x12fe	; 0x12fe <main>
     4a8:	0c 94 88 0b 	jmp	0x1710	; 0x1710 <_exit>

000004ac <__bad_interrupt>:
__vector_22():
     4ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000004b0 <Print::write(unsigned char const*, unsigned int)>:
write():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:34

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     4b0:	cf 92       	push	r12
     4b2:	df 92       	push	r13
     4b4:	ef 92       	push	r14
     4b6:	ff 92       	push	r15
     4b8:	0f 93       	push	r16
     4ba:	1f 93       	push	r17
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	6c 01       	movw	r12, r24
     4c2:	eb 01       	movw	r28, r22
     4c4:	7b 01       	movw	r14, r22
     4c6:	e4 0e       	add	r14, r20
     4c8:	f5 1e       	adc	r15, r21
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:35
  size_t n = 0;
     4ca:	10 e0       	ldi	r17, 0x00	; 0
     4cc:	00 e0       	ldi	r16, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:36
  while (size--) {
     4ce:	ce 15       	cp	r28, r14
     4d0:	df 05       	cpc	r29, r15
     4d2:	61 f0       	breq	.+24     	; 0x4ec <Print::write(unsigned char const*, unsigned int)+0x3c>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:37
    n += write(*buffer++);
     4d4:	69 91       	ld	r22, Y+
     4d6:	d6 01       	movw	r26, r12
     4d8:	ed 91       	ld	r30, X+
     4da:	fc 91       	ld	r31, X
     4dc:	01 90       	ld	r0, Z+
     4de:	f0 81       	ld	r31, Z
     4e0:	e0 2d       	mov	r30, r0
     4e2:	c6 01       	movw	r24, r12
     4e4:	09 95       	icall
     4e6:	08 0f       	add	r16, r24
     4e8:	19 1f       	adc	r17, r25
     4ea:	f1 cf       	rjmp	.-30     	; 0x4ce <Print::write(unsigned char const*, unsigned int)+0x1e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:40
  }
  return n;
}
     4ec:	c8 01       	movw	r24, r16
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	1f 91       	pop	r17
     4f4:	0f 91       	pop	r16
     4f6:	ff 90       	pop	r15
     4f8:	ef 90       	pop	r14
     4fa:	df 90       	pop	r13
     4fc:	cf 90       	pop	r12
     4fe:	08 95       	ret

00000500 <HardwareSerial::availableForWrite()>:
availableForWrite():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:198
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     500:	fc 01       	movw	r30, r24
     502:	53 8d       	ldd	r21, Z+27	; 0x1b
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:199
    tail = _tx_buffer_tail;
     504:	44 8d       	ldd	r20, Z+28	; 0x1c
     506:	25 2f       	mov	r18, r21
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	84 2f       	mov	r24, r20
     50c:	90 e0       	ldi	r25, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:201
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     50e:	82 1b       	sub	r24, r18
     510:	93 0b       	sbc	r25, r19
     512:	54 17       	cp	r21, r20
     514:	10 f0       	brcs	.+4      	; 0x51a <HardwareSerial::availableForWrite()+0x1a>
     516:	4f 96       	adiw	r24, 0x1f	; 31
     518:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:202
  return tail - head - 1;
     51a:	01 97       	sbiw	r24, 0x01	; 1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:203
}
     51c:	08 95       	ret

0000051e <HardwareSerial::read()>:
read():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:181
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
     51e:	fc 01       	movw	r30, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:183
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     520:	91 8d       	ldd	r25, Z+25	; 0x19
     522:	82 8d       	ldd	r24, Z+26	; 0x1a
     524:	98 17       	cp	r25, r24
     526:	61 f0       	breq	.+24     	; 0x540 <HardwareSerial::read()+0x22>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:186
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     528:	a2 8d       	ldd	r26, Z+26	; 0x1a
     52a:	ae 0f       	add	r26, r30
     52c:	bf 2f       	mov	r27, r31
     52e:	b1 1d       	adc	r27, r1
     530:	5d 96       	adiw	r26, 0x1d	; 29
     532:	8c 91       	ld	r24, X
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:187
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     534:	92 8d       	ldd	r25, Z+26	; 0x1a
     536:	9f 5f       	subi	r25, 0xFF	; 255
     538:	9f 71       	andi	r25, 0x1F	; 31
     53a:	92 8f       	std	Z+26, r25	; 0x1a
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:188
    return c;
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:184

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     540:	8f ef       	ldi	r24, 0xFF	; 255
     542:	9f ef       	ldi	r25, 0xFF	; 255
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:190
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     544:	08 95       	ret

00000546 <HardwareSerial::peek()>:
peek():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:172
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
     546:	fc 01       	movw	r30, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:173
  if (_rx_buffer_head == _rx_buffer_tail) {
     548:	91 8d       	ldd	r25, Z+25	; 0x19
     54a:	82 8d       	ldd	r24, Z+26	; 0x1a
     54c:	98 17       	cp	r25, r24
     54e:	31 f0       	breq	.+12     	; 0x55c <HardwareSerial::peek()+0x16>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:176
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     550:	82 8d       	ldd	r24, Z+26	; 0x1a
     552:	e8 0f       	add	r30, r24
     554:	f1 1d       	adc	r31, r1
     556:	85 8d       	ldd	r24, Z+29	; 0x1d
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:174
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     55c:	8f ef       	ldi	r24, 0xFF	; 255
     55e:	9f ef       	ldi	r25, 0xFF	; 255
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:178
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     560:	08 95       	ret

00000562 <HardwareSerial::available()>:
available():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:167
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     562:	fc 01       	movw	r30, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:168
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     564:	91 8d       	ldd	r25, Z+25	; 0x19
     566:	22 8d       	ldd	r18, Z+26	; 0x1a
     568:	89 2f       	mov	r24, r25
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	80 96       	adiw	r24, 0x20	; 32
     56e:	82 1b       	sub	r24, r18
     570:	91 09       	sbc	r25, r1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:169
}
     572:	8f 71       	andi	r24, 0x1F	; 31
     574:	99 27       	eor	r25, r25
     576:	08 95       	ret

00000578 <HardwareSerial::_tx_udr_empty_irq()>:
_tx_udr_empty_irq():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     578:	fc 01       	movw	r30, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     57a:	a4 8d       	ldd	r26, Z+28	; 0x1c
     57c:	a8 0f       	add	r26, r24
     57e:	b9 2f       	mov	r27, r25
     580:	b1 1d       	adc	r27, r1
     582:	dd 96       	adiw	r26, 0x3d	; 61
     584:	2c 91       	ld	r18, X
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     586:	84 8d       	ldd	r24, Z+28	; 0x1c
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	01 96       	adiw	r24, 0x01	; 1
     58c:	8f 71       	andi	r24, 0x1F	; 31
     58e:	99 27       	eor	r25, r25
     590:	84 8f       	std	Z+28, r24	; 0x1c
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:96

  *_udr = c;
     592:	a6 89       	ldd	r26, Z+22	; 0x16
     594:	b7 89       	ldd	r27, Z+23	; 0x17
     596:	2c 93       	st	X, r18
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     598:	a0 89       	ldd	r26, Z+16	; 0x10
     59a:	b1 89       	ldd	r27, Z+17	; 0x11
     59c:	8c 91       	ld	r24, X
     59e:	83 70       	andi	r24, 0x03	; 3
     5a0:	80 64       	ori	r24, 0x40	; 64
     5a2:	8c 93       	st	X, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:109
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     5a4:	93 8d       	ldd	r25, Z+27	; 0x1b
     5a6:	84 8d       	ldd	r24, Z+28	; 0x1c
     5a8:	98 13       	cpse	r25, r24
     5aa:	06 c0       	rjmp	.+12     	; 0x5b8 <HardwareSerial::_tx_udr_empty_irq()+0x40>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     5ac:	02 88       	ldd	r0, Z+18	; 0x12
     5ae:	f3 89       	ldd	r31, Z+19	; 0x13
     5b0:	e0 2d       	mov	r30, r0
     5b2:	80 81       	ld	r24, Z
     5b4:	8f 7d       	andi	r24, 0xDF	; 223
     5b6:	80 83       	st	Z, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:113
  }
}
     5b8:	08 95       	ret

000005ba <HardwareSerial::write(unsigned char)>:
write():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:226
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished transmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     5ba:	ef 92       	push	r14
     5bc:	ff 92       	push	r15
     5be:	0f 93       	push	r16
     5c0:	1f 93       	push	r17
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	ec 01       	movw	r28, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:227
  _written = true;
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	88 8f       	std	Y+24, r24	; 0x18
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:232
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     5cc:	9b 8d       	ldd	r25, Y+27	; 0x1b
     5ce:	8c 8d       	ldd	r24, Y+28	; 0x1c
     5d0:	98 13       	cpse	r25, r24
     5d2:	1a c0       	rjmp	.+52     	; 0x608 <HardwareSerial::write(unsigned char)+0x4e>
     5d4:	e8 89       	ldd	r30, Y+16	; 0x10
     5d6:	f9 89       	ldd	r31, Y+17	; 0x11
     5d8:	80 81       	ld	r24, Z
     5da:	85 ff       	sbrs	r24, 5
     5dc:	15 c0       	rjmp	.+42     	; 0x608 <HardwareSerial::write(unsigned char)+0x4e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:241
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     5de:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     5e0:	f8 94       	cli
write():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:242
      *_udr = c;
     5e2:	ee 89       	ldd	r30, Y+22	; 0x16
     5e4:	ff 89       	ldd	r31, Y+23	; 0x17
     5e6:	60 83       	st	Z, r22
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:244
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     5e8:	e8 89       	ldd	r30, Y+16	; 0x10
     5ea:	f9 89       	ldd	r31, Y+17	; 0x11
     5ec:	80 81       	ld	r24, Z
     5ee:	83 70       	andi	r24, 0x03	; 3
     5f0:	80 64       	ori	r24, 0x40	; 64
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:275
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
     5f2:	80 83       	st	Z, r24
__iRestore():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     5f4:	9f bf       	out	0x3f, r25	; 63
write():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:279
  }

  return 1;
}
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	df 91       	pop	r29
     5fc:	cf 91       	pop	r28
     5fe:	1f 91       	pop	r17
     600:	0f 91       	pop	r16
     602:	ff 90       	pop	r15
     604:	ef 90       	pop	r14
     606:	08 95       	ret
     608:	f6 2e       	mov	r15, r22
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:251
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     60a:	0b 8d       	ldd	r16, Y+27	; 0x1b
     60c:	10 e0       	ldi	r17, 0x00	; 0
     60e:	0f 5f       	subi	r16, 0xFF	; 255
     610:	1f 4f       	sbci	r17, 0xFF	; 255
     612:	0f 71       	andi	r16, 0x1F	; 31
     614:	11 27       	eor	r17, r17
     616:	e0 2e       	mov	r14, r16
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:255

  // If the output buffer is full, there's nothing for it other than to
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     618:	8c 8d       	ldd	r24, Y+28	; 0x1c
     61a:	8e 11       	cpse	r24, r14
     61c:	0c c0       	rjmp	.+24     	; 0x636 <HardwareSerial::write(unsigned char)+0x7c>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:256
    if (bit_is_clear(SREG, SREG_I)) {
     61e:	0f b6       	in	r0, 0x3f	; 63
     620:	07 fc       	sbrc	r0, 7
     622:	fa cf       	rjmp	.-12     	; 0x618 <HardwareSerial::write(unsigned char)+0x5e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:261
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     624:	e8 89       	ldd	r30, Y+16	; 0x10
     626:	f9 89       	ldd	r31, Y+17	; 0x11
     628:	80 81       	ld	r24, Z
     62a:	85 ff       	sbrs	r24, 5
     62c:	f5 cf       	rjmp	.-22     	; 0x618 <HardwareSerial::write(unsigned char)+0x5e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:262
  _tx_udr_empty_irq();
     62e:	ce 01       	movw	r24, r28
     630:	0e 94 bc 02 	call	0x578	; 0x578 <HardwareSerial::_tx_udr_empty_irq()>
     634:	f1 cf       	rjmp	.-30     	; 0x618 <HardwareSerial::write(unsigned char)+0x5e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:268
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     636:	eb 8d       	ldd	r30, Y+27	; 0x1b
     638:	ec 0f       	add	r30, r28
     63a:	fd 2f       	mov	r31, r29
     63c:	f1 1d       	adc	r31, r1
     63e:	f5 ae       	std	Z+61, r15	; 0x3d
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:273

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     640:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     642:	f8 94       	cli
write():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:274
    _tx_buffer_head = i;
     644:	0b 8f       	std	Y+27, r16	; 0x1b
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:275
    sbi(*_ucsrb, UDRIE0);
     646:	ea 89       	ldd	r30, Y+18	; 0x12
     648:	fb 89       	ldd	r31, Y+19	; 0x13
     64a:	80 81       	ld	r24, Z
     64c:	80 62       	ori	r24, 0x20	; 32
     64e:	d1 cf       	rjmp	.-94     	; 0x5f2 <HardwareSerial::write(unsigned char)+0x38>

00000650 <Print::println() [clone .constprop.22]>:
println():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:123
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:66
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     654:	6d e0       	ldi	r22, 0x0D	; 13
     656:	88 e9       	ldi	r24, 0x98	; 152
     658:	91 e0       	ldi	r25, 0x01	; 1
     65a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <HardwareSerial::write(unsigned char)>
     65e:	ec 01       	movw	r28, r24
     660:	6a e0       	ldi	r22, 0x0A	; 10
     662:	88 e9       	ldi	r24, 0x98	; 152
     664:	91 e0       	ldi	r25, 0x01	; 1
     666:	0e 94 dd 02 	call	0x5ba	; 0x5ba <HardwareSerial::write(unsigned char)>
println():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:128
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
     66a:	8c 0f       	add	r24, r28
     66c:	9d 1f       	adc	r25, r29
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	08 95       	ret

00000674 <Print::print(__FlashStringHelper const*) [clone .constprop.21]>:
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:42
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
     674:	0f 93       	push	r16
     676:	1f 93       	push	r17
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	8c 01       	movw	r16, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:45
{
  PGM_P p = reinterpret_cast<PGM_P>(ifsh);
  size_t n = 0;
     67e:	d0 e0       	ldi	r29, 0x00	; 0
     680:	c0 e0       	ldi	r28, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:47
  while (1) {
    unsigned char c = pgm_read_byte(p++);
     682:	f8 01       	movw	r30, r16
     684:	64 91       	lpm	r22, Z
     686:	0f 5f       	subi	r16, 0xFF	; 255
     688:	1f 4f       	sbci	r17, 0xFF	; 255
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:48
    if (c == 0) break;
     68a:	66 23       	and	r22, r22
     68c:	39 f0       	breq	.+14     	; 0x69c <Print::print(__FlashStringHelper const*) [clone .constprop.21]+0x28>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:49
    n += write(c);
     68e:	88 e9       	ldi	r24, 0x98	; 152
     690:	91 e0       	ldi	r25, 0x01	; 1
     692:	0e 94 dd 02 	call	0x5ba	; 0x5ba <HardwareSerial::write(unsigned char)>
     696:	c8 0f       	add	r28, r24
     698:	d9 1f       	adc	r29, r25
     69a:	f3 cf       	rjmp	.-26     	; 0x682 <Print::print(__FlashStringHelper const*) [clone .constprop.21]+0xe>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:52
  }
  return n;
}
     69c:	ce 01       	movw	r24, r28
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	1f 91       	pop	r17
     6a4:	0f 91       	pop	r16
     6a6:	08 95       	ret

000006a8 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>:
println():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:111
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:113
{
  size_t n = print(ifsh);
     6ac:	0e 94 3a 03 	call	0x674	; 0x674 <Print::print(__FlashStringHelper const*) [clone .constprop.21]>
     6b0:	ec 01       	movw	r28, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:114
  n += println();
     6b2:	0e 94 28 03 	call	0x650	; 0x650 <Print::println() [clone .constprop.22]>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:116
  return n;
}
     6b6:	8c 0f       	add	r24, r28
     6b8:	9d 1f       	adc	r25, r29
     6ba:	df 91       	pop	r29
     6bc:	cf 91       	pop	r28
     6be:	08 95       	ret

000006c0 <HardwareSerial::flush()>:
flush():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:206
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	ec 01       	movw	r28, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:210
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     6c6:	88 8d       	ldd	r24, Y+24	; 0x18
     6c8:	88 23       	and	r24, r24
     6ca:	b9 f0       	breq	.+46     	; 0x6fa <HardwareSerial::flush()+0x3a>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:213
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     6cc:	aa 89       	ldd	r26, Y+18	; 0x12
     6ce:	bb 89       	ldd	r27, Y+19	; 0x13
     6d0:	e8 89       	ldd	r30, Y+16	; 0x10
     6d2:	f9 89       	ldd	r31, Y+17	; 0x11
     6d4:	8c 91       	ld	r24, X
     6d6:	85 fd       	sbrc	r24, 5
     6d8:	03 c0       	rjmp	.+6      	; 0x6e0 <HardwareSerial::flush()+0x20>
     6da:	80 81       	ld	r24, Z
     6dc:	86 fd       	sbrc	r24, 6
     6de:	0d c0       	rjmp	.+26     	; 0x6fa <HardwareSerial::flush()+0x3a>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:214
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     6e0:	0f b6       	in	r0, 0x3f	; 63
     6e2:	07 fc       	sbrc	r0, 7
     6e4:	f7 cf       	rjmp	.-18     	; 0x6d4 <HardwareSerial::flush()+0x14>
     6e6:	8c 91       	ld	r24, X
     6e8:	85 ff       	sbrs	r24, 5
     6ea:	f2 cf       	rjmp	.-28     	; 0x6d0 <HardwareSerial::flush()+0x10>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:218
  // Interrupts are globally disabled, but the DR empty
  // interrupt should be enabled, so poll the DR empty flag to
  // prevent deadlock
  if (bit_is_set(*_ucsra, UDRE0))
     6ec:	80 81       	ld	r24, Z
     6ee:	85 ff       	sbrs	r24, 5
     6f0:	ed cf       	rjmp	.-38     	; 0x6cc <HardwareSerial::flush()+0xc>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:219
    _tx_udr_empty_irq();
     6f2:	ce 01       	movw	r24, r28
     6f4:	0e 94 bc 02 	call	0x578	; 0x578 <HardwareSerial::_tx_udr_empty_irq()>
     6f8:	e9 cf       	rjmp	.-46     	; 0x6cc <HardwareSerial::flush()+0xc>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:223
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished transmission (TXC is set).
}
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	08 95       	ret

00000700 <micros>:
micros():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:134
  return m;
}
unsigned long micros()
{
  unsigned long m;
  uint8_t oldSREG = SREG, t;
     700:	3f b7       	in	r19, 0x3f	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:136

  cli();
     702:	f8 94       	cli
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:137
  m = millis_timer_overflow_count;
     704:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <millis_timer_overflow_count>
     708:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <millis_timer_overflow_count+0x1>
     70c:	a0 91 8c 01 	lds	r26, 0x018C	; 0x80018c <millis_timer_overflow_count+0x2>
     710:	b0 91 8d 01 	lds	r27, 0x018D	; 0x80018d <millis_timer_overflow_count+0x3>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:139
#if defined(TCNT0) && (TIMER_TO_USE_FOR_MILLIS == 0) && !defined(TCW0)
  t = TCNT0;
     714:	29 b3       	in	r18, 0x19	; 25
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:154

#if defined(TIFR0) && (TIMER_TO_USE_FOR_MILLIS == 0)
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    m++;
#elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 0)
  if ((TIFR & _BV(TOV0)) && (t < 255))
     716:	09 b6       	in	r0, 0x39	; 57
     718:	01 fe       	sbrs	r0, 1
     71a:	05 c0       	rjmp	.+10     	; 0x726 <micros+0x26>
     71c:	2f 3f       	cpi	r18, 0xFF	; 255
     71e:	19 f0       	breq	.+6      	; 0x726 <micros+0x26>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:155
    m++;
     720:	01 96       	adiw	r24, 0x01	; 1
     722:	a1 1d       	adc	r26, r1
     724:	b1 1d       	adc	r27, r1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:164
#elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 1)
  if ((TIFR & _BV(TOV1)) && (t < 255))
    m++;
#endif

  SREG = oldSREG;
     726:	3f bf       	out	0x3f, r19	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:171

#if F_CPU < 1000000L
  return ((m << 8) + t) * MillisTimer_Prescale_Value * (1000000L/F_CPU);
#else
#if (MillisTimer_Prescale_Value % clockCyclesPerMicrosecond() == 0 ) // Can we just do it the naive way? If so great!
  return ((m << 8) + t) * (MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
     728:	ba 2f       	mov	r27, r26
     72a:	a9 2f       	mov	r26, r25
     72c:	98 2f       	mov	r25, r24
     72e:	88 27       	eor	r24, r24
     730:	bc 01       	movw	r22, r24
     732:	cd 01       	movw	r24, r26
     734:	62 0f       	add	r22, r18
     736:	71 1d       	adc	r23, r1
     738:	81 1d       	adc	r24, r1
     73a:	91 1d       	adc	r25, r1
     73c:	43 e0       	ldi	r20, 0x03	; 3
     73e:	66 0f       	add	r22, r22
     740:	77 1f       	adc	r23, r23
     742:	88 1f       	adc	r24, r24
     744:	99 1f       	adc	r25, r25
     746:	4a 95       	dec	r20
     748:	d1 f7       	brne	.-12     	; 0x73e <micros+0x3e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:217
  //the high part gets divided by cCPuS then multiplied by the prescaler. Then take the low 8 bits plus the high part modulo-cCPuS to correct for the division, then multiply that by the prescaler value first before dividing by cCPuS, and finally add the two together.
  //return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + ((t+(((m<<8)%clockCyclesPerMicrosecond())) * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond()));
  return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + (t * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
#endif
#endif
}
     74a:	08 95       	ret

0000074c <delay>:
delay():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:225
  // Empty
}
void yield(void) __attribute__ ((weak, alias("__empty")));

void delay(unsigned long ms)
{
     74c:	cf 92       	push	r12
     74e:	df 92       	push	r13
     750:	ef 92       	push	r14
     752:	ff 92       	push	r15
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	6b 01       	movw	r12, r22
     75a:	7c 01       	movw	r14, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:227
  #if (F_CPU>=1000000L)
  uint16_t start = (uint16_t)micros();
     75c:	0e 94 80 03 	call	0x700	; 0x700 <micros>
     760:	eb 01       	movw	r28, r22
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:231

  while (ms > 0) {
    yield();
    while (((uint16_t)micros() - start) >= 1000 && ms) {
     762:	0e 94 80 03 	call	0x700	; 0x700 <micros>
     766:	6c 1b       	sub	r22, r28
     768:	7d 0b       	sbc	r23, r29
     76a:	68 3e       	cpi	r22, 0xE8	; 232
     76c:	73 40       	sbci	r23, 0x03	; 3
     76e:	a0 f0       	brcs	.+40     	; 0x798 <delay+0x4c>
     770:	c1 14       	cp	r12, r1
     772:	d1 04       	cpc	r13, r1
     774:	e1 04       	cpc	r14, r1
     776:	f1 04       	cpc	r15, r1
     778:	39 f4       	brne	.+14     	; 0x788 <delay+0x3c>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:241
  #else
  uint32_t start = millis();
  while((millis() - start) < ms)  /* NOP */yield();
  return;
  #endif
}
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	ff 90       	pop	r15
     780:	ef 90       	pop	r14
     782:	df 90       	pop	r13
     784:	cf 90       	pop	r12
     786:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:232
  uint16_t start = (uint16_t)micros();

  while (ms > 0) {
    yield();
    while (((uint16_t)micros() - start) >= 1000 && ms) {
      ms--;
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	c8 1a       	sub	r12, r24
     78c:	d1 08       	sbc	r13, r1
     78e:	e1 08       	sbc	r14, r1
     790:	f1 08       	sbc	r15, r1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:233
      start += 1000;
     792:	c8 51       	subi	r28, 0x18	; 24
     794:	dc 4f       	sbci	r29, 0xFC	; 252
     796:	e5 cf       	rjmp	.-54     	; 0x762 <delay+0x16>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:229
void delay(unsigned long ms)
{
  #if (F_CPU>=1000000L)
  uint16_t start = (uint16_t)micros();

  while (ms > 0) {
     798:	c1 14       	cp	r12, r1
     79a:	d1 04       	cpc	r13, r1
     79c:	e1 04       	cpc	r14, r1
     79e:	f1 04       	cpc	r15, r1
     7a0:	01 f7       	brne	.-64     	; 0x762 <delay+0x16>
     7a2:	eb cf       	rjmp	.-42     	; 0x77a <delay+0x2e>

000007a4 <USI_TWI_Master_Transfer>:
USI_TWI_Master_Transfer():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:225
 Data to be sent has to be placed into the USIDR prior to calling
 this function. Data read, will be return'ed from the function.
---------------------------------------------------------------*/
unsigned char USI_TWI_Master_Transfer(unsigned char temp)
{
  USISR = temp;                                          // Set USISR according to temp.
     7a4:	8b bd       	out	0x2b, r24	; 43
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     7a6:	25 e0       	ldi	r18, 0x05	; 5
     7a8:	32 e0       	ldi	r19, 0x02	; 2
USI_TWI_Master_Transfer():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:233
         (1 << USIWM1) | (0 << USIWM0) |                 // Set USI in Two-wire mode.
         (1 << USICS1) | (0 << USICS0) | (1 << USICLK) | // Software clock strobe as source.
         (1 << USITC);                                   // Toggle Clock Port.
  do {
    if (USI_TWI_MASTER_SPEED) DELAY_T2TWI_FM; else DELAY_T2TWI;
    USICR = temp; // Generate positive SCL edge.
     7aa:	8b e2       	ldi	r24, 0x2B	; 43
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     7ac:	44 e0       	ldi	r20, 0x04	; 4
     7ae:	51 e0       	ldi	r21, 0x01	; 1
USI_TWI_Master_Transfer():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:232
  temp = (0 << USISIE) | (0 << USIOIE) |                 // Interrupts disabled
         (1 << USIWM1) | (0 << USIWM0) |                 // Set USI in Two-wire mode.
         (1 << USICS1) | (0 << USICS0) | (1 << USICLK) | // Software clock strobe as source.
         (1 << USITC);                                   // Toggle Clock Port.
  do {
    if (USI_TWI_MASTER_SPEED) DELAY_T2TWI_FM; else DELAY_T2TWI;
     7b0:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <USI_TWI_MASTER_SPEED>
     7b4:	99 23       	and	r25, r25
     7b6:	e9 f0       	breq	.+58     	; 0x7f2 <USI_TWI_Master_Transfer+0x4e>
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     7b8:	93 2f       	mov	r25, r19
     7ba:	9a 95       	dec	r25
     7bc:	f1 f7       	brne	.-4      	; 0x7ba <USI_TWI_Master_Transfer+0x16>
USI_TWI_Master_Transfer():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:233
    USICR = temp; // Generate positive SCL edge.
     7be:	8a bd       	out	0x2a, r24	; 42
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:234
    while (!(PIN_USI_CL & (1 << PIN_USI_SCL)))
     7c0:	39 9b       	sbis	0x07, 1	; 7
     7c2:	fe cf       	rjmp	.-4      	; 0x7c0 <USI_TWI_Master_Transfer+0x1c>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:236
      ; // Wait for SCL to go high.
    if (USI_TWI_MASTER_SPEED) DELAY_T4TWI_FM; else DELAY_T4TWI;
     7c4:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <USI_TWI_MASTER_SPEED>
     7c8:	99 23       	and	r25, r25
     7ca:	a9 f0       	breq	.+42     	; 0x7f6 <USI_TWI_Master_Transfer+0x52>
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     7cc:	95 2f       	mov	r25, r21
     7ce:	9a 95       	dec	r25
     7d0:	f1 f7       	brne	.-4      	; 0x7ce <USI_TWI_Master_Transfer+0x2a>
USI_TWI_Master_Transfer():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:237
    USICR = temp;                   // Generate negative SCL edge.
     7d2:	8a bd       	out	0x2a, r24	; 42
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:238
  } while (!(USISR & (1 << USIOIF))); // Check for transfer complete.
     7d4:	0b b4       	in	r0, 0x2b	; 43
     7d6:	06 fe       	sbrs	r0, 6
     7d8:	eb cf       	rjmp	.-42     	; 0x7b0 <USI_TWI_Master_Transfer+0xc>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:240

  if (USI_TWI_MASTER_SPEED) DELAY_T2TWI_FM; else DELAY_T2TWI;
     7da:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <USI_TWI_MASTER_SPEED>
     7de:	88 23       	and	r24, r24
     7e0:	61 f0       	breq	.+24     	; 0x7fa <USI_TWI_Master_Transfer+0x56>
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     7e2:	82 e0       	ldi	r24, 0x02	; 2
     7e4:	8a 95       	dec	r24
     7e6:	f1 f7       	brne	.-4      	; 0x7e4 <USI_TWI_Master_Transfer+0x40>
USI_TWI_Master_Transfer():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:241
  temp  = USIDR;                 // Read out data.
     7e8:	8c b5       	in	r24, 0x2c	; 44
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:242
  USIDR = 0xFF;                  // Release SDA.
     7ea:	9f ef       	ldi	r25, 0xFF	; 255
     7ec:	9c bd       	out	0x2c, r25	; 44
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:243
  DDR_USI |= (1 << PIN_USI_SDA); // Enable SDA as output.
     7ee:	61 9a       	sbi	0x0c, 1	; 12
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:246

  return temp; // Return the data from the USIDR
}
     7f0:	08 95       	ret
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     7f2:	92 2f       	mov	r25, r18
     7f4:	e2 cf       	rjmp	.-60     	; 0x7ba <USI_TWI_Master_Transfer+0x16>
     7f6:	94 2f       	mov	r25, r20
     7f8:	ea cf       	rjmp	.-44     	; 0x7ce <USI_TWI_Master_Transfer+0x2a>
     7fa:	85 e0       	ldi	r24, 0x05	; 5
     7fc:	f3 cf       	rjmp	.-26     	; 0x7e4 <USI_TWI_Master_Transfer+0x40>

000007fe <Print::write(char const*) [clone .part.2] [clone .constprop.19]>:
_ZN5Print5writeEPKc.part.2():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.h:51
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
     7fe:	fc 01       	movw	r30, r24
     800:	01 90       	ld	r0, Z+
     802:	00 20       	and	r0, r0
     804:	e9 f7       	brne	.-6      	; 0x800 <Print::write(char const*) [clone .part.2] [clone .constprop.19]+0x2>
     806:	31 97       	sbiw	r30, 0x01	; 1
     808:	af 01       	movw	r20, r30
     80a:	48 1b       	sub	r20, r24
     80c:	59 0b       	sbc	r21, r25
     80e:	bc 01       	movw	r22, r24
     810:	88 e9       	ldi	r24, 0x98	; 152
     812:	91 e0       	ldi	r25, 0x01	; 1
     814:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <Print::write(unsigned char const*, unsigned int)>

00000818 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]>:
printNumber():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:230
  return vfprintf_P(&f, (const char *)ifsh, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     818:	8f 92       	push	r8
     81a:	9f 92       	push	r9
     81c:	af 92       	push	r10
     81e:	bf 92       	push	r11
     820:	ef 92       	push	r14
     822:	ff 92       	push	r15
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62
     830:	a1 97       	sbiw	r28, 0x21	; 33
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	f8 94       	cli
     836:	de bf       	out	0x3e, r29	; 62
     838:	0f be       	out	0x3f, r0	; 63
     83a:	cd bf       	out	0x3d, r28	; 61
     83c:	16 2f       	mov	r17, r22
     83e:	04 2f       	mov	r16, r20
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:234
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     840:	19 a2       	std	Y+33, r1	; 0x21
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:237

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     842:	42 30       	cpi	r20, 0x02	; 2
     844:	08 f4       	brcc	.+2      	; 0x848 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]+0x30>
     846:	0a e0       	ldi	r16, 0x0A	; 10
     848:	7e 01       	movw	r14, r28
     84a:	21 e2       	ldi	r18, 0x21	; 33
     84c:	e2 0e       	add	r14, r18
     84e:	f1 1c       	adc	r15, r1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:241

  do {
    unsigned long m = n;
    n /= base;
     850:	80 2e       	mov	r8, r16
     852:	91 2c       	mov	r9, r1
     854:	b1 2c       	mov	r11, r1
     856:	a1 2c       	mov	r10, r1
     858:	61 2f       	mov	r22, r17
     85a:	a5 01       	movw	r20, r10
     85c:	94 01       	movw	r18, r8
     85e:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <__udivmodsi4>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:242
    char c = m - base * n;
     862:	80 2f       	mov	r24, r16
     864:	62 2f       	mov	r22, r18
     866:	0e 94 3e 0b 	call	0x167c	; 0x167c <__mulqi3>
     86a:	18 1b       	sub	r17, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:243
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     86c:	1a 30       	cpi	r17, 0x0A	; 10
     86e:	1c f5       	brge	.+70     	; 0x8b6 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]+0x9e>
     870:	10 5d       	subi	r17, 0xD0	; 208
     872:	f7 01       	movw	r30, r14
     874:	12 93       	st	-Z, r17
     876:	7f 01       	movw	r14, r30
     878:	12 2f       	mov	r17, r18
     87a:	73 2f       	mov	r23, r19
     87c:	ca 01       	movw	r24, r20
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:244
  } while(n);
     87e:	23 2b       	or	r18, r19
     880:	24 2b       	or	r18, r20
     882:	25 2b       	or	r18, r21
     884:	49 f7       	brne	.-46     	; 0x858 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]+0x40>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.h:50
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	80 e0       	ldi	r24, 0x00	; 0
write():
     88a:	30 97       	sbiw	r30, 0x00	; 0
     88c:	19 f0       	breq	.+6      	; 0x894 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]+0x7c>
     88e:	cf 01       	movw	r24, r30
     890:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Print::write(char const*) [clone .part.2] [clone .constprop.19]>
printNumber():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:247

  return write(str);
}
     894:	a1 96       	adiw	r28, 0x21	; 33
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	f8 94       	cli
     89a:	de bf       	out	0x3e, r29	; 62
     89c:	0f be       	out	0x3f, r0	; 63
     89e:	cd bf       	out	0x3d, r28	; 61
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	1f 91       	pop	r17
     8a6:	0f 91       	pop	r16
     8a8:	ff 90       	pop	r15
     8aa:	ef 90       	pop	r14
     8ac:	bf 90       	pop	r11
     8ae:	af 90       	pop	r10
     8b0:	9f 90       	pop	r9
     8b2:	8f 90       	pop	r8
     8b4:	08 95       	ret
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:243

  do {
    unsigned long m = n;
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     8b6:	19 5c       	subi	r17, 0xC9	; 201
     8b8:	dc cf       	rjmp	.-72     	; 0x872 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]+0x5a>

000008ba <Print::print(long, int) [clone .constprop.15]>:
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:84
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
     8ba:	cf 92       	push	r12
     8bc:	df 92       	push	r13
     8be:	ef 92       	push	r14
     8c0:	ff 92       	push	r15
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:88
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
     8c6:	4a 30       	cpi	r20, 0x0A	; 10
     8c8:	51 05       	cpc	r21, r1
     8ca:	f1 f4       	brne	.+60     	; 0x908 <Print::print(long, int) [clone .constprop.15]+0x4e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:94
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     8cc:	4a e0       	ldi	r20, 0x0A	; 10
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:89
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
     8ce:	97 ff       	sbrs	r25, 7
     8d0:	1b c0       	rjmp	.+54     	; 0x908 <Print::print(long, int) [clone .constprop.15]+0x4e>
     8d2:	6b 01       	movw	r12, r22
     8d4:	7c 01       	movw	r14, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:66
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     8d6:	6d e2       	ldi	r22, 0x2D	; 45
     8d8:	88 e9       	ldi	r24, 0x98	; 152
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	0e 94 dd 02 	call	0x5ba	; 0x5ba <HardwareSerial::write(unsigned char)>
     8e0:	ec 01       	movw	r28, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:91
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
     8e2:	66 27       	eor	r22, r22
     8e4:	77 27       	eor	r23, r23
     8e6:	cb 01       	movw	r24, r22
     8e8:	6c 19       	sub	r22, r12
     8ea:	7d 09       	sbc	r23, r13
     8ec:	8e 09       	sbc	r24, r14
     8ee:	9f 09       	sbc	r25, r15
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:92
      return printNumber(n, 10) + t;
     8f0:	4a e0       	ldi	r20, 0x0A	; 10
     8f2:	0e 94 0c 04 	call	0x818	; 0x818 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]>
     8f6:	8c 0f       	add	r24, r28
     8f8:	9d 1f       	adc	r25, r29
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:98
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	ff 90       	pop	r15
     900:	ef 90       	pop	r14
     902:	df 90       	pop	r13
     904:	cf 90       	pop	r12
     906:	08 95       	ret
     908:	df 91       	pop	r29
     90a:	cf 91       	pop	r28
     90c:	ff 90       	pop	r15
     90e:	ef 90       	pop	r14
     910:	df 90       	pop	r13
     912:	cf 90       	pop	r12
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:96
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     914:	0c 94 0c 04 	jmp	0x818	; 0x818 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]>

00000918 <Print::print(int, int) [clone .constprop.14]>:
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:74
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
     918:	ab 01       	movw	r20, r22
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:76
{
  return print((long) n, base);
     91a:	bc 01       	movw	r22, r24
     91c:	99 0f       	add	r25, r25
     91e:	88 0b       	sbc	r24, r24
     920:	99 0b       	sbc	r25, r25
     922:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <Print::print(long, int) [clone .constprop.15]>

00000926 <displayHelp()>:
displayHelp():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:351
}


void displayHelp()
{
  Serial.print(F("\nArduino MultiSpeed I2C Scanner - "));
     926:	83 e7       	ldi	r24, 0x73	; 115
     928:	93 e0       	ldi	r25, 0x03	; 3
     92a:	0e 94 3a 03 	call	0x674	; 0x674 <Print::print(__FlashStringHelper const*) [clone .constprop.21]>
write():
     92e:	8e e2       	ldi	r24, 0x2E	; 46
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Print::write(char const*) [clone .part.2] [clone .constprop.19]>
println():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:140
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
     936:	0e 94 28 03 	call	0x650	; 0x650 <Print::println() [clone .constprop.22]>
displayHelp():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:353
  Serial.println(version);
  Serial.println();
     93a:	0e 94 28 03 	call	0x650	; 0x650 <Print::println() [clone .constprop.22]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:354
  Serial.print(F("I2C ports: "));
     93e:	87 e6       	ldi	r24, 0x67	; 103
     940:	93 e0       	ldi	r25, 0x03	; 3
     942:	0e 94 3a 03 	call	0x674	; 0x674 <Print::print(__FlashStringHelper const*) [clone .constprop.21]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:355
  Serial.print(wirePortCount);
     946:	6a e0       	ldi	r22, 0x0A	; 10
     948:	70 e0       	ldi	r23, 0x00	; 0
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	0e 94 8c 04 	call	0x918	; 0x918 <Print::print(int, int) [clone .constprop.14]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:356
  Serial.print(F("  Current: Wire"));
     952:	87 e5       	ldi	r24, 0x57	; 87
     954:	93 e0       	ldi	r25, 0x03	; 3
     956:	0e 94 3a 03 	call	0x674	; 0x674 <Print::print(__FlashStringHelper const*) [clone .constprop.21]>
println():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:160
  return n;
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
     95a:	6a e0       	ldi	r22, 0x0A	; 10
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <selectedWirePort>
     962:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <selectedWirePort+0x1>
     966:	0e 94 8c 04 	call	0x918	; 0x918 <Print::print(int, int) [clone .constprop.14]>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:161
  n += println();
     96a:	0e 94 28 03 	call	0x650	; 0x650 <Print::println() [clone .constprop.22]>
displayHelp():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:358
  Serial.println(selectedWirePort);
  Serial.println(F("\t@ = toggle Wire - Wire1 .. Wire5 [e.g. TEENSY or Arduino Due]"));
     96e:	88 e1       	ldi	r24, 0x18	; 24
     970:	93 e0       	ldi	r25, 0x03	; 3
     972:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:360

  Serial.println(F("Scan mode:"));
     976:	8d e0       	ldi	r24, 0x0D	; 13
     978:	93 e0       	ldi	r25, 0x03	; 3
     97a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:361
  Serial.println(F("\ts = single scan"));
     97e:	8c ef       	ldi	r24, 0xFC	; 252
     980:	92 e0       	ldi	r25, 0x02	; 2
     982:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:362
  Serial.println(F("\tc = continuous scan - 1 second delay"));
     986:	86 ed       	ldi	r24, 0xD6	; 214
     988:	92 e0       	ldi	r25, 0x02	; 2
     98a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:363
  Serial.println(F("\tq = quit continuous scan"));
     98e:	8c eb       	ldi	r24, 0xBC	; 188
     990:	92 e0       	ldi	r25, 0x02	; 2
     992:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:364
  Serial.println(F("\td = toggle latency delay between successful tests. 0 - 5 ms"));
     996:	8f e7       	ldi	r24, 0x7F	; 127
     998:	92 e0       	ldi	r25, 0x02	; 2
     99a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:365
  Serial.println(F("\ti = toggle enable/disable interrupts"));
     99e:	89 e5       	ldi	r24, 0x59	; 89
     9a0:	92 e0       	ldi	r25, 0x02	; 2
     9a2:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:367

  Serial.println(F("Output:"));
     9a6:	81 e5       	ldi	r24, 0x51	; 81
     9a8:	92 e0       	ldi	r25, 0x02	; 2
     9aa:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:368
  Serial.println(F("\tp = toggle printAll - printFound."));
     9ae:	8e e2       	ldi	r24, 0x2E	; 46
     9b0:	92 e0       	ldi	r25, 0x02	; 2
     9b2:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:369
  Serial.println(F("\th = toggle header - noHeader."));
     9b6:	8f e0       	ldi	r24, 0x0F	; 15
     9b8:	92 e0       	ldi	r25, 0x02	; 2
     9ba:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:370
  Serial.println(F("\ta = toggle address range, 0..127 - 8..119 (default)"));
     9be:	8a ed       	ldi	r24, 0xDA	; 218
     9c0:	91 e0       	ldi	r25, 0x01	; 1
     9c2:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:372

  Serial.println(F("Speeds:"));
     9c6:	82 ed       	ldi	r24, 0xD2	; 210
     9c8:	91 e0       	ldi	r25, 0x01	; 1
     9ca:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:373
  Serial.println(F("\t0 = 100..800 KHz - step 100  (warning - can block!!)"));
     9ce:	8c e9       	ldi	r24, 0x9C	; 156
     9d0:	91 e0       	ldi	r25, 0x01	; 1
     9d2:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:374
  Serial.println(F("\t1 = 100 KHz"));
     9d6:	8f e8       	ldi	r24, 0x8F	; 143
     9d8:	91 e0       	ldi	r25, 0x01	; 1
     9da:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:375
  Serial.println(F("\t2 = 200 KHz"));
     9de:	82 e8       	ldi	r24, 0x82	; 130
     9e0:	91 e0       	ldi	r25, 0x01	; 1
     9e2:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:376
  Serial.println(F("\t4 = 400 KHz"));
     9e6:	85 e7       	ldi	r24, 0x75	; 117
     9e8:	91 e0       	ldi	r25, 0x01	; 1
     9ea:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:377
  Serial.println(F("\t9 = 50..400 KHz - step 50     < DEFAULT >"));
     9ee:	8a e4       	ldi	r24, 0x4A	; 74
     9f0:	91 e0       	ldi	r25, 0x01	; 1
     9f2:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:378
  Serial.println();
     9f6:	0e 94 28 03 	call	0x650	; 0x650 <Print::println() [clone .constprop.22]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:379
  Serial.println(F("\t!! HIGH SPEEDS - WARNING - can block - not applicable for UNO"));
     9fa:	8b e0       	ldi	r24, 0x0B	; 11
     9fc:	91 e0       	ldi	r25, 0x01	; 1
     9fe:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:380
  Serial.println(F("\t8 =  800 KHz"));
     a02:	8d ef       	ldi	r24, 0xFD	; 253
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:381
  Serial.println(F("\tM = 1000 KHz"));
     a0a:	8f ee       	ldi	r24, 0xEF	; 239
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:382
  Serial.println(F("\tN = 3400 KHz"));
     a12:	81 ee       	ldi	r24, 0xE1	; 225
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:383
  Serial.println(F("\tO = 5000 KHz"));
     a1a:	83 ed       	ldi	r24, 0xD3	; 211
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:384
  Serial.println(F("\tP = 100 400 1000 3400 5000 KHz (standards)"));
     a22:	87 ea       	ldi	r24, 0xA7	; 167
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:385
  Serial.println(F("\n\tr = reset to startup defaults."));
     a2a:	86 e8       	ldi	r24, 0x86	; 134
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:386
  Serial.println(F("\t? = help - this page"));
     a32:	80 e7       	ldi	r24, 0x70	; 112
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:387
  Serial.println();
     a3a:	0c 94 28 03 	jmp	0x650	; 0x650 <Print::println() [clone .constprop.22]>

00000a3e <setSpeed(char)>:
setSpeed():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:278

}


void setSpeed(char sp)
{
     a3e:	0f 93       	push	r16
     a40:	1f 93       	push	r17
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:279
  switch (sp)
     a46:	88 33       	cpi	r24, 0x38	; 56
     a48:	09 f4       	brne	.+2      	; 0xa4c <setSpeed(char)+0xe>
     a4a:	9d c0       	rjmp	.+314    	; 0xb86 <setSpeed(char)+0x148>
     a4c:	94 f5       	brge	.+100    	; 0xab2 <setSpeed(char)+0x74>
     a4e:	81 33       	cpi	r24, 0x31	; 49
     a50:	09 f4       	brne	.+2      	; 0xa54 <setSpeed(char)+0x16>
     a52:	81 c0       	rjmp	.+258    	; 0xb56 <setSpeed(char)+0x118>
     a54:	24 f5       	brge	.+72     	; 0xa9e <setSpeed(char)+0x60>
     a56:	80 33       	cpi	r24, 0x30	; 48
     a58:	09 f4       	brne	.+2      	; 0xa5c <setSpeed(char)+0x1e>
     a5a:	b4 c0       	rjmp	.+360    	; 0xbc4 <setSpeed(char)+0x186>
write():
     a5c:	87 e4       	ldi	r24, 0x47	; 71
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Print::write(char const*) [clone .part.2] [clone .constprop.19]>
     a64:	00 e0       	ldi	r16, 0x00	; 0
     a66:	11 e0       	ldi	r17, 0x01	; 1
setSpeed():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:329
      speed[4] = 5000;
      speeds = 5;
      break;
  }
  Serial.print("<speeds =");
  for (int i = 0; i < speeds; i++)
     a68:	d0 e0       	ldi	r29, 0x00	; 0
     a6a:	c0 e0       	ldi	r28, 0x00	; 0
     a6c:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <speeds>
     a70:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <speeds+0x1>
     a74:	c8 17       	cp	r28, r24
     a76:	d9 07       	cpc	r29, r25
     a78:	0c f0       	brlt	.+2      	; 0xa7c <setSpeed(char)+0x3e>
     a7a:	c9 c0       	rjmp	.+402    	; 0xc0e <setSpeed(char)+0x1d0>
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:66
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
     a7c:	60 e2       	ldi	r22, 0x20	; 32
     a7e:	88 e9       	ldi	r24, 0x98	; 152
     a80:	91 e0       	ldi	r25, 0x01	; 1
     a82:	0e 94 dd 02 	call	0x5ba	; 0x5ba <HardwareSerial::write(unsigned char)>
setSpeed():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:332
  {
    Serial.print(' ');
    Serial.print(speed[i]);
     a86:	f8 01       	movw	r30, r16
     a88:	61 91       	ld	r22, Z+
     a8a:	71 91       	ld	r23, Z+
     a8c:	81 91       	ld	r24, Z+
     a8e:	91 91       	ld	r25, Z+
     a90:	8f 01       	movw	r16, r30
     a92:	4a e0       	ldi	r20, 0x0A	; 10
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	0e 94 5d 04 	call	0x8ba	; 0x8ba <Print::print(long, int) [clone .constprop.15]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:329
      speed[4] = 5000;
      speeds = 5;
      break;
  }
  Serial.print("<speeds =");
  for (int i = 0; i < speeds; i++)
     a9a:	21 96       	adiw	r28, 0x01	; 1
     a9c:	e7 cf       	rjmp	.-50     	; 0xa6c <setSpeed(char)+0x2e>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:279
}


void setSpeed(char sp)
{
  switch (sp)
     a9e:	82 33       	cpi	r24, 0x32	; 50
     aa0:	09 f4       	brne	.+2      	; 0xaa4 <setSpeed(char)+0x66>
     aa2:	6c c0       	rjmp	.+216    	; 0xb7c <setSpeed(char)+0x13e>
     aa4:	84 33       	cpi	r24, 0x34	; 52
     aa6:	d1 f6       	brne	.-76     	; 0xa5c <setSpeed(char)+0x1e>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:290
    case '2':
      speed[0] = 200;
      speeds = 1;
      break;
    case '4':
      speed[0] = 400;
     aa8:	80 e9       	ldi	r24, 0x90	; 144
     aaa:	91 e0       	ldi	r25, 0x01	; 1
     aac:	a0 e0       	ldi	r26, 0x00	; 0
     aae:	b0 e0       	ldi	r27, 0x00	; 0
     ab0:	56 c0       	rjmp	.+172    	; 0xb5e <setSpeed(char)+0x120>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:279
}


void setSpeed(char sp)
{
  switch (sp)
     ab2:	8e 34       	cpi	r24, 0x4E	; 78
     ab4:	09 f4       	brne	.+2      	; 0xab8 <setSpeed(char)+0x7a>
     ab6:	a1 c0       	rjmp	.+322    	; 0xbfa <setSpeed(char)+0x1bc>
     ab8:	54 f4       	brge	.+20     	; 0xace <setSpeed(char)+0x90>
     aba:	89 33       	cpi	r24, 0x39	; 57
     abc:	09 f4       	brne	.+2      	; 0xac0 <setSpeed(char)+0x82>
     abe:	68 c0       	rjmp	.+208    	; 0xb90 <setSpeed(char)+0x152>
     ac0:	8d 34       	cpi	r24, 0x4D	; 77
     ac2:	61 f6       	brne	.-104    	; 0xa5c <setSpeed(char)+0x1e>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:308
      for (int i = 1; i <= speeds; i++) speed[i - 1] = i * 100;
      break;

    // new in 0.1.10 - experimental
    case 'M':
      speed[0] = 1000;
     ac4:	88 ee       	ldi	r24, 0xE8	; 232
     ac6:	93 e0       	ldi	r25, 0x03	; 3
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	48 c0       	rjmp	.+144    	; 0xb5e <setSpeed(char)+0x120>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:279
}


void setSpeed(char sp)
{
  switch (sp)
     ace:	8f 34       	cpi	r24, 0x4F	; 79
     ad0:	09 f4       	brne	.+2      	; 0xad4 <setSpeed(char)+0x96>
     ad2:	98 c0       	rjmp	.+304    	; 0xc04 <setSpeed(char)+0x1c6>
     ad4:	80 35       	cpi	r24, 0x50	; 80
     ad6:	11 f6       	brne	.-124    	; 0xa5c <setSpeed(char)+0x1e>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:320
    case 'O':
      speed[0] = 5000;
      speeds = 1;
      break;
    case 'P':
      speed[0] = 100;
     ad8:	84 e6       	ldi	r24, 0x64	; 100
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     ae4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     ae8:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     aec:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:321
      speed[1] = 400;
     af0:	80 e9       	ldi	r24, 0x90	; 144
     af2:	91 e0       	ldi	r25, 0x01	; 1
     af4:	a0 e0       	ldi	r26, 0x00	; 0
     af6:	b0 e0       	ldi	r27, 0x00	; 0
     af8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_start+0x4>
     afc:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_start+0x5>
     b00:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_start+0x6>
     b04:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_start+0x7>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:322
      speed[2] = 1000;
     b08:	88 ee       	ldi	r24, 0xE8	; 232
     b0a:	93 e0       	ldi	r25, 0x03	; 3
     b0c:	a0 e0       	ldi	r26, 0x00	; 0
     b0e:	b0 e0       	ldi	r27, 0x00	; 0
     b10:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_start+0x8>
     b14:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_start+0x9>
     b18:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <__data_start+0xa>
     b1c:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <__data_start+0xb>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:323
      speed[3] = 3400;
     b20:	88 e4       	ldi	r24, 0x48	; 72
     b22:	9d e0       	ldi	r25, 0x0D	; 13
     b24:	a0 e0       	ldi	r26, 0x00	; 0
     b26:	b0 e0       	ldi	r27, 0x00	; 0
     b28:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_start+0xc>
     b2c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <__data_start+0xd>
     b30:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <__data_start+0xe>
     b34:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <__data_start+0xf>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:324
      speed[4] = 5000;
     b38:	88 e8       	ldi	r24, 0x88	; 136
     b3a:	93 e1       	ldi	r25, 0x13	; 19
     b3c:	a0 e0       	ldi	r26, 0x00	; 0
     b3e:	b0 e0       	ldi	r27, 0x00	; 0
     b40:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_start+0x10>
     b44:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_start+0x11>
     b48:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <__data_start+0x12>
     b4c:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <__data_start+0x13>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:325
      speeds = 5;
     b50:	85 e0       	ldi	r24, 0x05	; 5
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	0e c0       	rjmp	.+28     	; 0xb72 <setSpeed(char)+0x134>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:282
void setSpeed(char sp)
{
  switch (sp)
  {
    case '1':
      speed[0] = 100;
     b56:	84 e6       	ldi	r24, 0x64	; 100
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	a0 e0       	ldi	r26, 0x00	; 0
     b5c:	b0 e0       	ldi	r27, 0x00	; 0
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:316
    case 'N':
      speed[0] = 3400;
      speeds = 1;
      break;
    case 'O':
      speed[0] = 5000;
     b5e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     b62:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     b66:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
     b6a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:317
      speeds = 1;
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	90 e0       	ldi	r25, 0x00	; 0
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:325
      speed[0] = 100;
      speed[1] = 400;
      speed[2] = 1000;
      speed[3] = 3400;
      speed[4] = 5000;
      speeds = 5;
     b72:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <speeds+0x1>
     b76:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <speeds>
     b7a:	70 cf       	rjmp	.-288    	; 0xa5c <setSpeed(char)+0x1e>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:286
    case '1':
      speed[0] = 100;
      speeds = 1;
      break;
    case '2':
      speed[0] = 200;
     b7c:	88 ec       	ldi	r24, 0xC8	; 200
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	a0 e0       	ldi	r26, 0x00	; 0
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	ec cf       	rjmp	.-40     	; 0xb5e <setSpeed(char)+0x120>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:294
    case '4':
      speed[0] = 400;
      speeds = 1;
      break;
    case '8':
      speed[0] = 800;
     b86:	80 e2       	ldi	r24, 0x20	; 32
     b88:	93 e0       	ldi	r25, 0x03	; 3
     b8a:	a0 e0       	ldi	r26, 0x00	; 0
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	e7 cf       	rjmp	.-50     	; 0xb5e <setSpeed(char)+0x120>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:298
      speeds = 1;
      break;
    case '9':  // limited to 400 KHz
      speeds = 8;
     b90:	88 e0       	ldi	r24, 0x08	; 8
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <speeds+0x1>
     b98:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <speeds>
     b9c:	e0 e0       	ldi	r30, 0x00	; 0
     b9e:	f1 e0       	ldi	r31, 0x01	; 1
     ba0:	82 e3       	ldi	r24, 0x32	; 50
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	a0 e0       	ldi	r26, 0x00	; 0
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:299
      for (int i = 1; i <= speeds; i++) speed[i - 1] = i * 50;
     ba8:	81 93       	st	Z+, r24
     baa:	91 93       	st	Z+, r25
     bac:	a1 93       	st	Z+, r26
     bae:	b1 93       	st	Z+, r27
     bb0:	c2 96       	adiw	r24, 0x32	; 50
     bb2:	a1 1d       	adc	r26, r1
     bb4:	b1 1d       	adc	r27, r1
     bb6:	82 3c       	cpi	r24, 0xC2	; 194
     bb8:	21 e0       	ldi	r18, 0x01	; 1
     bba:	92 07       	cpc	r25, r18
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	99 f7       	brne	.-26     	; 0xba8 <setSpeed(char)+0x16a>
     bc2:	4c cf       	rjmp	.-360    	; 0xa5c <setSpeed(char)+0x1e>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:302
      break;
    case '0':  // limited to 800 KHz
      speeds = 8;
     bc4:	88 e0       	ldi	r24, 0x08	; 8
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	90 93 7a 01 	sts	0x017A, r25	; 0x80017a <speeds+0x1>
     bcc:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <speeds>
     bd0:	e0 e0       	ldi	r30, 0x00	; 0
     bd2:	f1 e0       	ldi	r31, 0x01	; 1
     bd4:	84 e6       	ldi	r24, 0x64	; 100
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	a0 e0       	ldi	r26, 0x00	; 0
     bda:	b0 e0       	ldi	r27, 0x00	; 0
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:303
      for (int i = 1; i <= speeds; i++) speed[i - 1] = i * 100;
     bdc:	81 93       	st	Z+, r24
     bde:	91 93       	st	Z+, r25
     be0:	a1 93       	st	Z+, r26
     be2:	b1 93       	st	Z+, r27
     be4:	8c 59       	subi	r24, 0x9C	; 156
     be6:	9f 4f       	sbci	r25, 0xFF	; 255
     be8:	af 4f       	sbci	r26, 0xFF	; 255
     bea:	bf 4f       	sbci	r27, 0xFF	; 255
     bec:	84 38       	cpi	r24, 0x84	; 132
     bee:	23 e0       	ldi	r18, 0x03	; 3
     bf0:	92 07       	cpc	r25, r18
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	91 f7       	brne	.-28     	; 0xbdc <setSpeed(char)+0x19e>
     bf8:	31 cf       	rjmp	.-414    	; 0xa5c <setSpeed(char)+0x1e>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:312
    case 'M':
      speed[0] = 1000;
      speeds = 1;
      break;
    case 'N':
      speed[0] = 3400;
     bfa:	88 e4       	ldi	r24, 0x48	; 72
     bfc:	9d e0       	ldi	r25, 0x0D	; 13
     bfe:	a0 e0       	ldi	r26, 0x00	; 0
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	ad cf       	rjmp	.-166    	; 0xb5e <setSpeed(char)+0x120>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:316
      speeds = 1;
      break;
    case 'O':
      speed[0] = 5000;
     c04:	88 e8       	ldi	r24, 0x88	; 136
     c06:	93 e1       	ldi	r25, 0x13	; 19
     c08:	a0 e0       	ldi	r26, 0x00	; 0
     c0a:	b0 e0       	ldi	r27, 0x00	; 0
     c0c:	a8 cf       	rjmp	.-176    	; 0xb5e <setSpeed(char)+0x120>
write():
     c0e:	81 e5       	ldi	r24, 0x51	; 81
     c10:	91 e0       	ldi	r25, 0x01	; 1
     c12:	0e 94 ff 03 	call	0x7fe	; 0x7fe <Print::write(char const*) [clone .part.2] [clone .constprop.19]>
setSpeed():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:335
  {
    Serial.print(' ');
    Serial.print(speed[i]);
  }
  Serial.println(" >");
}
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	1f 91       	pop	r17
     c1c:	0f 91       	pop	r16
println():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:140
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
     c1e:	0c 94 28 03 	jmp	0x650	; 0x650 <Print::println() [clone .constprop.22]>

00000c22 <reset()>:
reset():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:240

//////////////////////////////////////////////////////////////////////

void reset()
{
  setSpeed('9');
     c22:	89 e3       	ldi	r24, 0x39	; 57
     c24:	0e 94 1f 05 	call	0xa3e	; 0xa3e <setSpeed(char)>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:241
  selectedWirePort = 0;
     c28:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <selectedWirePort+0x1>
     c2c:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <selectedWirePort>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:242
  addressStart     = 8;
     c30:	88 e0       	ldi	r24, 0x08	; 8
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <addressStart+0x1>
     c38:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <addressStart>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:243
  addressEnd       = 119;
     c3c:	87 e7       	ldi	r24, 0x77	; 119
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <addressEnd+0x1>
     c44:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <addressEnd>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:245
  
  delayFlag  = false;
     c48:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <delayFlag>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:246
  printAll   = true;
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <printAll>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:247
  header     = true;
     c52:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <header>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:248
  disableIRQ = false;
     c56:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <disableIRQ>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:250

  state = STOP;
     c5a:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <state+0x1>
     c5e:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <state>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:252

  displayHelp();
     c62:	0c 94 93 04 	jmp	0x926	; 0x926 <displayHelp()>

00000c66 <I2Cscan()>:
I2Cscan():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:392
  Serial.println();
}


void I2Cscan()
{
     c66:	2f 92       	push	r2
     c68:	3f 92       	push	r3
     c6a:	4f 92       	push	r4
     c6c:	5f 92       	push	r5
     c6e:	6f 92       	push	r6
     c70:	7f 92       	push	r7
     c72:	8f 92       	push	r8
     c74:	9f 92       	push	r9
     c76:	af 92       	push	r10
     c78:	bf 92       	push	r11
     c7a:	cf 92       	push	r12
     c7c:	df 92       	push	r13
     c7e:	ef 92       	push	r14
     c80:	ff 92       	push	r15
     c82:	0f 93       	push	r16
     c84:	1f 93       	push	r17
     c86:	cf 93       	push	r28
     c88:	df 93       	push	r29
     c8a:	1f 92       	push	r1
     c8c:	cd b7       	in	r28, 0x3d	; 61
     c8e:	de b7       	in	r29, 0x3e	; 62
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:500
    Serial.print(stopScan - startScan);
    Serial.println(F(" milliseconds."));
  }

  interrupts();
}
     c90:	6d b6       	in	r6, 0x3d	; 61
     c92:	7e b6       	in	r7, 0x3e	; 62
millis():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:122
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     c94:	2f b7       	in	r18, 0x3f	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:126

  // disable interrupts while we read millis_timer_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to millis_timer_millis)
  cli();
     c96:	f8 94       	cli
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:127
  m = millis_timer_millis;
     c98:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <millis_timer_millis>
     c9c:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <millis_timer_millis+0x1>
     ca0:	a0 91 88 01 	lds	r26, 0x0188	; 0x800188 <millis_timer_millis+0x2>
     ca4:	b0 91 89 01 	lds	r27, 0x0189	; 0x800189 <millis_timer_millis+0x3>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:128
  SREG = oldSREG;
     ca8:	2f bf       	out	0x3f, r18	; 63
I2Cscan():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:393
}


void I2Cscan()
{
  startScan = millis();
     caa:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <startScan>
     cae:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <startScan+0x1>
     cb2:	a0 93 7d 01 	sts	0x017D, r26	; 0x80017d <startScan+0x2>
     cb6:	b0 93 7e 01 	sts	0x017E, r27	; 0x80017e <startScan+0x3>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:396
  uint8_t count = 0;

  if (disableIRQ)
     cba:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <disableIRQ>
     cbe:	88 23       	and	r24, r24
     cc0:	09 f0       	breq	.+2      	; 0xcc4 <I2Cscan()+0x5e>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:398
  {
    noInterrupts();
     cc2:	f8 94       	cli
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:401
  }

  if (header)
     cc4:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <header>
     cc8:	88 23       	and	r24, r24
     cca:	e9 f1       	breq	.+122    	; 0xd46 <I2Cscan()+0xe0>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:403
  {
    Serial.print(F("TIME\tDEC\tHEX\t"));
     ccc:	88 ed       	ldi	r24, 0xD8	; 216
     cce:	93 e0       	ldi	r25, 0x03	; 3
     cd0:	0e 94 3a 03 	call	0x674	; 0x674 <Print::print(__FlashStringHelper const*) [clone .constprop.21]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:404
    for (uint8_t s = 0; s < speeds; s++)
     cd4:	d1 2c       	mov	r13, r1
     cd6:	0d 2d       	mov	r16, r13
     cd8:	10 e0       	ldi	r17, 0x00	; 0
     cda:	e0 90 79 01 	lds	r14, 0x0179	; 0x800179 <speeds>
     cde:	f0 90 7a 01 	lds	r15, 0x017A	; 0x80017a <speeds+0x1>
     ce2:	0e 15       	cp	r16, r14
     ce4:	1f 05       	cpc	r17, r15
     ce6:	ac f4       	brge	.+42     	; 0xd12 <I2Cscan()+0xac>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:406
    {
      Serial.print(F("\t"));
     ce8:	86 ed       	ldi	r24, 0xD6	; 214
     cea:	93 e0       	ldi	r25, 0x03	; 3
     cec:	0e 94 3a 03 	call	0x674	; 0x674 <Print::print(__FlashStringHelper const*) [clone .constprop.21]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:407
      Serial.print(speed[s]);
     cf0:	00 0f       	add	r16, r16
     cf2:	11 1f       	adc	r17, r17
     cf4:	00 0f       	add	r16, r16
     cf6:	11 1f       	adc	r17, r17
     cf8:	f8 01       	movw	r30, r16
     cfa:	e0 50       	subi	r30, 0x00	; 0
     cfc:	ff 4f       	sbci	r31, 0xFF	; 255
     cfe:	60 81       	ld	r22, Z
     d00:	71 81       	ldd	r23, Z+1	; 0x01
     d02:	82 81       	ldd	r24, Z+2	; 0x02
     d04:	93 81       	ldd	r25, Z+3	; 0x03
     d06:	4a e0       	ldi	r20, 0x0A	; 10
     d08:	50 e0       	ldi	r21, 0x00	; 0
     d0a:	0e 94 5d 04 	call	0x8ba	; 0x8ba <Print::print(long, int) [clone .constprop.15]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:404
  }

  if (header)
  {
    Serial.print(F("TIME\tDEC\tHEX\t"));
    for (uint8_t s = 0; s < speeds; s++)
     d0e:	d3 94       	inc	r13
     d10:	e2 cf       	rjmp	.-60     	; 0xcd6 <I2Cscan()+0x70>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:409
    {
      Serial.print(F("\t"));
      Serial.print(speed[s]);
    }
    Serial.println(F("\t[KHz]"));
     d12:	8f ec       	ldi	r24, 0xCF	; 207
     d14:	93 e0       	ldi	r25, 0x03	; 3
     d16:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:410
    for (uint8_t s = 0; s < speeds + 5; s++)
     d1a:	10 e0       	ldi	r17, 0x00	; 0
     d1c:	24 e0       	ldi	r18, 0x04	; 4
     d1e:	e2 0e       	add	r14, r18
     d20:	f1 1c       	adc	r15, r1
     d22:	1e 15       	cp	r17, r14
     d24:	1f 04       	cpc	r1, r15
     d26:	09 f0       	breq	.+2      	; 0xd2a <I2Cscan()+0xc4>
     d28:	34 f4       	brge	.+12     	; 0xd36 <I2Cscan()+0xd0>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:412
    {
      Serial.print(F("--------"));
     d2a:	86 ec       	ldi	r24, 0xC6	; 198
     d2c:	93 e0       	ldi	r25, 0x03	; 3
     d2e:	0e 94 3a 03 	call	0x674	; 0x674 <Print::print(__FlashStringHelper const*) [clone .constprop.21]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:410
    {
      Serial.print(F("\t"));
      Serial.print(speed[s]);
    }
    Serial.println(F("\t[KHz]"));
    for (uint8_t s = 0; s < speeds + 5; s++)
     d32:	1f 5f       	subi	r17, 0xFF	; 255
     d34:	f6 cf       	rjmp	.-20     	; 0xd22 <I2Cscan()+0xbc>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:414
    {
      Serial.print(F("--------"));
    }
    Serial.println();
     d36:	0e 94 28 03 	call	0x650	; 0x650 <Print::println() [clone .constprop.22]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:415
    delay(100);
     d3a:	64 e6       	ldi	r22, 0x64	; 100
     d3c:	70 e0       	ldi	r23, 0x00	; 0
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0e 94 a6 03 	call	0x74c	; 0x74c <delay>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:418
  }

  for (uint8_t address = addressStart; address <= addressEnd; address++)
     d46:	10 91 2a 01 	lds	r17, 0x012A	; 0x80012a <addressStart>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:394


void I2Cscan()
{
  startScan = millis();
  uint8_t count = 0;
     d4a:	00 e0       	ldi	r16, 0x00	; 0
setClock():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:393
  PORT_USI &= ~(1 << PIN_USI_SDA); // Disable pullup on SDA.
  PORT_USI_CL &= ~(1 << PIN_USI_SCL); // Disable pullup on SCL.
}

void TwoWire::setClock(uint32_t clock) {
  USI_TWI_Master_Speed(clock>200000);
     d4c:	bb 24       	eor	r11, r11
     d4e:	b3 94       	inc	r11
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     d50:	25 e0       	ldi	r18, 0x05	; 5
     d52:	a2 2e       	mov	r10, r18
I2Cscan():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:418
    }
    Serial.println();
    delay(100);
  }

  for (uint8_t address = addressStart; address <= addressEnd; address++)
     d54:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <addressEnd>
     d58:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <addressEnd+0x1>
     d5c:	18 17       	cp	r17, r24
     d5e:	19 06       	cpc	r1, r25
     d60:	11 f0       	breq	.+4      	; 0xd66 <I2Cscan()+0x100>
     d62:	0c f0       	brlt	.+2      	; 0xd66 <I2Cscan()+0x100>
     d64:	3d c1       	rjmp	.+634    	; 0xfe0 <I2Cscan()+0x37a>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:467
        Serial.print(F("\t"));
        Serial.print(found[s] ? F("V") : F("."));
      }
      Serial.println();
    }
  }
     d66:	4d b6       	in	r4, 0x3d	; 61
     d68:	5e b6       	in	r5, 0x3e	; 62
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:420
    delay(100);
  }

  for (uint8_t address = addressStart; address <= addressEnd; address++)
  {
    bool printLine = printAll;
     d6a:	80 90 2c 01 	lds	r8, 0x012C	; 0x80012c <printAll>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:421
    bool found[speeds];
     d6e:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <speeds>
     d72:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <speeds+0x1>
     d76:	2d b7       	in	r18, 0x3d	; 61
     d78:	3e b7       	in	r19, 0x3e	; 62
     d7a:	28 1b       	sub	r18, r24
     d7c:	39 0b       	sbc	r19, r25
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	f8 94       	cli
     d82:	3e bf       	out	0x3e, r19	; 62
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	2d bf       	out	0x3d, r18	; 61
     d88:	8d b7       	in	r24, 0x3d	; 61
     d8a:	9e b7       	in	r25, 0x3e	; 62
     d8c:	01 96       	adiw	r24, 0x01	; 1
     d8e:	1c 01       	movw	r2, r24
     d90:	91 2f       	mov	r25, r17
     d92:	99 0f       	add	r25, r25
     d94:	99 83       	std	Y+1, r25	; 0x01
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:424
    bool fnd = false;

    for (uint8_t s = 0; s < speeds ; s++)
     d96:	c1 2c       	mov	r12, r1
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:422

  for (uint8_t address = addressStart; address <= addressEnd; address++)
  {
    bool printLine = printAll;
    bool found[speeds];
    bool fnd = false;
     d98:	d1 2c       	mov	r13, r1
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     d9a:	94 e0       	ldi	r25, 0x04	; 4
     d9c:	99 2e       	mov	r9, r25
I2Cscan():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:424

    for (uint8_t s = 0; s < speeds ; s++)
     d9e:	ec 2c       	mov	r14, r12
     da0:	f1 2c       	mov	r15, r1
     da2:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <speeds>
     da6:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <speeds+0x1>
     daa:	e8 16       	cp	r14, r24
     dac:	f9 06       	cpc	r15, r25
     dae:	0c f0       	brlt	.+2      	; 0xdb2 <I2Cscan()+0x14c>
     db0:	ba c0       	rjmp	.+372    	; 0xf26 <I2Cscan()+0x2c0>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:438
        Serial.println("ERROR: not supported speed");
        TWBR = PREV_TWBR;
        return;
      }
#else
      wire->setClock(speed[s] * 1000UL);
     db2:	f7 01       	movw	r30, r14
     db4:	ee 0f       	add	r30, r30
     db6:	ff 1f       	adc	r31, r31
     db8:	ee 0f       	add	r30, r30
     dba:	ff 1f       	adc	r31, r31
     dbc:	e0 50       	subi	r30, 0x00	; 0
     dbe:	ff 4f       	sbci	r31, 0xFF	; 255
     dc0:	28 ee       	ldi	r18, 0xE8	; 232
     dc2:	33 e0       	ldi	r19, 0x03	; 3
     dc4:	40 e0       	ldi	r20, 0x00	; 0
     dc6:	50 e0       	ldi	r21, 0x00	; 0
     dc8:	60 81       	ld	r22, Z
     dca:	71 81       	ldd	r23, Z+1	; 0x01
     dcc:	82 81       	ldd	r24, Z+2	; 0x02
     dce:	93 81       	ldd	r25, Z+3	; 0x03
     dd0:	0e 94 47 0b 	call	0x168e	; 0x168e <__mulsi3>
setClock():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:393
     dd4:	21 e0       	ldi	r18, 0x01	; 1
     dd6:	61 34       	cpi	r22, 0x41	; 65
     dd8:	7d 40       	sbci	r23, 0x0D	; 13
     dda:	83 40       	sbci	r24, 0x03	; 3
     ddc:	91 05       	cpc	r25, r1
     dde:	08 f4       	brcc	.+2      	; 0xde2 <I2Cscan()+0x17c>
     de0:	20 e0       	ldi	r18, 0x00	; 0
USI_TWI_Master_Speed():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:49
    unsigned char unused : 6;
  };
} USI_TWI_state;

void USI_TWI_Master_Speed(uint8_t fm) {
  USI_TWI_MASTER_SPEED=fm?1:0;
     de2:	20 93 7f 01 	sts	0x017F, r18	; 0x80017f <USI_TWI_MASTER_SPEED>
beginTransmission():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:464

void TwoWire::beginTransmission(uint8_t address) {
  // indicate that we are transmitting
  transmitting = 1;
  // set address of targeted slave and write mode
  Buffer[0] = (address << TWI_ADR_BITS) | (0 << TWI_READ_BIT);
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <__data_end>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:467
  // reset tx buffer iterator vars
  BufferIndex = 1; // reserved by slave address
  BufferLength = BufferIndex;
     dec:	91 e0       	ldi	r25, 0x01	; 1
     dee:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <TwoWire::BufferLength>
USI_TWI_Start_Transceiver_With_Data_Stop():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:115
  // Prepare register value to: Clear flags set USI to shift 8 bits i.e. count 16 clock edges.

  unsigned char tempUSISR_1bit = (1 << USISIF) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC) | (0xE << USICNT0);
  // Prepare register value to: Clear flags, and set USI to shift 1 bit i.e. count 2 clock edges.

  USI_TWI_state.errorState  = 0;
     df2:	23 e0       	ldi	r18, 0x03	; 3
     df4:	20 93 74 01 	sts	0x0174, r18	; 0x800174 <USI_TWI_state>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:152
  {
    USI_TWI_state.masterWriteDataMode = TRUE;
  }

  /* Release SCL to ensure that (repeated) Start can be performed */
  PORT_USI_CL |= (1 << PIN_USI_SCL); // Release SCL.
     df8:	49 9a       	sbi	0x09, 1	; 9
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:153
  while (!(PIN_USI_CL & (1 << PIN_USI_SCL)))
     dfa:	39 9b       	sbis	0x07, 1	; 7
     dfc:	fe cf       	rjmp	.-4      	; 0xdfa <I2Cscan()+0x194>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:155
    ; // Verify that SCL becomes high.
  if (USI_TWI_MASTER_SPEED) DELAY_T4TWI_FM; // Delay for T4TWI if TWI_FAST_MODE
     dfe:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <USI_TWI_MASTER_SPEED>
     e02:	88 23       	and	r24, r24
     e04:	11 f1       	breq	.+68     	; 0xe4a <I2Cscan()+0x1e4>
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     e06:	8b 2d       	mov	r24, r11
     e08:	8a 95       	dec	r24
     e0a:	f1 f7       	brne	.-4      	; 0xe08 <I2Cscan()+0x1a2>
USI_TWI_Start_Transceiver_With_Data_Stop():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:159
  else DELAY_T2TWI;    // Delay for T2TWI if TWI_STANDARD_MODE

  /* Generate Start Condition */
  PORT_USI &= ~(1 << PIN_USI_SDA); // Force SDA LOW.
     e0c:	69 98       	cbi	0x0d, 1	; 13
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:161

  if (USI_TWI_MASTER_SPEED) DELAY_T4TWI_FM; else DELAY_T4TWI; // UGGGGLLLYYYYY - but if you never call clock() which is the only thing that could change USI_TWI_MASTER_SPEED, should be optimized out
     e0e:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <USI_TWI_MASTER_SPEED>
     e12:	88 23       	and	r24, r24
     e14:	e1 f0       	breq	.+56     	; 0xe4e <I2Cscan()+0x1e8>
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     e16:	8b 2d       	mov	r24, r11
     e18:	8a 95       	dec	r24
     e1a:	f1 f7       	brne	.-4      	; 0xe18 <I2Cscan()+0x1b2>
USI_TWI_Start_Transceiver_With_Data_Stop():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:163

  PORT_USI_CL &= ~(1 << PIN_USI_SCL); // Pull SCL LOW.
     e1c:	49 98       	cbi	0x09, 1	; 9
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:164
  PORT_USI |= (1 << PIN_USI_SDA);  // Release SDA.
     e1e:	69 9a       	sbi	0x0d, 1	; 13
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:167

#ifdef SIGNAL_VERIFY
  if (!(USISR & (1 << USISIF))) {
     e20:	0b b4       	in	r0, 0x2b	; 43
     e22:	07 fc       	sbrc	r0, 7
     e24:	16 c0       	rjmp	.+44     	; 0xe52 <I2Cscan()+0x1ec>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:168
    USI_TWI_state.errorState = USI_TWI_MISSING_START_CON;
     e26:	37 e0       	ldi	r19, 0x07	; 7
     e28:	30 93 74 01 	sts	0x0174, r19	; 0x800174 <USI_TWI_state>
endTransmission():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:481
  uint8_t ret = USI_TWI_Start_Transceiver_With_Data_Stop(Buffer,
                                                         BufferLength,
                                                         sendStop);
  // reset tx buffer iterator vars
  BufferIndex = 0;
  BufferLength = 0;
     e2c:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <TwoWire::BufferLength>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:486
  // indicate that we are done transmitting
  transmitting = 0;
  // check for error
  if (ret == FALSE) {
    switch (USI_TWI_Get_State_Info()) {
     e30:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <USI_TWI_state>
     e34:	85 30       	cpi	r24, 0x05	; 5
     e36:	09 f4       	brne	.+2      	; 0xe3a <I2Cscan()+0x1d4>
     e38:	72 c0       	rjmp	.+228    	; 0xf1e <I2Cscan()+0x2b8>
     e3a:	86 30       	cpi	r24, 0x06	; 6
     e3c:	09 f4       	brne	.+2      	; 0xe40 <I2Cscan()+0x1da>
     e3e:	6d c0       	rjmp	.+218    	; 0xf1a <I2Cscan()+0x2b4>
     e40:	81 30       	cpi	r24, 0x01	; 1
     e42:	09 f0       	breq	.+2      	; 0xe46 <I2Cscan()+0x1e0>
     e44:	6e c0       	rjmp	.+220    	; 0xf22 <I2Cscan()+0x2bc>
I2Cscan():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:488
    case USI_TWI_DATA_OUT_OF_BOUND:
      return 1; //data too long to fit in transmit buffer
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	3f c0       	rjmp	.+126    	; 0xec8 <I2Cscan()+0x262>
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     e4a:	8a 2d       	mov	r24, r10
     e4c:	dd cf       	rjmp	.-70     	; 0xe08 <I2Cscan()+0x1a2>
     e4e:	89 2d       	mov	r24, r9
     e50:	e3 cf       	rjmp	.-58     	; 0xe18 <I2Cscan()+0x1b2>
USI_TWI_Start_Transceiver_With_Data_Stop():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:176
#endif

  /*Write address and Read/Write data */
  do {
    /* If masterWrite cycle (or initial address transmission)*/
    if (USI_TWI_state.addressMode || USI_TWI_state.masterWriteDataMode) {
     e52:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <USI_TWI_state>
     e56:	83 70       	andi	r24, 0x03	; 3
     e58:	09 f4       	brne	.+2      	; 0xe5c <I2Cscan()+0x1f6>
     e5a:	4b c0       	rjmp	.+150    	; 0xef2 <I2Cscan()+0x28c>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:178
      /* Write a byte */
      PORT_USI_CL &= ~(1 << PIN_USI_SCL);         // Pull SCL LOW.
     e5c:	49 98       	cbi	0x09, 1	; 9
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:179
      USIDR = *(msg++);                        // Setup data.
     e5e:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <__data_end>
     e62:	8c bd       	out	0x2c, r24	; 44
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:180
      USI_TWI_Master_Transfer(tempUSISR_8bit); // Send 8 bits on bus.
     e64:	80 ef       	ldi	r24, 0xF0	; 240
     e66:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <USI_TWI_Master_Transfer>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:183

      /* Clock and verify (N)ACK from slave */
      DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
     e6a:	61 98       	cbi	0x0c, 1	; 12
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:184
      if (USI_TWI_Master_Transfer(tempUSISR_1bit) & (1 << TWI_NACK_BIT)) {
     e6c:	8e ef       	ldi	r24, 0xFE	; 254
     e6e:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <USI_TWI_Master_Transfer>
     e72:	80 ff       	sbrs	r24, 0
     e74:	0b c0       	rjmp	.+22     	; 0xe8c <I2Cscan()+0x226>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:185
        if (USI_TWI_state.addressMode)
     e76:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <USI_TWI_state>
     e7a:	80 ff       	sbrs	r24, 0
     e7c:	04 c0       	rjmp	.+8      	; 0xe86 <I2Cscan()+0x220>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:186
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_ADDRESS;
     e7e:	86 e0       	ldi	r24, 0x06	; 6
     e80:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <USI_TWI_state>
     e84:	d3 cf       	rjmp	.-90     	; 0xe2c <I2Cscan()+0x1c6>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:188
        else
          USI_TWI_state.errorState = USI_TWI_NO_ACK_ON_DATA;
     e86:	a0 92 74 01 	sts	0x0174, r10	; 0x800174 <USI_TWI_state>
     e8a:	d0 cf       	rjmp	.-96     	; 0xe2c <I2Cscan()+0x1c6>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:191
        return (FALSE);
      }
      USI_TWI_state.addressMode = FALSE; // Only perform address transmission once.
     e8c:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <USI_TWI_state>
     e90:	8e 7f       	andi	r24, 0xFE	; 254
     e92:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <USI_TWI_state>
USI_TWI_Master_Stop():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:254
 Function for generating a TWI Stop Condition. Used to release
 the TWI bus.
---------------------------------------------------------------*/
unsigned char USI_TWI_Master_Stop(void)
{
  PORT_USI &= ~(1 << PIN_USI_SDA); // Pull SDA low.
     e96:	69 98       	cbi	0x0d, 1	; 13
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:255
  PORT_USI_CL |= (1 << PIN_USI_SCL);  // Release SCL.
     e98:	49 9a       	sbi	0x09, 1	; 9
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:256
  while (!(PIN_USI_CL & (1 << PIN_USI_SCL)))
     e9a:	39 9b       	sbis	0x07, 1	; 7
     e9c:	fe cf       	rjmp	.-4      	; 0xe9a <I2Cscan()+0x234>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:258
    ; // Wait for SCL to go high.
  if (USI_TWI_MASTER_SPEED) DELAY_T4TWI_FM; else DELAY_T4TWI;
     e9e:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <USI_TWI_MASTER_SPEED>
     ea2:	88 23       	and	r24, r24
     ea4:	91 f1       	breq	.+100    	; 0xf0a <I2Cscan()+0x2a4>
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     ea6:	8b 2d       	mov	r24, r11
     ea8:	8a 95       	dec	r24
     eaa:	f1 f7       	brne	.-4      	; 0xea8 <I2Cscan()+0x242>
USI_TWI_Master_Stop():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:259
  PORT_USI |= (1 << PIN_USI_SDA); // Release SDA.
     eac:	69 9a       	sbi	0x0d, 1	; 13
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:260
  if (USI_TWI_MASTER_SPEED) DELAY_T2TWI_FM; else DELAY_T2TWI;
     eae:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <USI_TWI_MASTER_SPEED>
     eb2:	88 23       	and	r24, r24
     eb4:	61 f1       	breq	.+88     	; 0xf0e <I2Cscan()+0x2a8>
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     eb6:	82 e0       	ldi	r24, 0x02	; 2
     eb8:	8a 95       	dec	r24
     eba:	f1 f7       	brne	.-4      	; 0xeb8 <I2Cscan()+0x252>
USI_TWI_Master_Stop():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:263

#ifdef SIGNAL_VERIFY
  if (!(USISR & (1 << USIPF))) {
     ebc:	0b b4       	in	r0, 0x2b	; 43
     ebe:	05 fe       	sbrs	r0, 5
     ec0:	28 c0       	rjmp	.+80     	; 0xf12 <I2Cscan()+0x2ac>
endTransmission():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:481
  uint8_t ret = USI_TWI_Start_Transceiver_With_Data_Stop(Buffer,
                                                         BufferLength,
                                                         sendStop);
  // reset tx buffer iterator vars
  BufferIndex = 0;
  BufferLength = 0;
     ec2:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <TwoWire::BufferLength>
I2Cscan():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:496
    case USI_TWI_NO_ACK_ON_DATA:
      return 3; //received NACK on transmit of data
    }
    return 4; //other error
  }
  return 0; //success
     ec6:	80 e0       	ldi	r24, 0x00	; 0
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:441
#endif
      wire->beginTransmission (address);
      found[s] = (wire->endTransmission () == 0);
     ec8:	91 e0       	ldi	r25, 0x01	; 1
     eca:	81 11       	cpse	r24, r1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	f1 01       	movw	r30, r2
     ed0:	ee 0d       	add	r30, r14
     ed2:	ff 1d       	adc	r31, r15
     ed4:	90 83       	st	Z, r25
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:442
      fnd |= found[s];
     ed6:	d9 2a       	or	r13, r25
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:444
      // give device 5 millis
      if (fnd && delayFlag) delay(RESTORE_LATENCY);
     ed8:	51 f0       	breq	.+20     	; 0xeee <I2Cscan()+0x288>
     eda:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <delayFlag>
     ede:	88 23       	and	r24, r24
     ee0:	31 f0       	breq	.+12     	; 0xeee <I2Cscan()+0x288>
     ee2:	65 e0       	ldi	r22, 0x05	; 5
     ee4:	70 e0       	ldi	r23, 0x00	; 0
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	0e 94 a6 03 	call	0x74c	; 0x74c <delay>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:424
  {
    bool printLine = printAll;
    bool found[speeds];
    bool fnd = false;

    for (uint8_t s = 0; s < speeds ; s++)
     eee:	c3 94       	inc	r12
     ef0:	56 cf       	rjmp	.-340    	; 0xd9e <I2Cscan()+0x138>
USI_TWI_Start_Transceiver_With_Data_Stop():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:196
      USI_TWI_state.addressMode = FALSE; // Only perform address transmission once.
    }
    /* Else masterRead cycle*/
    else {
      /* Read a data byte */
      DDR_USI &= ~(1 << PIN_USI_SDA); // Enable SDA as input.
     ef2:	61 98       	cbi	0x0c, 1	; 12
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:197
      *(msg++) = USI_TWI_Master_Transfer(tempUSISR_8bit);
     ef4:	80 ef       	ldi	r24, 0xF0	; 240
     ef6:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <USI_TWI_Master_Transfer>
     efa:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <__data_end>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:202

      /* Prepare to generate ACK (or NACK in case of End Of Transmission) */
      if (msgSize == 1) // If transmission of last byte was performed.
      {
        USIDR = 0xFF; // Load NACK to confirm End Of Transmission.
     efe:	9f ef       	ldi	r25, 0xFF	; 255
     f00:	9c bd       	out	0x2c, r25	; 44
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:206
      } else {
        USIDR = 0x00; // Load ACK. Set data register bit 7 (output for SDA) low.
      }
      USI_TWI_Master_Transfer(tempUSISR_1bit); // Generate ACK/NACK.
     f02:	8e ef       	ldi	r24, 0xFE	; 254
     f04:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <USI_TWI_Master_Transfer>
     f08:	c6 cf       	rjmp	.-116    	; 0xe96 <I2Cscan()+0x230>
_delay_loop_1():
/home/user/.arduino15/packages/arduino/tools/avr-gcc/7.3.0-atmel3.6.1-arduino7/avr/include/util/delay_basic.h:83
     f0a:	89 2d       	mov	r24, r9
     f0c:	cd cf       	rjmp	.-102    	; 0xea8 <I2Cscan()+0x242>
     f0e:	8a 2d       	mov	r24, r10
     f10:	d3 cf       	rjmp	.-90     	; 0xeb8 <I2Cscan()+0x252>
USI_TWI_Master_Stop():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:264
  PORT_USI |= (1 << PIN_USI_SDA); // Release SDA.
  if (USI_TWI_MASTER_SPEED) DELAY_T2TWI_FM; else DELAY_T2TWI;

#ifdef SIGNAL_VERIFY
  if (!(USISR & (1 << USIPF))) {
    USI_TWI_state.errorState = USI_TWI_MISSING_STOP_CON;
     f12:	28 e0       	ldi	r18, 0x08	; 8
     f14:	20 93 74 01 	sts	0x0174, r18	; 0x800174 <USI_TWI_state>
     f18:	d4 cf       	rjmp	.-88     	; 0xec2 <I2Cscan()+0x25c>
I2Cscan():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:490
  if (ret == FALSE) {
    switch (USI_TWI_Get_State_Info()) {
    case USI_TWI_DATA_OUT_OF_BOUND:
      return 1; //data too long to fit in transmit buffer
    case USI_TWI_NO_ACK_ON_ADDRESS:
      return 2; //received NACK on transmit of address
     f1a:	82 e0       	ldi	r24, 0x02	; 2
     f1c:	d5 cf       	rjmp	.-86     	; 0xec8 <I2Cscan()+0x262>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:492
    case USI_TWI_NO_ACK_ON_DATA:
      return 3; //received NACK on transmit of data
     f1e:	83 e0       	ldi	r24, 0x03	; 3
     f20:	d3 cf       	rjmp	.-90     	; 0xec8 <I2Cscan()+0x262>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:494
    }
    return 4; //other error
     f22:	84 e0       	ldi	r24, 0x04	; 4
     f24:	d1 cf       	rjmp	.-94     	; 0xec8 <I2Cscan()+0x262>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:447
      fnd |= found[s];
      // give device 5 millis
      if (fnd && delayFlag) delay(RESTORE_LATENCY);
    }

    if (fnd) count++;
     f26:	dd 20       	and	r13, r13
     f28:	09 f4       	brne	.+2      	; 0xf2c <I2Cscan()+0x2c6>
     f2a:	4b c0       	rjmp	.+150    	; 0xfc2 <I2Cscan()+0x35c>
     f2c:	0f 5f       	subi	r16, 0xFF	; 255
millis():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:122
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     f2e:	2f b7       	in	r18, 0x3f	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:126

  // disable interrupts while we read millis_timer_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to millis_timer_millis)
  cli();
     f30:	f8 94       	cli
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:127
  m = millis_timer_millis;
     f32:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <millis_timer_millis>
     f36:	70 91 87 01 	lds	r23, 0x0187	; 0x800187 <millis_timer_millis+0x1>
     f3a:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <millis_timer_millis+0x2>
     f3e:	90 91 89 01 	lds	r25, 0x0189	; 0x800189 <millis_timer_millis+0x3>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:128
  SREG = oldSREG;
     f42:	2f bf       	out	0x3f, r18	; 63
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:103
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     f44:	4a e0       	ldi	r20, 0x0A	; 10
     f46:	0e 94 0c 04 	call	0x818	; 0x818 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]>
I2Cscan():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:453
    printLine |= fnd;

    if (printLine)
    {
      Serial.print(millis());
      Serial.print(F("\t"));
     f4a:	84 ec       	ldi	r24, 0xC4	; 196
     f4c:	93 e0       	ldi	r25, 0x03	; 3
     f4e:	0e 94 3a 03 	call	0x674	; 0x674 <Print::print(__FlashStringHelper const*) [clone .constprop.21]>
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:71
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
     f52:	c1 2e       	mov	r12, r17
     f54:	d1 2c       	mov	r13, r1
     f56:	f1 2c       	mov	r15, r1
     f58:	e1 2c       	mov	r14, r1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:103
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     f5a:	4a e0       	ldi	r20, 0x0A	; 10
     f5c:	c7 01       	movw	r24, r14
     f5e:	b6 01       	movw	r22, r12
     f60:	0e 94 0c 04 	call	0x818	; 0x818 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]>
I2Cscan():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:455
      Serial.print(address, DEC);
      Serial.print(F("\t0x"));
     f64:	80 ec       	ldi	r24, 0xC0	; 192
     f66:	93 e0       	ldi	r25, 0x03	; 3
     f68:	0e 94 3a 03 	call	0x674	; 0x674 <Print::print(__FlashStringHelper const*) [clone .constprop.21]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:456
      if (address < 0x10) Serial.print(0, HEX);
     f6c:	10 31       	cpi	r17, 0x10	; 16
     f6e:	30 f4       	brcc	.+12     	; 0xf7c <I2Cscan()+0x316>
     f70:	60 e1       	ldi	r22, 0x10	; 16
     f72:	70 e0       	ldi	r23, 0x00	; 0
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	0e 94 8c 04 	call	0x918	; 0x918 <Print::print(int, int) [clone .constprop.14]>
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:103
     f7c:	40 e1       	ldi	r20, 0x10	; 16
     f7e:	c7 01       	movw	r24, r14
     f80:	b6 01       	movw	r22, r12
     f82:	0e 94 0c 04 	call	0x818	; 0x818 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]>
I2Cscan():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:458
      Serial.print(address, HEX);
      Serial.print(F("\t"));
     f86:	8e eb       	ldi	r24, 0xBE	; 190
     f88:	93 e0       	ldi	r25, 0x03	; 3
     f8a:	0e 94 3a 03 	call	0x674	; 0x674 <Print::print(__FlashStringHelper const*) [clone .constprop.21]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:460

      for (uint8_t s = 0; s < speeds ; s++)
     f8e:	d1 2c       	mov	r13, r1
     f90:	ed 2c       	mov	r14, r13
     f92:	f1 2c       	mov	r15, r1
     f94:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <speeds>
     f98:	90 91 7a 01 	lds	r25, 0x017A	; 0x80017a <speeds+0x1>
     f9c:	e8 16       	cp	r14, r24
     f9e:	f9 06       	cpc	r15, r25
     fa0:	e4 f4       	brge	.+56     	; 0xfda <I2Cscan()+0x374>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:462
      {
        Serial.print(F("\t"));
     fa2:	8c eb       	ldi	r24, 0xBC	; 188
     fa4:	93 e0       	ldi	r25, 0x03	; 3
     fa6:	0e 94 3a 03 	call	0x674	; 0x674 <Print::print(__FlashStringHelper const*) [clone .constprop.21]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:463
        Serial.print(found[s] ? F("V") : F("."));
     faa:	f1 01       	movw	r30, r2
     fac:	ee 0d       	add	r30, r14
     fae:	ff 1d       	adc	r31, r15
     fb0:	80 81       	ld	r24, Z
     fb2:	81 11       	cpse	r24, r1
     fb4:	0f c0       	rjmp	.+30     	; 0xfd4 <I2Cscan()+0x36e>
     fb6:	88 eb       	ldi	r24, 0xB8	; 184
     fb8:	93 e0       	ldi	r25, 0x03	; 3
     fba:	0e 94 3a 03 	call	0x674	; 0x674 <Print::print(__FlashStringHelper const*) [clone .constprop.21]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:460
      Serial.print(F("\t0x"));
      if (address < 0x10) Serial.print(0, HEX);
      Serial.print(address, HEX);
      Serial.print(F("\t"));

      for (uint8_t s = 0; s < speeds ; s++)
     fbe:	d3 94       	inc	r13
     fc0:	e7 cf       	rjmp	.-50     	; 0xf90 <I2Cscan()+0x32a>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:450
    }

    if (fnd) count++;
    printLine |= fnd;

    if (printLine)
     fc2:	81 10       	cpse	r8, r1
     fc4:	b4 cf       	rjmp	.-152    	; 0xf2e <I2Cscan()+0x2c8>
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	5e be       	out	0x3e, r5	; 62
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	4d be       	out	0x3d, r4	; 61
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:418
    }
    Serial.println();
    delay(100);
  }

  for (uint8_t address = addressStart; address <= addressEnd; address++)
     fd0:	1f 5f       	subi	r17, 0xFF	; 255
     fd2:	c0 ce       	rjmp	.-640    	; 0xd54 <I2Cscan()+0xee>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:463
      Serial.print(F("\t"));

      for (uint8_t s = 0; s < speeds ; s++)
      {
        Serial.print(F("\t"));
        Serial.print(found[s] ? F("V") : F("."));
     fd4:	8a eb       	ldi	r24, 0xBA	; 186
     fd6:	93 e0       	ldi	r25, 0x03	; 3
     fd8:	f0 cf       	rjmp	.-32     	; 0xfba <I2Cscan()+0x354>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:465
      }
      Serial.println();
     fda:	0e 94 28 03 	call	0x650	; 0x650 <Print::println() [clone .constprop.22]>
     fde:	f3 cf       	rjmp	.-26     	; 0xfc6 <I2Cscan()+0x360>
millis():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:122
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
     fe0:	2f b7       	in	r18, 0x3f	; 63
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:126

  // disable interrupts while we read millis_timer_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to millis_timer_millis)
  cli();
     fe2:	f8 94       	cli
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:127
  m = millis_timer_millis;
     fe4:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <millis_timer_millis>
     fe8:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <millis_timer_millis+0x1>
     fec:	a0 91 88 01 	lds	r26, 0x0188	; 0x800188 <millis_timer_millis+0x2>
     ff0:	b0 91 89 01 	lds	r27, 0x0189	; 0x800189 <millis_timer_millis+0x3>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:128
  SREG = oldSREG;
     ff4:	2f bf       	out	0x3f, r18	; 63
I2Cscan():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:489
    }
    Serial.println(F("\t[KHz]"));
  }
*/

  stopScan = millis();
     ff6:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <stopScan>
     ffa:	90 93 76 01 	sts	0x0176, r25	; 0x800176 <stopScan+0x1>
     ffe:	a0 93 77 01 	sts	0x0177, r26	; 0x800177 <stopScan+0x2>
    1002:	b0 93 78 01 	sts	0x0178, r27	; 0x800178 <stopScan+0x3>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:490
  if (header)
    1006:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <header>
    100a:	88 23       	and	r24, r24
    100c:	41 f1       	breq	.+80     	; 0x105e <I2Cscan()+0x3f8>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:492
  {
    Serial.println();
    100e:	0e 94 28 03 	call	0x650	; 0x650 <Print::println() [clone .constprop.22]>
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:71
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    1012:	60 2f       	mov	r22, r16
    1014:	70 e0       	ldi	r23, 0x00	; 0
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	80 e0       	ldi	r24, 0x00	; 0
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:103
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    101a:	4a e0       	ldi	r20, 0x0A	; 10
    101c:	0e 94 0c 04 	call	0x818	; 0x818 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]>
I2Cscan():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:494
    Serial.print(count);
    Serial.print(F(" devices found in "));
    1020:	85 ea       	ldi	r24, 0xA5	; 165
    1022:	93 e0       	ldi	r25, 0x03	; 3
    1024:	0e 94 3a 03 	call	0x674	; 0x674 <Print::print(__FlashStringHelper const*) [clone .constprop.21]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:495
    Serial.print(stopScan - startScan);
    1028:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <stopScan>
    102c:	70 91 76 01 	lds	r23, 0x0176	; 0x800176 <stopScan+0x1>
    1030:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <stopScan+0x2>
    1034:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <stopScan+0x3>
    1038:	00 91 7b 01 	lds	r16, 0x017B	; 0x80017b <startScan>
    103c:	10 91 7c 01 	lds	r17, 0x017C	; 0x80017c <startScan+0x1>
    1040:	20 91 7d 01 	lds	r18, 0x017D	; 0x80017d <startScan+0x2>
    1044:	30 91 7e 01 	lds	r19, 0x017E	; 0x80017e <startScan+0x3>
    1048:	60 1b       	sub	r22, r16
    104a:	71 0b       	sbc	r23, r17
    104c:	82 0b       	sbc	r24, r18
    104e:	93 0b       	sbc	r25, r19
print():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.cpp:103
    1050:	4a e0       	ldi	r20, 0x0A	; 10
    1052:	0e 94 0c 04 	call	0x818	; 0x818 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.17]>
I2Cscan():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:496
    Serial.println(F(" milliseconds."));
    1056:	86 e9       	ldi	r24, 0x96	; 150
    1058:	93 e0       	ldi	r25, 0x03	; 3
    105a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:499
  }

  interrupts();
    105e:	78 94       	sei
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:500
}
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	7e be       	out	0x3e, r7	; 62
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	6d be       	out	0x3d, r6	; 61
    106a:	0f 90       	pop	r0
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	1f 91       	pop	r17
    1072:	0f 91       	pop	r16
    1074:	ff 90       	pop	r15
    1076:	ef 90       	pop	r14
    1078:	df 90       	pop	r13
    107a:	cf 90       	pop	r12
    107c:	bf 90       	pop	r11
    107e:	af 90       	pop	r10
    1080:	9f 90       	pop	r9
    1082:	8f 90       	pop	r8
    1084:	7f 90       	pop	r7
    1086:	6f 90       	pop	r6
    1088:	5f 90       	pop	r5
    108a:	4f 90       	pop	r4
    108c:	3f 90       	pop	r3
    108e:	2f 90       	pop	r2
    1090:	08 95       	ret

00001092 <__vector_17>:
__vector_17():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial0.cpp:63
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1092:	1f 92       	push	r1
    1094:	0f 92       	push	r0
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	0f 92       	push	r0
    109a:	11 24       	eor	r1, r1
    109c:	2f 93       	push	r18
    109e:	3f 93       	push	r19
    10a0:	4f 93       	push	r20
    10a2:	5f 93       	push	r21
    10a4:	6f 93       	push	r22
    10a6:	7f 93       	push	r23
    10a8:	8f 93       	push	r24
    10aa:	9f 93       	push	r25
    10ac:	af 93       	push	r26
    10ae:	bf 93       	push	r27
    10b0:	ef 93       	push	r30
    10b2:	ff 93       	push	r31
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    10b4:	88 e9       	ldi	r24, 0x98	; 152
    10b6:	91 e0       	ldi	r25, 0x01	; 1
    10b8:	0e 94 bc 02 	call	0x578	; 0x578 <HardwareSerial::_tx_udr_empty_irq()>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial0.cpp:65
}
    10bc:	ff 91       	pop	r31
    10be:	ef 91       	pop	r30
    10c0:	bf 91       	pop	r27
    10c2:	af 91       	pop	r26
    10c4:	9f 91       	pop	r25
    10c6:	8f 91       	pop	r24
    10c8:	7f 91       	pop	r23
    10ca:	6f 91       	pop	r22
    10cc:	5f 91       	pop	r21
    10ce:	4f 91       	pop	r20
    10d0:	3f 91       	pop	r19
    10d2:	2f 91       	pop	r18
    10d4:	0f 90       	pop	r0
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	0f 90       	pop	r0
    10da:	1f 90       	pop	r1
    10dc:	18 95       	reti

000010de <__vector_16>:
__vector_16():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial0.cpp:48
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    10de:	1f 92       	push	r1
    10e0:	0f 92       	push	r0
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	0f 92       	push	r0
    10e6:	11 24       	eor	r1, r1
    10e8:	2f 93       	push	r18
    10ea:	8f 93       	push	r24
    10ec:	9f 93       	push	r25
    10ee:	ef 93       	push	r30
    10f0:	ff 93       	push	r31
_rx_complete_irq():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    10f2:	e0 91 a8 01 	lds	r30, 0x01A8	; 0x8001a8 <Serial+0x10>
    10f6:	f0 91 a9 01 	lds	r31, 0x01A9	; 0x8001a9 <Serial+0x11>
    10fa:	80 81       	ld	r24, Z
    10fc:	e0 91 ae 01 	lds	r30, 0x01AE	; 0x8001ae <Serial+0x16>
    1100:	f0 91 af 01 	lds	r31, 0x01AF	; 0x8001af <Serial+0x17>
    1104:	82 fd       	sbrc	r24, 2
    1106:	1b c0       	rjmp	.+54     	; 0x113e <__vector_16+0x60>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1108:	90 81       	ld	r25, Z
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    110a:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <Serial+0x19>
    110e:	8f 5f       	subi	r24, 0xFF	; 255
    1110:	8f 71       	andi	r24, 0x1F	; 31
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1112:	20 91 b2 01 	lds	r18, 0x01B2	; 0x8001b2 <Serial+0x1a>
    1116:	82 17       	cp	r24, r18
    1118:	41 f0       	breq	.+16     	; 0x112a <__vector_16+0x4c>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    111a:	e0 91 b1 01 	lds	r30, 0x01B1	; 0x8001b1 <Serial+0x19>
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	e8 56       	subi	r30, 0x68	; 104
    1122:	fe 4f       	sbci	r31, 0xFE	; 254
    1124:	95 8f       	std	Z+29, r25	; 0x1d
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    1126:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <Serial+0x19>
__vector_16():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial0.cpp:50
    Serial._rx_complete_irq();
  }
    112a:	ff 91       	pop	r31
    112c:	ef 91       	pop	r30
    112e:	9f 91       	pop	r25
    1130:	8f 91       	pop	r24
    1132:	2f 91       	pop	r18
    1134:	0f 90       	pop	r0
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	0f 90       	pop	r0
    113a:	1f 90       	pop	r1
    113c:	18 95       	reti
_rx_complete_irq():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    113e:	80 81       	ld	r24, Z
    1140:	f4 cf       	rjmp	.-24     	; 0x112a <__vector_16+0x4c>

00001142 <__vector_12>:
__vector_12():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:86
volatile unsigned long millis_timer_overflow_count = 0;
volatile unsigned long millis_timer_millis = 0;
static unsigned char millis_timer_fract = 0;

ISR(MILLISTIMER_OVF_vect)
{
    1142:	1f 92       	push	r1
    1144:	0f 92       	push	r0
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	0f 92       	push	r0
    114a:	11 24       	eor	r1, r1
    114c:	2f 93       	push	r18
    114e:	3f 93       	push	r19
    1150:	8f 93       	push	r24
    1152:	9f 93       	push	r25
    1154:	af 93       	push	r26
    1156:	bf 93       	push	r27
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:89
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access)
  unsigned long m = millis_timer_millis;
    1158:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <millis_timer_millis>
    115c:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <millis_timer_millis+0x1>
    1160:	a0 91 88 01 	lds	r26, 0x0188	; 0x800188 <millis_timer_millis+0x2>
    1164:	b0 91 89 01 	lds	r27, 0x0189	; 0x800189 <millis_timer_millis+0x3>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:90
  unsigned char f = millis_timer_fract;
    1168:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <millis_timer_fract>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:102
    f -= FRACT_MAX;
    m += 1;
  }
...rmv */

  f += FRACT_INC;
    116c:	26 e0       	ldi	r18, 0x06	; 6
    116e:	23 0f       	add	r18, r19
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:104

  if (f >= FRACT_MAX)
    1170:	2d 37       	cpi	r18, 0x7D	; 125
    1172:	68 f1       	brcs	.+90     	; 0x11ce <__vector_12+0x8c>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:106
  {
    f -= FRACT_MAX;
    1174:	29 e8       	ldi	r18, 0x89	; 137
    1176:	23 0f       	add	r18, r19
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:107
    m = m + MILLIS_INC + 1;
    1178:	03 96       	adiw	r24, 0x03	; 3
    117a:	a1 1d       	adc	r26, r1
    117c:	b1 1d       	adc	r27, r1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:114
  else
  {
    m += MILLIS_INC;
  }

  millis_timer_fract = f;
    117e:	20 93 85 01 	sts	0x0185, r18	; 0x800185 <millis_timer_fract>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:115
  millis_timer_millis = m;
    1182:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <millis_timer_millis>
    1186:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <millis_timer_millis+0x1>
    118a:	a0 93 88 01 	sts	0x0188, r26	; 0x800188 <millis_timer_millis+0x2>
    118e:	b0 93 89 01 	sts	0x0189, r27	; 0x800189 <millis_timer_millis+0x3>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:116
  millis_timer_overflow_count++;
    1192:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <millis_timer_overflow_count>
    1196:	90 91 8b 01 	lds	r25, 0x018B	; 0x80018b <millis_timer_overflow_count+0x1>
    119a:	a0 91 8c 01 	lds	r26, 0x018C	; 0x80018c <millis_timer_overflow_count+0x2>
    119e:	b0 91 8d 01 	lds	r27, 0x018D	; 0x80018d <millis_timer_overflow_count+0x3>
    11a2:	01 96       	adiw	r24, 0x01	; 1
    11a4:	a1 1d       	adc	r26, r1
    11a6:	b1 1d       	adc	r27, r1
    11a8:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <millis_timer_overflow_count>
    11ac:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <millis_timer_overflow_count+0x1>
    11b0:	a0 93 8c 01 	sts	0x018C, r26	; 0x80018c <millis_timer_overflow_count+0x2>
    11b4:	b0 93 8d 01 	sts	0x018D, r27	; 0x80018d <millis_timer_overflow_count+0x3>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:117
}
    11b8:	bf 91       	pop	r27
    11ba:	af 91       	pop	r26
    11bc:	9f 91       	pop	r25
    11be:	8f 91       	pop	r24
    11c0:	3f 91       	pop	r19
    11c2:	2f 91       	pop	r18
    11c4:	0f 90       	pop	r0
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	0f 90       	pop	r0
    11ca:	1f 90       	pop	r1
    11cc:	18 95       	reti
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:111
    f -= FRACT_MAX;
    m = m + MILLIS_INC + 1;
  }
  else
  {
    m += MILLIS_INC;
    11ce:	02 96       	adiw	r24, 0x02	; 2
    11d0:	a1 1d       	adc	r26, r1
    11d2:	b1 1d       	adc	r27, r1
    11d4:	d4 cf       	rjmp	.-88     	; 0x117e <__vector_12+0x3c>

000011d6 <__vector_24>:
__vector_24():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:207
/*----------------------------------------------------------
 Handles all the communication. Is disabled only when waiting
 for new Start Condition.
----------------------------------------------------------*/
ISR(USI_OVERFLOW_VECTOR)
{
    11d6:	1f 92       	push	r1
    11d8:	0f 92       	push	r0
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	0f 92       	push	r0
    11de:	11 24       	eor	r1, r1
    11e0:	2f 93       	push	r18
    11e2:	8f 93       	push	r24
    11e4:	9f 93       	push	r25
    11e6:	ef 93       	push	r30
    11e8:	ff 93       	push	r31
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:212
  unsigned char tmpRxHead;
  unsigned char tmpTxTail; // Temporary variables to store volatiles
  unsigned char tmpUSIDR;

  switch (USI_TWI_Overflow_State) {
    11ea:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <USI_TWI_Overflow_State>
    11ee:	82 30       	cpi	r24, 0x02	; 2
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <__vector_24+0x1e>
    11f2:	5f c0       	rjmp	.+190    	; 0x12b2 <__vector_24+0xdc>
    11f4:	78 f4       	brcc	.+30     	; 0x1214 <__vector_24+0x3e>
    11f6:	88 23       	and	r24, r24
    11f8:	49 f1       	breq	.+82     	; 0x124c <__vector_24+0x76>
    11fa:	81 30       	cpi	r24, 0x01	; 1
    11fc:	09 f4       	brne	.+2      	; 0x1200 <__vector_24+0x2a>
    11fe:	3f c0       	rjmp	.+126    	; 0x127e <__vector_24+0xa8>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:306
    {
      SET_USI_TO_SEND_NACK();
    }
    break;
  }
}
    1200:	ff 91       	pop	r31
    1202:	ef 91       	pop	r30
    1204:	9f 91       	pop	r25
    1206:	8f 91       	pop	r24
    1208:	2f 91       	pop	r18
    120a:	0f 90       	pop	r0
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	0f 90       	pop	r0
    1210:	1f 90       	pop	r1
    1212:	18 95       	reti
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:212
{
  unsigned char tmpRxHead;
  unsigned char tmpTxTail; // Temporary variables to store volatiles
  unsigned char tmpUSIDR;

  switch (USI_TWI_Overflow_State) {
    1214:	84 30       	cpi	r24, 0x04	; 4
    1216:	09 f4       	brne	.+2      	; 0x121a <__vector_24+0x44>
    1218:	52 c0       	rjmp	.+164    	; 0x12be <__vector_24+0xe8>
    121a:	50 f1       	brcs	.+84     	; 0x1270 <__vector_24+0x9a>
    121c:	85 30       	cpi	r24, 0x05	; 5
    121e:	81 f7       	brne	.-32     	; 0x1200 <__vector_24+0x2a>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:293
    break;

  // Copy data from USIDR and send ACK. Next USI_SLAVE_REQUEST_DATA
  case USI_SLAVE_GET_DATA_AND_SEND_ACK:
    // Put data into Buffer
    USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
    1220:	84 e0       	ldi	r24, 0x04	; 4
    1222:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <USI_TWI_Overflow_State>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:294
    tmpUSIDR              = USIDR; // Not necessary, but prevents warnings
    1226:	9c b5       	in	r25, 0x2c	; 44
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:295
    tmpRxHead = (TWI_RxHead + 1) & TWI_RX_BUFFER_MASK;
    1228:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <TWI_RxHead>
    122c:	8f 5f       	subi	r24, 0xFF	; 255
    122e:	8f 70       	andi	r24, 0x0F	; 15
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:296
    if (TWI_RxTail != tmpRxHead) {
    1230:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <TWI_RxTail>
    1234:	28 17       	cp	r18, r24
    1236:	09 f4       	brne	.+2      	; 0x123a <__vector_24+0x64>
    1238:	47 c0       	rjmp	.+142    	; 0x12c8 <__vector_24+0xf2>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:297
      TWI_RxHead            = tmpRxHead;
    123a:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <TWI_RxHead>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:298
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
    123e:	e0 91 81 01 	lds	r30, 0x0181	; 0x800181 <TWI_RxHead>
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	ec 5a       	subi	r30, 0xAC	; 172
    1246:	fe 4f       	sbci	r31, 0xFE	; 254
    1248:	90 83       	st	Z, r25
    124a:	0c c0       	rjmp	.+24     	; 0x1264 <__vector_24+0x8e>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:216

  switch (USI_TWI_Overflow_State) {
  // ---------- Address mode ----------
  // Check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK, else reset USI.
  case USI_SLAVE_CHECK_ADDRESS:
    if ((USIDR == 0) || ((USIDR >> 1) == TWI_slaveAddress)) {
    124c:	8c b5       	in	r24, 0x2c	; 44
    124e:	88 23       	and	r24, r24
    1250:	19 f0       	breq	.+6      	; 0x1258 <__vector_24+0x82>
    1252:	8c b5       	in	r24, 0x2c	; 44
    1254:	86 95       	lsr	r24
    1256:	79 f4       	brne	.+30     	; 0x1276 <__vector_24+0xa0>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:217
      if (USIDR & 0x01) {
    1258:	0c b4       	in	r0, 0x2c	; 44
    125a:	00 fe       	sbrs	r0, 0
    125c:	07 c0       	rjmp	.+14     	; 0x126c <__vector_24+0x96>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:224
          // reset tx buffer and call callback
          tmpTxTail = TWI_TxHead;
          TWI_TxTail = tmpTxTail;
          USI_TWI_On_Slave_Transmit();
        }
        USI_TWI_Overflow_State = USI_SLAVE_SEND_DATA;
    125e:	81 e0       	ldi	r24, 0x01	; 1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:226
      } else {
        USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
    1260:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <USI_TWI_Overflow_State>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:228
      }
      SET_USI_TO_SEND_ACK();
    1264:	1c bc       	out	0x2c, r1	; 44
    1266:	61 9a       	sbi	0x0c, 1	; 12
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:302
      TWI_RxHead            = tmpRxHead;
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
      SET_USI_TO_SEND_ACK();
    } else // If the buffer is full then:
    {
      SET_USI_TO_SEND_NACK();
    1268:	8e e7       	ldi	r24, 0x7E	; 126
    126a:	21 c0       	rjmp	.+66     	; 0x12ae <__vector_24+0xd8>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:226
          TWI_TxTail = tmpTxTail;
          USI_TWI_On_Slave_Transmit();
        }
        USI_TWI_Overflow_State = USI_SLAVE_SEND_DATA;
      } else {
        USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
    126c:	84 e0       	ldi	r24, 0x04	; 4
    126e:	f8 cf       	rjmp	.-16     	; 0x1260 <__vector_24+0x8a>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:237
    break;

  // ----- Master write data mode ------
  // Check reply and goto USI_SLAVE_SEND_DATA if OK, else reset USI.
  case USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA:
    if (USIDR) // If NACK, the master does not want more data.
    1270:	8c b5       	in	r24, 0x2c	; 44
    1272:	88 23       	and	r24, r24
    1274:	21 f0       	breq	.+8      	; 0x127e <__vector_24+0xa8>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:255
    if (TWI_TxHead != tmpTxTail) {
      TWI_TxTail = (TWI_TxTail + 1) & TWI_TX_BUFFER_MASK;
      USIDR      = TWI_TxBuf[TWI_TxTail];
    } else // If the buffer is empty then:
    {
      SET_USI_TO_TWI_START_CONDITION_MODE();
    1276:	61 98       	cbi	0x0c, 1	; 12
    1278:	88 ea       	ldi	r24, 0xA8	; 168
    127a:	8a bd       	out	0x2a, r24	; 42
    127c:	17 c0       	rjmp	.+46     	; 0x12ac <__vector_24+0xd6>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:249
  // Copy data from buffer to USIDR and set USI to shift byte. Next USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA
  /* Falls through. */
  case USI_SLAVE_SEND_DATA:

    // Get data from Buffer
    tmpTxTail = TWI_TxTail; // Not necessary, but prevents warnings
    127e:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <TWI_TxTail>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:250
    if (TWI_TxHead != tmpTxTail) {
    1282:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <TWI_TxHead>
    1286:	98 17       	cp	r25, r24
    1288:	b1 f3       	breq	.-20     	; 0x1276 <__vector_24+0xa0>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:251
      TWI_TxTail = (TWI_TxTail + 1) & TWI_TX_BUFFER_MASK;
    128a:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <TWI_TxTail>
    128e:	8f 5f       	subi	r24, 0xFF	; 255
    1290:	8f 70       	andi	r24, 0x0F	; 15
    1292:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <TWI_TxTail>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:252
      USIDR      = TWI_TxBuf[TWI_TxTail];
    1296:	e0 91 82 01 	lds	r30, 0x0182	; 0x800182 <TWI_TxTail>
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	ec 59       	subi	r30, 0x9C	; 156
    129e:	fe 4f       	sbci	r31, 0xFE	; 254
    12a0:	80 81       	ld	r24, Z
    12a2:	8c bd       	out	0x2c, r24	; 44
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:258
    } else // If the buffer is empty then:
    {
      SET_USI_TO_TWI_START_CONDITION_MODE();
      return;
    }
    USI_TWI_Overflow_State = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
    12a4:	82 e0       	ldi	r24, 0x02	; 2
    12a6:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <USI_TWI_Overflow_State>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:259
    SET_USI_TO_SEND_DATA();
    12aa:	61 9a       	sbi	0x0c, 1	; 12
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:272

  // ----- Master read data mode ------
  // Set USI to sample data from master. Next USI_SLAVE_GET_DATA_AND_SEND_ACK.
  case USI_SLAVE_REQUEST_DATA:
    USI_TWI_Overflow_State = USI_SLAVE_GET_DATA_AND_SEND_ACK;
    SET_USI_TO_READ_DATA();
    12ac:	80 e7       	ldi	r24, 0x70	; 112
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:302
      TWI_RxHead            = tmpRxHead;
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
      SET_USI_TO_SEND_ACK();
    } else // If the buffer is full then:
    {
      SET_USI_TO_SEND_NACK();
    12ae:	8b bd       	out	0x2b, r24	; 43
    12b0:	a7 cf       	rjmp	.-178    	; 0x1200 <__vector_24+0x2a>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:264
    SET_USI_TO_SEND_DATA();
    break;

  // Set USI to sample reply from master. Next USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA
  case USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA:
    USI_TWI_Overflow_State = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
    12b2:	83 e0       	ldi	r24, 0x03	; 3
    12b4:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <USI_TWI_Overflow_State>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:265
    SET_USI_TO_READ_ACK();
    12b8:	61 98       	cbi	0x0c, 1	; 12
    12ba:	1c bc       	out	0x2c, r1	; 44
    12bc:	d5 cf       	rjmp	.-86     	; 0x1268 <__vector_24+0x92>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:271
    break;

  // ----- Master read data mode ------
  // Set USI to sample data from master. Next USI_SLAVE_GET_DATA_AND_SEND_ACK.
  case USI_SLAVE_REQUEST_DATA:
    USI_TWI_Overflow_State = USI_SLAVE_GET_DATA_AND_SEND_ACK;
    12be:	85 e0       	ldi	r24, 0x05	; 5
    12c0:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <USI_TWI_Overflow_State>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:272
    SET_USI_TO_READ_DATA();
    12c4:	61 98       	cbi	0x0c, 1	; 12
    12c6:	f2 cf       	rjmp	.-28     	; 0x12ac <__vector_24+0xd6>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:302
      TWI_RxHead            = tmpRxHead;
      TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
      SET_USI_TO_SEND_ACK();
    } else // If the buffer is full then:
    {
      SET_USI_TO_SEND_NACK();
    12c8:	61 98       	cbi	0x0c, 1	; 12
    12ca:	ce cf       	rjmp	.-100    	; 0x1268 <__vector_24+0x92>

000012cc <__vector_23>:
__vector_23():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:165
ISR(USI_START_VECTOR)
#elif __ICCAVR__
#pragma vector = USI_START_VECTOR
__interrupt void USI_Start_Condition_ISR(void)
#endif
{
    12cc:	1f 92       	push	r1
    12ce:	0f 92       	push	r0
    12d0:	0f b6       	in	r0, 0x3f	; 63
    12d2:	0f 92       	push	r0
    12d4:	11 24       	eor	r1, r1
    12d6:	8f 93       	push	r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:178
      // reset rx buffer
      TWI_RxTail = tmpRxHead;
    }
  }

  USI_TWI_Overflow_State = USI_SLAVE_CHECK_ADDRESS;
    12d8:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <USI_TWI_Overflow_State>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:179
  DDR_USI &= ~(1 << PORT_USI_SDA); // Set SDA as input
    12dc:	61 98       	cbi	0x0c, 1	; 12
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:180
  while ((tmpPin = (PIN_USI_CL & (1 << PORT_USI_SCL))) && ((PIN_USI & (1 << PIN_USI_SDA)) == 0))
    12de:	39 9b       	sbis	0x07, 1	; 7
    12e0:	04 c0       	rjmp	.+8      	; 0x12ea <__vector_23+0x1e>
    12e2:	59 9b       	sbis	0x0b, 1	; 11
    12e4:	fc cf       	rjmp	.-8      	; 0x12de <__vector_23+0x12>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:185
    ; // Wait for SCL to go low to ensure the "Start Condition" has completed.
        // If a Stop condition arises then leave the interrupt to prevent waiting forever.
  if (tmpPin) {
    // Stop Condition (waiting for next Start Condition)
    USICR = (1 << USISIE) | (0 << USIOIE) | // Enable Start Condition Interrupt. Disable Overflow Interrupt.
    12e6:	88 ea       	ldi	r24, 0xA8	; 168
    12e8:	01 c0       	rjmp	.+2      	; 0x12ec <__vector_23+0x20>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:192
                                            // to first Start Condition (potential failure)
            (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
            (0 << USITC);
  } else {
    // really Start Condition (Enable Overflow Interrupt)
    USICR = (1 << USISIE) | (1 << USIOIE)
    12ea:	88 ef       	ldi	r24, 0xF8	; 248
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:185
  while ((tmpPin = (PIN_USI_CL & (1 << PORT_USI_SCL))) && ((PIN_USI & (1 << PIN_USI_SDA)) == 0))
    ; // Wait for SCL to go low to ensure the "Start Condition" has completed.
        // If a Stop condition arises then leave the interrupt to prevent waiting forever.
  if (tmpPin) {
    // Stop Condition (waiting for next Start Condition)
    USICR = (1 << USISIE) | (0 << USIOIE) | // Enable Start Condition Interrupt. Disable Overflow Interrupt.
    12ec:	8a bd       	out	0x2a, r24	; 42
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:198
            | // Enable Overflow and Start Condition Interrupt. (Keep StartCondInt to detect RESTART)
            (1 << USIWM1) | (1 << USIWM0) |                 // Set USI in Two-wire mode.
            (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
            (0 << USITC);
  }
  USISR = (1 << USI_START_COND_INT) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC) | // Clear flags
    12ee:	80 ef       	ldi	r24, 0xF0	; 240
    12f0:	8b bd       	out	0x2b, r24	; 43
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Slave/USI_TWI_Slave.c:200
          (0x0 << USICNT0); // Set USI to sample 8 bits i.e. count 16 external pin toggles.
}
    12f2:	8f 91       	pop	r24
    12f4:	0f 90       	pop	r0
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	0f 90       	pop	r0
    12fa:	1f 90       	pop	r1
    12fc:	18 95       	reti

000012fe <main>:
init():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/wiring.c:572
  #else
  CLKPR=1<<CLKPCE; //enable change of protected register
  #endif
  CLKPR=1; //prescale by 2 for 4MHz
  #endif
  sei();
    12fe:	78 94       	sei
Timer0_SetWaveformGenerationMode():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:677
}
timer0_wgm_t;

__attribute__((always_inline)) static inline void Timer0_SetWaveformGenerationMode( timer0_wgm_t wgm )
{
  TCCR0A = (TCCR0A & ~MASK2(WGM01,WGM00)) | (((wgm & B011) >> 0) << WGM00);
    1300:	8b b3       	in	r24, 0x1b	; 27
    1302:	83 60       	ori	r24, 0x03	; 3
    1304:	8b bb       	out	0x1b, r24	; 27
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:678
  TCCR0B = (TCCR0B & ~MASK1(WGM02))       | (((wgm & B100) >> 2) << WGM02);
    1306:	d3 98       	cbi	0x1a, 3	; 26
Timer0_ClockSelect():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:659
}
timer0_cs_t;

__attribute__((always_inline)) static inline void Timer0_ClockSelect( timer0_cs_t cs )
{
  TCCR0B = (TCCR0B & ~MASK3(CS02,CS01,CS00)) | (cs << CS00);
    1308:	8a b3       	in	r24, 0x1a	; 26
    130a:	88 7f       	andi	r24, 0xF8	; 248
    130c:	82 60       	ori	r24, 0x02	; 2
    130e:	8a bb       	out	0x1a, r24	; 26
Timer0_EnableOverflowInterrupt():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:733
  TIMSK |= (1<<OCIE0A);
}

__attribute__((always_inline)) static inline void Timer0_EnableOverflowInterrupt( void )
{
  TIMSK |= (1<<TOIE0);
    1310:	8a b7       	in	r24, 0x3a	; 58
    1312:	82 60       	ori	r24, 0x02	; 2
    1314:	8a bf       	out	0x3a, r24	; 58
Timer1_ClockSelect():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:811
}
timer1_cs_t;

__attribute__((always_inline)) static inline void Timer1_ClockSelect( timer1_cs_t cs )
{
  TCCR1B = (TCCR1B & ~MASK3(CS12,CS11,CS10)) | (cs << CS10);
    1316:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
    131a:	88 7f       	andi	r24, 0xF8	; 248
    131c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
Timer1_SetWaveformGenerationMode():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:837
}
timer1_wgm_t;

__attribute__((always_inline)) static inline void Timer1_SetWaveformGenerationMode( timer1_wgm_t wgm )
{
  TCCR1A = (TCCR1A & ~MASK2(WGM11,WGM10)) | (((wgm & B0011) >> 0) << WGM10);
    1320:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__DATA_REGION_ORIGIN__+0x12>
    1324:	8c 7f       	andi	r24, 0xFC	; 252
    1326:	81 60       	ori	r24, 0x01	; 1
    1328:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__DATA_REGION_ORIGIN__+0x12>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:838
  TCCR1B = (TCCR1B & ~MASK2(WGM13,WGM12)) | (((wgm & B1100) >> 2) << WGM12);
    132c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
    1330:	87 7e       	andi	r24, 0xE7	; 231
    1332:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
Timer1_ClockSelect():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_timers.h:811
}
timer1_cs_t;

__attribute__((always_inline)) static inline void Timer1_ClockSelect( timer1_cs_t cs )
{
  TCCR1B = (TCCR1B & ~MASK3(CS12,CS11,CS10)) | (cs << CS10);
    1336:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
    133a:	88 7f       	andi	r24, 0xF8	; 248
    133c:	82 60       	ori	r24, 0x02	; 2
    133e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__DATA_REGION_ORIGIN__+0x11>
ADC_PrescalerSelect():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_adc.h:89
}
adc_ps_t;

__attribute__((always_inline)) static inline void ADC_PrescalerSelect( adc_ps_t ps )
{
  ADCSRA = (ADCSRA & ~MASK3(ADPS2,ADPS1,ADPS0)) | (ps << ADPS0);
    1342:	83 b1       	in	r24, 0x03	; 3
    1344:	88 7f       	andi	r24, 0xF8	; 248
    1346:	83 60       	ori	r24, 0x03	; 3
    1348:	83 b9       	out	0x03, r24	; 3
ADC_Enable():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/core_adc.h:94
}

__attribute__((always_inline)) static inline void ADC_Enable( void )
{
  ADCSRA |= MASK1( ADEN );
    134a:	1f 9a       	sbi	0x03, 7	; 3
begin():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    134c:	e0 91 a8 01 	lds	r30, 0x01A8	; 0x8001a8 <Serial+0x10>
    1350:	f0 91 a9 01 	lds	r31, 0x01A9	; 0x8001a9 <Serial+0x11>
    1354:	82 e0       	ldi	r24, 0x02	; 2
    1356:	80 83       	st	Z, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1358:	e0 91 a4 01 	lds	r30, 0x01A4	; 0x8001a4 <Serial+0xc>
    135c:	f0 91 a5 01 	lds	r31, 0x01A5	; 0x8001a5 <Serial+0xd>
    1360:	10 82       	st	Z, r1
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
    1362:	e0 91 a6 01 	lds	r30, 0x01A6	; 0x8001a6 <Serial+0xe>
    1366:	f0 91 a7 01 	lds	r31, 0x01A7	; 0x8001a7 <Serial+0xf>
    136a:	8c e0       	ldi	r24, 0x0C	; 12
    136c:	80 83       	st	Z, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:138

  _written = false;
    136e:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <Serial+0x18>
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:144

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1372:	e0 91 ac 01 	lds	r30, 0x01AC	; 0x8001ac <Serial+0x14>
    1376:	f0 91 ad 01 	lds	r31, 0x01AD	; 0x8001ad <Serial+0x15>
    137a:	86 e0       	ldi	r24, 0x06	; 6
    137c:	80 83       	st	Z, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:146

  sbi(*_ucsrb, RXEN0);
    137e:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <Serial+0x12>
    1382:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <Serial+0x13>
    1386:	80 81       	ld	r24, Z
    1388:	80 61       	ori	r24, 0x10	; 16
    138a:	80 83       	st	Z, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:147
  sbi(*_ucsrb, TXEN0);
    138c:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <Serial+0x12>
    1390:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <Serial+0x13>
    1394:	80 81       	ld	r24, Z
    1396:	88 60       	ori	r24, 0x08	; 8
    1398:	80 83       	st	Z, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:148
  sbi(*_ucsrb, RXCIE0);
    139a:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <Serial+0x12>
    139e:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <Serial+0x13>
    13a2:	80 81       	ld	r24, Z
    13a4:	80 68       	ori	r24, 0x80	; 128
    13a6:	80 83       	st	Z, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial.cpp:149
  cbi(*_ucsrb, UDRIE0);
    13a8:	e0 91 aa 01 	lds	r30, 0x01AA	; 0x8001aa <Serial+0x12>
    13ac:	f0 91 ab 01 	lds	r31, 0x01AB	; 0x8001ab <Serial+0x13>
    13b0:	80 81       	ld	r24, Z
    13b2:	8f 7d       	andi	r24, 0xDF	; 223
    13b4:	80 83       	st	Z, r24
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/Wire.cpp:365

// Public Methods //////////////////////////////////////////////////////////////

void TwoWire::begin(void) {
  BufferIndex = 0;
  BufferLength = 0;
    13b6:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <TwoWire::BufferLength>
USI_TWI_Master_Initialise():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:61
{
  #ifdef PUE_USI
  PUE_USI |=(1 << PIN_USI_SDA);
  PUE_USI_CL |=(1 << PIN_USI_SCL);
  #endif
  PORT_USI |= (1 << PIN_USI_SDA); // Enable pullup on SDA, to set high as released state.
    13ba:	69 9a       	sbi	0x0d, 1	; 13
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:62
  PORT_USI_CL |= (1 << PIN_USI_SCL); // Enable pullup on SCL, to set high as released state.
    13bc:	49 9a       	sbi	0x09, 1	; 9
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:64

  DDR_USI_CL |= (1 << PIN_USI_SCL); // Enable SCL as output.
    13be:	41 9a       	sbi	0x08, 1	; 8
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:65
  DDR_USI |= (1 << PIN_USI_SDA); // Enable SDA as output.
    13c0:	61 9a       	sbi	0x0c, 1	; 12
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:67

  USIDR = 0xFF;                                           // Preload dataregister with "released level" data.
    13c2:	8f ef       	ldi	r24, 0xFF	; 255
    13c4:	8c bd       	out	0x2c, r24	; 44
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:68
  USICR = (0 << USISIE) | (0 << USIOIE) |                 // Disable Interrupts.
    13c6:	8a e2       	ldi	r24, 0x2A	; 42
    13c8:	8a bd       	out	0x2a, r24	; 42
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/libraries/Wire/src/USI_TWI_Master/USI_TWI_Master.c:72
          (1 << USIWM1) | (0 << USIWM0) |                 // Set USI in Two-wire mode.
          (1 << USICS1) | (0 << USICS0) | (1 << USICLK) | // Software stobe as counter clock source
          (0 << USITC);
  USISR = (1 << USISIF) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC) | // Clear flags,
    13ca:	80 ef       	ldi	r24, 0xF0	; 240
    13cc:	8b bd       	out	0x2b, r24	; 43
setup():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:103
#if defined WIRE_IMPLEMENT_WIRE5 || WIRE_INTERFACES_COUNT > 5
  Wire5.begin();
  wirePortCount++;
#endif

  wire = &Wire;
    13ce:	83 e9       	ldi	r24, 0x93	; 147
    13d0:	91 e0       	ldi	r25, 0x01	; 1
    13d2:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <wire+0x1>
    13d6:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <wire>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:105

  Serial.println();
    13da:	0e 94 28 03 	call	0x650	; 0x650 <Print::println() [clone .constprop.22]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:106
  reset();
    13de:	0e 94 11 06 	call	0xc22	; 0xc22 <reset()>
loop():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:209
      setAddress();
      break;

    case 'q':
    case '?':
      state = HELP;
    13e2:	c3 e0       	ldi	r28, 0x03	; 3
    13e4:	d0 e0       	ldi	r29, 0x00	; 0
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:155
#endif
      }
      break;

    case 's':
      state = ONCE;
    13e6:	01 e0       	ldi	r16, 0x01	; 1
    13e8:	10 e0       	ldi	r17, 0x00	; 0
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:158
      break;
    case 'c':
      state = CONT;
    13ea:	22 e0       	ldi	r18, 0x02	; 2
    13ec:	e2 2e       	mov	r14, r18
    13ee:	f1 2c       	mov	r15, r1
setAddress():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:266
    addressEnd = 119;
  }
  else
  {
    addressStart = 0;
    addressEnd = 127;
    13f0:	8f e7       	ldi	r24, 0x7F	; 127
    13f2:	c8 2e       	mov	r12, r24
    13f4:	d1 2c       	mov	r13, r1
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:260

void setAddress()
{
  if (addressStart == 0)
  {
    addressStart = 8;
    13f6:	98 e0       	ldi	r25, 0x08	; 8
    13f8:	a9 2e       	mov	r10, r25
    13fa:	b1 2c       	mov	r11, r1
getCommand():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:341


char getCommand()
{
  char c = '\0';
  if (Serial.available())
    13fc:	88 e9       	ldi	r24, 0x98	; 152
    13fe:	91 e0       	ldi	r25, 0x01	; 1
    1400:	0e 94 b1 02 	call	0x562	; 0x562 <HardwareSerial::available()>
    1404:	89 2b       	or	r24, r25
    1406:	b9 f0       	breq	.+46     	; 0x1436 <main+0x138>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:343
  {
    c = Serial.read();
    1408:	88 e9       	ldi	r24, 0x98	; 152
    140a:	91 e0       	ldi	r25, 0x01	; 1
    140c:	0e 94 8f 02 	call	0x51e	; 0x51e <HardwareSerial::read()>
loop():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:114

void loop()
{
  yield();
  char command = getCommand();
  switch (command)
    1410:	81 35       	cpi	r24, 0x51	; 81
    1412:	0c f0       	brlt	.+2      	; 0x1416 <main+0x118>
    1414:	49 c0       	rjmp	.+146    	; 0x14a8 <main+0x1aa>
    1416:	8d 34       	cpi	r24, 0x4D	; 77
    1418:	0c f0       	brlt	.+2      	; 0x141c <main+0x11e>
    141a:	df c0       	rjmp	.+446    	; 0x15da <main+0x2dc>
    141c:	8a 33       	cpi	r24, 0x3A	; 58
    141e:	04 f5       	brge	.+64     	; 0x1460 <main+0x162>
    1420:	88 33       	cpi	r24, 0x38	; 56
    1422:	0c f0       	brlt	.+2      	; 0x1426 <main+0x128>
    1424:	da c0       	rjmp	.+436    	; 0x15da <main+0x2dc>
    1426:	80 33       	cpi	r24, 0x30	; 48
    1428:	34 f0       	brlt	.+12     	; 0x1436 <main+0x138>
    142a:	83 33       	cpi	r24, 0x33	; 51
    142c:	0c f4       	brge	.+2      	; 0x1430 <main+0x132>
    142e:	d5 c0       	rjmp	.+426    	; 0x15da <main+0x2dc>
    1430:	84 33       	cpi	r24, 0x34	; 52
    1432:	09 f4       	brne	.+2      	; 0x1436 <main+0x138>
    1434:	d2 c0       	rjmp	.+420    	; 0x15da <main+0x2dc>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:215
      break;
    default:
      break;
  }

  switch (state)
    1436:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <state>
    143a:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <state+0x1>
    143e:	82 30       	cpi	r24, 0x02	; 2
    1440:	91 05       	cpc	r25, r1
    1442:	09 f4       	brne	.+2      	; 0x1446 <main+0x148>
    1444:	de c0       	rjmp	.+444    	; 0x1602 <main+0x304>
    1446:	83 30       	cpi	r24, 0x03	; 3
    1448:	91 05       	cpc	r25, r1
    144a:	09 f4       	brne	.+2      	; 0x144e <main+0x150>
    144c:	e3 c0       	rjmp	.+454    	; 0x1614 <main+0x316>
    144e:	01 97       	sbiw	r24, 0x01	; 1
    1450:	a9 f6       	brne	.-86     	; 0x13fc <main+0xfe>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:218
  {
    case ONCE:
      I2Cscan();
    1452:	0e 94 33 06 	call	0xc66	; 0xc66 <I2Cscan()>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:219
      state = HELP;
    1456:	d0 93 92 01 	sts	0x0192, r29	; 0x800192 <state+0x1>
    145a:	c0 93 91 01 	sts	0x0191, r28	; 0x800191 <state>
    145e:	c8 cf       	rjmp	.-112    	; 0x13f0 <main+0xf2>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:114

void loop()
{
  yield();
  char command = getCommand();
  switch (command)
    1460:	8f 33       	cpi	r24, 0x3F	; 63
    1462:	09 f4       	brne	.+2      	; 0x1466 <main+0x168>
    1464:	c9 c0       	rjmp	.+402    	; 0x15f8 <main+0x2fa>
    1466:	80 34       	cpi	r24, 0x40	; 64
    1468:	31 f7       	brne	.-52     	; 0x1436 <main+0x138>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:117
  {
    case '@':
      selectedWirePort = (selectedWirePort + 1) % wirePortCount;
    146a:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <selectedWirePort+0x1>
    146e:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <selectedWirePort>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:118
      Serial.print(F("<I2C PORT=Wire"));
    1472:	8b e4       	ldi	r24, 0x4B	; 75
    1474:	94 e0       	ldi	r25, 0x04	; 4
    1476:	0e 94 3a 03 	call	0x674	; 0x674 <Print::print(__FlashStringHelper const*) [clone .constprop.21]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:119
      Serial.print(selectedWirePort);
    147a:	6a e0       	ldi	r22, 0x0A	; 10
    147c:	70 e0       	ldi	r23, 0x00	; 0
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	80 e0       	ldi	r24, 0x00	; 0
    1482:	0e 94 8c 04 	call	0x918	; 0x918 <Print::print(int, int) [clone .constprop.14]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:120
      Serial.println(F(">"));
    1486:	89 e4       	ldi	r24, 0x49	; 73
    1488:	94 e0       	ldi	r25, 0x04	; 4
    148a:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:121
      switch (selectedWirePort)
    148e:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <selectedWirePort>
    1492:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <selectedWirePort+0x1>
    1496:	89 2b       	or	r24, r25
    1498:	71 f6       	brne	.-100    	; 0x1436 <main+0x138>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:124
      {
        case 0:
          wire = &Wire;
    149a:	83 e9       	ldi	r24, 0x93	; 147
    149c:	91 e0       	ldi	r25, 0x01	; 1
    149e:	90 93 95 01 	sts	0x0195, r25	; 0x800195 <wire+0x1>
    14a2:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <wire>
    14a6:	c7 cf       	rjmp	.-114    	; 0x1436 <main+0x138>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:114

void loop()
{
  yield();
  char command = getCommand();
  switch (command)
    14a8:	89 36       	cpi	r24, 0x69	; 105
    14aa:	09 f4       	brne	.+2      	; 0x14ae <main+0x1b0>
    14ac:	85 c0       	rjmp	.+266    	; 0x15b8 <main+0x2ba>
    14ae:	0c f0       	brlt	.+2      	; 0x14b2 <main+0x1b4>
    14b0:	49 c0       	rjmp	.+146    	; 0x1544 <main+0x246>
    14b2:	83 36       	cpi	r24, 0x63	; 99
    14b4:	09 f4       	brne	.+2      	; 0x14b8 <main+0x1ba>
    14b6:	68 c0       	rjmp	.+208    	; 0x1588 <main+0x28a>
    14b8:	7c f5       	brge	.+94     	; 0x1518 <main+0x21a>
    14ba:	81 36       	cpi	r24, 0x61	; 97
    14bc:	09 f0       	breq	.+2      	; 0x14c0 <main+0x1c2>
    14be:	bb cf       	rjmp	.-138    	; 0x1436 <main+0x138>
setAddress():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:258
}


void setAddress()
{
  if (addressStart == 0)
    14c0:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <addressStart>
    14c4:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <addressStart+0x1>
    14c8:	89 2b       	or	r24, r25
    14ca:	09 f0       	breq	.+2      	; 0x14ce <main+0x1d0>
    14cc:	8c c0       	rjmp	.+280    	; 0x15e6 <main+0x2e8>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:260
  {
    addressStart = 8;
    14ce:	b0 92 2b 01 	sts	0x012B, r11	; 0x80012b <addressStart+0x1>
    14d2:	a0 92 2a 01 	sts	0x012A, r10	; 0x80012a <addressStart>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:261
    addressEnd = 119;
    14d6:	87 e7       	ldi	r24, 0x77	; 119
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <addressEnd+0x1>
    14de:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <addressEnd>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:268
  else
  {
    addressStart = 0;
    addressEnd = 127;
  }
  Serial.print(F("<address Range = "));
    14e2:	8b ee       	ldi	r24, 0xEB	; 235
    14e4:	93 e0       	ldi	r25, 0x03	; 3
    14e6:	0e 94 3a 03 	call	0x674	; 0x674 <Print::print(__FlashStringHelper const*) [clone .constprop.21]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:269
  Serial.print(addressStart);
    14ea:	6a e0       	ldi	r22, 0x0A	; 10
    14ec:	70 e0       	ldi	r23, 0x00	; 0
    14ee:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <addressStart>
    14f2:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <addressStart+0x1>
    14f6:	0e 94 8c 04 	call	0x918	; 0x918 <Print::print(int, int) [clone .constprop.14]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:270
  Serial.print(F(".."));
    14fa:	88 ee       	ldi	r24, 0xE8	; 232
    14fc:	93 e0       	ldi	r25, 0x03	; 3
    14fe:	0e 94 3a 03 	call	0x674	; 0x674 <Print::print(__FlashStringHelper const*) [clone .constprop.21]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:271
  Serial.print(addressEnd);
    1502:	6a e0       	ldi	r22, 0x0A	; 10
    1504:	70 e0       	ldi	r23, 0x00	; 0
    1506:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <addressEnd>
    150a:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <addressEnd+0x1>
    150e:	0e 94 8c 04 	call	0x918	; 0x918 <Print::print(int, int) [clone .constprop.14]>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:272
  Serial.println(F(">"));
    1512:	86 ee       	ldi	r24, 0xE6	; 230
    1514:	93 e0       	ldi	r25, 0x03	; 3
    1516:	4d c0       	rjmp	.+154    	; 0x15b2 <main+0x2b4>
loop():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:114

void loop()
{
  yield();
  char command = getCommand();
  switch (command)
    1518:	84 36       	cpi	r24, 0x64	; 100
    151a:	d9 f1       	breq	.+118    	; 0x1592 <main+0x294>
    151c:	88 36       	cpi	r24, 0x68	; 104
    151e:	09 f0       	breq	.+2      	; 0x1522 <main+0x224>
    1520:	8a cf       	rjmp	.-236    	; 0x1436 <main+0x138>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:171
    case 'e':
      // eeprom test TODO
      break;

    case 'h':
      header = !header;
    1522:	90 90 2d 01 	lds	r9, 0x012D	; 0x80012d <header>
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	98 26       	eor	r9, r24
    152a:	90 92 2d 01 	sts	0x012D, r9	; 0x80012d <header>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:172
      Serial.print(F("<header="));
    152e:	82 e3       	ldi	r24, 0x32	; 50
    1530:	94 e0       	ldi	r25, 0x04	; 4
    1532:	0e 94 3a 03 	call	0x674	; 0x674 <Print::print(__FlashStringHelper const*) [clone .constprop.21]>
main():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:173
      Serial.println(header ? F("yes>") : F("no>"));
    1536:	89 e2       	ldi	r24, 0x29	; 41
    1538:	94 e0       	ldi	r25, 0x04	; 4
loop():
    153a:	99 20       	and	r9, r9
    153c:	d1 f1       	breq	.+116    	; 0x15b2 <main+0x2b4>
main():
    153e:	8d e2       	ldi	r24, 0x2D	; 45
    1540:	94 e0       	ldi	r25, 0x04	; 4
    1542:	37 c0       	rjmp	.+110    	; 0x15b2 <main+0x2b4>
loop():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:114

void loop()
{
  yield();
  char command = getCommand();
  switch (command)
    1544:	81 37       	cpi	r24, 0x71	; 113
    1546:	09 f4       	brne	.+2      	; 0x154a <main+0x24c>
    1548:	57 c0       	rjmp	.+174    	; 0x15f8 <main+0x2fa>
    154a:	a4 f4       	brge	.+40     	; 0x1574 <main+0x276>
    154c:	80 37       	cpi	r24, 0x70	; 112
    154e:	09 f0       	breq	.+2      	; 0x1552 <main+0x254>
    1550:	72 cf       	rjmp	.-284    	; 0x1436 <main+0x138>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:176
      header = !header;
      Serial.print(F("<header="));
      Serial.println(header ? F("yes>") : F("no>"));
      break;
    case 'p':
      printAll = !printAll;
    1552:	90 90 2c 01 	lds	r9, 0x012C	; 0x80012c <printAll>
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	98 26       	eor	r9, r24
    155a:	90 92 2c 01 	sts	0x012C, r9	; 0x80012c <printAll>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:177
      Serial.print(F("<print="));
    155e:	81 e2       	ldi	r24, 0x21	; 33
    1560:	94 e0       	ldi	r25, 0x04	; 4
    1562:	0e 94 3a 03 	call	0x674	; 0x674 <Print::print(__FlashStringHelper const*) [clone .constprop.21]>
main():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:178
      Serial.println(printAll ? F("all>") : F("found>"));
    1566:	85 e1       	ldi	r24, 0x15	; 21
    1568:	94 e0       	ldi	r25, 0x04	; 4
loop():
    156a:	99 20       	and	r9, r9
    156c:	11 f1       	breq	.+68     	; 0x15b2 <main+0x2b4>
main():
    156e:	8c e1       	ldi	r24, 0x1C	; 28
    1570:	94 e0       	ldi	r25, 0x04	; 4
    1572:	1f c0       	rjmp	.+62     	; 0x15b2 <main+0x2b4>
loop():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:114

void loop()
{
  yield();
  char command = getCommand();
  switch (command)
    1574:	82 37       	cpi	r24, 0x72	; 114
    1576:	a1 f1       	breq	.+104    	; 0x15e0 <main+0x2e2>
    1578:	83 37       	cpi	r24, 0x73	; 115
    157a:	09 f0       	breq	.+2      	; 0x157e <main+0x280>
    157c:	5c cf       	rjmp	.-328    	; 0x1436 <main+0x138>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:155
#endif
      }
      break;

    case 's':
      state = ONCE;
    157e:	10 93 92 01 	sts	0x0192, r17	; 0x800192 <state+0x1>
    1582:	00 93 91 01 	sts	0x0191, r16	; 0x800191 <state>
    1586:	57 cf       	rjmp	.-338    	; 0x1436 <main+0x138>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:158
      break;
    case 'c':
      state = CONT;
    1588:	f0 92 92 01 	sts	0x0192, r15	; 0x800192 <state+0x1>
    158c:	e0 92 91 01 	sts	0x0191, r14	; 0x800191 <state>
    1590:	52 cf       	rjmp	.-348    	; 0x1436 <main+0x138>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:161
      break;
    case 'd':
      delayFlag = !delayFlag;
    1592:	90 90 90 01 	lds	r9, 0x0190	; 0x800190 <delayFlag>
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	98 26       	eor	r9, r24
    159a:	90 92 90 01 	sts	0x0190, r9	; 0x800190 <delayFlag>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:162
      Serial.print(F("<delay="));
    159e:	81 e4       	ldi	r24, 0x41	; 65
    15a0:	94 e0       	ldi	r25, 0x04	; 4
    15a2:	0e 94 3a 03 	call	0x674	; 0x674 <Print::print(__FlashStringHelper const*) [clone .constprop.21]>
main():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:163
      Serial.println(delayFlag ? F("5>") : F("0>"));
    15a6:	8b e3       	ldi	r24, 0x3B	; 59
    15a8:	94 e0       	ldi	r25, 0x04	; 4
loop():
    15aa:	99 20       	and	r9, r9
    15ac:	11 f0       	breq	.+4      	; 0x15b2 <main+0x2b4>
main():
    15ae:	8e e3       	ldi	r24, 0x3E	; 62
    15b0:	94 e0       	ldi	r25, 0x04	; 4
setAddress():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:272
  }
  Serial.print(F("<address Range = "));
  Serial.print(addressStart);
  Serial.print(F(".."));
  Serial.print(addressEnd);
  Serial.println(F(">"));
    15b2:	0e 94 54 03 	call	0x6a8	; 0x6a8 <Print::println(__FlashStringHelper const*) [clone .constprop.20]>
    15b6:	3f cf       	rjmp	.-386    	; 0x1436 <main+0x138>
loop():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:181
      printAll = !printAll;
      Serial.print(F("<print="));
      Serial.println(printAll ? F("all>") : F("found>"));
      break;
    case 'i':
      disableIRQ = !disableIRQ;
    15b8:	90 90 8f 01 	lds	r9, 0x018F	; 0x80018f <disableIRQ>
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	98 26       	eor	r9, r24
    15c0:	90 92 8f 01 	sts	0x018F, r9	; 0x80018f <disableIRQ>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:182
      Serial.print(F("<irq="));
    15c4:	8f e0       	ldi	r24, 0x0F	; 15
    15c6:	94 e0       	ldi	r25, 0x04	; 4
    15c8:	0e 94 3a 03 	call	0x674	; 0x674 <Print::print(__FlashStringHelper const*) [clone .constprop.21]>
main():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:183
      Serial.println(disableIRQ ? F("diabled>") : F("enabled>"));
    15cc:	8d ef       	ldi	r24, 0xFD	; 253
    15ce:	93 e0       	ldi	r25, 0x03	; 3
loop():
    15d0:	99 20       	and	r9, r9
    15d2:	79 f3       	breq	.-34     	; 0x15b2 <main+0x2b4>
main():
    15d4:	86 e0       	ldi	r24, 0x06	; 6
    15d6:	94 e0       	ldi	r25, 0x04	; 4
    15d8:	ec cf       	rjmp	.-40     	; 0x15b2 <main+0x2b4>
loop():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:196
    case '9':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
      setSpeed(command);
    15da:	0e 94 1f 05 	call	0xa3e	; 0xa3e <setSpeed(char)>
    15de:	2b cf       	rjmp	.-426    	; 0x1436 <main+0x138>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:200
      break;

    case 'r':
      reset();
    15e0:	0e 94 11 06 	call	0xc22	; 0xc22 <reset()>
    15e4:	28 cf       	rjmp	.-432    	; 0x1436 <main+0x138>
setAddress():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:265
    addressStart = 8;
    addressEnd = 119;
  }
  else
  {
    addressStart = 0;
    15e6:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <addressStart+0x1>
    15ea:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <addressStart>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:266
    addressEnd = 127;
    15ee:	d0 92 29 01 	sts	0x0129, r13	; 0x800129 <addressEnd+0x1>
    15f2:	c0 92 28 01 	sts	0x0128, r12	; 0x800128 <addressEnd>
    15f6:	75 cf       	rjmp	.-278    	; 0x14e2 <main+0x1e4>
loop():
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:209
      setAddress();
      break;

    case 'q':
    case '?':
      state = HELP;
    15f8:	d0 93 92 01 	sts	0x0192, r29	; 0x800192 <state+0x1>
    15fc:	c0 93 91 01 	sts	0x0191, r28	; 0x800191 <state>
    1600:	1a cf       	rjmp	.-460    	; 0x1436 <main+0x138>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:222
    case ONCE:
      I2Cscan();
      state = HELP;
      break;
    case CONT:
      I2Cscan();
    1602:	0e 94 33 06 	call	0xc66	; 0xc66 <I2Cscan()>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:223
      delay(1000);
    1606:	68 ee       	ldi	r22, 0xE8	; 232
    1608:	73 e0       	ldi	r23, 0x03	; 3
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	0e 94 a6 03 	call	0x74c	; 0x74c <delay>
    1612:	ee ce       	rjmp	.-548    	; 0x13f0 <main+0xf2>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:226
      break;
    case HELP:
      displayHelp();
    1614:	0e 94 93 04 	call	0x926	; 0x926 <displayHelp()>
/media/user/Data/Documents/AVR/AVR/elevator_altimeter/elevator_altimeter.ino:227
      state = STOP;
    1618:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <state+0x1>
    161c:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <state>
    1620:	e7 ce       	rjmp	.-562    	; 0x13f0 <main+0xf2>

00001622 <_GLOBAL__sub_I___vector_16>:
_ZN5PrintC2Ev():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Print.h:43
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1622:	e8 e9       	ldi	r30, 0x98	; 152
    1624:	f1 e0       	ldi	r31, 0x01	; 1
    1626:	13 82       	std	Z+3, r1	; 0x03
    1628:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC2Ev():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/Stream.h:64
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    162a:	88 ee       	ldi	r24, 0xE8	; 232
    162c:	93 e0       	ldi	r25, 0x03	; 3
    162e:	a0 e0       	ldi	r26, 0x00	; 0
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	84 83       	std	Z+4, r24	; 0x04
    1634:	95 83       	std	Z+5, r25	; 0x05
    1636:	a6 83       	std	Z+6, r26	; 0x06
    1638:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC2EPVhS1_S1_S1_S1_S1_():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    163a:	89 e3       	ldi	r24, 0x39	; 57
    163c:	91 e0       	ldi	r25, 0x01	; 1
    163e:	91 83       	std	Z+1, r25	; 0x01
    1640:	80 83       	st	Z, r24
    1642:	82 e4       	ldi	r24, 0x42	; 66
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	95 87       	std	Z+13, r25	; 0x0d
    1648:	84 87       	std	Z+12, r24	; 0x0c
    164a:	81 e4       	ldi	r24, 0x41	; 65
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	97 87       	std	Z+15, r25	; 0x0f
    1650:	86 87       	std	Z+14, r24	; 0x0e
    1652:	86 e4       	ldi	r24, 0x46	; 70
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	91 8b       	std	Z+17, r25	; 0x11
    1658:	80 8b       	std	Z+16, r24	; 0x10
    165a:	85 e4       	ldi	r24, 0x45	; 69
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	93 8b       	std	Z+19, r25	; 0x13
    1660:	82 8b       	std	Z+18, r24	; 0x12
    1662:	84 e4       	ldi	r24, 0x44	; 68
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	95 8b       	std	Z+21, r25	; 0x15
    1668:	84 8b       	std	Z+20, r24	; 0x14
    166a:	80 e4       	ldi	r24, 0x40	; 64
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	97 8b       	std	Z+23, r25	; 0x17
    1670:	86 8b       	std	Z+22, r24	; 0x16
    1672:	11 8e       	std	Z+25, r1	; 0x19
    1674:	12 8e       	std	Z+26, r1	; 0x1a
    1676:	13 8e       	std	Z+27, r1	; 0x1b
    1678:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_16():
/home/user/.arduino15/packages/ATTinyCore/hardware/avr/1.5.2/cores/tinymodern/HardwareSerial0.cpp:77

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
    167a:	08 95       	ret

0000167c <__mulqi3>:
__mulqi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:224
    167c:	00 24       	eor	r0, r0

0000167e <__mulqi3_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:226
    167e:	80 fd       	sbrc	r24, 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:227
    1680:	06 0e       	add	r0, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:228
    1682:	66 0f       	add	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:229
    1684:	11 f0       	breq	.+4      	; 0x168a <__mulqi3_exit>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:230
    1686:	86 95       	lsr	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:231
    1688:	d1 f7       	brne	.-12     	; 0x167e <__mulqi3_loop>

0000168a <__mulqi3_exit>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:233
    168a:	80 2d       	mov	r24, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:234
    168c:	08 95       	ret

0000168e <__mulsi3>:
__mulsi3():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:445
    168e:	ee 27       	eor	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:446
    1690:	ff 27       	eor	r31, r31

00001692 <__mulsi3_helper>:
__mulsi3_helper():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:451
    1692:	aa 27       	eor	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:452
    1694:	bb 27       	eor	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:453
    1696:	08 c0       	rjmp	.+16     	; 0x16a8 <__mulsi3_helper+0x16>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:457
    1698:	a2 0f       	add	r26, r18
    169a:	b3 1f       	adc	r27, r19
    169c:	e4 1f       	adc	r30, r20
    169e:	f5 1f       	adc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:460
    16a0:	22 0f       	add	r18, r18
    16a2:	33 1f       	adc	r19, r19
    16a4:	44 1f       	adc	r20, r20
    16a6:	55 1f       	adc	r21, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:463
    16a8:	96 95       	lsr	r25
    16aa:	87 95       	ror	r24
    16ac:	77 95       	ror	r23
    16ae:	67 95       	ror	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:465
    16b0:	98 f3       	brcs	.-26     	; 0x1698 <__mulsi3_helper+0x6>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:467
    16b2:	70 40       	sbci	r23, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:468
    16b4:	a9 f7       	brne	.-22     	; 0x16a0 <__mulsi3_helper+0xe>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:469
    16b6:	00 97       	sbiw	r24, 0x00	; 0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:470
    16b8:	99 f7       	brne	.-26     	; 0x16a0 <__mulsi3_helper+0xe>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:473
    16ba:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:474
    16bc:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:480
    16be:	08 95       	ret

000016c0 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    16c0:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    16c2:	1a 2e       	mov	r1, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    16c4:	aa 1b       	sub	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    16c6:	bb 1b       	sub	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    16c8:	fd 01       	movw	r30, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    16ca:	0d c0       	rjmp	.+26     	; 0x16e6 <__udivmodsi4_ep>

000016cc <__udivmodsi4_loop>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    16cc:	aa 1f       	adc	r26, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    16ce:	bb 1f       	adc	r27, r27
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    16d0:	ee 1f       	adc	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    16d2:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    16d4:	a2 17       	cp	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    16d6:	b3 07       	cpc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    16d8:	e4 07       	cpc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    16da:	f5 07       	cpc	r31, r21
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    16dc:	20 f0       	brcs	.+8      	; 0x16e6 <__udivmodsi4_ep>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    16de:	a2 1b       	sub	r26, r18
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    16e0:	b3 0b       	sbc	r27, r19
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    16e2:	e4 0b       	sbc	r30, r20
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    16e4:	f5 0b       	sbc	r31, r21

000016e6 <__udivmodsi4_ep>:
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    16e6:	66 1f       	adc	r22, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    16e8:	77 1f       	adc	r23, r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    16ea:	88 1f       	adc	r24, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    16ec:	99 1f       	adc	r25, r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    16ee:	1a 94       	dec	r1
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    16f0:	69 f7       	brne	.-38     	; 0x16cc <__udivmodsi4_loop>
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    16f2:	60 95       	com	r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    16f4:	70 95       	com	r23
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    16f6:	80 95       	com	r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    16f8:	90 95       	com	r25
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    16fa:	9b 01       	movw	r18, r22
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    16fc:	ac 01       	movw	r20, r24
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    16fe:	bd 01       	movw	r22, r26
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    1700:	cf 01       	movw	r24, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    1702:	08 95       	ret

00001704 <__tablejump2__>:
__tablejump2__():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    1704:	ee 0f       	add	r30, r30
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    1706:	ff 1f       	adc	r31, r31
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    1708:	05 90       	lpm	r0, Z+
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    170a:	f4 91       	lpm	r31, Z
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    170c:	e0 2d       	mov	r30, r0
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    170e:	09 94       	ijmp

00001710 <_exit>:
exit():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1710:	f8 94       	cli

00001712 <__stop_program>:
__stop_program():
/home/jenkins/workspace/avr-gcc-staging/label/debian7-x86_64/gcc-build/avr/avr35/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1712:	ff cf       	rjmp	.-2      	; 0x1712 <__stop_program>
