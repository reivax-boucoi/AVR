
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  00000138  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000073  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000185  00000000  00000000  000001cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000129  00000000  00000000  00000350  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000018d  00000000  00000000  00000479  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00000608  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e3  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000031  00000000  00000000  0000075b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	3e c0       	rjmp	.+124    	; 0x90 <__vector_9>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	46 c0       	rjmp	.+140    	; 0xa4 <__vector_11>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a1 36       	cpi	r26, 0x61	; 97
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	14 d0       	rcall	.+40     	; 0x6c <main>
  44:	3d c0       	rjmp	.+122    	; 0xc0 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <uart_init>:

#define BAUD 9600                                   // define baud
#define BAUDRATE ((F_CPU)/(BAUD*16UL)-1)            // set baud rate value for UBRR
  
  void uart_init (void){
    UBRRH = (BAUDRATE>>8);
  48:	10 bc       	out	0x20, r1	; 32
    UBRRL = BAUDRATE;	// set baud rate
  4a:	8d e4       	ldi	r24, 0x4D	; 77
  4c:	89 b9       	out	0x09, r24	; 9
    UCSRB|= (1<<TXEN)|(1<<RXEN);	// enable receiver and transmitter
  4e:	8a b1       	in	r24, 0x0a	; 10
  50:	88 61       	ori	r24, 0x18	; 24
  52:	8a b9       	out	0x0a, r24	; 10
    UCSRC|= (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);	// 8bit data format
  54:	80 b5       	in	r24, 0x20	; 32
  56:	86 68       	ori	r24, 0x86	; 134
  58:	80 bd       	out	0x20, r24	; 32
    UCSRB |= (1 << RXCIE ); // Enable the USART Recieve Complete interrupt
  5a:	57 9a       	sbi	0x0a, 7	; 10
}
  5c:	08 95       	ret

0000005e <uart_transmit>:

void uart_transmit (unsigned char data){
    while (!( UCSRA & (1<<UDRE)));	// wait while register is free
  5e:	5d 9b       	sbis	0x0b, 5	; 11
  60:	fe cf       	rjmp	.-4      	; 0x5e <uart_transmit>
    UDR = data;	// load data in the register
  62:	8c b9       	out	0x0c, r24	; 12
}
  64:	08 95       	ret

00000066 <uart_recieve>:

unsigned char uart_recieve (void){
    while(!(UCSRA) & (1<<RXC));	// wait while data is being received
  66:	8b b1       	in	r24, 0x0b	; 11
    return UDR;	// return 8-bit data
  68:	8c b1       	in	r24, 0x0c	; 12
}
  6a:	08 95       	ret

0000006c <main>:

volatile uint8_t cnt=0;
int main(void){
  DDRB |= 1 << PINB0 ;
  6c:	b8 9a       	sbi	0x17, 0	; 23
  PORTB |= 1<<PINB0;
  6e:	c0 9a       	sbi	0x18, 0	; 24
  uart_init();
  70:	eb df       	rcall	.-42     	; 0x48 <uart_init>
  TIMSK|=1<<TOIE0;
  72:	89 b7       	in	r24, 0x39	; 57
  74:	81 60       	ori	r24, 0x01	; 1
  76:	89 bf       	out	0x39, r24	; 57
  sei();
  78:	78 94       	sei
  TCCR0 |=(1<<CS02) |(1<<CS00);
  7a:	83 b7       	in	r24, 0x33	; 51
  7c:	85 60       	ori	r24, 0x05	; 5
  7e:	83 bf       	out	0x33, r24	; 51
    while (!( UCSRA & (1<<UDRE)));	// wait while register is free
    UDR = data;	// load data in the register
}

unsigned char uart_recieve (void){
    while(!(UCSRA) & (1<<RXC));	// wait while data is being received
  80:	8b b1       	in	r24, 0x0b	; 11
    return UDR;	// return 8-bit data
  82:	8c b1       	in	r24, 0x0c	; 12
  sei();
  TCCR0 |=(1<<CS02) |(1<<CS00);
  
  while(1){
	uint8_t data = uart_recieve ();
	if(data){
  84:	88 23       	and	r24, r24
  86:	e1 f3       	breq	.-8      	; 0x80 <main+0x14>
    UCSRC|= (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);	// 8bit data format
    UCSRB |= (1 << RXCIE ); // Enable the USART Recieve Complete interrupt
}

void uart_transmit (unsigned char data){
    while (!( UCSRA & (1<<UDRE)));	// wait while register is free
  88:	5d 9b       	sbis	0x0b, 5	; 11
  8a:	fe cf       	rjmp	.-4      	; 0x88 <main+0x1c>
    UDR = data;	// load data in the register
  8c:	8c b9       	out	0x0c, r24	; 12
  8e:	f8 cf       	rjmp	.-16     	; 0x80 <main+0x14>

00000090 <__vector_9>:
		data=0;
		}
  }
  return 0;
}
ISR(TIMER0_OVF_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
		PORTB ^= 1<<PINB0 ;
		cnt=0;
	}else{
		cnt++;
	}*/
}
  9a:	0f 90       	pop	r0
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	0f 90       	pop	r0
  a0:	1f 90       	pop	r1
  a2:	18 95       	reti

000000a4 <__vector_11>:

ISR ( USART_RXC_vect )
{
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	8f 93       	push	r24
char ReceivedByte ;
ReceivedByte = UDR ;
  b0:	8c b1       	in	r24, 0x0c	; 12
UDR = ReceivedByte ;
  b2:	8c b9       	out	0x0c, r24	; 12
  b4:	8f 91       	pop	r24
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>
