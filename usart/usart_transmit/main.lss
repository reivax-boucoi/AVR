
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000112  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000020a  00800060  00000112  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080026a  0080026a  000003b0  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000068  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000013c  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000f6  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000171  00000000  00000000  0000066a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  000007dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000d3  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000028  00000000  00000000  0000090f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000937  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	48 c0       	rjmp	.+144    	; 0xa4 <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	12 e0       	ldi	r17, 0x02	; 2
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 e1       	ldi	r30, 0x12	; 18
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	aa 36       	cpi	r26, 0x6A	; 106
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	12 e0       	ldi	r17, 0x02	; 2
  4a:	aa e6       	ldi	r26, 0x6A	; 106
  4c:	b2 e0       	ldi	r27, 0x02	; 2
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ab 36       	cpi	r26, 0x6B	; 107
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	1a d0       	rcall	.+52     	; 0x8e <main>
  5a:	59 c0       	rjmp	.+178    	; 0x10e <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <uart_init>:

#define BAUD 9600                                   // define baud
#define BAUDRATE ((F_CPU)/(BAUD*16UL)-1)            // set baud rate value for UBRR
#define string "HELLO WORLD I AM WRITING A LONG MESSAGE, I HOPE IT DOESN'T TAKE TOO LONG TO ARRIVE ALSO WHY AM I TYPING USING CAPITALS ? THIS IS STARTING TO GET A BIT SILLY NO ? I WONDER I I FILLED MY  MEMORY ALREADY OR IF I SHOULD CONTINUE LOOKS LIKE I SHOULD CONTINUE BECAUSE THER IS STILL 30% LEFT, but I have a feeling it could take a bit longer than expected...DO YOU THINK WE WILL HIT A LIMIT AT A CERTAIN POINT ? BECAUSE I FEEL LIKE IT IS GONNA TAKE FOREVER, WE ARE ALREADY AT 400+ CHARACTERS AND ONLY A THIRD OF THE WAY DONE !!!\n"
  void uart_init (void){
    UBRRH = (BAUDRATE>>8);
  5e:	10 bc       	out	0x20, r1	; 32
    UBRRL = BAUDRATE;	// set baud rate
  60:	8d e4       	ldi	r24, 0x4D	; 77
  62:	89 b9       	out	0x09, r24	; 9
    UCSRB|= (1<<TXEN)|(1<<RXEN);	// enable receiver and transmitter
  64:	8a b1       	in	r24, 0x0a	; 10
  66:	88 61       	ori	r24, 0x18	; 24
  68:	8a b9       	out	0x0a, r24	; 10
    UCSRC|= (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);	// 8bit data format
  6a:	80 b5       	in	r24, 0x20	; 32
  6c:	86 68       	ori	r24, 0x86	; 134
  6e:	80 bd       	out	0x20, r24	; 32
}
  70:	08 95       	ret

00000072 <uart_transmit>:

void uart_transmit (unsigned char data){
    while (!( UCSRA & (1<<UDRE)));	// wait while register is free
  72:	5d 9b       	sbis	0x0b, 5	; 11
  74:	fe cf       	rjmp	.-4      	; 0x72 <uart_transmit>
    UDR = data;	// load data in the register
  76:	8c b9       	out	0x0c, r24	; 12
}
  78:	08 95       	ret

0000007a <uart_transmitMult>:

void uart_transmitMult(char *Data){
  7a:	fc 01       	movw	r30, r24
  7c:	04 c0       	rjmp	.+8      	; 0x86 <uart_transmitMult+0xc>
    UCSRB|= (1<<TXEN)|(1<<RXEN);	// enable receiver and transmitter
    UCSRC|= (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);	// 8bit data format
}

void uart_transmit (unsigned char data){
    while (!( UCSRA & (1<<UDRE)));	// wait while register is free
  7e:	5d 9b       	sbis	0x0b, 5	; 11
  80:	fe cf       	rjmp	.-4      	; 0x7e <uart_transmitMult+0x4>
    UDR = data;	// load data in the register
}

void uart_transmitMult(char *Data){
	while(*Data>0){
		uart_transmit(*Data++);
  82:	31 96       	adiw	r30, 0x01	; 1
    UCSRC|= (1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);	// 8bit data format
}

void uart_transmit (unsigned char data){
    while (!( UCSRA & (1<<UDRE)));	// wait while register is free
    UDR = data;	// load data in the register
  84:	8c b9       	out	0x0c, r24	; 12
}

void uart_transmitMult(char *Data){
	while(*Data>0){
  86:	80 81       	ld	r24, Z
  88:	88 23       	and	r24, r24
  8a:	c9 f7       	brne	.-14     	; 0x7e <uart_transmitMult+0x4>
		uart_transmit(*Data++);
	}
}
  8c:	08 95       	ret

0000008e <main>:

volatile uint8_t cnt=0;
int main(void){
  DDRB |= 1 << PINB0 ;
  8e:	b8 9a       	sbi	0x17, 0	; 23
  PORTB |= 1<<PINB0;
  90:	c0 9a       	sbi	0x18, 0	; 24
  uart_init();
  92:	e5 df       	rcall	.-54     	; 0x5e <uart_init>
  TIMSK|=1<<TOIE0;
  94:	89 b7       	in	r24, 0x39	; 57
  96:	81 60       	ori	r24, 0x01	; 1
  98:	89 bf       	out	0x39, r24	; 57
  sei();
  9a:	78 94       	sei
  TCCR0 |=(1<<CS02) |(1<<CS00);
  9c:	83 b7       	in	r24, 0x33	; 51
  9e:	85 60       	ori	r24, 0x05	; 5
  a0:	83 bf       	out	0x33, r24	; 51
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <main+0x14>

000000a4 <__vector_9>:
  
  while(1){
  }
  return 0;
}
ISR(TIMER0_OVF_vect){
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	2f 93       	push	r18
  b0:	3f 93       	push	r19
  b2:	4f 93       	push	r20
  b4:	5f 93       	push	r21
  b6:	6f 93       	push	r22
  b8:	7f 93       	push	r23
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
  be:	af 93       	push	r26
  c0:	bf 93       	push	r27
  c2:	ef 93       	push	r30
  c4:	ff 93       	push	r31
	if(cnt>=1){
  c6:	80 91 6a 02 	lds	r24, 0x026A
  ca:	88 23       	and	r24, r24
  cc:	51 f0       	breq	.+20     	; 0xe2 <__vector_9+0x3e>
		uart_transmitMult(string);
  ce:	80 e6       	ldi	r24, 0x60	; 96
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	d3 df       	rcall	.-90     	; 0x7a <uart_transmitMult>
		PORTB ^= 1<<PINB0 ;
  d4:	88 b3       	in	r24, 0x18	; 24
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	89 27       	eor	r24, r25
  da:	88 bb       	out	0x18, r24	; 24
		cnt=0;
  dc:	10 92 6a 02 	sts	0x026A, r1
  e0:	05 c0       	rjmp	.+10     	; 0xec <__vector_9+0x48>
	}else{
		cnt++;
  e2:	80 91 6a 02 	lds	r24, 0x026A
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	80 93 6a 02 	sts	0x026A, r24
	}
  ec:	ff 91       	pop	r31
  ee:	ef 91       	pop	r30
  f0:	bf 91       	pop	r27
  f2:	af 91       	pop	r26
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	7f 91       	pop	r23
  fa:	6f 91       	pop	r22
  fc:	5f 91       	pop	r21
  fe:	4f 91       	pop	r20
 100:	3f 91       	pop	r19
 102:	2f 91       	pop	r18
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
