   1               		.file	"main.c"
   2               	__SP_L__ = 0x3d
   3               	__SREG__ = 0x3f
   4               	__tmp_reg__ = 0
   5               	__zero_reg__ = 1
   6               		.text
   7               	.Ltext0:
   8               		.cfi_sections	.debug_frame
   9               	.global	blink
  11               	blink:
  12               	.LFB6:
  13               		.file 1 "main.c"
   1:main.c        **** #include <avr/io.h>
   2:main.c        **** #include <util/delay.h>
   3:main.c        **** #include<avr/interrupt.h>
   4:main.c        **** 
   5:main.c        **** #define LED_HIGH (PORTB |= 1<<PINB0)
   6:main.c        **** #define LED_LOW (PORTB &=~(1<<PINB0))
   7:main.c        **** #define LED_TOGGLE (PORTB ^=(1<<PINB0))
   8:main.c        **** 
   9:main.c        **** void blink(int nb){
  14               		.loc 1 9 0
  15               		.cfi_startproc
  16               	.LVL0:
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  21               	.LBB7:
  10:main.c        ****     for(int i=0;i<nb;i++){
  22               		.loc 1 10 0
  23 0000 20E0      		ldi r18,0
  24 0002 30E0      		ldi r19,0
  25               	.LVL1:
  26               	.L2:
  27               		.loc 1 10 0 is_stmt 0 discriminator 1
  28 0004 2817      		cp r18,r24
  29 0006 3907      		cpc r19,r25
  30 0008 04F4      		brge .L5
  11:main.c        ****         LED_HIGH;
  31               		.loc 1 11 0 is_stmt 1 discriminator 3
  32 000a C09A      		sbi 0x18,0
  33               	.LVL2:
  34               	.LBB8:
  35               	.LBB9:
  36               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
  37               		.loc 2 187 0 discriminator 3
  38 000c E5EA      		ldi r30,lo8(3749)
  39 000e FEE0      		ldi r31,hi8(3749)
  40 0010 3197      	1:	sbiw r30,1
  41 0012 01F4      		brne 1b
  42 0014 00C0      		rjmp .
  43 0016 0000      		nop
  44               	.LVL3:
  45               	.LBE9:
  46               	.LBE8:
  12:main.c        ****         _delay_ms(15);
  13:main.c        ****         LED_LOW;
  47               		.loc 1 13 0 discriminator 3
  48 0018 C098      		cbi 0x18,0
  49               	.LVL4:
  50               	.LBB10:
  51               	.LBB11:
  52               		.loc 2 187 0 discriminator 3
  53 001a E1E0      		ldi r30,lo8(21249)
  54 001c F3E5      		ldi r31,hi8(21249)
  55 001e 3197      	1:	sbiw r30,1
  56 0020 01F4      		brne 1b
  57 0022 00C0      		rjmp .
  58 0024 0000      		nop
  59               	.LVL5:
  60               	.LBE11:
  61               	.LBE10:
  10:main.c        ****         LED_HIGH;
  62               		.loc 1 10 0 discriminator 3
  63 0026 2F5F      		subi r18,-1
  64 0028 3F4F      		sbci r19,-1
  65               	.LVL6:
  66 002a 00C0      		rjmp .L2
  67               	.L5:
  68               	/* epilogue start */
  69               	.LBE7:
  14:main.c        ****         _delay_ms(85);
  15:main.c        ****     }
  16:main.c        **** }
  70               		.loc 1 16 0
  71 002c 0895      		ret
  72               		.cfi_endproc
  73               	.LFE6:
  75               		.section	.text.startup,"ax",@progbits
  76               	.global	main
  78               	main:
  79               	.LFB7:
  17:main.c        **** 
  18:main.c        **** volatile unsigned int cnt=0;
  19:main.c        **** volatile unsigned long setTime;
  20:main.c        **** volatile unsigned long remainingTime;
  21:main.c        **** volatile uint8_t showRemaining=0;
  22:main.c        **** volatile unsigned int nextShowTime;
  23:main.c        **** volatile long showValueLeft;
  24:main.c        **** 
  25:main.c        **** int main(void){
  80               		.loc 1 25 0
  81               		.cfi_startproc
  82               	/* prologue: function */
  83               	/* frame size = 0 */
  84               	/* stack size = 0 */
  85               	.L__stack_usage = 0
  26:main.c        ****     DDRB |= (1 << PINB0)|(1 << PIND5) ; //LED && relay init
  86               		.loc 1 26 0
  87 0000 87B3      		in r24,0x17
  88 0002 8162      		ori r24,lo8(33)
  89 0004 87BB      		out 0x17,r24
  27:main.c        ****     LED_LOW;
  90               		.loc 1 27 0
  91 0006 C098      		cbi 0x18,0
  28:main.c        ****     PORTD &=~(1<<PIND5);
  92               		.loc 1 28 0
  93 0008 9598      		cbi 0x12,5
  29:main.c        ****     
  30:main.c        ****     DDRD &=~(1<<PIND6);//Button
  94               		.loc 1 30 0
  95 000a 8E98      		cbi 0x11,6
  31:main.c        ****     PORTD |=(1<<PIND6);
  96               		.loc 1 31 0
  97 000c 969A      		sbi 0x12,6
  32:main.c        ****     
  33:main.c        ****     DDRB &=~(0x1E); //sw init
  98               		.loc 1 33 0
  99 000e 87B3      		in r24,0x17
 100 0010 817E      		andi r24,lo8(-31)
 101 0012 87BB      		out 0x17,r24
  34:main.c        ****     PORTB |=(0x1E);
 102               		.loc 1 34 0
 103 0014 88B3      		in r24,0x18
 104 0016 8E61      		ori r24,lo8(30)
 105 0018 88BB      		out 0x18,r24
  35:main.c        ****     
  36:main.c        ****     TIMSK |=(1<<TOIE1)|(1<<OCIE1A);//timer init
 106               		.loc 1 36 0
 107 001a 89B7      		in r24,0x39
 108 001c 806C      		ori r24,lo8(-64)
 109 001e 89BF      		out 0x39,r24
  37:main.c        **** 	TCCR1A = 0x00;
 110               		.loc 1 37 0
 111 0020 1FBC      		out 0x2f,__zero_reg__
  38:main.c        ****     TCNT1 = 0x0000; 
 112               		.loc 1 38 0
 113 0022 1DBC      		out 0x2c+1,__zero_reg__
 114 0024 1CBC      		out 0x2c,__zero_reg__
  39:main.c        ****     OCR1A = 625-1; //4MHz/8=500kHz -> /625=100Hz
 115               		.loc 1 39 0
 116 0026 80E7      		ldi r24,lo8(112)
 117 0028 92E0      		ldi r25,lo8(2)
 118 002a 9BBD      		out 0x2a+1,r25
 119 002c 8ABD      		out 0x2a,r24
  40:main.c        ****     
  41:main.c        ****     sei();//enable global interrupts
 120               		.loc 1 41 0
 121               	/* #APP */
 122               	 ;  41 "main.c" 1
 123 002e 7894      		sei
 124               	 ;  0 "" 2
  42:main.c        ****     
  43:main.c        ****     while(1){
  44:main.c        ****         if(!(PIND&(1<<PIND6))){
  45:main.c        ****             setTime=(15-((PINB & 0x1E)>>1))*3600;
 125               		.loc 1 45 0
 126               	/* #NOAPP */
 127 0030 2FE0      		ldi r18,lo8(15)
 128 0032 30E0      		ldi r19,0
 129               	.L7:
  44:main.c        ****             setTime=(15-((PINB & 0x1E)>>1))*3600;
 130               		.loc 1 44 0
 131 0034 8699      		sbic 0x10,6
 132 0036 00C0      		rjmp .L7
 133               		.loc 1 45 0
 134 0038 86B3      		in r24,0x16
 135 003a 8E71      		andi r24,lo8(30)
 136 003c 90E0      		ldi r25,0
 137 003e 9595      		asr r25
 138 0040 8795      		ror r24
 139 0042 A901      		movw r20,r18
 140 0044 481B      		sub r20,r24
 141 0046 590B      		sbc r21,r25
 142 0048 CA01      		movw r24,r20
 143 004a 60E1      		ldi r22,lo8(16)
 144 004c 7EE0      		ldi r23,lo8(14)
 145 004e 00D0      		rcall __mulhi3
 146 0050 092E      		mov __tmp_reg__,r25
 147 0052 000C      		lsl r0
 148 0054 AA0B      		sbc r26,r26
 149 0056 BB0B      		sbc r27,r27
 150 0058 8093 0000 		sts setTime,r24
 151 005c 9093 0000 		sts setTime+1,r25
 152 0060 A093 0000 		sts setTime+2,r26
 153 0064 B093 0000 		sts setTime+3,r27
  46:main.c        ****             remainingTime=setTime;
 154               		.loc 1 46 0
 155 0068 8091 0000 		lds r24,setTime
 156 006c 9091 0000 		lds r25,setTime+1
 157 0070 A091 0000 		lds r26,setTime+2
 158 0074 B091 0000 		lds r27,setTime+3
 159 0078 8093 0000 		sts remainingTime,r24
 160 007c 9093 0000 		sts remainingTime+1,r25
 161 0080 A093 0000 		sts remainingTime+2,r26
 162 0084 B093 0000 		sts remainingTime+3,r27
  47:main.c        ****             TCCR1B |=(1<<CS11)|(1<<WGM12); // /1024, CTC on OCR1A
 163               		.loc 1 47 0
 164 0088 8EB5      		in r24,0x2e
 165 008a 8A60      		ori r24,lo8(10)
 166 008c 8EBD      		out 0x2e,r24
  48:main.c        ****             PORTD |=(1<<PIND5);
 167               		.loc 1 48 0
 168 008e 959A      		sbi 0x12,5
 169 0090 00C0      		rjmp .L7
 170               		.cfi_endproc
 171               	.LFE7:
 173               		.text
 174               	.global	__vector_5
 176               	__vector_5:
 177               	.LFB8:
  49:main.c        ****         }
  50:main.c        ****         
  51:main.c        ****     }
  52:main.c        ****     return 0;
  53:main.c        **** }     
  54:main.c        **** 
  55:main.c        **** 
  56:main.c        **** ISR (TIMER1_OVF_vect){
 178               		.loc 1 56 0
 179               		.cfi_startproc
 180 002e 1F92      		push r1
 181               	.LCFI0:
 182               		.cfi_def_cfa_offset 3
 183               		.cfi_offset 1, -2
 184 0030 0F92      		push r0
 185               	.LCFI1:
 186               		.cfi_def_cfa_offset 4
 187               		.cfi_offset 0, -3
 188 0032 0FB6      		in r0,__SREG__
 189 0034 0F92      		push r0
 190 0036 1124      		clr __zero_reg__
 191               	/* prologue: Signal */
 192               	/* frame size = 0 */
 193               	/* stack size = 3 */
 194               	.L__stack_usage = 3
 195               	/* epilogue start */
  57:main.c        **** }
 196               		.loc 1 57 0
 197 0038 0F90      		pop r0
 198 003a 0FBE      		out __SREG__,r0
 199 003c 0F90      		pop r0
 200 003e 1F90      		pop r1
 201 0040 1895      		reti
 202               		.cfi_endproc
 203               	.LFE8:
 205               	.global	__vector_4
 207               	__vector_4:
 208               	.LFB9:
  58:main.c        **** 
  59:main.c        **** ISR(TIMER1_COMPA_vect){//occurs @100Hz
 209               		.loc 1 59 0
 210               		.cfi_startproc
 211 0042 1F92      		push r1
 212               	.LCFI2:
 213               		.cfi_def_cfa_offset 3
 214               		.cfi_offset 1, -2
 215 0044 0F92      		push r0
 216               	.LCFI3:
 217               		.cfi_def_cfa_offset 4
 218               		.cfi_offset 0, -3
 219 0046 0FB6      		in r0,__SREG__
 220 0048 0F92      		push r0
 221 004a 1124      		clr __zero_reg__
 222 004c 2F93      		push r18
 223               	.LCFI4:
 224               		.cfi_def_cfa_offset 5
 225               		.cfi_offset 18, -4
 226 004e 8F93      		push r24
 227               	.LCFI5:
 228               		.cfi_def_cfa_offset 6
 229               		.cfi_offset 24, -5
 230 0050 9F93      		push r25
 231               	.LCFI6:
 232               		.cfi_def_cfa_offset 7
 233               		.cfi_offset 25, -6
 234 0052 AF93      		push r26
 235               	.LCFI7:
 236               		.cfi_def_cfa_offset 8
 237               		.cfi_offset 26, -7
 238 0054 BF93      		push r27
 239               	.LCFI8:
 240               		.cfi_def_cfa_offset 9
 241               		.cfi_offset 27, -8
 242               	/* prologue: Signal */
 243               	/* frame size = 0 */
 244               	/* stack size = 8 */
 245               	.L__stack_usage = 8
  60:main.c        ****     cnt++;
 246               		.loc 1 60 0
 247 0056 8091 0000 		lds r24,cnt
 248 005a 9091 0000 		lds r25,cnt+1
 249 005e 0196      		adiw r24,1
 250 0060 9093 0000 		sts cnt+1,r25
 251 0064 8093 0000 		sts cnt,r24
  61:main.c        ****     if(cnt>=300){//occurs every 3s
 252               		.loc 1 61 0
 253 0068 8091 0000 		lds r24,cnt
 254 006c 9091 0000 		lds r25,cnt+1
 255 0070 8C32      		cpi r24,44
 256 0072 9140      		sbci r25,1
 257 0074 00F0      		brlo .L12
  62:main.c        ****         remainingTime-=3;
 258               		.loc 1 62 0
 259 0076 8091 0000 		lds r24,remainingTime
 260 007a 9091 0000 		lds r25,remainingTime+1
 261 007e A091 0000 		lds r26,remainingTime+2
 262 0082 B091 0000 		lds r27,remainingTime+3
 263 0086 0397      		sbiw r24,3
 264 0088 A109      		sbc r26,__zero_reg__
 265 008a B109      		sbc r27,__zero_reg__
 266 008c 8093 0000 		sts remainingTime,r24
 267 0090 9093 0000 		sts remainingTime+1,r25
 268 0094 A093 0000 		sts remainingTime+2,r26
 269 0098 B093 0000 		sts remainingTime+3,r27
  63:main.c        ****         if(remainingTime==0){//stop counter and de-energize relay
 270               		.loc 1 63 0
 271 009c 8091 0000 		lds r24,remainingTime
 272 00a0 9091 0000 		lds r25,remainingTime+1
 273 00a4 A091 0000 		lds r26,remainingTime+2
 274 00a8 B091 0000 		lds r27,remainingTime+3
 275 00ac 892B      		or r24,r25
 276 00ae 8A2B      		or r24,r26
 277 00b0 8B2B      		or r24,r27
 278 00b2 01F4      		brne .L13
  64:main.c        ****             LED_HIGH;
 279               		.loc 1 64 0
 280 00b4 C09A      		sbi 0x18,0
  65:main.c        ****             PORTD &=~(1<<PIND5);
 281               		.loc 1 65 0
 282 00b6 9598      		cbi 0x12,5
  66:main.c        ****             TCCR1B=0;
 283               		.loc 1 66 0
 284 00b8 1EBC      		out 0x2e,__zero_reg__
 285               	.L13:
  67:main.c        ****         }
  68:main.c        ****         showRemaining=1;
 286               		.loc 1 68 0
 287 00ba 81E0      		ldi r24,lo8(1)
 288 00bc 8093 0000 		sts showRemaining,r24
  69:main.c        ****         showValueLeft=remainingTime-3600;
 289               		.loc 1 69 0
 290 00c0 8091 0000 		lds r24,remainingTime
 291 00c4 9091 0000 		lds r25,remainingTime+1
 292 00c8 A091 0000 		lds r26,remainingTime+2
 293 00cc B091 0000 		lds r27,remainingTime+3
 294 00d0 8051      		subi r24,16
 295 00d2 9E40      		sbci r25,14
 296 00d4 A109      		sbc r26,__zero_reg__
 297 00d6 B109      		sbc r27,__zero_reg__
 298 00d8 8093 0000 		sts showValueLeft,r24
 299 00dc 9093 0000 		sts showValueLeft+1,r25
 300 00e0 A093 0000 		sts showValueLeft+2,r26
 301 00e4 B093 0000 		sts showValueLeft+3,r27
  70:main.c        ****         cnt=0;
 302               		.loc 1 70 0
 303 00e8 1092 0000 		sts cnt+1,__zero_reg__
 304 00ec 1092 0000 		sts cnt,__zero_reg__
 305               	.L12:
  71:main.c        ****     }
  72:main.c        ****     
  73:main.c        ****     if(showRemaining && (cnt&0x10)){
 306               		.loc 1 73 0
 307 00f0 8091 0000 		lds r24,showRemaining
 308 00f4 8823      		tst r24
 309 00f6 01F0      		breq .L11
 310               		.loc 1 73 0 is_stmt 0 discriminator 1
 311 00f8 8091 0000 		lds r24,cnt
 312 00fc 9091 0000 		lds r25,cnt+1
 313 0100 84FF      		sbrs r24,4
 314 0102 00C0      		rjmp .L11
  74:main.c        ****         LED_TOGGLE;
 315               		.loc 1 74 0 is_stmt 1
 316 0104 98B3      		in r25,0x18
 317 0106 81E0      		ldi r24,lo8(1)
 318 0108 8927      		eor r24,r25
 319 010a 88BB      		out 0x18,r24
  75:main.c        ****         showValueLeft-=225;
 320               		.loc 1 75 0
 321 010c 8091 0000 		lds r24,showValueLeft
 322 0110 9091 0000 		lds r25,showValueLeft+1
 323 0114 A091 0000 		lds r26,showValueLeft+2
 324 0118 B091 0000 		lds r27,showValueLeft+3
 325 011c 815E      		subi r24,-31
 326 011e 9109      		sbc r25,__zero_reg__
 327 0120 A109      		sbc r26,__zero_reg__
 328 0122 B109      		sbc r27,__zero_reg__
 329 0124 8093 0000 		sts showValueLeft,r24
 330 0128 9093 0000 		sts showValueLeft+1,r25
 331 012c A093 0000 		sts showValueLeft+2,r26
 332 0130 B093 0000 		sts showValueLeft+3,r27
  76:main.c        ****         if(showValueLeft<=0){
 333               		.loc 1 76 0
 334 0134 8091 0000 		lds r24,showValueLeft
 335 0138 9091 0000 		lds r25,showValueLeft+1
 336 013c A091 0000 		lds r26,showValueLeft+2
 337 0140 B091 0000 		lds r27,showValueLeft+3
 338 0144 1816      		cp __zero_reg__,r24
 339 0146 1906      		cpc __zero_reg__,r25
 340 0148 1A06      		cpc __zero_reg__,r26
 341 014a 1B06      		cpc __zero_reg__,r27
 342 014c 04F0      		brlt .L11
  77:main.c        ****             showRemaining=0;
 343               		.loc 1 77 0
 344 014e 1092 0000 		sts showRemaining,__zero_reg__
  78:main.c        ****             LED_LOW;
 345               		.loc 1 78 0
 346 0152 C098      		cbi 0x18,0
 347               	.L11:
 348               	/* epilogue start */
  79:main.c        ****         }
  80:main.c        ****     }
  81:main.c        **** }
 349               		.loc 1 81 0
 350 0154 BF91      		pop r27
 351 0156 AF91      		pop r26
 352 0158 9F91      		pop r25
 353 015a 8F91      		pop r24
 354 015c 2F91      		pop r18
 355 015e 0F90      		pop r0
 356 0160 0FBE      		out __SREG__,r0
 357 0162 0F90      		pop r0
 358 0164 1F90      		pop r1
 359 0166 1895      		reti
 360               		.cfi_endproc
 361               	.LFE9:
 363               		.comm	showValueLeft,4,1
 364               		.comm	nextShowTime,2,1
 365               	.global	showRemaining
 366               		.section .bss
 369               	showRemaining:
 370 0000 00        		.zero	1
 371               		.comm	remainingTime,4,1
 372               		.comm	setTime,4,1
 373               	.global	cnt
 376               	cnt:
 377 0001 0000      		.zero	2
 378               		.text
 379               	.Letext0:
 380               		.file 3 "/usr/lib/avr/include/stdint.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc7FILhK.s:2      *ABS*:000000000000003d __SP_L__
     /tmp/cc7FILhK.s:3      *ABS*:000000000000003f __SREG__
     /tmp/cc7FILhK.s:4      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc7FILhK.s:5      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc7FILhK.s:11     .text:0000000000000000 blink
     /tmp/cc7FILhK.s:78     .text.startup:0000000000000000 main
                            *COM*:0000000000000004 setTime
                            *COM*:0000000000000004 remainingTime
     /tmp/cc7FILhK.s:176    .text:000000000000002e __vector_5
     /tmp/cc7FILhK.s:207    .text:0000000000000042 __vector_4
     /tmp/cc7FILhK.s:376    .bss:0000000000000001 cnt
     /tmp/cc7FILhK.s:369    .bss:0000000000000000 showRemaining
                            *COM*:0000000000000004 showValueLeft
                            *COM*:0000000000000002 nextShowTime

UNDEFINED SYMBOLS
__mulhi3
__do_clear_bss
