
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001a6  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800062  00800062  0000023c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000573  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000486  00000000  00000000  0000082b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000010f  00000000  00000000  00000cb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  00000dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002d4  00000000  00000000  00000e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000009f  00000000  00000000  00001110  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000011af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	32 c0       	rjmp	.+100    	; 0x6e <__vector_4>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__vector_5>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e6 ea       	ldi	r30, 0xA6	; 166
  36:	f1 e0       	ldi	r31, 0x01	; 1
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_L__+0x1>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a2 36       	cpi	r26, 0x62	; 98
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	a2 e6       	ldi	r26, 0x62	; 98
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a3 37       	cpi	r26, 0x73	; 115
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	a0 d0       	rcall	.+320    	; 0x196 <main>
  56:	a5 c0       	rjmp	.+330    	; 0x1a2 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <__vector_5>:
    }
    return 0;
}     


ISR (TIMER1_OVF_vect){
  5a:	1f 92       	push	r1
  5c:	0f 92       	push	r0
  5e:	0f b6       	in	r0, 0x3f	; 63
  60:	0f 92       	push	r0
  62:	11 24       	eor	r1, r1
}
  64:	0f 90       	pop	r0
  66:	0f be       	out	0x3f, r0	; 63
  68:	0f 90       	pop	r0
  6a:	1f 90       	pop	r1
  6c:	18 95       	reti

0000006e <__vector_4>:

ISR(TIMER1_COMPA_vect){//occurs @100Hz
  6e:	1f 92       	push	r1
  70:	0f 92       	push	r0
  72:	0f b6       	in	r0, 0x3f	; 63
  74:	0f 92       	push	r0
  76:	11 24       	eor	r1, r1
  78:	2f 93       	push	r18
  7a:	8f 93       	push	r24
  7c:	9f 93       	push	r25
  7e:	af 93       	push	r26
  80:	bf 93       	push	r27
    cnt++;
  82:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <cnt>
  86:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <cnt+0x1>
  8a:	01 96       	adiw	r24, 0x01	; 1
  8c:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <cnt+0x1>
  90:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <cnt>
    if(cnt>=300){//occurs every 3s
  94:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <cnt>
  98:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <cnt+0x1>
  9c:	8c 32       	cpi	r24, 0x2C	; 44
  9e:	91 40       	sbci	r25, 0x01	; 1
  a0:	f0 f1       	brcs	.+124    	; 0x11e <__stack+0x3f>
        remainingTime-=3;
  a2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <remainingTime>
  a6:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <remainingTime+0x1>
  aa:	a0 91 67 00 	lds	r26, 0x0067	; 0x800067 <remainingTime+0x2>
  ae:	b0 91 68 00 	lds	r27, 0x0068	; 0x800068 <remainingTime+0x3>
  b2:	03 97       	sbiw	r24, 0x03	; 3
  b4:	a1 09       	sbc	r26, r1
  b6:	b1 09       	sbc	r27, r1
  b8:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <remainingTime>
  bc:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <remainingTime+0x1>
  c0:	a0 93 67 00 	sts	0x0067, r26	; 0x800067 <remainingTime+0x2>
  c4:	b0 93 68 00 	sts	0x0068, r27	; 0x800068 <remainingTime+0x3>
        if(remainingTime<=0){//stop counter and de-energize relay
  c8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <remainingTime>
  cc:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <remainingTime+0x1>
  d0:	a0 91 67 00 	lds	r26, 0x0067	; 0x800067 <remainingTime+0x2>
  d4:	b0 91 68 00 	lds	r27, 0x0068	; 0x800068 <remainingTime+0x3>
  d8:	18 16       	cp	r1, r24
  da:	19 06       	cpc	r1, r25
  dc:	1a 06       	cpc	r1, r26
  de:	1b 06       	cpc	r1, r27
  e0:	1c f0       	brlt	.+6      	; 0xe8 <__stack+0x9>
            LED_HIGH;
  e2:	c0 9a       	sbi	0x18, 0	; 24
            RELAY_OFF;
  e4:	95 98       	cbi	0x12, 5	; 18
            TCCR1B=0;
  e6:	1e bc       	out	0x2e, r1	; 46
        }
        showRemaining=1;
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
        showValueLeft=remainingTime-multiplier;
  ee:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <remainingTime>
  f2:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <remainingTime+0x1>
  f6:	a0 91 67 00 	lds	r26, 0x0067	; 0x800067 <remainingTime+0x2>
  fa:	b0 91 68 00 	lds	r27, 0x0068	; 0x800068 <remainingTime+0x3>
  fe:	80 51       	subi	r24, 0x10	; 16
 100:	9e 40       	sbci	r25, 0x0E	; 14
 102:	a1 09       	sbc	r26, r1
 104:	b1 09       	sbc	r27, r1
 106:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <showValueLeft>
 10a:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <showValueLeft+0x1>
 10e:	a0 93 6d 00 	sts	0x006D, r26	; 0x80006d <showValueLeft+0x2>
 112:	b0 93 6e 00 	sts	0x006E, r27	; 0x80006e <showValueLeft+0x3>
        cnt=0;
 116:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <cnt+0x1>
 11a:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <cnt>
    }
    
    if(showRemaining && (cnt&0x10)){
 11e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 122:	88 23       	and	r24, r24
 124:	71 f1       	breq	.+92     	; 0x182 <__stack+0xa3>
 126:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <cnt>
 12a:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <cnt+0x1>
 12e:	84 ff       	sbrs	r24, 4
 130:	28 c0       	rjmp	.+80     	; 0x182 <__stack+0xa3>
        LED_TOGGLE;
 132:	98 b3       	in	r25, 0x18	; 24
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	89 27       	eor	r24, r25
 138:	88 bb       	out	0x18, r24	; 24
        showValueLeft-=multiplier/16;
 13a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <showValueLeft>
 13e:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <showValueLeft+0x1>
 142:	a0 91 6d 00 	lds	r26, 0x006D	; 0x80006d <showValueLeft+0x2>
 146:	b0 91 6e 00 	lds	r27, 0x006E	; 0x80006e <showValueLeft+0x3>
 14a:	81 5e       	subi	r24, 0xE1	; 225
 14c:	91 09       	sbc	r25, r1
 14e:	a1 09       	sbc	r26, r1
 150:	b1 09       	sbc	r27, r1
 152:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <showValueLeft>
 156:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <showValueLeft+0x1>
 15a:	a0 93 6d 00 	sts	0x006D, r26	; 0x80006d <showValueLeft+0x2>
 15e:	b0 93 6e 00 	sts	0x006E, r27	; 0x80006e <showValueLeft+0x3>
        if(showValueLeft<=0){
 162:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <showValueLeft>
 166:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <showValueLeft+0x1>
 16a:	a0 91 6d 00 	lds	r26, 0x006D	; 0x80006d <showValueLeft+0x2>
 16e:	b0 91 6e 00 	lds	r27, 0x006E	; 0x80006e <showValueLeft+0x3>
 172:	18 16       	cp	r1, r24
 174:	19 06       	cpc	r1, r25
 176:	1a 06       	cpc	r1, r26
 178:	1b 06       	cpc	r1, r27
 17a:	1c f0       	brlt	.+6      	; 0x182 <__stack+0xa3>
            showRemaining=0;
 17c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
            LED_LOW;
 180:	c0 98       	cbi	0x18, 0	; 24
        }
    }
}
 182:	bf 91       	pop	r27
 184:	af 91       	pop	r26
 186:	9f 91       	pop	r25
 188:	8f 91       	pop	r24
 18a:	2f 91       	pop	r18
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <main>:
volatile uint8_t showRemaining=0;
volatile unsigned int nextShowTime;
volatile long showValueLeft;

int main(void){
    DDRB |= (1 << PINB0)|(1 << PIND5) ; //LED && relay init
 196:	87 b3       	in	r24, 0x17	; 23
 198:	81 62       	ori	r24, 0x21	; 33
 19a:	87 bb       	out	0x17, r24	; 23
    LED_HIGH;
 19c:	c0 9a       	sbi	0x18, 0	; 24
    RELAY_OFF;
 19e:	95 98       	cbi	0x12, 5	; 18
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <main+0xa>

000001a2 <_exit>:
 1a2:	f8 94       	cli

000001a4 <__stop_program>:
 1a4:	ff cf       	rjmp	.-2      	; 0x1a4 <__stop_program>
