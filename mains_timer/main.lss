
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000276  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000276  0000030a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800062  00800062  0000030c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000660  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000524  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001e8  00000000  00000000  00000f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  000010f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000325  00000000  00000000  00001180  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000151  00000000  00000000  000014a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000015f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	49 c0       	rjmp	.+146    	; 0x9c <__vector_4>
   a:	3e c0       	rjmp	.+124    	; 0x88 <__vector_5>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e6 e7       	ldi	r30, 0x76	; 118
  36:	f2 e0       	ldi	r31, 0x02	; 2
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_L__+0x1>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a2 36       	cpi	r26, 0x62	; 98
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	a2 e6       	ldi	r26, 0x62	; 98
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a3 37       	cpi	r26, 0x73	; 115
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	b6 d0       	rcall	.+364    	; 0x1c2 <main>
  56:	0d c1       	rjmp	.+538    	; 0x272 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <blink>:
#define LED_HIGH (PORTB |= 1<<PINB0)
#define LED_LOW (PORTB &=~(1<<PINB0))
#define LED_TOGGLE (PORTB ^=(1<<PINB0))

void blink(int nb){
    for(int i=0;i<nb;i++){
  5a:	20 e0       	ldi	r18, 0x00	; 0
  5c:	30 e0       	ldi	r19, 0x00	; 0
  5e:	28 17       	cp	r18, r24
  60:	39 07       	cpc	r19, r25
  62:	8c f4       	brge	.+34     	; 0x86 <blink+0x2c>
        LED_HIGH;
  64:	c0 9a       	sbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  66:	e5 ea       	ldi	r30, 0xA5	; 165
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	31 97       	sbiw	r30, 0x01	; 1
  6c:	f1 f7       	brne	.-4      	; 0x6a <blink+0x10>
  6e:	00 c0       	rjmp	.+0      	; 0x70 <blink+0x16>
  70:	00 00       	nop
        _delay_ms(15);
        LED_LOW;
  72:	c0 98       	cbi	0x18, 0	; 24
  74:	e1 e0       	ldi	r30, 0x01	; 1
  76:	f3 e5       	ldi	r31, 0x53	; 83
  78:	31 97       	sbiw	r30, 0x01	; 1
  7a:	f1 f7       	brne	.-4      	; 0x78 <blink+0x1e>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <blink+0x24>
  7e:	00 00       	nop
#define LED_HIGH (PORTB |= 1<<PINB0)
#define LED_LOW (PORTB &=~(1<<PINB0))
#define LED_TOGGLE (PORTB ^=(1<<PINB0))

void blink(int nb){
    for(int i=0;i<nb;i++){
  80:	2f 5f       	subi	r18, 0xFF	; 255
  82:	3f 4f       	sbci	r19, 0xFF	; 255
  84:	ec cf       	rjmp	.-40     	; 0x5e <blink+0x4>
        LED_HIGH;
        _delay_ms(15);
        LED_LOW;
        _delay_ms(85);
    }
}
  86:	08 95       	ret

00000088 <__vector_5>:
    }
    return 0;
}     


ISR (TIMER1_OVF_vect){
  88:	1f 92       	push	r1
  8a:	0f 92       	push	r0
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	0f 92       	push	r0
  90:	11 24       	eor	r1, r1
}
  92:	0f 90       	pop	r0
  94:	0f be       	out	0x3f, r0	; 63
  96:	0f 90       	pop	r0
  98:	1f 90       	pop	r1
  9a:	18 95       	reti

0000009c <__vector_4>:

ISR(TIMER1_COMPA_vect){//occurs @100Hz
  9c:	1f 92       	push	r1
  9e:	0f 92       	push	r0
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	0f 92       	push	r0
  a4:	11 24       	eor	r1, r1
  a6:	2f 93       	push	r18
  a8:	8f 93       	push	r24
  aa:	9f 93       	push	r25
  ac:	af 93       	push	r26
  ae:	bf 93       	push	r27
    cnt++;
  b0:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <cnt>
  b4:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <cnt+0x1>
  b8:	01 96       	adiw	r24, 0x01	; 1
  ba:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <cnt+0x1>
  be:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <cnt>
    if(cnt>=300){//occurs every 3s
  c2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <cnt>
  c6:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <cnt+0x1>
  ca:	8c 32       	cpi	r24, 0x2C	; 44
  cc:	91 40       	sbci	r25, 0x01	; 1
  ce:	e8 f1       	brcs	.+122    	; 0x14a <__stack+0x6b>
        remainingTime-=3;
  d0:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <remainingTime>
  d4:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <remainingTime+0x1>
  d8:	a0 91 67 00 	lds	r26, 0x0067	; 0x800067 <remainingTime+0x2>
  dc:	b0 91 68 00 	lds	r27, 0x0068	; 0x800068 <remainingTime+0x3>
  e0:	03 97       	sbiw	r24, 0x03	; 3
  e2:	a1 09       	sbc	r26, r1
  e4:	b1 09       	sbc	r27, r1
  e6:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <remainingTime>
  ea:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <remainingTime+0x1>
  ee:	a0 93 67 00 	sts	0x0067, r26	; 0x800067 <remainingTime+0x2>
  f2:	b0 93 68 00 	sts	0x0068, r27	; 0x800068 <remainingTime+0x3>
        if(remainingTime==0){//stop counter and de-energize relay
  f6:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <remainingTime>
  fa:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <remainingTime+0x1>
  fe:	a0 91 67 00 	lds	r26, 0x0067	; 0x800067 <remainingTime+0x2>
 102:	b0 91 68 00 	lds	r27, 0x0068	; 0x800068 <remainingTime+0x3>
 106:	89 2b       	or	r24, r25
 108:	8a 2b       	or	r24, r26
 10a:	8b 2b       	or	r24, r27
 10c:	19 f4       	brne	.+6      	; 0x114 <__stack+0x35>
            LED_HIGH;
 10e:	c0 9a       	sbi	0x18, 0	; 24
            PORTD &=~(1<<PIND5);
 110:	95 98       	cbi	0x12, 5	; 18
            TCCR1B=0;
 112:	1e bc       	out	0x2e, r1	; 46
        }
        showRemaining=1;
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
        showValueLeft=remainingTime-multiplier;
 11a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <remainingTime>
 11e:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <remainingTime+0x1>
 122:	a0 91 67 00 	lds	r26, 0x0067	; 0x800067 <remainingTime+0x2>
 126:	b0 91 68 00 	lds	r27, 0x0068	; 0x800068 <remainingTime+0x3>
 12a:	80 51       	subi	r24, 0x10	; 16
 12c:	9e 40       	sbci	r25, 0x0E	; 14
 12e:	a1 09       	sbc	r26, r1
 130:	b1 09       	sbc	r27, r1
 132:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <showValueLeft>
 136:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <showValueLeft+0x1>
 13a:	a0 93 6d 00 	sts	0x006D, r26	; 0x80006d <showValueLeft+0x2>
 13e:	b0 93 6e 00 	sts	0x006E, r27	; 0x80006e <showValueLeft+0x3>
        cnt=0;
 142:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <cnt+0x1>
 146:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <cnt>
    }
    
    if(showRemaining && (cnt&0x10)){
 14a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 14e:	88 23       	and	r24, r24
 150:	71 f1       	breq	.+92     	; 0x1ae <__stack+0xcf>
 152:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <cnt>
 156:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <cnt+0x1>
 15a:	84 ff       	sbrs	r24, 4
 15c:	28 c0       	rjmp	.+80     	; 0x1ae <__stack+0xcf>
        LED_TOGGLE;
 15e:	98 b3       	in	r25, 0x18	; 24
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	89 27       	eor	r24, r25
 164:	88 bb       	out	0x18, r24	; 24
        showValueLeft-=multiplier/16;
 166:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <showValueLeft>
 16a:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <showValueLeft+0x1>
 16e:	a0 91 6d 00 	lds	r26, 0x006D	; 0x80006d <showValueLeft+0x2>
 172:	b0 91 6e 00 	lds	r27, 0x006E	; 0x80006e <showValueLeft+0x3>
 176:	81 5e       	subi	r24, 0xE1	; 225
 178:	91 09       	sbc	r25, r1
 17a:	a1 09       	sbc	r26, r1
 17c:	b1 09       	sbc	r27, r1
 17e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <showValueLeft>
 182:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <showValueLeft+0x1>
 186:	a0 93 6d 00 	sts	0x006D, r26	; 0x80006d <showValueLeft+0x2>
 18a:	b0 93 6e 00 	sts	0x006E, r27	; 0x80006e <showValueLeft+0x3>
        if(showValueLeft<=0){
 18e:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <showValueLeft>
 192:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <showValueLeft+0x1>
 196:	a0 91 6d 00 	lds	r26, 0x006D	; 0x80006d <showValueLeft+0x2>
 19a:	b0 91 6e 00 	lds	r27, 0x006E	; 0x80006e <showValueLeft+0x3>
 19e:	18 16       	cp	r1, r24
 1a0:	19 06       	cpc	r1, r25
 1a2:	1a 06       	cpc	r1, r26
 1a4:	1b 06       	cpc	r1, r27
 1a6:	1c f0       	brlt	.+6      	; 0x1ae <__stack+0xcf>
            showRemaining=0;
 1a8:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
            LED_LOW;
 1ac:	c0 98       	cbi	0x18, 0	; 24
        }
    }
}
 1ae:	bf 91       	pop	r27
 1b0:	af 91       	pop	r26
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	2f 91       	pop	r18
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <main>:
volatile uint8_t showRemaining=0;
volatile unsigned int nextShowTime;
volatile long showValueLeft;

int main(void){
    DDRB |= (1 << PINB0)|(1 << PIND5) ; //LED && relay init
 1c2:	87 b3       	in	r24, 0x17	; 23
 1c4:	81 62       	ori	r24, 0x21	; 33
 1c6:	87 bb       	out	0x17, r24	; 23
    LED_LOW;
 1c8:	c0 98       	cbi	0x18, 0	; 24
    PORTD &=~(1<<PIND5);
 1ca:	95 98       	cbi	0x12, 5	; 18
    
    DDRD &=~(1<<PIND6);//Button
 1cc:	8e 98       	cbi	0x11, 6	; 17
    PORTD |=(1<<PIND6);
 1ce:	96 9a       	sbi	0x12, 6	; 18
    
    DDRB &=~(0x1E); //sw init
 1d0:	87 b3       	in	r24, 0x17	; 23
 1d2:	81 7e       	andi	r24, 0xE1	; 225
 1d4:	87 bb       	out	0x17, r24	; 23
    PORTB |=(0x1E);
 1d6:	88 b3       	in	r24, 0x18	; 24
 1d8:	8e 61       	ori	r24, 0x1E	; 30
 1da:	88 bb       	out	0x18, r24	; 24
    
    TIMSK |=(1<<TOIE1)|(1<<OCIE1A);//timer init
 1dc:	89 b7       	in	r24, 0x39	; 57
 1de:	80 6c       	ori	r24, 0xC0	; 192
 1e0:	89 bf       	out	0x39, r24	; 57
	TCCR1A = 0x00;
 1e2:	1f bc       	out	0x2f, r1	; 47
    TCNT1 = 0x0000; 
 1e4:	1d bc       	out	0x2d, r1	; 45
 1e6:	1c bc       	out	0x2c, r1	; 44
    OCR1A = 625-1; //4MHz/8=500kHz -> /625=100Hz
 1e8:	80 e7       	ldi	r24, 0x70	; 112
 1ea:	92 e0       	ldi	r25, 0x02	; 2
 1ec:	9b bd       	out	0x2b, r25	; 43
 1ee:	8a bd       	out	0x2a, r24	; 42
    
    sei();//enable global interrupts
 1f0:	78 94       	sei
    
    while(1){
        if(!(PIND&(1<<PIND6))){
            setTime=(15-((PINB & 0x1E)>>1))*multiplier;
 1f2:	2f e0       	ldi	r18, 0x0F	; 15
 1f4:	30 e0       	ldi	r19, 0x00	; 0
    OCR1A = 625-1; //4MHz/8=500kHz -> /625=100Hz
    
    sei();//enable global interrupts
    
    while(1){
        if(!(PIND&(1<<PIND6))){
 1f6:	86 99       	sbic	0x10, 6	; 16
 1f8:	fe cf       	rjmp	.-4      	; 0x1f6 <main+0x34>
            setTime=(15-((PINB & 0x1E)>>1))*multiplier;
 1fa:	86 b3       	in	r24, 0x16	; 22
 1fc:	8e 71       	andi	r24, 0x1E	; 30
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	95 95       	asr	r25
 202:	87 95       	ror	r24
 204:	a9 01       	movw	r20, r18
 206:	48 1b       	sub	r20, r24
 208:	59 0b       	sbc	r21, r25
 20a:	ca 01       	movw	r24, r20
 20c:	60 e1       	ldi	r22, 0x10	; 16
 20e:	7e e0       	ldi	r23, 0x0E	; 14
 210:	1f d0       	rcall	.+62     	; 0x250 <__mulhi3>
 212:	a0 e0       	ldi	r26, 0x00	; 0
 214:	b0 e0       	ldi	r27, 0x00	; 0
 216:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <setTime>
 21a:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <setTime+0x1>
 21e:	a0 93 71 00 	sts	0x0071, r26	; 0x800071 <setTime+0x2>
 222:	b0 93 72 00 	sts	0x0072, r27	; 0x800072 <setTime+0x3>
            remainingTime=setTime;
 226:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <setTime>
 22a:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <setTime+0x1>
 22e:	a0 91 71 00 	lds	r26, 0x0071	; 0x800071 <setTime+0x2>
 232:	b0 91 72 00 	lds	r27, 0x0072	; 0x800072 <setTime+0x3>
 236:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <remainingTime>
 23a:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <remainingTime+0x1>
 23e:	a0 93 67 00 	sts	0x0067, r26	; 0x800067 <remainingTime+0x2>
 242:	b0 93 68 00 	sts	0x0068, r27	; 0x800068 <remainingTime+0x3>
            TCCR1B |=(1<<CS11)|(1<<WGM12); // /1024, CTC on OCR1A
 246:	8e b5       	in	r24, 0x2e	; 46
 248:	8a 60       	ori	r24, 0x0A	; 10
 24a:	8e bd       	out	0x2e, r24	; 46
            PORTD |=(1<<PIND5);
 24c:	95 9a       	sbi	0x12, 5	; 18
 24e:	d3 cf       	rjmp	.-90     	; 0x1f6 <main+0x34>

00000250 <__mulhi3>:
 250:	00 24       	eor	r0, r0
 252:	55 27       	eor	r21, r21
 254:	04 c0       	rjmp	.+8      	; 0x25e <__mulhi3+0xe>
 256:	08 0e       	add	r0, r24
 258:	59 1f       	adc	r21, r25
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	00 97       	sbiw	r24, 0x00	; 0
 260:	29 f0       	breq	.+10     	; 0x26c <__mulhi3+0x1c>
 262:	76 95       	lsr	r23
 264:	67 95       	ror	r22
 266:	b8 f3       	brcs	.-18     	; 0x256 <__mulhi3+0x6>
 268:	71 05       	cpc	r23, r1
 26a:	b9 f7       	brne	.-18     	; 0x25a <__mulhi3+0xa>
 26c:	80 2d       	mov	r24, r0
 26e:	95 2f       	mov	r25, r21
 270:	08 95       	ret

00000272 <_exit>:
 272:	f8 94       	cli

00000274 <__stop_program>:
 274:	ff cf       	rjmp	.-2      	; 0x274 <__stop_program>
