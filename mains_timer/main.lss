
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000020a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000020a  0000029e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800060  00800060  0000029e  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000029e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000649  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000051d  00000000  00000000  00000961  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001d6  00000000  00000000  00000e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000084  00000000  00000000  00001054  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000031a  00000000  00000000  000010d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000144  00000000  00000000  000013f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001536  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	1f c0       	rjmp	.+62     	; 0x42 <__bad_interrupt>
   4:	1e c0       	rjmp	.+60     	; 0x42 <__bad_interrupt>
   6:	1d c0       	rjmp	.+58     	; 0x42 <__bad_interrupt>
   8:	3e c0       	rjmp	.+124    	; 0x86 <__vector_4>
   a:	33 c0       	rjmp	.+102    	; 0x72 <__vector_5>
   c:	1a c0       	rjmp	.+52     	; 0x42 <__bad_interrupt>
   e:	19 c0       	rjmp	.+50     	; 0x42 <__bad_interrupt>
  10:	18 c0       	rjmp	.+48     	; 0x42 <__bad_interrupt>
  12:	17 c0       	rjmp	.+46     	; 0x42 <__bad_interrupt>
  14:	16 c0       	rjmp	.+44     	; 0x42 <__bad_interrupt>
  16:	15 c0       	rjmp	.+42     	; 0x42 <__bad_interrupt>
  18:	14 c0       	rjmp	.+40     	; 0x42 <__bad_interrupt>
  1a:	13 c0       	rjmp	.+38     	; 0x42 <__bad_interrupt>
  1c:	12 c0       	rjmp	.+36     	; 0x42 <__bad_interrupt>
  1e:	11 c0       	rjmp	.+34     	; 0x42 <__bad_interrupt>
  20:	10 c0       	rjmp	.+32     	; 0x42 <__bad_interrupt>
  22:	0f c0       	rjmp	.+30     	; 0x42 <__bad_interrupt>
  24:	0e c0       	rjmp	.+28     	; 0x42 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_clear_bss>:
  2e:	20 e0       	ldi	r18, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	01 c0       	rjmp	.+2      	; 0x38 <.do_clear_bss_start>

00000036 <.do_clear_bss_loop>:
  36:	1d 92       	st	X+, r1

00000038 <.do_clear_bss_start>:
  38:	a1 37       	cpi	r26, 0x71	; 113
  3a:	b2 07       	cpc	r27, r18
  3c:	e1 f7       	brne	.-8      	; 0x36 <.do_clear_bss_loop>
  3e:	74 d0       	rcall	.+232    	; 0x128 <main>
  40:	e2 c0       	rjmp	.+452    	; 0x206 <_exit>

00000042 <__bad_interrupt>:
  42:	de cf       	rjmp	.-68     	; 0x0 <__vectors>

00000044 <blink>:
#define LED_HIGH (PORTD |= 1<<PIND5)
#define LED_LOW (PORTD &=~(1<<PIND5))
#define LED_TOGGLE (PORTD ^=(1<<PIND5))

void blink(int nb){
    for(int i=0;i<nb;i++){
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	30 e0       	ldi	r19, 0x00	; 0
  48:	28 17       	cp	r18, r24
  4a:	39 07       	cpc	r19, r25
  4c:	8c f4       	brge	.+34     	; 0x70 <blink+0x2c>
        LED_HIGH;
  4e:	95 9a       	sbi	0x12, 5	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  50:	e5 ea       	ldi	r30, 0xA5	; 165
  52:	fe e0       	ldi	r31, 0x0E	; 14
  54:	31 97       	sbiw	r30, 0x01	; 1
  56:	f1 f7       	brne	.-4      	; 0x54 <blink+0x10>
  58:	00 c0       	rjmp	.+0      	; 0x5a <blink+0x16>
  5a:	00 00       	nop
        _delay_ms(15);
        LED_LOW;
  5c:	95 98       	cbi	0x12, 5	; 18
  5e:	e1 e0       	ldi	r30, 0x01	; 1
  60:	f3 e5       	ldi	r31, 0x53	; 83
  62:	31 97       	sbiw	r30, 0x01	; 1
  64:	f1 f7       	brne	.-4      	; 0x62 <blink+0x1e>
  66:	00 c0       	rjmp	.+0      	; 0x68 <blink+0x24>
  68:	00 00       	nop
#define LED_HIGH (PORTD |= 1<<PIND5)
#define LED_LOW (PORTD &=~(1<<PIND5))
#define LED_TOGGLE (PORTD ^=(1<<PIND5))

void blink(int nb){
    for(int i=0;i<nb;i++){
  6a:	2f 5f       	subi	r18, 0xFF	; 255
  6c:	3f 4f       	sbci	r19, 0xFF	; 255
  6e:	ec cf       	rjmp	.-40     	; 0x48 <blink+0x4>
        LED_HIGH;
        _delay_ms(15);
        LED_LOW;
        _delay_ms(85);
    }
}
  70:	08 95       	ret

00000072 <__vector_5>:
    }
    return 0;
}     


ISR (TIMER1_OVF_vect){
  72:	1f 92       	push	r1
  74:	0f 92       	push	r0
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	0f 92       	push	r0
  7a:	11 24       	eor	r1, r1
}
  7c:	0f 90       	pop	r0
  7e:	0f be       	out	0x3f, r0	; 63
  80:	0f 90       	pop	r0
  82:	1f 90       	pop	r1
  84:	18 95       	reti

00000086 <__vector_4>:

ISR(TIMER1_COMPA_vect){//occurs @100Hz
  86:	1f 92       	push	r1
  88:	0f 92       	push	r0
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	0f 92       	push	r0
  8e:	11 24       	eor	r1, r1
  90:	8f 93       	push	r24
  92:	9f 93       	push	r25
  94:	af 93       	push	r26
  96:	bf 93       	push	r27
    cnt++;
  98:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <cnt>
  9c:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <cnt+0x1>
  a0:	01 96       	adiw	r24, 0x01	; 1
  a2:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <cnt+0x1>
  a6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <cnt>
    if(cnt>=100){//occurs @1Hz
  aa:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <cnt>
  ae:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <cnt+0x1>
  b2:	84 36       	cpi	r24, 0x64	; 100
  b4:	91 05       	cpc	r25, r1
  b6:	78 f1       	brcs	.+94     	; 0x116 <__stack+0x37>
        remainingTime--;
  b8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <remainingTime>
  bc:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <remainingTime+0x1>
  c0:	a0 91 65 00 	lds	r26, 0x0065	; 0x800065 <remainingTime+0x2>
  c4:	b0 91 66 00 	lds	r27, 0x0066	; 0x800066 <remainingTime+0x3>
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	a1 09       	sbc	r26, r1
  cc:	b1 09       	sbc	r27, r1
  ce:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <remainingTime>
  d2:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <remainingTime+0x1>
  d6:	a0 93 65 00 	sts	0x0065, r26	; 0x800065 <remainingTime+0x2>
  da:	b0 93 66 00 	sts	0x0066, r27	; 0x800066 <remainingTime+0x3>
        if(remainingTime==0){//
  de:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <remainingTime>
  e2:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <remainingTime+0x1>
  e6:	a0 91 65 00 	lds	r26, 0x0065	; 0x800065 <remainingTime+0x2>
  ea:	b0 91 66 00 	lds	r27, 0x0066	; 0x800066 <remainingTime+0x3>
  ee:	89 2b       	or	r24, r25
  f0:	8a 2b       	or	r24, r26
  f2:	8b 2b       	or	r24, r27
  f4:	19 f4       	brne	.+6      	; 0xfc <__stack+0x1d>
            LED_HIGH;
  f6:	95 9a       	sbi	0x12, 5	; 18
            PORTD &=~(1<<PIND4);
  f8:	94 98       	cbi	0x12, 4	; 18
            TCCR1B=0;
  fa:	1e bc       	out	0x2e, r1	; 46
        }
        showRemaining=1;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
        nextShowTime=5;
 102:	85 e0       	ldi	r24, 0x05	; 5
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <nextShowTime+0x1>
 10a:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <nextShowTime>
        cnt=0;
 10e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <cnt+0x1>
 112:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <cnt>
    }
}
 116:	bf 91       	pop	r27
 118:	af 91       	pop	r26
 11a:	9f 91       	pop	r25
 11c:	8f 91       	pop	r24
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <main>:
volatile uint8_t showRemaining=0;
volatile unsigned int nextShowTime;
volatile long showValueLeft;

int main(void){
    DDRD |= (1 << PIND5)|(1 << PIND4) ; //LED && relay init
 128:	81 b3       	in	r24, 0x11	; 17
 12a:	80 63       	ori	r24, 0x30	; 48
 12c:	81 bb       	out	0x11, r24	; 17
    LED_LOW;
 12e:	95 98       	cbi	0x12, 5	; 18
    PORTD &=~(1<<PIND4);
 130:	94 98       	cbi	0x12, 4	; 18
    
    DDRD &=~(1<<PIND6);
 132:	8e 98       	cbi	0x11, 6	; 17
    PORTD |=(1<<PIND6);
 134:	96 9a       	sbi	0x12, 6	; 18
    
    DDRB &=~(0x0F); //sw init
 136:	87 b3       	in	r24, 0x17	; 23
 138:	80 7f       	andi	r24, 0xF0	; 240
 13a:	87 bb       	out	0x17, r24	; 23
    PORTB |=(0x0F);
 13c:	88 b3       	in	r24, 0x18	; 24
 13e:	8f 60       	ori	r24, 0x0F	; 15
 140:	88 bb       	out	0x18, r24	; 24
    
    TIMSK |=(1<<TOIE1)|(1<<OCIE1A);//timer init
 142:	89 b7       	in	r24, 0x39	; 57
 144:	80 6c       	ori	r24, 0xC0	; 192
 146:	89 bf       	out	0x39, r24	; 57
	TCCR1A = 0x00;
 148:	1f bc       	out	0x2f, r1	; 47
    TCNT1 = 0x0000; 
 14a:	1d bc       	out	0x2d, r1	; 45
 14c:	1c bc       	out	0x2c, r1	; 44
    OCR1A = 625-1; //4MHz/8=500kHz -> /625=100Hz
 14e:	80 e7       	ldi	r24, 0x70	; 112
 150:	92 e0       	ldi	r25, 0x02	; 2
 152:	9b bd       	out	0x2b, r25	; 43
 154:	8a bd       	out	0x2a, r24	; 42
    
    sei();//enable global interrupts
 156:	78 94       	sei
            TCCR1B |=(1<<CS11)|(1<<WGM12); // /1024, CTC on OCR1A
            PORTD |=(1<<PIND4);
        }
        if(showRemaining && (TCNT1>=nextShowTime)){
            nextShowTime+=5;
            LED_TOGGLE;
 158:	20 e2       	ldi	r18, 0x20	; 32
    OCR1A = 625-1; //4MHz/8=500kHz -> /625=100Hz
    
    sei();//enable global interrupts
    
    while(1){
        if(!(PIND&(1<<PIND6))){
 15a:	86 99       	sbic	0x10, 6	; 16
 15c:	29 c0       	rjmp	.+82     	; 0x1b0 <main+0x88>
            setTime=(15-(PINB & 0x0F))*10;//3600;
 15e:	86 b3       	in	r24, 0x16	; 22
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	80 95       	com	r24
 164:	90 95       	com	r25
 166:	8f 70       	andi	r24, 0x0F	; 15
 168:	99 27       	eor	r25, r25
 16a:	6a e0       	ldi	r22, 0x0A	; 10
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	3a d0       	rcall	.+116    	; 0x1e4 <__mulhi3>
 170:	09 2e       	mov	r0, r25
 172:	00 0c       	add	r0, r0
 174:	aa 0b       	sbc	r26, r26
 176:	bb 0b       	sbc	r27, r27
 178:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <setTime>
 17c:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <setTime+0x1>
 180:	a0 93 6f 00 	sts	0x006F, r26	; 0x80006f <setTime+0x2>
 184:	b0 93 70 00 	sts	0x0070, r27	; 0x800070 <setTime+0x3>
            remainingTime=setTime;
 188:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <setTime>
 18c:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <setTime+0x1>
 190:	a0 91 6f 00 	lds	r26, 0x006F	; 0x80006f <setTime+0x2>
 194:	b0 91 70 00 	lds	r27, 0x0070	; 0x800070 <setTime+0x3>
 198:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <remainingTime>
 19c:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <remainingTime+0x1>
 1a0:	a0 93 65 00 	sts	0x0065, r26	; 0x800065 <remainingTime+0x2>
 1a4:	b0 93 66 00 	sts	0x0066, r27	; 0x800066 <remainingTime+0x3>
            TCCR1B |=(1<<CS11)|(1<<WGM12); // /1024, CTC on OCR1A
 1a8:	8e b5       	in	r24, 0x2e	; 46
 1aa:	8a 60       	ori	r24, 0x0A	; 10
 1ac:	8e bd       	out	0x2e, r24	; 46
            PORTD |=(1<<PIND4);
 1ae:	94 9a       	sbi	0x12, 4	; 18
        }
        if(showRemaining && (TCNT1>=nextShowTime)){
 1b0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 1b4:	88 23       	and	r24, r24
 1b6:	89 f2       	breq	.-94     	; 0x15a <main+0x32>
 1b8:	4c b5       	in	r20, 0x2c	; 44
 1ba:	5d b5       	in	r21, 0x2d	; 45
 1bc:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <nextShowTime>
 1c0:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <nextShowTime+0x1>
 1c4:	48 17       	cp	r20, r24
 1c6:	59 07       	cpc	r21, r25
 1c8:	40 f2       	brcs	.-112    	; 0x15a <main+0x32>
            nextShowTime+=5;
 1ca:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <nextShowTime>
 1ce:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <nextShowTime+0x1>
 1d2:	05 96       	adiw	r24, 0x05	; 5
 1d4:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <nextShowTime+0x1>
 1d8:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <nextShowTime>
            LED_TOGGLE;
 1dc:	82 b3       	in	r24, 0x12	; 18
 1de:	82 27       	eor	r24, r18
 1e0:	82 bb       	out	0x12, r24	; 18
 1e2:	bb cf       	rjmp	.-138    	; 0x15a <main+0x32>

000001e4 <__mulhi3>:
 1e4:	00 24       	eor	r0, r0
 1e6:	55 27       	eor	r21, r21
 1e8:	04 c0       	rjmp	.+8      	; 0x1f2 <__mulhi3+0xe>
 1ea:	08 0e       	add	r0, r24
 1ec:	59 1f       	adc	r21, r25
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	00 97       	sbiw	r24, 0x00	; 0
 1f4:	29 f0       	breq	.+10     	; 0x200 <__mulhi3+0x1c>
 1f6:	76 95       	lsr	r23
 1f8:	67 95       	ror	r22
 1fa:	b8 f3       	brcs	.-18     	; 0x1ea <__mulhi3+0x6>
 1fc:	71 05       	cpc	r23, r1
 1fe:	b9 f7       	brne	.-18     	; 0x1ee <__mulhi3+0xa>
 200:	80 2d       	mov	r24, r0
 202:	95 2f       	mov	r25, r21
 204:	08 95       	ret

00000206 <_exit>:
 206:	f8 94       	cli

00000208 <__stop_program>:
 208:	ff cf       	rjmp	.-2      	; 0x208 <__stop_program>
