
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000270  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000270  00000304  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  0080007a  0080007a  0000031e  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000031e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000091  00000000  00000000  0000033e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001e4  00000000  00000000  000003cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000fa  00000000  00000000  000005b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000021f  00000000  00000000  000006ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000008cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000f1  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a7  00000000  00000000  00000a2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	68 c0       	rjmp	.+208    	; 0xda <__vector_4>
   a:	d3 c0       	rjmp	.+422    	; 0x1b2 <__vector_5>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e0 e7       	ldi	r30, 0x70	; 112
  32:	f2 e0       	ldi	r31, 0x02	; 2
  34:	02 c0       	rjmp	.+4      	; 0x3a <.do_copy_data_start>

00000036 <.do_copy_data_loop>:
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0

0000003a <.do_copy_data_start>:
  3a:	aa 37       	cpi	r26, 0x7A	; 122
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <.do_copy_data_loop>

00000040 <__do_clear_bss>:
  40:	10 e0       	ldi	r17, 0x00	; 0
  42:	aa e7       	ldi	r26, 0x7A	; 122
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a3 38       	cpi	r26, 0x83	; 131
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	17 d0       	rcall	.+46     	; 0x80 <main>
  52:	0c c1       	rjmp	.+536    	; 0x26c <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <shift>:
ISR(TIMER1_OVF_vect){
	displayNumber(i++);
	
}
void shift(void) {
  PORTB &=~(1<<verrou);
  56:	c3 98       	cbi	0x18, 3	; 24
  58:	20 e0       	ldi	r18, 0x00	; 0
  5a:	30 e0       	ldi	r19, 0x00	; 0
  int i;
  for (i = 0; i < 16; i++) {
	PORTB &=~(1<<horloge);
  5c:	c4 98       	cbi	0x18, 4	; 24
	if( state[i]){
  5e:	f9 01       	movw	r30, r18
  60:	e0 5a       	subi	r30, 0xA0	; 160
  62:	ff 4f       	sbci	r31, 0xFF	; 255
  64:	80 81       	ld	r24, Z
  66:	88 23       	and	r24, r24
  68:	11 f0       	breq	.+4      	; 0x6e <shift+0x18>
	PORTB |=(1<<data);
  6a:	c1 9a       	sbi	0x18, 1	; 24
  6c:	01 c0       	rjmp	.+2      	; 0x70 <shift+0x1a>
	}else{
	PORTB &=~(1<<data);
  6e:	c1 98       	cbi	0x18, 1	; 24
	}
	PORTB |=(1<<horloge);
  70:	c4 9a       	sbi	0x18, 4	; 24
	
}
void shift(void) {
  PORTB &=~(1<<verrou);
  int i;
  for (i = 0; i < 16; i++) {
  72:	2f 5f       	subi	r18, 0xFF	; 255
  74:	3f 4f       	sbci	r19, 0xFF	; 255
  76:	20 31       	cpi	r18, 0x10	; 16
  78:	31 05       	cpc	r19, r1
  7a:	81 f7       	brne	.-32     	; 0x5c <shift+0x6>
	}else{
	PORTB &=~(1<<data);
	}
	PORTB |=(1<<horloge);
  }
	PORTB |=(1<<verrou);
  7c:	c3 9a       	sbi	0x18, 3	; 24
}
  7e:	08 95       	ret

00000080 <main>:
void displaySingle(unsigned char digit, unsigned int nb);
void displayNumber(unsigned int number);
volatile uint16_t i=32000;
int main(void){

	DDRB |=1<<verrou | 1<<horloge | 1<<data;
  80:	87 b3       	in	r24, 0x17	; 23
  82:	8a 61       	ori	r24, 0x1A	; 26
  84:	87 bb       	out	0x17, r24	; 23
	shift();
  86:	e7 df       	rcall	.-50     	; 0x56 <shift>
	TCCR0A|=0<<WGM02|0<<WGM01|0<<WGM00;//multiplex timer
  88:	8a b5       	in	r24, 0x2a	; 42
  8a:	8a bd       	out	0x2a, r24	; 42
	TIMSK|=1<<TOIE0 | 1<<TOIE1; // interrupts for both
  8c:	89 b7       	in	r24, 0x39	; 57
  8e:	86 60       	ori	r24, 0x06	; 6
  90:	89 bf       	out	0x39, r24	; 57
	
	sei();
  92:	78 94       	sei
	
	TCCR1|=0<<CS13|1<<CS11|1<<CS12|0<<CS10; // counter timer
  94:	80 b7       	in	r24, 0x30	; 48
  96:	86 60       	ori	r24, 0x06	; 6
  98:	80 bf       	out	0x30, r24	; 48
	TCCR0B|=0<<CS02|1<<CS01|0<<CS00;// /8:010 /64:011 /1024:101
  9a:	83 b7       	in	r24, 0x33	; 51
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	83 bf       	out	0x33, r24	; 51
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <main+0x20>

000000a2 <displayNumber>:
	}
	PORTB |=(1<<horloge);
  }
	PORTB |=(1<<verrou);
}
void displayNumber(unsigned int number) {
  a2:	1f 93       	push	r17
  a4:	18 2f       	mov	r17, r24
  a6:	49 2f       	mov	r20, r25
  a8:	20 e0       	ldi	r18, 0x00	; 0
  aa:	30 e0       	ldi	r19, 0x00	; 0
	int i;
	for (i = 0; i<8; i++) {
		nums[i]=number%10;
  ac:	81 2f       	mov	r24, r17
  ae:	94 2f       	mov	r25, r20
  b0:	6a e0       	ldi	r22, 0x0A	; 10
  b2:	70 e0       	ldi	r23, 0x00	; 0
  b4:	b4 d0       	rcall	.+360    	; 0x21e <__udivmodhi4>
  b6:	f9 01       	movw	r30, r18
  b8:	e6 58       	subi	r30, 0x86	; 134
  ba:	ff 4f       	sbci	r31, 0xFF	; 255
  bc:	80 83       	st	Z, r24
		number/=10;
  be:	81 2f       	mov	r24, r17
  c0:	94 2f       	mov	r25, r20
  c2:	6a e0       	ldi	r22, 0x0A	; 10
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	ab d0       	rcall	.+342    	; 0x21e <__udivmodhi4>
  c8:	16 2f       	mov	r17, r22
  ca:	47 2f       	mov	r20, r23
  }
	PORTB |=(1<<verrou);
}
void displayNumber(unsigned int number) {
	int i;
	for (i = 0; i<8; i++) {
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	28 30       	cpi	r18, 0x08	; 8
  d2:	31 05       	cpc	r19, r1
  d4:	59 f7       	brne	.-42     	; 0xac <displayNumber+0xa>
		nums[i]=number%10;
		number/=10;
	}
}
  d6:	1f 91       	pop	r17
  d8:	08 95       	ret

000000da <__vector_4>:

ISR(TIMER0_OVF_vect){
	displaySingle(n,nums[n]);
	n=(n+1)%6;
}
ISR(TIMER1_OVF_vect){
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	2f 93       	push	r18
  e6:	3f 93       	push	r19
  e8:	4f 93       	push	r20
  ea:	5f 93       	push	r21
  ec:	6f 93       	push	r22
  ee:	7f 93       	push	r23
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
  f4:	af 93       	push	r26
  f6:	bf 93       	push	r27
  f8:	ef 93       	push	r30
  fa:	ff 93       	push	r31
	displayNumber(i++);
  fc:	80 91 78 00 	lds	r24, 0x0078
 100:	90 91 79 00 	lds	r25, 0x0079
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	90 93 79 00 	sts	0x0079, r25
 10a:	80 93 78 00 	sts	0x0078, r24
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	c8 df       	rcall	.-112    	; 0xa2 <displayNumber>
	
}
 112:	ff 91       	pop	r31
 114:	ef 91       	pop	r30
 116:	bf 91       	pop	r27
 118:	af 91       	pop	r26
 11a:	9f 91       	pop	r25
 11c:	8f 91       	pop	r24
 11e:	7f 91       	pop	r23
 120:	6f 91       	pop	r22
 122:	5f 91       	pop	r21
 124:	4f 91       	pop	r20
 126:	3f 91       	pop	r19
 128:	2f 91       	pop	r18
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <displaySingle>:
	for (i = 0; i<8; i++) {
		nums[i]=number%10;
		number/=10;
	}
}
void displaySingle(unsigned char d, unsigned int nb) {
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	30 e0       	ldi	r19, 0x00	; 0
	int i;
	for (i = 0; i < 7; i++) {//set to default 
		state[i] = 1;
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	f9 01       	movw	r30, r18
 13c:	e0 5a       	subi	r30, 0xA0	; 160
 13e:	ff 4f       	sbci	r31, 0xFF	; 255
 140:	90 83       	st	Z, r25
		number/=10;
	}
}
void displaySingle(unsigned char d, unsigned int nb) {
	int i;
	for (i = 0; i < 7; i++) {//set to default 
 142:	2f 5f       	subi	r18, 0xFF	; 255
 144:	3f 4f       	sbci	r19, 0xFF	; 255
 146:	27 30       	cpi	r18, 0x07	; 7
 148:	31 05       	cpc	r19, r1
 14a:	b9 f7       	brne	.-18     	; 0x13a <displaySingle+0x6>
 14c:	28 e0       	ldi	r18, 0x08	; 8
 14e:	30 e0       	ldi	r19, 0x00	; 0
		state[i] = 1;
	}
	for (i = 8; i < 16; i++) {//default
		state[i] = 0;
 150:	f9 01       	movw	r30, r18
 152:	e0 5a       	subi	r30, 0xA0	; 160
 154:	ff 4f       	sbci	r31, 0xFF	; 255
 156:	10 82       	st	Z, r1
void displaySingle(unsigned char d, unsigned int nb) {
	int i;
	for (i = 0; i < 7; i++) {//set to default 
		state[i] = 1;
	}
	for (i = 8; i < 16; i++) {//default
 158:	2f 5f       	subi	r18, 0xFF	; 255
 15a:	3f 4f       	sbci	r19, 0xFF	; 255
 15c:	20 31       	cpi	r18, 0x10	; 16
 15e:	31 05       	cpc	r19, r1
 160:	b9 f7       	brne	.-18     	; 0x150 <displaySingle+0x1c>
		state[i] = 0;
	}
	state[digits[d]] = 0;
 162:	e8 2f       	mov	r30, r24
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	e0 59       	subi	r30, 0x90	; 144
 168:	ff 4f       	sbci	r31, 0xFF	; 255
 16a:	e0 81       	ld	r30, Z
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	e0 5a       	subi	r30, 0xA0	; 160
 170:	ff 4f       	sbci	r31, 0xFF	; 255
 172:	10 82       	st	Z, r1

	if (nb >= 8) {//convert decimal to binary in last 4bits
 174:	68 30       	cpi	r22, 0x08	; 8
 176:	71 05       	cpc	r23, r1
 178:	28 f0       	brcs	.+10     	; 0x184 <displaySingle+0x50>
		state[12] = 1;
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	80 93 6c 00 	sts	0x006C, r24
		nb -= 8;
 180:	68 50       	subi	r22, 0x08	; 8
 182:	70 40       	sbci	r23, 0x00	; 0
	}
	if (nb >= 4) {
 184:	64 30       	cpi	r22, 0x04	; 4
 186:	71 05       	cpc	r23, r1
 188:	28 f0       	brcs	.+10     	; 0x194 <displaySingle+0x60>
		state[13] = 1;
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	80 93 6d 00 	sts	0x006D, r24
		nb -= 4;
 190:	64 50       	subi	r22, 0x04	; 4
 192:	70 40       	sbci	r23, 0x00	; 0
	}
	if (nb >= 2) {
 194:	62 30       	cpi	r22, 0x02	; 2
 196:	71 05       	cpc	r23, r1
 198:	28 f0       	brcs	.+10     	; 0x1a4 <displaySingle+0x70>
		state[14] = 1;
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	80 93 6e 00 	sts	0x006E, r24
		nb -= 2;
 1a0:	62 50       	subi	r22, 0x02	; 2
 1a2:	70 40       	sbci	r23, 0x00	; 0
	}
	if (nb >= 1) {
 1a4:	67 2b       	or	r22, r23
 1a6:	19 f0       	breq	.+6      	; 0x1ae <displaySingle+0x7a>
		state[15] = 1;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	80 93 6f 00 	sts	0x006F, r24
		nb -= 1;
	}
	shift();
 1ae:	53 df       	rcall	.-346    	; 0x56 <shift>
}
 1b0:	08 95       	ret

000001b2 <__vector_5>:
	while(1){
	}
	return 0;
}

ISR(TIMER0_OVF_vect){
 1b2:	1f 92       	push	r1
 1b4:	0f 92       	push	r0
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	0f 92       	push	r0
 1ba:	11 24       	eor	r1, r1
 1bc:	2f 93       	push	r18
 1be:	3f 93       	push	r19
 1c0:	4f 93       	push	r20
 1c2:	5f 93       	push	r21
 1c4:	6f 93       	push	r22
 1c6:	7f 93       	push	r23
 1c8:	8f 93       	push	r24
 1ca:	9f 93       	push	r25
 1cc:	af 93       	push	r26
 1ce:	bf 93       	push	r27
 1d0:	ef 93       	push	r30
 1d2:	ff 93       	push	r31
	displaySingle(n,nums[n]);
 1d4:	80 91 82 00 	lds	r24, 0x0082
 1d8:	90 91 82 00 	lds	r25, 0x0082
 1dc:	ea e7       	ldi	r30, 0x7A	; 122
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	e9 0f       	add	r30, r25
 1e2:	f1 1d       	adc	r31, r1
 1e4:	60 81       	ld	r22, Z
 1e6:	70 e0       	ldi	r23, 0x00	; 0
 1e8:	a5 df       	rcall	.-182    	; 0x134 <displaySingle>
	n=(n+1)%6;
 1ea:	80 91 82 00 	lds	r24, 0x0082
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	01 96       	adiw	r24, 0x01	; 1
 1f2:	66 e0       	ldi	r22, 0x06	; 6
 1f4:	70 e0       	ldi	r23, 0x00	; 0
 1f6:	27 d0       	rcall	.+78     	; 0x246 <__divmodhi4>
 1f8:	80 93 82 00 	sts	0x0082, r24
}
 1fc:	ff 91       	pop	r31
 1fe:	ef 91       	pop	r30
 200:	bf 91       	pop	r27
 202:	af 91       	pop	r26
 204:	9f 91       	pop	r25
 206:	8f 91       	pop	r24
 208:	7f 91       	pop	r23
 20a:	6f 91       	pop	r22
 20c:	5f 91       	pop	r21
 20e:	4f 91       	pop	r20
 210:	3f 91       	pop	r19
 212:	2f 91       	pop	r18
 214:	0f 90       	pop	r0
 216:	0f be       	out	0x3f, r0	; 63
 218:	0f 90       	pop	r0
 21a:	1f 90       	pop	r1
 21c:	18 95       	reti

0000021e <__udivmodhi4>:
 21e:	aa 1b       	sub	r26, r26
 220:	bb 1b       	sub	r27, r27
 222:	51 e1       	ldi	r21, 0x11	; 17
 224:	07 c0       	rjmp	.+14     	; 0x234 <__udivmodhi4_ep>

00000226 <__udivmodhi4_loop>:
 226:	aa 1f       	adc	r26, r26
 228:	bb 1f       	adc	r27, r27
 22a:	a6 17       	cp	r26, r22
 22c:	b7 07       	cpc	r27, r23
 22e:	10 f0       	brcs	.+4      	; 0x234 <__udivmodhi4_ep>
 230:	a6 1b       	sub	r26, r22
 232:	b7 0b       	sbc	r27, r23

00000234 <__udivmodhi4_ep>:
 234:	88 1f       	adc	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	5a 95       	dec	r21
 23a:	a9 f7       	brne	.-22     	; 0x226 <__udivmodhi4_loop>
 23c:	80 95       	com	r24
 23e:	90 95       	com	r25
 240:	bc 01       	movw	r22, r24
 242:	cd 01       	movw	r24, r26
 244:	08 95       	ret

00000246 <__divmodhi4>:
 246:	97 fb       	bst	r25, 7
 248:	09 2e       	mov	r0, r25
 24a:	07 26       	eor	r0, r23
 24c:	0a d0       	rcall	.+20     	; 0x262 <__divmodhi4_neg1>
 24e:	77 fd       	sbrc	r23, 7
 250:	04 d0       	rcall	.+8      	; 0x25a <__divmodhi4_neg2>
 252:	e5 df       	rcall	.-54     	; 0x21e <__udivmodhi4>
 254:	06 d0       	rcall	.+12     	; 0x262 <__divmodhi4_neg1>
 256:	00 20       	and	r0, r0
 258:	1a f4       	brpl	.+6      	; 0x260 <__divmodhi4_exit>

0000025a <__divmodhi4_neg2>:
 25a:	70 95       	com	r23
 25c:	61 95       	neg	r22
 25e:	7f 4f       	sbci	r23, 0xFF	; 255

00000260 <__divmodhi4_exit>:
 260:	08 95       	ret

00000262 <__divmodhi4_neg1>:
 262:	f6 f7       	brtc	.-4      	; 0x260 <__divmodhi4_exit>
 264:	90 95       	com	r25
 266:	81 95       	neg	r24
 268:	9f 4f       	sbci	r25, 0xFF	; 255
 26a:	08 95       	ret

0000026c <_exit>:
 26c:	f8 94       	cli

0000026e <__stop_program>:
 26e:	ff cf       	rjmp	.-2      	; 0x26e <__stop_program>
