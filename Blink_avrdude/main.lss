
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000110  00000000  00000000  0000012b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000b2  00000000  00000000  0000023b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000013c  00000000  00000000  000002ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  0000042c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000b1  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000028  00000000  00000000  000004fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000525  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4c 00 	jmp	0x98	; 0x98 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>


int main(void){
  DDRB |= 1 << PINB0 | 1<<PINB1;
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	83 60       	ori	r24, 0x03	; 3
  70:	87 bb       	out	0x17, r24	; 23
  PORTB |= 1<<PINB0 | 0<PINB1;
  72:	c0 9a       	sbi	0x18, 0	; 24
	
  while(1){
		PORTB ^= 1<<PINB0 ;
  74:	51 e0       	ldi	r21, 0x01	; 1
		PORTB ^= 1<<PINB1 ;
  76:	42 e0       	ldi	r20, 0x02	; 2
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  78:	28 ec       	ldi	r18, 0xC8	; 200
  7a:	30 e0       	ldi	r19, 0x00	; 0
int main(void){
  DDRB |= 1 << PINB0 | 1<<PINB1;
  PORTB |= 1<<PINB0 | 0<PINB1;
	
  while(1){
		PORTB ^= 1<<PINB0 ;
  7c:	88 b3       	in	r24, 0x18	; 24
  7e:	85 27       	eor	r24, r21
  80:	88 bb       	out	0x18, r24	; 24
		PORTB ^= 1<<PINB1 ;
  82:	88 b3       	in	r24, 0x18	; 24
  84:	84 27       	eor	r24, r20
  86:	88 bb       	out	0x18, r24	; 24
  88:	88 e8       	ldi	r24, 0x88	; 136
  8a:	93 e1       	ldi	r25, 0x13	; 19
  8c:	f9 01       	movw	r30, r18
  8e:	31 97       	sbiw	r30, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <main+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  92:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  94:	d9 f7       	brne	.-10     	; 0x8c <main+0x20>
  96:	f2 cf       	rjmp	.-28     	; 0x7c <main+0x10>

00000098 <_exit>:
  98:	f8 94       	cli

0000009a <__stop_program>:
  9a:	ff cf       	rjmp	.-2      	; 0x9a <__stop_program>
