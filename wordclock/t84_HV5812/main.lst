   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	sendRawData
  12               	sendRawData:
  13               	.LFB6:
  14               		.file 1 "main.c"
   1:main.c        **** #define F_CPU 16000000UL
   2:main.c        **** #include <avr/io.h>
   3:main.c        **** #include <avr/interrupt.h>
   4:main.c        **** #include <util/delay.h>
   5:main.c        **** #include "defines.h"
   6:main.c        **** #include "Led.h"
   7:main.c        **** #include "RTC.h"
   8:main.c        **** 
   9:main.c        **** void sendRawData(uint32_t data){
  15               		.loc 1 9 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 0F93      		push r16
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 16, -2
  22 0002 1F93      		push r17
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 17, -3
  26               	/* prologue: function */
  27               	/* frame size = 0 */
  28               	/* stack size = 2 */
  29               	.L__stack_usage = 2
  10:main.c        ****     PORTA &=~(STROBE|CLK);
  30               		.loc 1 10 0
  31 0004 2BB3      		in r18,0x1b
  32 0006 237F      		andi r18,lo8(-13)
  33 0008 2BBB      		out 0x1b,r18
  34               	.LVL1:
  35 000a 40E0      		ldi r20,0
  36 000c 50E0      		ldi r21,0
  37               	.LVL2:
  38               	.L4:
  39               	.LBB10:
  11:main.c        ****     for(uint8_t i=0;i<20;i++){
  12:main.c        ****         if((data>>i) & 0x00000001){
  40               		.loc 1 12 0
  41 000e 8B01      		movw r16,r22
  42 0010 9C01      		movw r18,r24
  43 0012 042E      		mov r0,r20
  44 0014 00C0      		rjmp 2f
  45               		1:
  46 0016 3695      		lsr r19
  47 0018 2795      		ror r18
  48 001a 1795      		ror r17
  49 001c 0795      		ror r16
  50               		2:
  51 001e 0A94      		dec r0
  52 0020 02F4      		brpl 1b
  53 0022 00FF      		sbrs r16,0
  54 0024 00C0      		rjmp .L2
  13:main.c        ****             PORTA|=DATA;
  55               		.loc 1 13 0
  56 0026 D99A      		sbi 0x1b,1
  57 0028 00C0      		rjmp .L3
  58               	.L2:
  14:main.c        ****         }else{
  15:main.c        ****             PORTA&=~DATA;
  59               		.loc 1 15 0
  60 002a D998      		cbi 0x1b,1
  61               	.L3:
  16:main.c        ****         }
  17:main.c        ****         PORTA|=CLK;
  62               		.loc 1 17 0 discriminator 2
  63 002c DB9A      		sbi 0x1b,3
  18:main.c        ****         PORTA&=~CLK;
  64               		.loc 1 18 0 discriminator 2
  65 002e DB98      		cbi 0x1b,3
  66               	.LVL3:
  67 0030 4F5F      		subi r20,-1
  68 0032 5F4F      		sbci r21,-1
  69               	.LVL4:
  11:main.c        ****         if((data>>i) & 0x00000001){
  70               		.loc 1 11 0 discriminator 2
  71 0034 4431      		cpi r20,20
  72 0036 5105      		cpc r21,__zero_reg__
  73 0038 01F4      		brne .L4
  74               	.LBE10:
  19:main.c        ****     }
  20:main.c        ****     PORTA|=STROBE;
  75               		.loc 1 20 0
  76 003a DA9A      		sbi 0x1b,2
  21:main.c        ****     PORTA&=~STROBE;
  77               		.loc 1 21 0
  78 003c DA98      		cbi 0x1b,2
  79               	/* epilogue start */
  22:main.c        **** }
  80               		.loc 1 22 0
  81 003e 1F91      		pop r17
  82 0040 0F91      		pop r16
  83 0042 0895      		ret
  84               		.cfi_endproc
  85               	.LFE6:
  87               	.global	sendData
  89               	sendData:
  90               	.LFB7:
  23:main.c        **** uint8_t ledr=0;
  24:main.c        **** uint8_t ledb=0;
  25:main.c        **** void sendData(uint32_t data){
  91               		.loc 1 25 0
  92               		.cfi_startproc
  93               	.LVL5:
  94               	/* prologue: function */
  95               	/* frame size = 0 */
  96               	/* stack size = 0 */
  97               	.L__stack_usage = 0
  26:main.c        ****     if(ledr)data|=LEDR;
  98               		.loc 1 26 0
  99 0044 2091 0000 		lds r18,ledr
 100 0048 2111      		cpse r18,__zero_reg__
 101               		.loc 1 26 0 is_stmt 0 discriminator 1
 102 004a 7860      		ori r23,8
 103               	.LVL6:
 104               	.L8:
  27:main.c        ****     if(ledb)data|=LEDB;
 105               		.loc 1 27 0 is_stmt 1
 106 004c 2091 0000 		lds r18,ledb
 107 0050 2111      		cpse r18,__zero_reg__
 108               		.loc 1 27 0 is_stmt 0 discriminator 1
 109 0052 7460      		ori r23,4
 110               	.LVL7:
 111               	.L9:
  28:main.c        ****     sendRawData(data);
 112               		.loc 1 28 0 is_stmt 1
 113 0054 00C0      		rjmp sendRawData
 114               	.LVL8:
 115               		.cfi_endproc
 116               	.LFE7:
 118               		.section	.text.startup,"ax",@progbits
 119               	.global	main
 121               	main:
 122               	.LFB8:
  29:main.c        **** }
  30:main.c        **** volatile uint8_t state=0;
  31:main.c        **** Led leds[NBLEDS];
  32:main.c        **** 
  33:main.c        **** int main(void){    
 123               		.loc 1 33 0
 124               		.cfi_startproc
 125               	/* prologue: function */
 126               	/* frame size = 0 */
 127               	/* stack size = 0 */
 128               	.L__stack_usage = 0
  34:main.c        ****     DDRA |= CLK|DATA|STROBE|LED;
 129               		.loc 1 34 0
 130 0000 8AB3      		in r24,0x1a
 131 0002 8F60      		ori r24,lo8(15)
 132 0004 8ABB      		out 0x1a,r24
  35:main.c        ****     PORTA &= ~(CLK|DATA|STROBE|LED);
 133               		.loc 1 35 0
 134 0006 8BB3      		in r24,0x1b
 135 0008 807F      		andi r24,lo8(-16)
 136 000a 8BBB      		out 0x1b,r24
  36:main.c        ****     ledInit(leds);
 137               		.loc 1 36 0
 138 000c 80E0      		ldi r24,lo8(leds)
 139 000e 90E0      		ldi r25,hi8(leds)
 140 0010 00D0      		rcall ledInit
 141               	.LVL9:
  37:main.c        ****     
  38:main.c        ****     TIMSK1|=(1<<TOIE1);
 142               		.loc 1 38 0
 143 0012 609A      		sbi 0xc,0
  39:main.c        ****     TIMSK0|=(1<<TOIE0);
 144               		.loc 1 39 0
 145 0014 89B7      		in r24,0x39
 146 0016 8160      		ori r24,lo8(1)
 147 0018 89BF      		out 0x39,r24
  40:main.c        ****     sei();
 148               		.loc 1 40 0
 149               	/* #APP */
 150               	 ;  40 "main.c" 1
 151 001a 7894      		sei
 152               	 ;  0 "" 2
  41:main.c        ****     
  42:main.c        ****     sendData(0b11111100001111111111 | LEDB);
 153               		.loc 1 42 0
 154               	/* #NOAPP */
 155 001c 6FEF      		ldi r22,lo8(-1)
 156 001e 77EC      		ldi r23,lo8(-57)
 157 0020 8FE0      		ldi r24,lo8(15)
 158 0022 90E0      		ldi r25,0
 159 0024 00D0      		rcall sendData
 160               	.LVL10:
 161               	.LBB11:
 162               	.LBB12:
 163               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 164               		.loc 2 187 0
 165 0026 2FEF      		ldi r18,lo8(799999)
 166 0028 84E3      		ldi r24,hi8(799999)
 167 002a 9CE0      		ldi r25,hlo8(799999)
 168 002c 2150      	1:	subi r18,1
 169 002e 8040      		sbci r24,0
 170 0030 9040      		sbci r25,0
 171 0032 01F4      		brne 1b
 172 0034 00C0      		rjmp .
 173 0036 0000      		nop
 174               	.LVL11:
 175               	.LBE12:
 176               	.LBE11:
  43:main.c        ****     _delay_ms(250);
  44:main.c        ****     sendData(0b11000000001111111111);
 177               		.loc 1 44 0
 178 0038 6FEF      		ldi r22,lo8(-1)
 179 003a 73E0      		ldi r23,lo8(3)
 180 003c 8CE0      		ldi r24,lo8(12)
 181 003e 90E0      		ldi r25,0
 182 0040 00D0      		rcall sendData
 183               	.LVL12:
 184               	.LBB13:
 185               	.LBB14:
 186               		.loc 2 187 0
 187 0042 2FEF      		ldi r18,lo8(799999)
 188 0044 84E3      		ldi r24,hi8(799999)
 189 0046 9CE0      		ldi r25,hlo8(799999)
 190 0048 2150      	1:	subi r18,1
 191 004a 8040      		sbci r24,0
 192 004c 9040      		sbci r25,0
 193 004e 01F4      		brne 1b
 194 0050 00C0      		rjmp .
 195 0052 0000      		nop
 196               	.LVL13:
 197               	.LBE14:
 198               	.LBE13:
  45:main.c        ****     _delay_ms(250);
  46:main.c        ****     sendData(0b00001100001111111111 | LEDR);
 199               		.loc 1 46 0
 200 0054 6FEF      		ldi r22,lo8(-1)
 201 0056 7BEC      		ldi r23,lo8(-53)
 202 0058 80E0      		ldi r24,0
 203 005a 90E0      		ldi r25,0
 204 005c 00D0      		rcall sendData
 205               	.LVL14:
 206               	.LBB15:
 207               	.LBB16:
 208               		.loc 2 187 0
 209 005e 2FEF      		ldi r18,lo8(799999)
 210 0060 84E3      		ldi r24,hi8(799999)
 211 0062 9CE0      		ldi r25,hlo8(799999)
 212 0064 2150      	1:	subi r18,1
 213 0066 8040      		sbci r24,0
 214 0068 9040      		sbci r25,0
 215 006a 01F4      		brne 1b
 216 006c 00C0      		rjmp .
 217 006e 0000      		nop
 218               	.LVL15:
 219               	.LBE16:
 220               	.LBE15:
  47:main.c        ****     _delay_ms(250);
  48:main.c        ****     sendData(0b00110000001111111111);
 221               		.loc 1 48 0
 222 0070 6FEF      		ldi r22,lo8(-1)
 223 0072 73E0      		ldi r23,lo8(3)
 224 0074 83E0      		ldi r24,lo8(3)
 225 0076 90E0      		ldi r25,0
 226 0078 00D0      		rcall sendData
 227               	.LVL16:
 228               	.LBB17:
 229               	.LBB18:
 230               		.loc 2 187 0
 231 007a 2FEF      		ldi r18,lo8(799999)
 232 007c 84E3      		ldi r24,hi8(799999)
 233 007e 9CE0      		ldi r25,hlo8(799999)
 234 0080 2150      	1:	subi r18,1
 235 0082 8040      		sbci r24,0
 236 0084 9040      		sbci r25,0
 237 0086 01F4      		brne 1b
 238 0088 00C0      		rjmp .
 239 008a 0000      		nop
 240               	.LVL17:
 241               	.LBE18:
 242               	.LBE17:
  49:main.c        ****     _delay_ms(250);
  50:main.c        ****     sendData(0b00000100000000000001 | LEDB);
 243               		.loc 1 50 0
 244 008c 61E0      		ldi r22,lo8(1)
 245 008e 74E4      		ldi r23,lo8(68)
 246 0090 80E0      		ldi r24,0
 247 0092 90E0      		ldi r25,0
 248 0094 00D0      		rcall sendData
 249               	.LVL18:
  51:main.c        ****     #ifdef DELLONG
  52:main.c        **** 		TCCR1B|=(1<<CS12)|(1<<CS10);
  53:main.c        **** 	#else
  54:main.c        **** 		TCCR1B|=(1<<CS12);//|(1<<CS10);
 250               		.loc 1 54 0
 251 0096 8EB5      		in r24,0x2e
 252 0098 8460      		ori r24,lo8(4)
 253 009a 8EBD      		out 0x2e,r24
  55:main.c        **** 	#endif
  56:main.c        **** 	
  57:main.c        **** 	TCCR0B|=(1<<CS01)|(1<<CS00);
 254               		.loc 1 57 0
 255 009c 83B7      		in r24,0x33
 256 009e 8360      		ori r24,lo8(3)
 257 00a0 83BF      		out 0x33,r24
  58:main.c        ****     
  59:main.c        ****     currentColor=tcolorV(WHITE);
 258               		.loc 1 59 0
 259 00a2 6FEF      		ldi r22,lo8(-1)
 260 00a4 7FEF      		ldi r23,lo8(-1)
 261 00a6 8FEF      		ldi r24,lo8(-1)
 262 00a8 90E0      		ldi r25,0
 263 00aa 00D0      		rcall tcolorV
 264               	.LVL19:
 265 00ac 6093 0000 		sts currentColor,r22
 266 00b0 7093 0000 		sts currentColor+1,r23
 267 00b4 8093 0000 		sts currentColor+2,r24
  60:main.c        ****     setCurrentTime(15,45,7,11);
 268               		.loc 1 60 0
 269 00b8 2BE0      		ldi r18,lo8(11)
 270 00ba 47E0      		ldi r20,lo8(7)
 271 00bc 6DE2      		ldi r22,lo8(45)
 272 00be 8FE0      		ldi r24,lo8(15)
 273 00c0 00D0      		rcall setCurrentTime
 274               	.LVL20:
  61:main.c        **** 	RTC_readTime(&currentTime);
 275               		.loc 1 61 0
 276 00c2 80E0      		ldi r24,lo8(currentTime)
 277 00c4 90E0      		ldi r25,hi8(currentTime)
 278 00c6 00D0      		rcall RTC_readTime
 279               	.LVL21:
  62:main.c        ****     currentTime.temp=2;
 280               		.loc 1 62 0
 281 00c8 82E0      		ldi r24,lo8(2)
 282 00ca 8093 0000 		sts currentTime+4,r24
  63:main.c        ****     //setLeds(currentTime,leds,currentColor);
  64:main.c        ****    setLedsNb(currentTime.temp,leds,currentColor);
 283               		.loc 1 64 0
 284 00ce 2091 0000 		lds r18,currentColor
 285 00d2 3091 0000 		lds r19,currentColor+1
 286 00d6 4091 0000 		lds r20,currentColor+2
 287 00da 60E0      		ldi r22,lo8(leds)
 288 00dc 70E0      		ldi r23,hi8(leds)
 289 00de 00D0      		rcall setLedsNb
 290               	.LVL22:
 291               	.L17:
 292 00e0 00C0      		rjmp .L17
 293               		.cfi_endproc
 294               	.LFE8:
 296               		.text
 297               	.global	__vector_8
 299               	__vector_8:
 300               	.LFB9:
  65:main.c        ****     while(1){
  66:main.c        ****        
  67:main.c        ****     }
  68:main.c        ****     return(0);
  69:main.c        ****     
  70:main.c        **** }
  71:main.c        **** ISR( TIM1_OVF_vect ){
 301               		.loc 1 71 0
 302               		.cfi_startproc
 303 0056 1F92      		push r1
 304               	.LCFI2:
 305               		.cfi_def_cfa_offset 3
 306               		.cfi_offset 1, -2
 307 0058 0F92      		push r0
 308               	.LCFI3:
 309               		.cfi_def_cfa_offset 4
 310               		.cfi_offset 0, -3
 311 005a 0FB6      		in r0,__SREG__
 312 005c 0F92      		push r0
 313 005e 1124      		clr __zero_reg__
 314 0060 EF92      		push r14
 315               	.LCFI4:
 316               		.cfi_def_cfa_offset 5
 317               		.cfi_offset 14, -4
 318 0062 FF92      		push r15
 319               	.LCFI5:
 320               		.cfi_def_cfa_offset 6
 321               		.cfi_offset 15, -5
 322 0064 0F93      		push r16
 323               	.LCFI6:
 324               		.cfi_def_cfa_offset 7
 325               		.cfi_offset 16, -6
 326 0066 2F93      		push r18
 327               	.LCFI7:
 328               		.cfi_def_cfa_offset 8
 329               		.cfi_offset 18, -7
 330 0068 3F93      		push r19
 331               	.LCFI8:
 332               		.cfi_def_cfa_offset 9
 333               		.cfi_offset 19, -8
 334 006a 4F93      		push r20
 335               	.LCFI9:
 336               		.cfi_def_cfa_offset 10
 337               		.cfi_offset 20, -9
 338 006c 5F93      		push r21
 339               	.LCFI10:
 340               		.cfi_def_cfa_offset 11
 341               		.cfi_offset 21, -10
 342 006e 6F93      		push r22
 343               	.LCFI11:
 344               		.cfi_def_cfa_offset 12
 345               		.cfi_offset 22, -11
 346 0070 7F93      		push r23
 347               	.LCFI12:
 348               		.cfi_def_cfa_offset 13
 349               		.cfi_offset 23, -12
 350 0072 8F93      		push r24
 351               	.LCFI13:
 352               		.cfi_def_cfa_offset 14
 353               		.cfi_offset 24, -13
 354 0074 9F93      		push r25
 355               	.LCFI14:
 356               		.cfi_def_cfa_offset 15
 357               		.cfi_offset 25, -14
 358 0076 AF93      		push r26
 359               	.LCFI15:
 360               		.cfi_def_cfa_offset 16
 361               		.cfi_offset 26, -15
 362 0078 BF93      		push r27
 363               	.LCFI16:
 364               		.cfi_def_cfa_offset 17
 365               		.cfi_offset 27, -16
 366 007a EF93      		push r30
 367               	.LCFI17:
 368               		.cfi_def_cfa_offset 18
 369               		.cfi_offset 30, -17
 370 007c FF93      		push r31
 371               	.LCFI18:
 372               		.cfi_def_cfa_offset 19
 373               		.cfi_offset 31, -18
 374               	/* prologue: Signal */
 375               	/* frame size = 0 */
 376               	/* stack size = 18 */
 377               	.L__stack_usage = 18
  72:main.c        ****    RTC_readTime(&currentTime);
 378               		.loc 1 72 0
 379 007e 80E0      		ldi r24,lo8(currentTime)
 380 0080 90E0      		ldi r25,hi8(currentTime)
 381 0082 00D0      		rcall RTC_readTime
 382               	.LVL23:
  73:main.c        ****      uint8_t a=RTC_readTemp();
 383               		.loc 1 73 0
 384 0084 00D0      		rcall RTC_readTemp
 385               	.LVL24:
  74:main.c        ****     if(a==0x18){
 386               		.loc 1 74 0
 387 0086 8831      		cpi r24,lo8(24)
 388 0088 01F4      		brne .L19
  75:main.c        ****         //setLedsNb(currentTime.temp,leds,tcolorV(BLUE));
  76:main.c        ****         ledb=1;
 389               		.loc 1 76 0
 390 008a 81E0      		ldi r24,lo8(1)
 391               	.LVL25:
 392 008c 8093 0000 		sts ledb,r24
  77:main.c        ****         ledr=0;
 393               		.loc 1 77 0
 394 0090 1092 0000 		sts ledr,__zero_reg__
 395 0094 00C0      		rjmp .L20
 396               	.LVL26:
 397               	.L19:
  78:main.c        ****     }else{
  79:main.c        ****         ledr=1;
 398               		.loc 1 79 0
 399 0096 81E0      		ldi r24,lo8(1)
 400               	.LVL27:
 401 0098 8093 0000 		sts ledr,r24
  80:main.c        ****         ledb=0;
 402               		.loc 1 80 0
 403 009c 1092 0000 		sts ledb,__zero_reg__
 404               	.L20:
  81:main.c        ****     }
  82:main.c        ****     setLeds(currentTime,leds,currentColor);
 405               		.loc 1 82 0
 406 00a0 E090 0000 		lds r14,currentColor
 407 00a4 F090 0000 		lds r15,currentColor+1
 408 00a8 0091 0000 		lds r16,currentColor+2
 409 00ac 20E0      		ldi r18,lo8(leds)
 410 00ae 30E0      		ldi r19,hi8(leds)
 411 00b0 4091 0000 		lds r20,currentTime
 412 00b4 5091 0000 		lds r21,currentTime+1
 413 00b8 6091 0000 		lds r22,currentTime+2
 414 00bc 7091 0000 		lds r23,currentTime+3
 415 00c0 8091 0000 		lds r24,currentTime+4
 416 00c4 00D0      		rcall setLeds
 417               	.LVL28:
 418               	/* epilogue start */
  83:main.c        ****     
  84:main.c        **** }
 419               		.loc 1 84 0
 420 00c6 FF91      		pop r31
 421 00c8 EF91      		pop r30
 422 00ca BF91      		pop r27
 423 00cc AF91      		pop r26
 424 00ce 9F91      		pop r25
 425 00d0 8F91      		pop r24
 426 00d2 7F91      		pop r23
 427 00d4 6F91      		pop r22
 428 00d6 5F91      		pop r21
 429 00d8 4F91      		pop r20
 430 00da 3F91      		pop r19
 431 00dc 2F91      		pop r18
 432 00de 0F91      		pop r16
 433 00e0 FF90      		pop r15
 434 00e2 EF90      		pop r14
 435 00e4 0F90      		pop r0
 436 00e6 0FBE      		out __SREG__,r0
 437 00e8 0F90      		pop r0
 438 00ea 1F90      		pop r1
 439 00ec 1895      		reti
 440               		.cfi_endproc
 441               	.LFE9:
 443               	.global	__vector_11
 445               	__vector_11:
 446               	.LFB10:
  85:main.c        **** ISR( TIM0_OVF_vect ){
 447               		.loc 1 85 0
 448               		.cfi_startproc
 449 00ee 1F92      		push r1
 450               	.LCFI19:
 451               		.cfi_def_cfa_offset 3
 452               		.cfi_offset 1, -2
 453 00f0 0F92      		push r0
 454               	.LCFI20:
 455               		.cfi_def_cfa_offset 4
 456               		.cfi_offset 0, -3
 457 00f2 0FB6      		in r0,__SREG__
 458 00f4 0F92      		push r0
 459 00f6 1124      		clr __zero_reg__
 460 00f8 2F93      		push r18
 461               	.LCFI21:
 462               		.cfi_def_cfa_offset 5
 463               		.cfi_offset 18, -4
 464 00fa 3F93      		push r19
 465               	.LCFI22:
 466               		.cfi_def_cfa_offset 6
 467               		.cfi_offset 19, -5
 468 00fc 4F93      		push r20
 469               	.LCFI23:
 470               		.cfi_def_cfa_offset 7
 471               		.cfi_offset 20, -6
 472 00fe 5F93      		push r21
 473               	.LCFI24:
 474               		.cfi_def_cfa_offset 8
 475               		.cfi_offset 21, -7
 476 0100 6F93      		push r22
 477               	.LCFI25:
 478               		.cfi_def_cfa_offset 9
 479               		.cfi_offset 22, -8
 480 0102 7F93      		push r23
 481               	.LCFI26:
 482               		.cfi_def_cfa_offset 10
 483               		.cfi_offset 23, -9
 484 0104 8F93      		push r24
 485               	.LCFI27:
 486               		.cfi_def_cfa_offset 11
 487               		.cfi_offset 24, -10
 488 0106 9F93      		push r25
 489               	.LCFI28:
 490               		.cfi_def_cfa_offset 12
 491               		.cfi_offset 25, -11
 492 0108 AF93      		push r26
 493               	.LCFI29:
 494               		.cfi_def_cfa_offset 13
 495               		.cfi_offset 26, -12
 496 010a BF93      		push r27
 497               	.LCFI30:
 498               		.cfi_def_cfa_offset 14
 499               		.cfi_offset 27, -13
 500 010c EF93      		push r30
 501               	.LCFI31:
 502               		.cfi_def_cfa_offset 15
 503               		.cfi_offset 30, -14
 504 010e FF93      		push r31
 505               	.LCFI32:
 506               		.cfi_def_cfa_offset 16
 507               		.cfi_offset 31, -15
 508               	/* prologue: Signal */
 509               	/* frame size = 0 */
 510               	/* stack size = 15 */
 511               	.L__stack_usage = 15
  86:main.c        ****     switch(state){
 512               		.loc 1 86 0
 513 0110 8091 0000 		lds r24,state
 514 0114 8230      		cpi r24,lo8(2)
 515 0116 01F0      		breq .L23
 516 0118 00F4      		brsh .L24
 517 011a 8823      		tst r24
 518 011c 01F0      		breq .L25
 519 011e 8130      		cpi r24,lo8(1)
 520 0120 01F0      		breq .+2
 521 0122 00C0      		rjmp .L22
  87:main.c        ****         case 0:
  88:main.c        ****             sendData(R2 | getDataByColor(tcolor(1,0,0),0,leds));
  89:main.c        ****             break;
  90:main.c        ****         case 1:
  91:main.c        ****             sendData(R1 | getDataByColor(tcolor(1,0,0),1,leds));
 522               		.loc 1 91 0
 523 0124 40E0      		ldi r20,0
 524 0126 60E0      		ldi r22,0
 525 0128 81E0      		ldi r24,lo8(1)
 526 012a 00D0      		rcall tcolor
 527               	.LVL29:
 528 012c 20E0      		ldi r18,lo8(leds)
 529 012e 30E0      		ldi r19,hi8(leds)
 530 0130 41E0      		ldi r20,lo8(1)
 531 0132 00D0      		rcall getDataByColor
 532               	.LVL30:
 533 0134 7068      		ori r23,128
 534 0136 00C0      		rjmp .L31
 535               	.L24:
  86:main.c        ****     switch(state){
 536               		.loc 1 86 0
 537 0138 8430      		cpi r24,lo8(4)
 538 013a 01F0      		breq .L27
 539 013c 00F0      		brlo .L28
 540 013e 8530      		cpi r24,lo8(5)
 541 0140 01F4      		brne .L22
  92:main.c        ****             break;
  93:main.c        ****         case 2:
  94:main.c        ****             sendData(G2 | getDataByColor(tcolor(0,1,0),0,leds));
  95:main.c        ****             break;
  96:main.c        ****         case 3:
  97:main.c        ****             sendData(G1 | getDataByColor(tcolor(0,1,0),1,leds));
  98:main.c        ****             break;
  99:main.c        ****         case 4:
 100:main.c        ****             sendData(B2 | getDataByColor(tcolor(0,0,1),0,leds));
 101:main.c        ****             break;
 102:main.c        ****         case 5:
 103:main.c        ****             sendData(B1 | getDataByColor(tcolor(0,0,1),1,leds));
 542               		.loc 1 103 0
 543 0142 41E0      		ldi r20,lo8(1)
 544 0144 60E0      		ldi r22,0
 545 0146 80E0      		ldi r24,0
 546 0148 00D0      		rcall tcolor
 547               	.LVL31:
 548 014a 20E0      		ldi r18,lo8(leds)
 549 014c 30E0      		ldi r19,hi8(leds)
 550 014e 41E0      		ldi r20,lo8(1)
 551 0150 00D0      		rcall getDataByColor
 552               	.LVL32:
 553 0152 8260      		ori r24,2
 554 0154 00C0      		rjmp .L31
 555               	.L25:
  88:main.c        ****             break;
 556               		.loc 1 88 0
 557 0156 40E0      		ldi r20,0
 558 0158 60E0      		ldi r22,0
 559 015a 81E0      		ldi r24,lo8(1)
 560 015c 00D0      		rcall tcolor
 561               	.LVL33:
 562 015e 20E0      		ldi r18,lo8(leds)
 563 0160 30E0      		ldi r19,hi8(leds)
 564 0162 40E0      		ldi r20,0
 565 0164 00D0      		rcall getDataByColor
 566               	.LVL34:
 567 0166 7064      		ori r23,64
 568 0168 00C0      		rjmp .L31
 569               	.L23:
  94:main.c        ****             break;
 570               		.loc 1 94 0
 571 016a 40E0      		ldi r20,0
 572 016c 61E0      		ldi r22,lo8(1)
 573 016e 80E0      		ldi r24,0
 574 0170 00D0      		rcall tcolor
 575               	.LVL35:
 576 0172 20E0      		ldi r18,lo8(leds)
 577 0174 30E0      		ldi r19,hi8(leds)
 578 0176 40E0      		ldi r20,0
 579 0178 00D0      		rcall getDataByColor
 580               	.LVL36:
 581 017a 8460      		ori r24,4
 582 017c 00C0      		rjmp .L31
 583               	.L28:
  97:main.c        ****             break;
 584               		.loc 1 97 0
 585 017e 40E0      		ldi r20,0
 586 0180 61E0      		ldi r22,lo8(1)
 587 0182 80E0      		ldi r24,0
 588 0184 00D0      		rcall tcolor
 589               	.LVL37:
 590 0186 20E0      		ldi r18,lo8(leds)
 591 0188 30E0      		ldi r19,hi8(leds)
 592 018a 41E0      		ldi r20,lo8(1)
 593 018c 00D0      		rcall getDataByColor
 594               	.LVL38:
 595 018e 8860      		ori r24,8
 596 0190 00C0      		rjmp .L31
 597               	.L27:
 100:main.c        ****             break;
 598               		.loc 1 100 0
 599 0192 41E0      		ldi r20,lo8(1)
 600 0194 60E0      		ldi r22,0
 601 0196 80E0      		ldi r24,0
 602 0198 00D0      		rcall tcolor
 603               	.LVL39:
 604 019a 20E0      		ldi r18,lo8(leds)
 605 019c 30E0      		ldi r19,hi8(leds)
 606 019e 40E0      		ldi r20,0
 607 01a0 00D0      		rcall getDataByColor
 608               	.LVL40:
 609 01a2 8160      		ori r24,1
 610               	.L31:
 611               		.loc 1 103 0
 612 01a4 00D0      		rcall sendData
 613               	.LVL41:
 614               	.L22:
 104:main.c        ****             break;
 105:main.c        ****     }
 106:main.c        ****     state++;
 615               		.loc 1 106 0
 616 01a6 8091 0000 		lds r24,state
 617 01aa 8F5F      		subi r24,lo8(-(1))
 618 01ac 8093 0000 		sts state,r24
 107:main.c        ****     if(state>5)state=0;
 619               		.loc 1 107 0
 620 01b0 8091 0000 		lds r24,state
 621 01b4 8630      		cpi r24,lo8(6)
 622 01b6 00F0      		brlo .L21
 623               		.loc 1 107 0 is_stmt 0 discriminator 1
 624 01b8 1092 0000 		sts state,__zero_reg__
 625               	.L21:
 626               	/* epilogue start */
 108:main.c        **** }
 627               		.loc 1 108 0 is_stmt 1
 628 01bc FF91      		pop r31
 629 01be EF91      		pop r30
 630 01c0 BF91      		pop r27
 631 01c2 AF91      		pop r26
 632 01c4 9F91      		pop r25
 633 01c6 8F91      		pop r24
 634 01c8 7F91      		pop r23
 635 01ca 6F91      		pop r22
 636 01cc 5F91      		pop r21
 637 01ce 4F91      		pop r20
 638 01d0 3F91      		pop r19
 639 01d2 2F91      		pop r18
 640 01d4 0F90      		pop r0
 641 01d6 0FBE      		out __SREG__,r0
 642 01d8 0F90      		pop r0
 643 01da 1F90      		pop r1
 644 01dc 1895      		reti
 645               		.cfi_endproc
 646               	.LFE10:
 648               		.comm	leds,95,1
 649               	.global	state
 650               		.section .bss
 653               	state:
 654 0000 00        		.zero	1
 655               	.global	ledb
 658               	ledb:
 659 0001 00        		.zero	1
 660               	.global	ledr
 663               	ledr:
 664 0002 00        		.zero	1
 665               		.comm	currentColor,3,1
 666               		.comm	USI_I2C_Master_State,1,1
 667               		.comm	currentTime,5,1
 668               		.text
 669               	.Letext0:
 670               		.file 3 "/usr/lib/avr/include/stdint.h"
 671               		.file 4 "RTC.h"
 672               		.file 5 "Led.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccyhAzbh.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccyhAzbh.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccyhAzbh.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccyhAzbh.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccyhAzbh.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccyhAzbh.s:12     .text:0000000000000000 sendRawData
     /tmp/ccyhAzbh.s:89     .text:0000000000000044 sendData
     /tmp/ccyhAzbh.s:663    .bss:0000000000000002 ledr
     /tmp/ccyhAzbh.s:658    .bss:0000000000000001 ledb
     /tmp/ccyhAzbh.s:121    .text.startup:0000000000000000 main
                            *COM*:000000000000005f leds
                            *COM*:0000000000000003 currentColor
                            *COM*:0000000000000005 currentTime
     /tmp/ccyhAzbh.s:299    .text:0000000000000056 __vector_8
     /tmp/ccyhAzbh.s:445    .text:00000000000000ee __vector_11
     /tmp/ccyhAzbh.s:653    .bss:0000000000000000 state
                            *COM*:0000000000000001 USI_I2C_Master_State

UNDEFINED SYMBOLS
ledInit
tcolorV
setCurrentTime
RTC_readTime
setLedsNb
RTC_readTemp
setLeds
tcolor
getDataByColor
__do_clear_bss
