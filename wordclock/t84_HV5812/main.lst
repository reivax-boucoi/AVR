   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	sendData
  12               	sendData:
  13               	.LFB6:
  14               		.file 1 "main.c"
   1:main.c        **** #define F_CPU 16000000UL
   2:main.c        **** #include <avr/io.h>
   3:main.c        **** #include <avr/interrupt.h>
   4:main.c        **** #include <util/delay.h>
   5:main.c        **** #include "defines.h"
   6:main.c        **** #include "Led.h"
   7:main.c        **** #include "RTC.h"
   8:main.c        **** 
   9:main.c        **** void sendData(uint32_t data){
  15               		.loc 1 9 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 0F93      		push r16
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 16, -2
  22 0002 1F93      		push r17
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 17, -3
  26               	/* prologue: function */
  27               	/* frame size = 0 */
  28               	/* stack size = 2 */
  29               	.L__stack_usage = 2
  10:main.c        ****     PORTA &=~(STROBE|CLK);
  30               		.loc 1 10 0
  31 0004 2BB3      		in r18,0x1b
  32 0006 237F      		andi r18,lo8(-13)
  33 0008 2BBB      		out 0x1b,r18
  34               	.LVL1:
  35 000a 40E0      		ldi r20,0
  36 000c 50E0      		ldi r21,0
  37               	.LVL2:
  38               	.L4:
  39               	.LBB2:
  11:main.c        ****     for(uint8_t i=0;i<20;i++){
  12:main.c        ****         if((data>>i) & 0x00000001){
  40               		.loc 1 12 0
  41 000e 8B01      		movw r16,r22
  42 0010 9C01      		movw r18,r24
  43 0012 042E      		mov r0,r20
  44 0014 00C0      		rjmp 2f
  45               		1:
  46 0016 3695      		lsr r19
  47 0018 2795      		ror r18
  48 001a 1795      		ror r17
  49 001c 0795      		ror r16
  50               		2:
  51 001e 0A94      		dec r0
  52 0020 02F4      		brpl 1b
  53 0022 00FF      		sbrs r16,0
  54 0024 00C0      		rjmp .L2
  13:main.c        ****             PORTA|=DATA;
  55               		.loc 1 13 0
  56 0026 D99A      		sbi 0x1b,1
  57 0028 00C0      		rjmp .L3
  58               	.L2:
  14:main.c        ****         }else{
  15:main.c        ****             PORTA&=~DATA;
  59               		.loc 1 15 0
  60 002a D998      		cbi 0x1b,1
  61               	.L3:
  16:main.c        ****         }
  17:main.c        ****         PORTA|=CLK;
  62               		.loc 1 17 0 discriminator 2
  63 002c DB9A      		sbi 0x1b,3
  18:main.c        ****         PORTA&=~CLK;
  64               		.loc 1 18 0 discriminator 2
  65 002e DB98      		cbi 0x1b,3
  66               	.LVL3:
  67 0030 4F5F      		subi r20,-1
  68 0032 5F4F      		sbci r21,-1
  69               	.LVL4:
  11:main.c        ****         if((data>>i) & 0x00000001){
  70               		.loc 1 11 0 discriminator 2
  71 0034 4431      		cpi r20,20
  72 0036 5105      		cpc r21,__zero_reg__
  73 0038 01F4      		brne .L4
  74               	.LBE2:
  19:main.c        ****     }
  20:main.c        ****     PORTA|=STROBE;
  75               		.loc 1 20 0
  76 003a DA9A      		sbi 0x1b,2
  21:main.c        ****     PORTA&=~STROBE;
  77               		.loc 1 21 0
  78 003c DA98      		cbi 0x1b,2
  79               	/* epilogue start */
  22:main.c        **** }
  80               		.loc 1 22 0
  81 003e 1F91      		pop r17
  82 0040 0F91      		pop r16
  83 0042 0895      		ret
  84               		.cfi_endproc
  85               	.LFE6:
  87               		.section	.text.startup,"ax",@progbits
  88               	.global	main
  90               	main:
  91               	.LFB7:
  23:main.c        **** 
  24:main.c        **** volatile uint8_t state=0;
  25:main.c        **** Led leds[NBLEDS];
  26:main.c        **** 
  27:main.c        **** int main(void){    
  92               		.loc 1 27 0
  93               		.cfi_startproc
  94               	/* prologue: function */
  95               	/* frame size = 0 */
  96               	/* stack size = 0 */
  97               	.L__stack_usage = 0
  28:main.c        ****     DDRA |= CLK|DATA|STROBE|LED;
  98               		.loc 1 28 0
  99 0000 8AB3      		in r24,0x1a
 100 0002 8F60      		ori r24,lo8(15)
 101 0004 8ABB      		out 0x1a,r24
  29:main.c        ****     PORTA &= ~(CLK|DATA|STROBE|LED);
 102               		.loc 1 29 0
 103 0006 8BB3      		in r24,0x1b
 104 0008 807F      		andi r24,lo8(-16)
 105 000a 8BBB      		out 0x1b,r24
  30:main.c        ****     ledInit(leds);
 106               		.loc 1 30 0
 107 000c 80E0      		ldi r24,lo8(leds)
 108 000e 90E0      		ldi r25,hi8(leds)
 109 0010 00D0      		rcall ledInit
 110               	.LVL5:
  31:main.c        ****     
  32:main.c        ****     TIMSK1|=(1<<TOIE1);
 111               		.loc 1 32 0
 112 0012 609A      		sbi 0xc,0
  33:main.c        ****     TIMSK0|=(1<<TOIE0);
 113               		.loc 1 33 0
 114 0014 89B7      		in r24,0x39
 115 0016 8160      		ori r24,lo8(1)
 116 0018 89BF      		out 0x39,r24
  34:main.c        ****     sei();
 117               		.loc 1 34 0
 118               	/* #APP */
 119               	 ;  34 "main.c" 1
 120 001a 7894      		sei
 121               	 ;  0 "" 2
  35:main.c        ****     
  36:main.c        ****     /*sendData(0b11111100001111111111);
  37:main.c        ****     _delay_ms(250);
  38:main.c        ****     sendData(0b11000000001111111111);
  39:main.c        ****     _delay_ms(250);
  40:main.c        ****     sendData(0b00001100001111111111);
  41:main.c        ****     _delay_ms(250);
  42:main.c        ****     sendData(0b00110000001111111111);
  43:main.c        ****     _delay_ms(250);*/
  44:main.c        ****     //#ifdef DELLONG
  45:main.c        **** 		//TCCR1B|=(1<<CS12)|(1<<CS10);
  46:main.c        **** 	//#else
  47:main.c        **** 		TCCR1B|=(1<<CS12);//|(1<<CS10);
 122               		.loc 1 47 0
 123               	/* #NOAPP */
 124 001c 8EB5      		in r24,0x2e
 125 001e 8460      		ori r24,lo8(4)
 126 0020 8EBD      		out 0x2e,r24
  48:main.c        **** 	//#endif
  49:main.c        **** 	
  50:main.c        **** 	TCCR0B|=(1<<CS01)|(1<<CS00);
 127               		.loc 1 50 0
 128 0022 83B7      		in r24,0x33
 129 0024 8360      		ori r24,lo8(3)
 130 0026 83BF      		out 0x33,r24
  51:main.c        ****     
  52:main.c        ****     currentColor=tcolorV(RED);
 131               		.loc 1 52 0
 132 0028 60E0      		ldi r22,0
 133 002a 70E0      		ldi r23,0
 134 002c 8FEF      		ldi r24,lo8(-1)
 135 002e 90E0      		ldi r25,0
 136 0030 00D0      		rcall tcolorV
 137               	.LVL6:
 138 0032 6093 0000 		sts currentColor,r22
 139 0036 7093 0000 		sts currentColor+1,r23
 140 003a 8093 0000 		sts currentColor+2,r24
  53:main.c        ****     setCurrentTime(15,45,7,11);
 141               		.loc 1 53 0
 142 003e 2BE0      		ldi r18,lo8(11)
 143 0040 47E0      		ldi r20,lo8(7)
 144 0042 6DE2      		ldi r22,lo8(45)
 145 0044 8FE0      		ldi r24,lo8(15)
 146 0046 00D0      		rcall setCurrentTime
 147               	.LVL7:
  54:main.c        **** 	//RTC_readTime(&currentTime);
  55:main.c        ****     currentTime.temp=11;
 148               		.loc 1 55 0
 149 0048 8BE0      		ldi r24,lo8(11)
 150 004a 8093 0000 		sts currentTime+4,r24
 151               	.L8:
 152 004e 00C0      		rjmp .L8
 153               		.cfi_endproc
 154               	.LFE7:
 156               		.text
 157               	.global	__vector_8
 159               	__vector_8:
 160               	.LFB8:
  56:main.c        ****     //setLeds(currentTime,leds,currentColor);
  57:main.c        ****     
  58:main.c        ****     while(1){
  59:main.c        ****        
  60:main.c        ****     }
  61:main.c        ****     return(0);
  62:main.c        ****     
  63:main.c        **** }
  64:main.c        **** ISR( TIM1_OVF_vect ){
 161               		.loc 1 64 0
 162               		.cfi_startproc
 163 0044 1F92      		push r1
 164               	.LCFI2:
 165               		.cfi_def_cfa_offset 3
 166               		.cfi_offset 1, -2
 167 0046 0F92      		push r0
 168               	.LCFI3:
 169               		.cfi_def_cfa_offset 4
 170               		.cfi_offset 0, -3
 171 0048 0FB6      		in r0,__SREG__
 172 004a 0F92      		push r0
 173 004c 1124      		clr __zero_reg__
 174 004e 2F93      		push r18
 175               	.LCFI4:
 176               		.cfi_def_cfa_offset 5
 177               		.cfi_offset 18, -4
 178 0050 3F93      		push r19
 179               	.LCFI5:
 180               		.cfi_def_cfa_offset 6
 181               		.cfi_offset 19, -5
 182 0052 4F93      		push r20
 183               	.LCFI6:
 184               		.cfi_def_cfa_offset 7
 185               		.cfi_offset 20, -6
 186 0054 5F93      		push r21
 187               	.LCFI7:
 188               		.cfi_def_cfa_offset 8
 189               		.cfi_offset 21, -7
 190 0056 6F93      		push r22
 191               	.LCFI8:
 192               		.cfi_def_cfa_offset 9
 193               		.cfi_offset 22, -8
 194 0058 7F93      		push r23
 195               	.LCFI9:
 196               		.cfi_def_cfa_offset 10
 197               		.cfi_offset 23, -9
 198 005a 8F93      		push r24
 199               	.LCFI10:
 200               		.cfi_def_cfa_offset 11
 201               		.cfi_offset 24, -10
 202 005c 9F93      		push r25
 203               	.LCFI11:
 204               		.cfi_def_cfa_offset 12
 205               		.cfi_offset 25, -11
 206 005e AF93      		push r26
 207               	.LCFI12:
 208               		.cfi_def_cfa_offset 13
 209               		.cfi_offset 26, -12
 210 0060 BF93      		push r27
 211               	.LCFI13:
 212               		.cfi_def_cfa_offset 14
 213               		.cfi_offset 27, -13
 214 0062 EF93      		push r30
 215               	.LCFI14:
 216               		.cfi_def_cfa_offset 15
 217               		.cfi_offset 30, -14
 218 0064 FF93      		push r31
 219               	.LCFI15:
 220               		.cfi_def_cfa_offset 16
 221               		.cfi_offset 31, -15
 222               	/* prologue: Signal */
 223               	/* frame size = 0 */
 224               	/* stack size = 15 */
 225               	.L__stack_usage = 15
  65:main.c        ****     PORTA^=LED;
 226               		.loc 1 65 0
 227 0066 9BB3      		in r25,0x1b
 228 0068 81E0      		ldi r24,lo8(1)
 229 006a 8927      		eor r24,r25
 230 006c 8BBB      		out 0x1b,r24
  66:main.c        ****     //RTC_readTime(&currentTime);
  67:main.c        ****     //setLeds(currentTime,leds,currentColor);
  68:main.c        ****     if(state){
 231               		.loc 1 68 0
 232 006e 8091 0000 		lds r24,state
 233 0072 8823      		tst r24
 234 0074 01F0      		breq .L10
  69:main.c        ****     sendData(0b00000000100000000000);
 235               		.loc 1 69 0
 236 0076 60E0      		ldi r22,0
 237 0078 78E0      		ldi r23,lo8(8)
 238 007a 80E0      		ldi r24,0
 239 007c 90E0      		ldi r25,0
 240 007e 00C0      		rjmp .L12
 241               	.L10:
  70:main.c        ****     }else{
  71:main.c        ****     sendData(0b00000000000000000000);
 242               		.loc 1 71 0
 243 0080 60E0      		ldi r22,0
 244 0082 70E0      		ldi r23,0
 245 0084 CB01      		movw r24,r22
 246               	.L12:
 247 0086 00D0      		rcall sendData
 248               	.LVL8:
  72:main.c        ****     }state=1-state;
 249               		.loc 1 72 0
 250 0088 9091 0000 		lds r25,state
 251 008c 81E0      		ldi r24,lo8(1)
 252 008e 891B      		sub r24,r25
 253 0090 8093 0000 		sts state,r24
 254               	/* epilogue start */
  73:main.c        **** }
 255               		.loc 1 73 0
 256 0094 FF91      		pop r31
 257 0096 EF91      		pop r30
 258 0098 BF91      		pop r27
 259 009a AF91      		pop r26
 260 009c 9F91      		pop r25
 261 009e 8F91      		pop r24
 262 00a0 7F91      		pop r23
 263 00a2 6F91      		pop r22
 264 00a4 5F91      		pop r21
 265 00a6 4F91      		pop r20
 266 00a8 3F91      		pop r19
 267 00aa 2F91      		pop r18
 268 00ac 0F90      		pop r0
 269 00ae 0FBE      		out __SREG__,r0
 270 00b0 0F90      		pop r0
 271 00b2 1F90      		pop r1
 272 00b4 1895      		reti
 273               		.cfi_endproc
 274               	.LFE8:
 276               	.global	__vector_11
 278               	__vector_11:
 279               	.LFB9:
  74:main.c        **** ISR( TIM0_OVF_vect ){
 280               		.loc 1 74 0
 281               		.cfi_startproc
 282 00b6 1F92      		push r1
 283               	.LCFI16:
 284               		.cfi_def_cfa_offset 3
 285               		.cfi_offset 1, -2
 286 00b8 0F92      		push r0
 287               	.LCFI17:
 288               		.cfi_def_cfa_offset 4
 289               		.cfi_offset 0, -3
 290 00ba 0FB6      		in r0,__SREG__
 291 00bc 0F92      		push r0
 292 00be 1124      		clr __zero_reg__
 293               	/* prologue: Signal */
 294               	/* frame size = 0 */
 295               	/* stack size = 3 */
 296               	.L__stack_usage = 3
 297               	/* epilogue start */
  75:main.c        ****    /* switch(state){
  76:main.c        ****         case 0:
  77:main.c        ****             sendData(R2 | getDataByColor(tcolor(1,0,0),0,leds));
  78:main.c        ****             break;
  79:main.c        ****         case 1:
  80:main.c        ****             sendData(R1 | getDataByColor(tcolor(1,0,0),1,leds));
  81:main.c        ****             break;
  82:main.c        ****         case 2:
  83:main.c        ****             sendData(G2 | getDataByColor(tcolor(0,1,0),0,leds));
  84:main.c        ****             break;
  85:main.c        ****         case 3:
  86:main.c        ****             sendData(G1 | getDataByColor(tcolor(0,1,0),1,leds));
  87:main.c        ****             break;
  88:main.c        ****         case 4:
  89:main.c        ****             sendData(B2 | getDataByColor(tcolor(0,0,1),0,leds));
  90:main.c        ****             break;
  91:main.c        ****         case 5:
  92:main.c        ****             sendData(B1 | getDataByColor(tcolor(0,0,1),1,leds));
  93:main.c        ****             break;
  94:main.c        ****     }
  95:main.c        ****     state++;
  96:main.c        ****     if(state>5)state=0;*/
  97:main.c        **** }
 298               		.loc 1 97 0
 299 00c0 0F90      		pop r0
 300 00c2 0FBE      		out __SREG__,r0
 301 00c4 0F90      		pop r0
 302 00c6 1F90      		pop r1
 303 00c8 1895      		reti
 304               		.cfi_endproc
 305               	.LFE9:
 307               		.comm	leds,95,1
 308               	.global	state
 309               		.section .bss
 312               	state:
 313 0000 00        		.zero	1
 314               		.comm	currentColor,3,1
 315               		.comm	USI_I2C_Master_State,1,1
 316               		.comm	currentTime,5,1
 317               		.text
 318               	.Letext0:
 319               		.file 2 "/usr/lib/avr/include/stdint.h"
 320               		.file 3 "RTC.h"
 321               		.file 4 "Led.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccXde8a0.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccXde8a0.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccXde8a0.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccXde8a0.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccXde8a0.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccXde8a0.s:12     .text:0000000000000000 sendData
     /tmp/ccXde8a0.s:90     .text.startup:0000000000000000 main
                            *COM*:000000000000005f leds
                            *COM*:0000000000000003 currentColor
                            *COM*:0000000000000005 currentTime
     /tmp/ccXde8a0.s:159    .text:0000000000000044 __vector_8
     /tmp/ccXde8a0.s:312    .bss:0000000000000000 state
     /tmp/ccXde8a0.s:278    .text:00000000000000b6 __vector_11
                            *COM*:0000000000000001 USI_I2C_Master_State

UNDEFINED SYMBOLS
ledInit
tcolorV
setCurrentTime
__do_clear_bss
