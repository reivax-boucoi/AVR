   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	sendRawData
  12               	sendRawData:
  13               	.LFB6:
  14               		.file 1 "main.c"
   1:main.c        **** #define F_CPU 16000000UL
   2:main.c        **** #include <avr/io.h>
   3:main.c        **** #include <avr/interrupt.h>
   4:main.c        **** #include <util/delay.h>
   5:main.c        **** #include "defines.h"
   6:main.c        **** #include "Led.h"
   7:main.c        **** #include "RTC.h"
   8:main.c        **** 
   9:main.c        **** void sendRawData(uint32_t data){
  15               		.loc 1 9 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 0F93      		push r16
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 16, -2
  22 0002 1F93      		push r17
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 17, -3
  26               	/* prologue: function */
  27               	/* frame size = 0 */
  28               	/* stack size = 2 */
  29               	.L__stack_usage = 2
  10:main.c        ****     PORTA &=~(STROBE|CLK);
  30               		.loc 1 10 0
  31 0004 2BB3      		in r18,0x1b
  32 0006 237F      		andi r18,lo8(-13)
  33 0008 2BBB      		out 0x1b,r18
  34               	.LVL1:
  35 000a 40E0      		ldi r20,0
  36 000c 50E0      		ldi r21,0
  37               	.LVL2:
  38               	.L4:
  39               	.LBB10:
  11:main.c        ****     for(uint8_t i=0;i<20;i++){
  12:main.c        ****         if((data>>i) & 0x00000001){
  40               		.loc 1 12 0
  41 000e 8B01      		movw r16,r22
  42 0010 9C01      		movw r18,r24
  43 0012 042E      		mov r0,r20
  44 0014 00C0      		rjmp 2f
  45               		1:
  46 0016 3695      		lsr r19
  47 0018 2795      		ror r18
  48 001a 1795      		ror r17
  49 001c 0795      		ror r16
  50               		2:
  51 001e 0A94      		dec r0
  52 0020 02F4      		brpl 1b
  53 0022 00FF      		sbrs r16,0
  54 0024 00C0      		rjmp .L2
  13:main.c        ****             PORTA|=DATA;
  55               		.loc 1 13 0
  56 0026 D99A      		sbi 0x1b,1
  57 0028 00C0      		rjmp .L3
  58               	.L2:
  14:main.c        ****         }else{
  15:main.c        ****             PORTA&=~DATA;
  59               		.loc 1 15 0
  60 002a D998      		cbi 0x1b,1
  61               	.L3:
  16:main.c        ****         }
  17:main.c        ****         PORTA|=CLK;
  62               		.loc 1 17 0 discriminator 2
  63 002c DB9A      		sbi 0x1b,3
  18:main.c        ****         PORTA&=~CLK;
  64               		.loc 1 18 0 discriminator 2
  65 002e DB98      		cbi 0x1b,3
  66               	.LVL3:
  67 0030 4F5F      		subi r20,-1
  68 0032 5F4F      		sbci r21,-1
  69               	.LVL4:
  11:main.c        ****         if((data>>i) & 0x00000001){
  70               		.loc 1 11 0 discriminator 2
  71 0034 4431      		cpi r20,20
  72 0036 5105      		cpc r21,__zero_reg__
  73 0038 01F4      		brne .L4
  74               	.LBE10:
  19:main.c        ****     }
  20:main.c        ****     PORTA|=STROBE;
  75               		.loc 1 20 0
  76 003a DA9A      		sbi 0x1b,2
  21:main.c        ****     PORTA&=~STROBE;
  77               		.loc 1 21 0
  78 003c DA98      		cbi 0x1b,2
  79               	/* epilogue start */
  22:main.c        **** }
  80               		.loc 1 22 0
  81 003e 1F91      		pop r17
  82 0040 0F91      		pop r16
  83 0042 0895      		ret
  84               		.cfi_endproc
  85               	.LFE6:
  87               	.global	sendData
  89               	sendData:
  90               	.LFB7:
  23:main.c        **** uint8_t ledr=0;
  24:main.c        **** uint8_t ledb=0;
  25:main.c        **** void sendData(uint32_t data){
  91               		.loc 1 25 0
  92               		.cfi_startproc
  93               	.LVL5:
  94               	/* prologue: function */
  95               	/* frame size = 0 */
  96               	/* stack size = 0 */
  97               	.L__stack_usage = 0
  26:main.c        ****     if(ledr)data|=LEDR;
  98               		.loc 1 26 0
  99 0044 2091 0000 		lds r18,ledr
 100 0048 2111      		cpse r18,__zero_reg__
 101               		.loc 1 26 0 is_stmt 0 discriminator 1
 102 004a 7860      		ori r23,8
 103               	.LVL6:
 104               	.L8:
  27:main.c        ****     if(ledb)data|=LEDB;
 105               		.loc 1 27 0 is_stmt 1
 106 004c 2091 0000 		lds r18,ledb
 107 0050 2111      		cpse r18,__zero_reg__
 108               		.loc 1 27 0 is_stmt 0 discriminator 1
 109 0052 7460      		ori r23,4
 110               	.LVL7:
 111               	.L9:
  28:main.c        ****     sendRawData(data);
 112               		.loc 1 28 0 is_stmt 1
 113 0054 00C0      		rjmp sendRawData
 114               	.LVL8:
 115               		.cfi_endproc
 116               	.LFE7:
 118               		.section	.text.startup,"ax",@progbits
 119               	.global	main
 121               	main:
 122               	.LFB8:
  29:main.c        **** }
  30:main.c        **** volatile uint8_t state=0;
  31:main.c        **** Led leds[NBLEDS];
  32:main.c        **** 
  33:main.c        **** int main(void){    
 123               		.loc 1 33 0
 124               		.cfi_startproc
 125               	/* prologue: function */
 126               	/* frame size = 0 */
 127               	/* stack size = 0 */
 128               	.L__stack_usage = 0
  34:main.c        ****     DDRA |= CLK|DATA|STROBE|LED;
 129               		.loc 1 34 0
 130 0000 8AB3      		in r24,0x1a
 131 0002 8F60      		ori r24,lo8(15)
 132 0004 8ABB      		out 0x1a,r24
  35:main.c        ****     PORTA &= ~(CLK|DATA|STROBE|LED);
 133               		.loc 1 35 0
 134 0006 8BB3      		in r24,0x1b
 135 0008 807F      		andi r24,lo8(-16)
 136 000a 8BBB      		out 0x1b,r24
  36:main.c        ****     ledInit(leds);
 137               		.loc 1 36 0
 138 000c 80E0      		ldi r24,lo8(leds)
 139 000e 90E0      		ldi r25,hi8(leds)
 140 0010 00D0      		rcall ledInit
 141               	.LVL9:
  37:main.c        ****     
  38:main.c        ****     TIMSK1|=(1<<TOIE1);
 142               		.loc 1 38 0
 143 0012 609A      		sbi 0xc,0
  39:main.c        ****     TIMSK0|=(1<<TOIE0);
 144               		.loc 1 39 0
 145 0014 89B7      		in r24,0x39
 146 0016 8160      		ori r24,lo8(1)
 147 0018 89BF      		out 0x39,r24
  40:main.c        ****     sei();
 148               		.loc 1 40 0
 149               	/* #APP */
 150               	 ;  40 "main.c" 1
 151 001a 7894      		sei
 152               	 ;  0 "" 2
  41:main.c        ****     
  42:main.c        ****     sendData(0b11111100001111111111 | LEDB);
 153               		.loc 1 42 0
 154               	/* #NOAPP */
 155 001c 6FEF      		ldi r22,lo8(-1)
 156 001e 77EC      		ldi r23,lo8(-57)
 157 0020 8FE0      		ldi r24,lo8(15)
 158 0022 90E0      		ldi r25,0
 159 0024 00D0      		rcall sendData
 160               	.LVL10:
 161               	.LBB11:
 162               	.LBB12:
 163               		.file 2 "/usr/lib/avr/include/util/delay.h"
   1:/usr/lib/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/avr/include/util/delay.h **** 
   6:/usr/lib/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/avr/include/util/delay.h **** 
   9:/usr/lib/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/avr/include/util/delay.h **** 
  12:/usr/lib/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/avr/include/util/delay.h ****      distribution.
  16:/usr/lib/avr/include/util/delay.h **** 
  17:/usr/lib/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/avr/include/util/delay.h **** 
  21:/usr/lib/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/avr/include/util/delay.h **** 
  33:/usr/lib/avr/include/util/delay.h **** /* $Id$ */
  34:/usr/lib/avr/include/util/delay.h **** 
  35:/usr/lib/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/avr/include/util/delay.h **** 
  38:/usr/lib/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/lib/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/lib/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/lib/avr/include/util/delay.h **** #  endif
  42:/usr/lib/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/lib/avr/include/util/delay.h **** 
  44:/usr/lib/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/lib/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/lib/avr/include/util/delay.h **** #include <math.h>
  47:/usr/lib/avr/include/util/delay.h **** 
  48:/usr/lib/avr/include/util/delay.h **** /** \file */
  49:/usr/lib/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/lib/avr/include/util/delay.h ****     \code
  51:/usr/lib/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/lib/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/lib/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/lib/avr/include/util/delay.h ****     \endcode
  55:/usr/lib/avr/include/util/delay.h **** 
  56:/usr/lib/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/lib/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/lib/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/lib/avr/include/util/delay.h ****     used.
  60:/usr/lib/avr/include/util/delay.h **** 
  61:/usr/lib/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/lib/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/lib/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/lib/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/lib/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/lib/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/lib/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/lib/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/lib/avr/include/util/delay.h **** 
  70:/usr/lib/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/lib/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/lib/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/lib/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/lib/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/lib/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/lib/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/lib/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/lib/avr/include/util/delay.h **** 
  79:/usr/lib/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/lib/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/lib/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/lib/avr/include/util/delay.h **** 
  83:/usr/lib/avr/include/util/delay.h **** */
  84:/usr/lib/avr/include/util/delay.h **** 
  85:/usr/lib/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/lib/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/lib/avr/include/util/delay.h **** #endif
  89:/usr/lib/avr/include/util/delay.h **** 
  90:/usr/lib/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/lib/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/lib/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/lib/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/lib/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/lib/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/lib/avr/include/util/delay.h **** 
  97:/usr/lib/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/lib/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/lib/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/lib/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/lib/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/lib/avr/include/util/delay.h **** 
 103:/usr/lib/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/lib/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/lib/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/lib/avr/include/util/delay.h ****     integer value.
 107:/usr/lib/avr/include/util/delay.h ****  */
 108:/usr/lib/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/lib/avr/include/util/delay.h **** #endif
 110:/usr/lib/avr/include/util/delay.h **** 
 111:/usr/lib/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/lib/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/lib/avr/include/util/delay.h **** #endif
 114:/usr/lib/avr/include/util/delay.h **** 
 115:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/lib/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/lib/avr/include/util/delay.h **** #endif
 120:/usr/lib/avr/include/util/delay.h **** 
 121:/usr/lib/avr/include/util/delay.h **** /**
 122:/usr/lib/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/lib/avr/include/util/delay.h **** 
 124:/usr/lib/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/lib/avr/include/util/delay.h **** 
 126:/usr/lib/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/lib/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/lib/avr/include/util/delay.h **** 
 129:/usr/lib/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/lib/avr/include/util/delay.h **** 
 131:/usr/lib/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/lib/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/lib/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/lib/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/lib/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/lib/avr/include/util/delay.h **** 
 137:/usr/lib/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/lib/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/lib/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/lib/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/lib/avr/include/util/delay.h **** 
 142:/usr/lib/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/lib/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/lib/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/lib/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/lib/avr/include/util/delay.h **** 
 147:/usr/lib/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/lib/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/lib/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/lib/avr/include/util/delay.h ****    respectively.
 151:/usr/lib/avr/include/util/delay.h **** 
 152:/usr/lib/avr/include/util/delay.h ****    \note
 153:/usr/lib/avr/include/util/delay.h **** 
 154:/usr/lib/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/lib/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/lib/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/lib/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/lib/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/lib/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/lib/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/lib/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/lib/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/lib/avr/include/util/delay.h **** 
 164:/usr/lib/avr/include/util/delay.h ****  */
 165:/usr/lib/avr/include/util/delay.h **** void
 166:/usr/lib/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/lib/avr/include/util/delay.h **** {
 168:/usr/lib/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/lib/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/lib/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/lib/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/lib/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/lib/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/lib/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/lib/avr/include/util/delay.h **** 
 176:/usr/lib/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/lib/avr/include/util/delay.h **** 
 179:/usr/lib/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/lib/avr/include/util/delay.h **** 
 182:/usr/lib/avr/include/util/delay.h **** 	#else
 183:/usr/lib/avr/include/util/delay.h **** 		//round up by default
 184:/usr/lib/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/lib/avr/include/util/delay.h **** 	#endif
 186:/usr/lib/avr/include/util/delay.h **** 
 187:/usr/lib/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 164               		.loc 2 187 0
 165 0026 2FEF      		ldi r18,lo8(7999999)
 166 0028 81E1      		ldi r24,hi8(7999999)
 167 002a 9AE7      		ldi r25,hlo8(7999999)
 168 002c 2150      	1:	subi r18,1
 169 002e 8040      		sbci r24,0
 170 0030 9040      		sbci r25,0
 171 0032 01F4      		brne 1b
 172 0034 00C0      		rjmp .
 173 0036 0000      		nop
 174               	.LVL11:
 175               	.LBE12:
 176               	.LBE11:
  43:main.c        ****     _delay_ms(2500);
  44:main.c        ****     sendData(0b11000000001111111111);
 177               		.loc 1 44 0
 178 0038 6FEF      		ldi r22,lo8(-1)
 179 003a 73E0      		ldi r23,lo8(3)
 180 003c 8CE0      		ldi r24,lo8(12)
 181 003e 90E0      		ldi r25,0
 182 0040 00D0      		rcall sendData
 183               	.LVL12:
 184               	.LBB13:
 185               	.LBB14:
 186               		.loc 2 187 0
 187 0042 2FEF      		ldi r18,lo8(7999999)
 188 0044 81E1      		ldi r24,hi8(7999999)
 189 0046 9AE7      		ldi r25,hlo8(7999999)
 190 0048 2150      	1:	subi r18,1
 191 004a 8040      		sbci r24,0
 192 004c 9040      		sbci r25,0
 193 004e 01F4      		brne 1b
 194 0050 00C0      		rjmp .
 195 0052 0000      		nop
 196               	.LVL13:
 197               	.LBE14:
 198               	.LBE13:
  45:main.c        ****     _delay_ms(2500);
  46:main.c        ****     sendData(0b00001100001111111111 | LEDR);
 199               		.loc 1 46 0
 200 0054 6FEF      		ldi r22,lo8(-1)
 201 0056 7BEC      		ldi r23,lo8(-53)
 202 0058 80E0      		ldi r24,0
 203 005a 90E0      		ldi r25,0
 204 005c 00D0      		rcall sendData
 205               	.LVL14:
 206               	.LBB15:
 207               	.LBB16:
 208               		.loc 2 187 0
 209 005e 2FEF      		ldi r18,lo8(7999999)
 210 0060 81E1      		ldi r24,hi8(7999999)
 211 0062 9AE7      		ldi r25,hlo8(7999999)
 212 0064 2150      	1:	subi r18,1
 213 0066 8040      		sbci r24,0
 214 0068 9040      		sbci r25,0
 215 006a 01F4      		brne 1b
 216 006c 00C0      		rjmp .
 217 006e 0000      		nop
 218               	.LVL15:
 219               	.LBE16:
 220               	.LBE15:
  47:main.c        ****     _delay_ms(2500);
  48:main.c        ****     sendData(0b00110000001111111111);
 221               		.loc 1 48 0
 222 0070 6FEF      		ldi r22,lo8(-1)
 223 0072 73E0      		ldi r23,lo8(3)
 224 0074 83E0      		ldi r24,lo8(3)
 225 0076 90E0      		ldi r25,0
 226 0078 00D0      		rcall sendData
 227               	.LVL16:
 228               	.LBB17:
 229               	.LBB18:
 230               		.loc 2 187 0
 231 007a 2FEF      		ldi r18,lo8(7999999)
 232 007c 81E1      		ldi r24,hi8(7999999)
 233 007e 9AE7      		ldi r25,hlo8(7999999)
 234 0080 2150      	1:	subi r18,1
 235 0082 8040      		sbci r24,0
 236 0084 9040      		sbci r25,0
 237 0086 01F4      		brne 1b
 238 0088 00C0      		rjmp .
 239 008a 0000      		nop
 240               	.LVL17:
 241               	.LBE18:
 242               	.LBE17:
  49:main.c        ****     _delay_ms(2500);
  50:main.c        ****     #ifdef DELLONG
  51:main.c        **** 		TCCR1B|=(1<<CS12)|(1<<CS10);
  52:main.c        **** 	#else
  53:main.c        **** 		TCCR1B|=(1<<CS12);//|(1<<CS10);
 243               		.loc 1 53 0
 244 008c 8EB5      		in r24,0x2e
 245 008e 8460      		ori r24,lo8(4)
 246 0090 8EBD      		out 0x2e,r24
  54:main.c        **** 	#endif
  55:main.c        **** 	
  56:main.c        **** 	TCCR0B|=(1<<CS01)|(1<<CS00);
 247               		.loc 1 56 0
 248 0092 83B7      		in r24,0x33
 249 0094 8360      		ori r24,lo8(3)
 250 0096 83BF      		out 0x33,r24
  57:main.c        ****     
  58:main.c        ****     currentColor=tcolorV(RED);
 251               		.loc 1 58 0
 252 0098 60E0      		ldi r22,0
 253 009a 70E0      		ldi r23,0
 254 009c 8FEF      		ldi r24,lo8(-1)
 255 009e 90E0      		ldi r25,0
 256 00a0 00D0      		rcall tcolorV
 257               	.LVL18:
 258 00a2 6093 0000 		sts currentColor,r22
 259 00a6 7093 0000 		sts currentColor+1,r23
 260 00aa 8093 0000 		sts currentColor+2,r24
  59:main.c        ****     setCurrentTime(15,45,7,11);
 261               		.loc 1 59 0
 262 00ae 2BE0      		ldi r18,lo8(11)
 263 00b0 47E0      		ldi r20,lo8(7)
 264 00b2 6DE2      		ldi r22,lo8(45)
 265 00b4 8FE0      		ldi r24,lo8(15)
 266 00b6 00D0      		rcall setCurrentTime
 267               	.LVL19:
  60:main.c        **** 	//RTC_readTime(&currentTime);
  61:main.c        ****     currentTime.temp=11;
 268               		.loc 1 61 0
 269 00b8 8BE0      		ldi r24,lo8(11)
 270 00ba 8093 0000 		sts currentTime+4,r24
 271               	.L17:
 272 00be 00C0      		rjmp .L17
 273               		.cfi_endproc
 274               	.LFE8:
 276               		.text
 277               	.global	__vector_8
 279               	__vector_8:
 280               	.LFB9:
  62:main.c        ****     //setLeds(currentTime,leds,currentColor);
  63:main.c        ****     
  64:main.c        ****     while(1){
  65:main.c        ****        
  66:main.c        ****     }
  67:main.c        ****     return(0);
  68:main.c        ****     
  69:main.c        **** }
  70:main.c        **** ISR( TIM1_OVF_vect ){
 281               		.loc 1 70 0
 282               		.cfi_startproc
 283 0056 1F92      		push r1
 284               	.LCFI2:
 285               		.cfi_def_cfa_offset 3
 286               		.cfi_offset 1, -2
 287 0058 0F92      		push r0
 288               	.LCFI3:
 289               		.cfi_def_cfa_offset 4
 290               		.cfi_offset 0, -3
 291 005a 0FB6      		in r0,__SREG__
 292 005c 0F92      		push r0
 293 005e 1124      		clr __zero_reg__
 294 0060 8F93      		push r24
 295               	.LCFI4:
 296               		.cfi_def_cfa_offset 5
 297               		.cfi_offset 24, -4
 298 0062 9F93      		push r25
 299               	.LCFI5:
 300               		.cfi_def_cfa_offset 6
 301               		.cfi_offset 25, -5
 302               	/* prologue: Signal */
 303               	/* frame size = 0 */
 304               	/* stack size = 5 */
 305               	.L__stack_usage = 5
  71:main.c        ****     ledb=1-ledb;
 306               		.loc 1 71 0
 307 0064 9091 0000 		lds r25,ledb
 308 0068 81E0      		ldi r24,lo8(1)
 309 006a 891B      		sub r24,r25
 310 006c 8093 0000 		sts ledb,r24
  72:main.c        ****     ledr=!ledb;
 311               		.loc 1 72 0
 312 0070 91E0      		ldi r25,lo8(1)
 313 0072 8111      		cpse r24,__zero_reg__
 314 0074 90E0      		ldi r25,0
 315               	.L19:
 316 0076 9093 0000 		sts ledr,r25
  73:main.c        ****     if(ledb){
 317               		.loc 1 73 0
 318 007a 8823      		tst r24
 319 007c 01F0      		breq .L20
  74:main.c        ****     leds[1].c.g=1;
 320               		.loc 1 74 0
 321 007e 81E0      		ldi r24,lo8(1)
 322 0080 8093 0000 		sts leds+8,r24
  75:main.c        ****     leds[0].c.g=0;
 323               		.loc 1 75 0
 324 0084 1092 0000 		sts leds+3,__zero_reg__
 325 0088 00C0      		rjmp .L18
 326               	.L20:
  76:main.c        ****     }else{
  77:main.c        ****     leds[1].c.g=0;
 327               		.loc 1 77 0
 328 008a 1092 0000 		sts leds+8,__zero_reg__
  78:main.c        ****     leds[0].c.g=1;
 329               		.loc 1 78 0
 330 008e 81E0      		ldi r24,lo8(1)
 331 0090 8093 0000 		sts leds+3,r24
 332               	.L18:
 333               	/* epilogue start */
  79:main.c        ****     }
  80:main.c        ****     //RTC_readTime(&currentTime);
  81:main.c        ****     //setLeds(currentTime,leds,currentColor);
  82:main.c        **** }
 334               		.loc 1 82 0
 335 0094 9F91      		pop r25
 336 0096 8F91      		pop r24
 337 0098 0F90      		pop r0
 338 009a 0FBE      		out __SREG__,r0
 339 009c 0F90      		pop r0
 340 009e 1F90      		pop r1
 341 00a0 1895      		reti
 342               		.cfi_endproc
 343               	.LFE9:
 345               	.global	__vector_11
 347               	__vector_11:
 348               	.LFB10:
  83:main.c        **** ISR( TIM0_OVF_vect ){
 349               		.loc 1 83 0
 350               		.cfi_startproc
 351 00a2 1F92      		push r1
 352               	.LCFI6:
 353               		.cfi_def_cfa_offset 3
 354               		.cfi_offset 1, -2
 355 00a4 0F92      		push r0
 356               	.LCFI7:
 357               		.cfi_def_cfa_offset 4
 358               		.cfi_offset 0, -3
 359 00a6 0FB6      		in r0,__SREG__
 360 00a8 0F92      		push r0
 361 00aa 1124      		clr __zero_reg__
 362 00ac 2F93      		push r18
 363               	.LCFI8:
 364               		.cfi_def_cfa_offset 5
 365               		.cfi_offset 18, -4
 366 00ae 3F93      		push r19
 367               	.LCFI9:
 368               		.cfi_def_cfa_offset 6
 369               		.cfi_offset 19, -5
 370 00b0 4F93      		push r20
 371               	.LCFI10:
 372               		.cfi_def_cfa_offset 7
 373               		.cfi_offset 20, -6
 374 00b2 5F93      		push r21
 375               	.LCFI11:
 376               		.cfi_def_cfa_offset 8
 377               		.cfi_offset 21, -7
 378 00b4 6F93      		push r22
 379               	.LCFI12:
 380               		.cfi_def_cfa_offset 9
 381               		.cfi_offset 22, -8
 382 00b6 7F93      		push r23
 383               	.LCFI13:
 384               		.cfi_def_cfa_offset 10
 385               		.cfi_offset 23, -9
 386 00b8 8F93      		push r24
 387               	.LCFI14:
 388               		.cfi_def_cfa_offset 11
 389               		.cfi_offset 24, -10
 390 00ba 9F93      		push r25
 391               	.LCFI15:
 392               		.cfi_def_cfa_offset 12
 393               		.cfi_offset 25, -11
 394 00bc AF93      		push r26
 395               	.LCFI16:
 396               		.cfi_def_cfa_offset 13
 397               		.cfi_offset 26, -12
 398 00be BF93      		push r27
 399               	.LCFI17:
 400               		.cfi_def_cfa_offset 14
 401               		.cfi_offset 27, -13
 402 00c0 EF93      		push r30
 403               	.LCFI18:
 404               		.cfi_def_cfa_offset 15
 405               		.cfi_offset 30, -14
 406 00c2 FF93      		push r31
 407               	.LCFI19:
 408               		.cfi_def_cfa_offset 16
 409               		.cfi_offset 31, -15
 410               	/* prologue: Signal */
 411               	/* frame size = 0 */
 412               	/* stack size = 15 */
 413               	.L__stack_usage = 15
  84:main.c        ****     switch(state){
 414               		.loc 1 84 0
 415 00c4 8091 0000 		lds r24,state
 416 00c8 8230      		cpi r24,lo8(2)
 417 00ca 01F0      		breq .L27
 418 00cc 00F4      		brsh .L28
 419 00ce 8823      		tst r24
 420 00d0 01F0      		breq .L29
 421 00d2 8130      		cpi r24,lo8(1)
 422 00d4 01F0      		breq .+2
 423 00d6 00C0      		rjmp .L26
  85:main.c        ****         case 0:
  86:main.c        ****             sendData(R2 | getDataByColor(tcolor(1,0,0),0,leds));
  87:main.c        ****             break;
  88:main.c        ****         case 1:
  89:main.c        ****             sendData(R1 | getDataByColor(tcolor(1,0,0),1,leds));
 424               		.loc 1 89 0
 425 00d8 40E0      		ldi r20,0
 426 00da 60E0      		ldi r22,0
 427 00dc 81E0      		ldi r24,lo8(1)
 428 00de 00D0      		rcall tcolor
 429               	.LVL20:
 430 00e0 20E0      		ldi r18,lo8(leds)
 431 00e2 30E0      		ldi r19,hi8(leds)
 432 00e4 41E0      		ldi r20,lo8(1)
 433 00e6 00D0      		rcall getDataByColor
 434               	.LVL21:
 435 00e8 7068      		ori r23,128
 436 00ea 00C0      		rjmp .L35
 437               	.L28:
  84:main.c        ****     switch(state){
 438               		.loc 1 84 0
 439 00ec 8430      		cpi r24,lo8(4)
 440 00ee 01F0      		breq .L31
 441 00f0 00F0      		brlo .L32
 442 00f2 8530      		cpi r24,lo8(5)
 443 00f4 01F4      		brne .L26
  90:main.c        ****             break;
  91:main.c        ****         case 2:
  92:main.c        ****             sendData(G2 | getDataByColor(tcolor(0,1,0),0,leds));
  93:main.c        ****             break;
  94:main.c        ****         case 3:
  95:main.c        ****             sendData(G1 | getDataByColor(tcolor(0,1,0),1,leds));
  96:main.c        ****             break;
  97:main.c        ****         case 4:
  98:main.c        ****             sendData(B2 | getDataByColor(tcolor(0,0,1),0,leds));
  99:main.c        ****             break;
 100:main.c        ****         case 5:
 101:main.c        ****             sendData(B1 | getDataByColor(tcolor(0,0,1),1,leds));
 444               		.loc 1 101 0
 445 00f6 41E0      		ldi r20,lo8(1)
 446 00f8 60E0      		ldi r22,0
 447 00fa 80E0      		ldi r24,0
 448 00fc 00D0      		rcall tcolor
 449               	.LVL22:
 450 00fe 20E0      		ldi r18,lo8(leds)
 451 0100 30E0      		ldi r19,hi8(leds)
 452 0102 41E0      		ldi r20,lo8(1)
 453 0104 00D0      		rcall getDataByColor
 454               	.LVL23:
 455 0106 8160      		ori r24,1
 456 0108 00C0      		rjmp .L35
 457               	.L29:
  86:main.c        ****             break;
 458               		.loc 1 86 0
 459 010a 40E0      		ldi r20,0
 460 010c 60E0      		ldi r22,0
 461 010e 81E0      		ldi r24,lo8(1)
 462 0110 00D0      		rcall tcolor
 463               	.LVL24:
 464 0112 20E0      		ldi r18,lo8(leds)
 465 0114 30E0      		ldi r19,hi8(leds)
 466 0116 40E0      		ldi r20,0
 467 0118 00D0      		rcall getDataByColor
 468               	.LVL25:
 469 011a 7064      		ori r23,64
 470 011c 00C0      		rjmp .L35
 471               	.L27:
  92:main.c        ****             break;
 472               		.loc 1 92 0
 473 011e 40E0      		ldi r20,0
 474 0120 61E0      		ldi r22,lo8(1)
 475 0122 80E0      		ldi r24,0
 476 0124 00D0      		rcall tcolor
 477               	.LVL26:
 478 0126 20E0      		ldi r18,lo8(leds)
 479 0128 30E0      		ldi r19,hi8(leds)
 480 012a 40E0      		ldi r20,0
 481 012c 00D0      		rcall getDataByColor
 482               	.LVL27:
 483 012e 8460      		ori r24,4
 484 0130 00C0      		rjmp .L35
 485               	.L32:
  95:main.c        ****             break;
 486               		.loc 1 95 0
 487 0132 40E0      		ldi r20,0
 488 0134 61E0      		ldi r22,lo8(1)
 489 0136 80E0      		ldi r24,0
 490 0138 00D0      		rcall tcolor
 491               	.LVL28:
 492 013a 20E0      		ldi r18,lo8(leds)
 493 013c 30E0      		ldi r19,hi8(leds)
 494 013e 41E0      		ldi r20,lo8(1)
 495 0140 00D0      		rcall getDataByColor
 496               	.LVL29:
 497 0142 8860      		ori r24,8
 498 0144 00C0      		rjmp .L35
 499               	.L31:
  98:main.c        ****             break;
 500               		.loc 1 98 0
 501 0146 41E0      		ldi r20,lo8(1)
 502 0148 60E0      		ldi r22,0
 503 014a 80E0      		ldi r24,0
 504 014c 00D0      		rcall tcolor
 505               	.LVL30:
 506 014e 20E0      		ldi r18,lo8(leds)
 507 0150 30E0      		ldi r19,hi8(leds)
 508 0152 40E0      		ldi r20,0
 509 0154 00D0      		rcall getDataByColor
 510               	.LVL31:
 511 0156 8260      		ori r24,2
 512               	.L35:
 513               		.loc 1 101 0
 514 0158 00D0      		rcall sendData
 515               	.LVL32:
 516               	.L26:
 102:main.c        ****             break;
 103:main.c        ****     }
 104:main.c        ****     state++;
 517               		.loc 1 104 0
 518 015a 8091 0000 		lds r24,state
 519 015e 8F5F      		subi r24,lo8(-(1))
 520 0160 8093 0000 		sts state,r24
 105:main.c        ****     if(state>5)state=0;
 521               		.loc 1 105 0
 522 0164 8091 0000 		lds r24,state
 523 0168 8630      		cpi r24,lo8(6)
 524 016a 00F0      		brlo .L25
 525               		.loc 1 105 0 is_stmt 0 discriminator 1
 526 016c 1092 0000 		sts state,__zero_reg__
 527               	.L25:
 528               	/* epilogue start */
 106:main.c        **** }
 529               		.loc 1 106 0 is_stmt 1
 530 0170 FF91      		pop r31
 531 0172 EF91      		pop r30
 532 0174 BF91      		pop r27
 533 0176 AF91      		pop r26
 534 0178 9F91      		pop r25
 535 017a 8F91      		pop r24
 536 017c 7F91      		pop r23
 537 017e 6F91      		pop r22
 538 0180 5F91      		pop r21
 539 0182 4F91      		pop r20
 540 0184 3F91      		pop r19
 541 0186 2F91      		pop r18
 542 0188 0F90      		pop r0
 543 018a 0FBE      		out __SREG__,r0
 544 018c 0F90      		pop r0
 545 018e 1F90      		pop r1
 546 0190 1895      		reti
 547               		.cfi_endproc
 548               	.LFE10:
 550               		.comm	leds,95,1
 551               	.global	state
 552               		.section .bss
 555               	state:
 556 0000 00        		.zero	1
 557               	.global	ledb
 560               	ledb:
 561 0001 00        		.zero	1
 562               	.global	ledr
 565               	ledr:
 566 0002 00        		.zero	1
 567               		.comm	currentColor,3,1
 568               		.comm	USI_I2C_Master_State,1,1
 569               		.comm	currentTime,5,1
 570               		.text
 571               	.Letext0:
 572               		.file 3 "/usr/lib/avr/include/stdint.h"
 573               		.file 4 "RTC.h"
 574               		.file 5 "Led.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cciHyVwM.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cciHyVwM.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cciHyVwM.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cciHyVwM.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cciHyVwM.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cciHyVwM.s:12     .text:0000000000000000 sendRawData
     /tmp/cciHyVwM.s:89     .text:0000000000000044 sendData
     /tmp/cciHyVwM.s:565    .bss:0000000000000002 ledr
     /tmp/cciHyVwM.s:560    .bss:0000000000000001 ledb
     /tmp/cciHyVwM.s:121    .text.startup:0000000000000000 main
                            *COM*:000000000000005f leds
                            *COM*:0000000000000003 currentColor
                            *COM*:0000000000000005 currentTime
     /tmp/cciHyVwM.s:279    .text:0000000000000056 __vector_8
     /tmp/cciHyVwM.s:347    .text:00000000000000a2 __vector_11
     /tmp/cciHyVwM.s:555    .bss:0000000000000000 state
                            *COM*:0000000000000001 USI_I2C_Master_State

UNDEFINED SYMBOLS
ledInit
tcolorV
setCurrentTime
tcolor
getDataByColor
__do_clear_bss
