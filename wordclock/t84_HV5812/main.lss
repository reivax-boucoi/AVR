
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016a  00800060  00000c2c  00000cc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000046  008001ca  008001ca  00000e2a  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000e2a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a7a  00000000  00000000  00000f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dd4  00000000  00000000  0000397a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c83  00000000  00000000  0000474e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005b4  00000000  00000000  000053d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000660  00000000  00000000  00005988  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001848  00000000  00000000  00005fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00007830  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	66 c0       	rjmp	.+204    	; 0xd2 <__vector_2>
   6:	32 c0       	rjmp	.+100    	; 0x6c <__vector_3>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	ae c0       	rjmp	.+348    	; 0x16e <__vector_8>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c1       	rjmp	.+576    	; 0x258 <__vector_11>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	11 e0       	ldi	r17, 0x01	; 1
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	ec e2       	ldi	r30, 0x2C	; 44
  36:	fc e0       	ldi	r31, 0x0C	; 12
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	aa 3c       	cpi	r26, 0xCA	; 202
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	22 e0       	ldi	r18, 0x02	; 2
  46:	aa ec       	ldi	r26, 0xCA	; 202
  48:	b1 e0       	ldi	r27, 0x01	; 1
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a0 31       	cpi	r26, 0x10	; 16
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	3d d5       	rcall	.+2682   	; 0xad0 <main>
  56:	e8 c5       	rjmp	.+3024   	; 0xc28 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <sendData>:

uint8_t ledr=0;
uint8_t ledb=0;

void sendData(uint32_t data){
    if(ledr)data|=LEDR;
  5a:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <ledr>
  5e:	21 11       	cpse	r18, r1
  60:	78 60       	ori	r23, 0x08	; 8
    if(ledb)data|=LEDB;
  62:	20 91 ce 01 	lds	r18, 0x01CE	; 0x8001ce <ledb>
  66:	21 11       	cpse	r18, r1
  68:	74 60       	ori	r23, 0x04	; 4
    sendRawData(data);
  6a:	47 c2       	rjmp	.+1166   	; 0x4fa <sendRawData>

0000006c <__vector_3>:
    while(1){
    }
    return(0);
    
}
ISR( PCINT1_vect){
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	3f 93       	push	r19
  7a:	4f 93       	push	r20
  7c:	5f 93       	push	r21
  7e:	6f 93       	push	r22
  80:	7f 93       	push	r23
  82:	8f 93       	push	r24
  84:	9f 93       	push	r25
  86:	af 93       	push	r26
  88:	bf 93       	push	r27
  8a:	ef 93       	push	r30
  8c:	ff 93       	push	r31
    if(PINB&BTNSELECT && Mcurrent){
  8e:	b2 9b       	sbis	0x16, 2	; 22
  90:	0f c0       	rjmp	.+30     	; 0xb0 <__vector_3+0x44>
  92:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <Mcurrent>
  96:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <Mcurrent+0x1>
  9a:	00 97       	sbiw	r24, 0x00	; 0
  9c:	49 f0       	breq	.+18     	; 0xb0 <__vector_3+0x44>
        Mindex=findNextEntry(Mcurrent,Mindex);
  9e:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <__data_end>
  a2:	53 d4       	rcall	.+2214   	; 0x94a <findNextEntry>
  a4:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__data_end>
        TCNT1=65534;//get straight to led update
  a8:	8e ef       	ldi	r24, 0xFE	; 254
  aa:	9f ef       	ldi	r25, 0xFF	; 255
  ac:	9d bd       	out	0x2d, r25	; 45
  ae:	8c bd       	out	0x2c, r24	; 44
    }
}
  b0:	ff 91       	pop	r31
  b2:	ef 91       	pop	r30
  b4:	bf 91       	pop	r27
  b6:	af 91       	pop	r26
  b8:	9f 91       	pop	r25
  ba:	8f 91       	pop	r24
  bc:	7f 91       	pop	r23
  be:	6f 91       	pop	r22
  c0:	5f 91       	pop	r21
  c2:	4f 91       	pop	r20
  c4:	3f 91       	pop	r19
  c6:	2f 91       	pop	r18
  c8:	0f 90       	pop	r0
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	0f 90       	pop	r0
  ce:	1f 90       	pop	r1
  d0:	18 95       	reti

000000d2 <__vector_2>:
ISR( PCINT0_vect){
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	2f 93       	push	r18
  de:	3f 93       	push	r19
  e0:	4f 93       	push	r20
  e2:	5f 93       	push	r21
  e4:	6f 93       	push	r22
  e6:	7f 93       	push	r23
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
  ec:	af 93       	push	r26
  ee:	bf 93       	push	r27
  f0:	ef 93       	push	r30
  f2:	ff 93       	push	r31
    if(PINA&BTNOK){
  f4:	cf 9b       	sbis	0x19, 7	; 25
  f6:	29 c0       	rjmp	.+82     	; 0x14a <__vector_2+0x78>
        if(!Mcurrent){
  f8:	e0 91 cb 01 	lds	r30, 0x01CB	; 0x8001cb <Mcurrent>
  fc:	f0 91 cc 01 	lds	r31, 0x01CC	; 0x8001cc <Mcurrent+0x1>
 100:	30 97       	sbiw	r30, 0x00	; 0
 102:	39 f4       	brne	.+14     	; 0x112 <__vector_2+0x40>
            Mcurrent=&M0main;//if not in menu mode
 104:	88 ea       	ldi	r24, 0xA8	; 168
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	90 93 cc 01 	sts	0x01CC, r25	; 0x8001cc <Mcurrent+0x1>
 10c:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <Mcurrent>
 110:	18 c0       	rjmp	.+48     	; 0x142 <__vector_2+0x70>
        }else{//enter menu and execute
            if(Mcurrent->fptr!=0)Mcurrent->fptr(Mindex);//check if function is associated and selected value is not a navigation move
 112:	01 80       	ldd	r0, Z+1	; 0x01
 114:	f2 81       	ldd	r31, Z+2	; 0x02
 116:	e0 2d       	mov	r30, r0
 118:	30 97       	sbiw	r30, 0x00	; 0
 11a:	19 f0       	breq	.+6      	; 0x122 <__vector_2+0x50>
 11c:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__data_end>
 120:	09 95       	icall
            Mcurrent=getSubMenu(Mcurrent,Mindex);//get new menu
 122:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <__data_end>
 126:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <Mcurrent>
 12a:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <Mcurrent+0x1>
 12e:	1d d4       	rcall	.+2106   	; 0x96a <getSubMenu>
 130:	90 93 cc 01 	sts	0x01CC, r25	; 0x8001cc <Mcurrent+0x1>
 134:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <Mcurrent>
            Mindex=0;
 138:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <__data_end>
            clearLeds(leds);
 13c:	81 ed       	ldi	r24, 0xD1	; 209
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	3a d1       	rcall	.+628    	; 0x3b6 <clearLeds>
        }
        TCNT1=65534;//get straight to led update
 142:	8e ef       	ldi	r24, 0xFE	; 254
 144:	9f ef       	ldi	r25, 0xFF	; 255
 146:	9d bd       	out	0x2d, r25	; 45
 148:	8c bd       	out	0x2c, r24	; 44
    }
    if(PINA&BTNINTERNAL){//unused secret button
 14a:	89 b3       	in	r24, 0x19	; 25
    }
}/*
 14c:	ff 91       	pop	r31
 14e:	ef 91       	pop	r30
 150:	bf 91       	pop	r27
 152:	af 91       	pop	r26
 154:	9f 91       	pop	r25
 156:	8f 91       	pop	r24
 158:	7f 91       	pop	r23
 15a:	6f 91       	pop	r22
 15c:	5f 91       	pop	r21
 15e:	4f 91       	pop	r20
 160:	3f 91       	pop	r19
 162:	2f 91       	pop	r18
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <__vector_8>:
ISR( TIM1_COMPB_vect){
}*/
ISR( TIM1_OVF_vect ){
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	2f 93       	push	r18
 17a:	3f 93       	push	r19
 17c:	4f 93       	push	r20
 17e:	5f 93       	push	r21
 180:	6f 93       	push	r22
 182:	7f 93       	push	r23
 184:	8f 93       	push	r24
 186:	9f 93       	push	r25
 188:	af 93       	push	r26
 18a:	bf 93       	push	r27
 18c:	cf 93       	push	r28
 18e:	ef 93       	push	r30
 190:	ff 93       	push	r31
    if(!Mcurrent){//if in normal display mode
 192:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <Mcurrent>
 196:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <Mcurrent+0x1>
 19a:	89 2b       	or	r24, r25
 19c:	61 f5       	brne	.+88     	; 0x1f6 <__vector_8+0x88>
        uint8_t m=getMode();
 19e:	5c d4       	rcall	.+2232   	; 0xa58 <getMode>
 1a0:	c8 2f       	mov	r28, r24
        RTC_readTime(&currentTime);
 1a2:	8b e0       	ldi	r24, 0x0B	; 11
 1a4:	92 e0       	ldi	r25, 0x02	; 2
 1a6:	32 d3       	rcall	.+1636   	; 0x80c <RTC_readTime>
        if(isInAllowedTime(currentTime.hour)){
 1a8:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <currentTime>
 1ac:	7a d4       	rcall	.+2292   	; 0xaa2 <isInAllowedTime>
 1ae:	88 23       	and	r24, r24
 1b0:	b9 f0       	breq	.+46     	; 0x1e0 <__vector_8+0x72>
            if(m<2){
 1b2:	c2 30       	cpi	r28, 0x02	; 2
 1b4:	70 f4       	brcc	.+28     	; 0x1d2 <__vector_8+0x64>
                setLeds(currentTime,leds);
 1b6:	21 ed       	ldi	r18, 0xD1	; 209
 1b8:	31 e0       	ldi	r19, 0x01	; 1
 1ba:	40 91 0b 02 	lds	r20, 0x020B	; 0x80020b <currentTime>
 1be:	50 91 0c 02 	lds	r21, 0x020C	; 0x80020c <currentTime+0x1>
 1c2:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <currentTime+0x2>
 1c6:	70 91 0e 02 	lds	r23, 0x020E	; 0x80020e <currentTime+0x3>
 1ca:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <currentTime+0x4>
 1ce:	fd d0       	rcall	.+506    	; 0x3ca <setLeds>
 1d0:	0a c0       	rjmp	.+20     	; 0x1e6 <__vector_8+0x78>
            }else if(m<4){
 1d2:	c4 30       	cpi	r28, 0x04	; 4
 1d4:	40 f4       	brcc	.+16     	; 0x1e6 <__vector_8+0x78>
                setLedsNb(RTC_readTemp(),leds);
 1d6:	04 d3       	rcall	.+1544   	; 0x7e0 <RTC_readTemp>
 1d8:	61 ed       	ldi	r22, 0xD1	; 209
 1da:	71 e0       	ldi	r23, 0x01	; 1
 1dc:	56 d1       	rcall	.+684    	; 0x48a <setLedsNb>
 1de:	03 c0       	rjmp	.+6      	; 0x1e6 <__vector_8+0x78>
            }
        }else{
            clearLeds(leds);
 1e0:	81 ed       	ldi	r24, 0xD1	; 209
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	e8 d0       	rcall	.+464    	; 0x3b6 <clearLeds>
        }
        ledr=!ledr;
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <ledr>
 1ec:	91 11       	cpse	r25, r1
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <ledr>
 1f4:	1f c0       	rjmp	.+62     	; 0x234 <__vector_8+0xc6>
    }else{//menu settings mode
        clearLeds(leds);
 1f6:	81 ed       	ldi	r24, 0xD1	; 209
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	dd d0       	rcall	.+442    	; 0x3b6 <clearLeds>
        ledOn(&leds[Mcurrent->sub[Mindex].led],colorArray[Mcurrent->nb_optn>>4]);
 1fc:	a0 91 cb 01 	lds	r26, 0x01CB	; 0x8001cb <Mcurrent>
 200:	b0 91 cc 01 	lds	r27, 0x01CC	; 0x8001cc <Mcurrent+0x1>
 204:	ec 91       	ld	r30, X
 206:	e2 95       	swap	r30
 208:	ef 70       	andi	r30, 0x0F	; 15
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	ef 59       	subi	r30, 0x9F	; 159
 20e:	ff 4f       	sbci	r31, 0xFF	; 255
 210:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__data_end>
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	01 96       	adiw	r24, 0x01	; 1
 218:	63 e0       	ldi	r22, 0x03	; 3
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	e8 d4       	rcall	.+2512   	; 0xbee <__mulhi3>
 21e:	a8 0f       	add	r26, r24
 220:	b9 1f       	adc	r27, r25
 222:	8c 91       	ld	r24, X
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	63 e0       	ldi	r22, 0x03	; 3
 228:	70 e0       	ldi	r23, 0x00	; 0
 22a:	e1 d4       	rcall	.+2498   	; 0xbee <__mulhi3>
 22c:	60 81       	ld	r22, Z
 22e:	8f 52       	subi	r24, 0x2F	; 47
 230:	9e 4f       	sbci	r25, 0xFE	; 254
 232:	bb d0       	rcall	.+374    	; 0x3aa <ledOn>
    }
    
}
 234:	ff 91       	pop	r31
 236:	ef 91       	pop	r30
 238:	cf 91       	pop	r28
 23a:	bf 91       	pop	r27
 23c:	af 91       	pop	r26
 23e:	9f 91       	pop	r25
 240:	8f 91       	pop	r24
 242:	7f 91       	pop	r23
 244:	6f 91       	pop	r22
 246:	5f 91       	pop	r21
 248:	4f 91       	pop	r20
 24a:	3f 91       	pop	r19
 24c:	2f 91       	pop	r18
 24e:	0f 90       	pop	r0
 250:	0f be       	out	0x3f, r0	; 63
 252:	0f 90       	pop	r0
 254:	1f 90       	pop	r1
 256:	18 95       	reti

00000258 <__vector_11>:
ISR( TIM0_OVF_vect ){//mux for each color, row 0 and 1
 258:	1f 92       	push	r1
 25a:	0f 92       	push	r0
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	0f 92       	push	r0
 260:	11 24       	eor	r1, r1
 262:	2f 93       	push	r18
 264:	3f 93       	push	r19
 266:	4f 93       	push	r20
 268:	5f 93       	push	r21
 26a:	6f 93       	push	r22
 26c:	7f 93       	push	r23
 26e:	8f 93       	push	r24
 270:	9f 93       	push	r25
 272:	af 93       	push	r26
 274:	bf 93       	push	r27
 276:	ef 93       	push	r30
 278:	ff 93       	push	r31
    switch(state){
 27a:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <state>
 27e:	82 30       	cpi	r24, 0x02	; 2
 280:	f9 f0       	breq	.+62     	; 0x2c0 <__stack+0x61>
 282:	58 f4       	brcc	.+22     	; 0x29a <__stack+0x3b>
 284:	88 23       	and	r24, r24
 286:	a9 f0       	breq	.+42     	; 0x2b2 <__stack+0x53>
 288:	81 30       	cpi	r24, 0x01	; 1
 28a:	79 f5       	brne	.+94     	; 0x2ea <__stack+0x8b>
        case 0:
            sendData(R2 | getDataByColor(RED,0,leds));
            break;
        case 1:
            sendData(R1 | getDataByColor(RED,1,leds));
 28c:	41 ed       	ldi	r20, 0xD1	; 209
 28e:	51 e0       	ldi	r21, 0x01	; 1
 290:	61 e0       	ldi	r22, 0x01	; 1
 292:	84 e0       	ldi	r24, 0x04	; 4
 294:	5e d0       	rcall	.+188    	; 0x352 <getDataByColor>
 296:	70 68       	ori	r23, 0x80	; 128
 298:	27 c0       	rjmp	.+78     	; 0x2e8 <__stack+0x89>
        ledOn(&leds[Mcurrent->sub[Mindex].led],colorArray[Mcurrent->nb_optn>>4]);
    }
    
}
ISR( TIM0_OVF_vect ){//mux for each color, row 0 and 1
    switch(state){
 29a:	84 30       	cpi	r24, 0x04	; 4
 29c:	f9 f0       	breq	.+62     	; 0x2dc <__stack+0x7d>
 29e:	b8 f0       	brcs	.+46     	; 0x2ce <__stack+0x6f>
 2a0:	85 30       	cpi	r24, 0x05	; 5
 2a2:	19 f5       	brne	.+70     	; 0x2ea <__stack+0x8b>
            break;
        case 4:
            sendData(B2 | getDataByColor(BLUE,0,leds));
            break;
        case 5:
            sendData(B1 | getDataByColor(BLUE,1,leds));
 2a4:	41 ed       	ldi	r20, 0xD1	; 209
 2a6:	51 e0       	ldi	r21, 0x01	; 1
 2a8:	61 e0       	ldi	r22, 0x01	; 1
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	52 d0       	rcall	.+164    	; 0x352 <getDataByColor>
 2ae:	82 60       	ori	r24, 0x02	; 2
 2b0:	1b c0       	rjmp	.+54     	; 0x2e8 <__stack+0x89>
    
}
ISR( TIM0_OVF_vect ){//mux for each color, row 0 and 1
    switch(state){
        case 0:
            sendData(R2 | getDataByColor(RED,0,leds));
 2b2:	41 ed       	ldi	r20, 0xD1	; 209
 2b4:	51 e0       	ldi	r21, 0x01	; 1
 2b6:	60 e0       	ldi	r22, 0x00	; 0
 2b8:	84 e0       	ldi	r24, 0x04	; 4
 2ba:	4b d0       	rcall	.+150    	; 0x352 <getDataByColor>
 2bc:	70 64       	ori	r23, 0x40	; 64
 2be:	14 c0       	rjmp	.+40     	; 0x2e8 <__stack+0x89>
            break;
        case 1:
            sendData(R1 | getDataByColor(RED,1,leds));
            break;
        case 2:
            sendData(G2 | getDataByColor(GREEN,0,leds));
 2c0:	41 ed       	ldi	r20, 0xD1	; 209
 2c2:	51 e0       	ldi	r21, 0x01	; 1
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	44 d0       	rcall	.+136    	; 0x352 <getDataByColor>
 2ca:	84 60       	ori	r24, 0x04	; 4
 2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <__stack+0x89>
            break;
        case 3:
            sendData(G1 | getDataByColor(GREEN,1,leds));
 2ce:	41 ed       	ldi	r20, 0xD1	; 209
 2d0:	51 e0       	ldi	r21, 0x01	; 1
 2d2:	61 e0       	ldi	r22, 0x01	; 1
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	3d d0       	rcall	.+122    	; 0x352 <getDataByColor>
 2d8:	88 60       	ori	r24, 0x08	; 8
 2da:	06 c0       	rjmp	.+12     	; 0x2e8 <__stack+0x89>
            break;
        case 4:
            sendData(B2 | getDataByColor(BLUE,0,leds));
 2dc:	41 ed       	ldi	r20, 0xD1	; 209
 2de:	51 e0       	ldi	r21, 0x01	; 1
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	36 d0       	rcall	.+108    	; 0x352 <getDataByColor>
 2e6:	81 60       	ori	r24, 0x01	; 1
            break;
        case 5:
            sendData(B1 | getDataByColor(BLUE,1,leds));
 2e8:	b8 de       	rcall	.-656    	; 0x5a <sendData>
            break;
    }
    state++;
 2ea:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <state>
 2ee:	8f 5f       	subi	r24, 0xFF	; 255
 2f0:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <state>
    if(state>5)state=0;
 2f4:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <state>
 2f8:	86 30       	cpi	r24, 0x06	; 6
 2fa:	10 f0       	brcs	.+4      	; 0x300 <__stack+0xa1>
 2fc:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <state>
}
 300:	ff 91       	pop	r31
 302:	ef 91       	pop	r30
 304:	bf 91       	pop	r27
 306:	af 91       	pop	r26
 308:	9f 91       	pop	r25
 30a:	8f 91       	pop	r24
 30c:	7f 91       	pop	r23
 30e:	6f 91       	pop	r22
 310:	5f 91       	pop	r21
 312:	4f 91       	pop	r20
 314:	3f 91       	pop	r19
 316:	2f 91       	pop	r18
 318:	0f 90       	pop	r0
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	0f 90       	pop	r0
 31e:	1f 90       	pop	r1
 320:	18 95       	reti

00000322 <ledInit>:

static const uint8_t ledMap[11]={7,8,10,14,0,4,17,2,12,6,16};


void ledInit(Led* leds){
    DDRA |= CLK|DATA|STROBE|LED;
 322:	2a b3       	in	r18, 0x1a	; 26
 324:	2f 60       	ori	r18, 0x0F	; 15
 326:	2a bb       	out	0x1a, r18	; 26
    PORTA &= ~(CLK|DATA|STROBE|LED);
 328:	2b b3       	in	r18, 0x1b	; 27
 32a:	20 7f       	andi	r18, 0xF0	; 240
 32c:	2b bb       	out	0x1b, r18	; 27
 32e:	fc 01       	movw	r30, r24
    
    for(uint8_t i=0;i<NBLEDS;i++){
 330:	90 e0       	ldi	r25, 0x00	; 0
        leds[i].row=i%2;//leds[0]=0, leds[1]=1
 332:	89 2f       	mov	r24, r25
 334:	81 70       	andi	r24, 0x01	; 1
 336:	81 83       	std	Z+1, r24	; 0x01
        if(i<10){
 338:	9a 30       	cpi	r25, 0x0A	; 10
 33a:	10 f4       	brcc	.+4      	; 0x340 <ledInit+0x1e>
            leds[i].col=i;//0-9
 33c:	90 83       	st	Z, r25
 33e:	03 c0       	rjmp	.+6      	; 0x346 <ledInit+0x24>
        }else{
            leds[i].col=i-9;//1-9
 340:	87 ef       	ldi	r24, 0xF7	; 247
 342:	89 0f       	add	r24, r25
 344:	80 83       	st	Z, r24
        }
        leds[i].c=BLACK;
 346:	12 82       	std	Z+2, r1	; 0x02

void ledInit(Led* leds){
    DDRA |= CLK|DATA|STROBE|LED;
    PORTA &= ~(CLK|DATA|STROBE|LED);
    
    for(uint8_t i=0;i<NBLEDS;i++){
 348:	9f 5f       	subi	r25, 0xFF	; 255
 34a:	33 96       	adiw	r30, 0x03	; 3
 34c:	93 31       	cpi	r25, 0x13	; 19
 34e:	89 f7       	brne	.-30     	; 0x332 <ledInit+0x10>
        }else{
            leds[i].col=i-9;//1-9
        }
        leds[i].c=BLACK;
    }
}
 350:	08 95       	ret

00000352 <getDataByColor>:

uint32_t getDataByColor(uint8_t c, uint8_t mode, Led* leds){
 352:	0f 93       	push	r16
 354:	1f 93       	push	r17
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	c8 2f       	mov	r28, r24
 35c:	d6 2f       	mov	r29, r22
 35e:	fa 01       	movw	r30, r20
 360:	47 5c       	subi	r20, 0xC7	; 199
 362:	5f 4f       	sbci	r21, 0xFF	; 255
    uint32_t data=0x00000000;
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	cb 01       	movw	r24, r22
    for(uint8_t i=0;i<NBLEDS;i++){
        if(leds[i].row==mode){
            if((leds[i].c & c) ){
                data|=(1<<leds[i].col);
 36a:	a1 e0       	ldi	r26, 0x01	; 1
 36c:	b0 e0       	ldi	r27, 0x00	; 0
}

uint32_t getDataByColor(uint8_t c, uint8_t mode, Led* leds){
    uint32_t data=0x00000000;
    for(uint8_t i=0;i<NBLEDS;i++){
        if(leds[i].row==mode){
 36e:	21 81       	ldd	r18, Z+1	; 0x01
 370:	2d 13       	cpse	r18, r29
 372:	12 c0       	rjmp	.+36     	; 0x398 <getDataByColor+0x46>
            if((leds[i].c & c) ){
 374:	22 81       	ldd	r18, Z+2	; 0x02
 376:	2c 23       	and	r18, r28
 378:	79 f0       	breq	.+30     	; 0x398 <getDataByColor+0x46>
                data|=(1<<leds[i].col);
 37a:	8d 01       	movw	r16, r26
 37c:	00 80       	ld	r0, Z
 37e:	02 c0       	rjmp	.+4      	; 0x384 <getDataByColor+0x32>
 380:	00 0f       	add	r16, r16
 382:	11 1f       	adc	r17, r17
 384:	0a 94       	dec	r0
 386:	e2 f7       	brpl	.-8      	; 0x380 <getDataByColor+0x2e>
 388:	01 2e       	mov	r0, r17
 38a:	00 0c       	add	r0, r0
 38c:	22 0b       	sbc	r18, r18
 38e:	33 0b       	sbc	r19, r19
 390:	60 2b       	or	r22, r16
 392:	71 2b       	or	r23, r17
 394:	82 2b       	or	r24, r18
 396:	93 2b       	or	r25, r19
 398:	33 96       	adiw	r30, 0x03	; 3
    }
}

uint32_t getDataByColor(uint8_t c, uint8_t mode, Led* leds){
    uint32_t data=0x00000000;
    for(uint8_t i=0;i<NBLEDS;i++){
 39a:	e4 17       	cp	r30, r20
 39c:	f5 07       	cpc	r31, r21
 39e:	39 f7       	brne	.-50     	; 0x36e <getDataByColor+0x1c>
                data|=(1<<leds[i].col);
            }
        }
    }
    return data;
}
 3a0:	df 91       	pop	r29
 3a2:	cf 91       	pop	r28
 3a4:	1f 91       	pop	r17
 3a6:	0f 91       	pop	r16
 3a8:	08 95       	ret

000003aa <ledOn>:

void ledOn(Led* l,uint8_t c){
    l->c=c;
 3aa:	fc 01       	movw	r30, r24
 3ac:	62 83       	std	Z+2, r22	; 0x02
 3ae:	08 95       	ret

000003b0 <ledOff>:
}
void ledOff(Led* l){
    l->c=BLACK;
 3b0:	fc 01       	movw	r30, r24
 3b2:	12 82       	std	Z+2, r1	; 0x02
 3b4:	08 95       	ret

000003b6 <clearLeds>:
}
void clearLeds(Led* l){
 3b6:	9c 01       	movw	r18, r24
 3b8:	27 5c       	subi	r18, 0xC7	; 199
 3ba:	3f 4f       	sbci	r19, 0xFF	; 255

void ledOn(Led* l,uint8_t c){
    l->c=c;
}
void ledOff(Led* l){
    l->c=BLACK;
 3bc:	fc 01       	movw	r30, r24
 3be:	12 82       	std	Z+2, r1	; 0x02
 3c0:	03 96       	adiw	r24, 0x03	; 3
}
void clearLeds(Led* l){
    for(uint8_t i=0;i<NBLEDS;i++){
 3c2:	82 17       	cp	r24, r18
 3c4:	93 07       	cpc	r25, r19
 3c6:	d1 f7       	brne	.-12     	; 0x3bc <clearLeds+0x6>
        ledOff(&l[i]);
    }
}
 3c8:	08 95       	ret

000003ca <setLeds>:

void setLeds(Ttime t,Led* l){
 3ca:	ff 92       	push	r15
 3cc:	0f 93       	push	r16
 3ce:	1f 93       	push	r17
 3d0:	cf 93       	push	r28
 3d2:	df 93       	push	r29
 3d4:	00 d0       	rcall	.+0      	; 0x3d6 <setLeds+0xc>
 3d6:	00 d0       	rcall	.+0      	; 0x3d8 <setLeds+0xe>
 3d8:	1f 92       	push	r1
 3da:	cd b7       	in	r28, 0x3d	; 61
 3dc:	de b7       	in	r29, 0x3e	; 62
 3de:	89 01       	movw	r16, r18
    uint8_t temp=0;
    clearLeds(l);
 3e0:	c9 01       	movw	r24, r18
 3e2:	e9 df       	rcall	.-46     	; 0x3b6 <clearLeds>
    ledOn(&l[ILEST],getColor());
 3e4:	47 d3       	rcall	.+1678   	; 0xa74 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 3e6:	f8 01       	movw	r30, r16
 3e8:	80 af       	std	Z+56, r24	; 0x38
void setLeds(Ttime t,Led* l){
    uint8_t temp=0;
    clearLeds(l);
    ledOn(&l[ILEST],getColor());
    
    temp=currentTime.hour;
 3ea:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <currentTime>
    if(currentTime.min>35){
 3ee:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <currentTime+0x1>
 3f2:	94 32       	cpi	r25, 0x24	; 36
 3f4:	08 f0       	brcs	.+2      	; 0x3f8 <setLeds+0x2e>
        temp++;
 3f6:	8f 5f       	subi	r24, 0xFF	; 255
    }
    if(temp)
 3f8:	88 23       	and	r24, r24
 3fa:	29 f0       	breq	.+10     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
        temp=temp%12;
 3fc:	6c e0       	ldi	r22, 0x0C	; 12
 3fe:	08 d4       	rcall	.+2064   	; 0xc10 <__udivmodqi4>
 400:	f9 2e       	mov	r15, r25
    switch(temp){
 402:	91 11       	cpse	r25, r1
 404:	04 c0       	rjmp	.+8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
        case 0 :
            ledOn(&l[MINUIT],getColor());
 406:	36 d3       	rcall	.+1644   	; 0xa74 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 408:	f8 01       	movw	r30, r16
 40a:	83 87       	std	Z+11, r24	; 0x0b
 40c:	12 c0       	rjmp	.+36     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
            break;
        case 12 :
            ledOn(&l[MIDI],getColor());
            break;
        default :
            ledOn(&l[ledMap[(temp-1)]],getColor());
 40e:	32 d3       	rcall	.+1636   	; 0xa74 <getColor>
 410:	28 2f       	mov	r18, r24
 412:	ef 2d       	mov	r30, r15
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	e9 59       	subi	r30, 0x99	; 153
 418:	ff 4f       	sbci	r31, 0xFF	; 255
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 41a:	80 81       	ld	r24, Z
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	63 e0       	ldi	r22, 0x03	; 3
 420:	70 e0       	ldi	r23, 0x00	; 0
 422:	e5 d3       	rcall	.+1994   	; 0xbee <__mulhi3>
 424:	80 0f       	add	r24, r16
 426:	91 1f       	adc	r25, r17
 428:	fc 01       	movw	r30, r24
 42a:	22 83       	std	Z+2, r18	; 0x02
        case 12 :
            ledOn(&l[MIDI],getColor());
            break;
        default :
            ledOn(&l[ledMap[(temp-1)]],getColor());
            ledOn(&l[HEURE],getColor());
 42c:	23 d3       	rcall	.+1606   	; 0xa74 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 42e:	f8 01       	movw	r30, r16
 430:	87 a7       	std	Z+47, r24	; 0x2f
            ledOn(&l[ledMap[(temp-1)]],getColor());
            ledOn(&l[HEURE],getColor());
            break;
    }
    
    temp = minquad(currentTime.min); 
 432:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <currentTime+0x1>
 436:	8a d0       	rcall	.+276    	; 0x54c <minquad>
 438:	f8 2e       	mov	r15, r24
    if(temp > 30){
 43a:	fe e1       	ldi	r31, 0x1E	; 30
 43c:	f8 17       	cp	r31, r24
 43e:	30 f4       	brcc	.+12     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
        ledOn(&l[MOINS],getColor());
 440:	19 d3       	rcall	.+1586   	; 0xa74 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 442:	f8 01       	movw	r30, r16
 444:	85 8f       	std	Z+29, r24	; 0x1d
    }
    
    temp = minquad(currentTime.min); 
    if(temp > 30){
        ledOn(&l[MOINS],getColor());
        temp=60-temp;
 446:	8c e3       	ldi	r24, 0x3C	; 60
 448:	8f 19       	sub	r24, r15
 44a:	f8 2e       	mov	r15, r24
    }
    switch(temp){
 44c:	f4 e1       	ldi	r31, 0x14	; 20
 44e:	ff 16       	cp	r15, r31
 450:	51 f0       	breq	.+20     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 452:	8e e1       	ldi	r24, 0x1E	; 30
 454:	f8 16       	cp	r15, r24
 456:	59 f0       	breq	.+22     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 458:	ea e0       	ldi	r30, 0x0A	; 10
 45a:	fe 12       	cpse	r15, r30
 45c:	0b c0       	rjmp	.+22     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
        case 10 :
            ledOn(&l[DIX],getColor());
 45e:	0a d3       	rcall	.+1556   	; 0xa74 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 460:	f8 01       	movw	r30, r16
 462:	81 8b       	std	Z+17, r24	; 0x11
 464:	07 c0       	rjmp	.+14     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
    switch(temp){
        case 10 :
            ledOn(&l[DIX],getColor());
            break;
        case 20 :
            ledOn(&l[VINGT],getColor());
 466:	06 d3       	rcall	.+1548   	; 0xa74 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 468:	f8 01       	movw	r30, r16
 46a:	83 a3       	std	Z+35, r24	; 0x23
 46c:	03 c0       	rjmp	.+6      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
            break;
        case 20 :
            ledOn(&l[VINGT],getColor());
            break;
        case 30 :
            ledOn(&l[ETDEMIE],getColor());
 46e:	02 d3       	rcall	.+1540   	; 0xa74 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 470:	f8 01       	movw	r30, r16
 472:	85 83       	std	Z+5, r24	; 0x05
            break;
        case 30 :
            ledOn(&l[ETDEMIE],getColor());
            break;
    }
}
 474:	0f 90       	pop	r0
 476:	0f 90       	pop	r0
 478:	0f 90       	pop	r0
 47a:	0f 90       	pop	r0
 47c:	0f 90       	pop	r0
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	1f 91       	pop	r17
 484:	0f 91       	pop	r16
 486:	ff 90       	pop	r15
 488:	08 95       	ret

0000048a <setLedsNb>:

void setLedsNb(int8_t nb, Led* l){
 48a:	0f 93       	push	r16
 48c:	1f 93       	push	r17
 48e:	cf 93       	push	r28
 490:	c8 2f       	mov	r28, r24
 492:	8b 01       	movw	r16, r22
    clearLeds(l);
 494:	cb 01       	movw	r24, r22
 496:	8f df       	rcall	.-226    	; 0x3b6 <clearLeds>
    if(nb < 0){
 498:	c7 ff       	sbrs	r28, 7
 49a:	04 c0       	rjmp	.+8      	; 0x4a4 <setLedsNb+0x1a>
        ledOn(&l[MOINS],getColor());
 49c:	eb d2       	rcall	.+1494   	; 0xa74 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 49e:	f8 01       	movw	r30, r16
 4a0:	85 8f       	std	Z+29, r24	; 0x1d

void setLedsNb(int8_t nb, Led* l){
    clearLeds(l);
    if(nb < 0){
        ledOn(&l[MOINS],getColor());
        nb=-nb;
 4a2:	c1 95       	neg	r28
    }
    if(nb>29){
 4a4:	ce 31       	cpi	r28, 0x1E	; 30
 4a6:	44 f0       	brlt	.+16     	; 0x4b8 <setLedsNb+0x2e>
        ledOn(&l[VINGT],getColor());
 4a8:	e5 d2       	rcall	.+1482   	; 0xa74 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 4aa:	f8 01       	movw	r30, r16
 4ac:	83 a3       	std	Z+35, r24	; 0x23
        ledOn(&l[MOINS],getColor());
        nb=-nb;
    }
    if(nb>29){
        ledOn(&l[VINGT],getColor());
        ledOn(&l[DIX],getColor());
 4ae:	e2 d2       	rcall	.+1476   	; 0xa74 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 4b0:	f8 01       	movw	r30, r16
 4b2:	81 8b       	std	Z+17, r24	; 0x11
        nb=-nb;
    }
    if(nb>29){
        ledOn(&l[VINGT],getColor());
        ledOn(&l[DIX],getColor());
        nb=nb-30;
 4b4:	ce 51       	subi	r28, 0x1E	; 30
 4b6:	0d c0       	rjmp	.+26     	; 0x4d2 <setLedsNb+0x48>
    }else if(nb>19){
 4b8:	c4 31       	cpi	r28, 0x14	; 20
 4ba:	2c f0       	brlt	.+10     	; 0x4c6 <setLedsNb+0x3c>
        ledOn(&l[VINGT],getColor());
 4bc:	db d2       	rcall	.+1462   	; 0xa74 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 4be:	f8 01       	movw	r30, r16
 4c0:	83 a3       	std	Z+35, r24	; 0x23
        ledOn(&l[VINGT],getColor());
        ledOn(&l[DIX],getColor());
        nb=nb-30;
    }else if(nb>19){
        ledOn(&l[VINGT],getColor());
        nb=nb-20;
 4c2:	c4 51       	subi	r28, 0x14	; 20
 4c4:	06 c0       	rjmp	.+12     	; 0x4d2 <setLedsNb+0x48>
    }else if(nb>11){
 4c6:	cc 30       	cpi	r28, 0x0C	; 12
 4c8:	24 f0       	brlt	.+8      	; 0x4d2 <setLedsNb+0x48>
        ledOn(&l[DIX],getColor());
 4ca:	d4 d2       	rcall	.+1448   	; 0xa74 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 4cc:	f8 01       	movw	r30, r16
 4ce:	81 8b       	std	Z+17, r24	; 0x11
    }else if(nb>19){
        ledOn(&l[VINGT],getColor());
        nb=nb-20;
    }else if(nb>11){
        ledOn(&l[DIX],getColor());
        nb=nb-10;
 4d0:	ca 50       	subi	r28, 0x0A	; 10
    }
    ledOn(&l[ledMap[nb-1]],getColor());
 4d2:	d0 d2       	rcall	.+1440   	; 0xa74 <getColor>
 4d4:	28 2f       	mov	r18, r24
 4d6:	ec 2f       	mov	r30, r28
 4d8:	cc 0f       	add	r28, r28
 4da:	ff 0b       	sbc	r31, r31
 4dc:	e9 59       	subi	r30, 0x99	; 153
 4de:	ff 4f       	sbci	r31, 0xFF	; 255
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 4e0:	80 81       	ld	r24, Z
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	63 e0       	ldi	r22, 0x03	; 3
 4e6:	70 e0       	ldi	r23, 0x00	; 0
 4e8:	82 d3       	rcall	.+1796   	; 0xbee <__mulhi3>
 4ea:	80 0f       	add	r24, r16
 4ec:	91 1f       	adc	r25, r17
 4ee:	fc 01       	movw	r30, r24
 4f0:	22 83       	std	Z+2, r18	; 0x02
    }else if(nb>11){
        ledOn(&l[DIX],getColor());
        nb=nb-10;
    }
    ledOn(&l[ledMap[nb-1]],getColor());
}
 4f2:	cf 91       	pop	r28
 4f4:	1f 91       	pop	r17
 4f6:	0f 91       	pop	r16
 4f8:	08 95       	ret

000004fa <sendRawData>:
void sendRawData(uint32_t data){
 4fa:	0f 93       	push	r16
 4fc:	1f 93       	push	r17
    PORTA &=~(STROBE|CLK);
 4fe:	2b b3       	in	r18, 0x1b	; 27
 500:	23 7f       	andi	r18, 0xF3	; 243
 502:	2b bb       	out	0x1b, r18	; 27
 504:	40 e0       	ldi	r20, 0x00	; 0
 506:	50 e0       	ldi	r21, 0x00	; 0
    for(uint8_t i=0;i<20;i++){
        if((data>>i) & 0x00000001){
 508:	8b 01       	movw	r16, r22
 50a:	9c 01       	movw	r18, r24
 50c:	04 2e       	mov	r0, r20
 50e:	04 c0       	rjmp	.+8      	; 0x518 <sendRawData+0x1e>
 510:	36 95       	lsr	r19
 512:	27 95       	ror	r18
 514:	17 95       	ror	r17
 516:	07 95       	ror	r16
 518:	0a 94       	dec	r0
 51a:	d2 f7       	brpl	.-12     	; 0x510 <sendRawData+0x16>
 51c:	00 ff       	sbrs	r16, 0
 51e:	02 c0       	rjmp	.+4      	; 0x524 <sendRawData+0x2a>
            PORTA|=DATA;
 520:	d9 9a       	sbi	0x1b, 1	; 27
 522:	01 c0       	rjmp	.+2      	; 0x526 <sendRawData+0x2c>
        }else{
            PORTA&=~DATA;
 524:	d9 98       	cbi	0x1b, 1	; 27
        }
        PORTA|=CLK;
 526:	db 9a       	sbi	0x1b, 3	; 27
        PORTA&=~CLK;
 528:	db 98       	cbi	0x1b, 3	; 27
 52a:	4f 5f       	subi	r20, 0xFF	; 255
 52c:	5f 4f       	sbci	r21, 0xFF	; 255
    }
    ledOn(&l[ledMap[nb-1]],getColor());
}
void sendRawData(uint32_t data){
    PORTA &=~(STROBE|CLK);
    for(uint8_t i=0;i<20;i++){
 52e:	44 31       	cpi	r20, 0x14	; 20
 530:	51 05       	cpc	r21, r1
 532:	51 f7       	brne	.-44     	; 0x508 <sendRawData+0xe>
            PORTA&=~DATA;
        }
        PORTA|=CLK;
        PORTA&=~CLK;
    }
    PORTA|=STROBE;
 534:	da 9a       	sbi	0x1b, 2	; 27
    PORTA&=~STROBE;
 536:	da 98       	cbi	0x1b, 2	; 27
}
 538:	1f 91       	pop	r17
 53a:	0f 91       	pop	r16
 53c:	08 95       	ret

0000053e <setCurrentTime>:
#include "RTC.h" 

void setCurrentTime(uint8_t hour,uint8_t min,uint8_t monthDay,uint8_t month){
    currentTime.hour=hour;
 53e:	eb e0       	ldi	r30, 0x0B	; 11
 540:	f2 e0       	ldi	r31, 0x02	; 2
 542:	80 83       	st	Z, r24
    currentTime.min=min;
 544:	61 83       	std	Z+1, r22	; 0x01
    currentTime.monthDay=monthDay;
 546:	42 83       	std	Z+2, r20	; 0x02
    currentTime.month=month;
 548:	23 83       	std	Z+3, r18	; 0x03
 54a:	08 95       	ret

0000054c <minquad>:
}

uint8_t minquad(uint8_t min){
    if(min > 5){
 54c:	86 30       	cpi	r24, 0x06	; 6
 54e:	a0 f0       	brcs	.+40     	; 0x578 <minquad+0x2c>
        if(min > 15){
 550:	80 31       	cpi	r24, 0x10	; 16
 552:	50 f0       	brcs	.+20     	; 0x568 <minquad+0x1c>
            if(min > 25){
 554:	8a 31       	cpi	r24, 0x1A	; 26
 556:	50 f0       	brcs	.+20     	; 0x56c <minquad+0x20>
                if(min > 35){
 558:	84 32       	cpi	r24, 0x24	; 36
 55a:	50 f0       	brcs	.+20     	; 0x570 <minquad+0x24>
                    if(min > 45){
 55c:	8e 32       	cpi	r24, 0x2E	; 46
 55e:	50 f0       	brcs	.+20     	; 0x574 <minquad+0x28>
                        if(min > 55){
 560:	88 33       	cpi	r24, 0x38	; 56
 562:	50 f4       	brcc	.+20     	; 0x578 <minquad+0x2c>
                            return 0;
                        }else{return 50;}
 564:	82 e3       	ldi	r24, 0x32	; 50
 566:	08 95       	ret
                    }else{return 40;}
                }else{return 30;}
            }else{return 20;}
        }else{return 10;}
 568:	8a e0       	ldi	r24, 0x0A	; 10
 56a:	08 95       	ret
                        if(min > 55){
                            return 0;
                        }else{return 50;}
                    }else{return 40;}
                }else{return 30;}
            }else{return 20;}
 56c:	84 e1       	ldi	r24, 0x14	; 20
 56e:	08 95       	ret
                    if(min > 45){
                        if(min > 55){
                            return 0;
                        }else{return 50;}
                    }else{return 40;}
                }else{return 30;}
 570:	8e e1       	ldi	r24, 0x1E	; 30
 572:	08 95       	ret
                if(min > 35){
                    if(min > 45){
                        if(min > 55){
                            return 0;
                        }else{return 50;}
                    }else{return 40;}
 574:	88 e2       	ldi	r24, 0x28	; 40
 576:	08 95       	ret
                }else{return 30;}
            }else{return 20;}
        }else{return 10;}
    }else{return 0;}
 578:	80 e0       	ldi	r24, 0x00	; 0
}
 57a:	08 95       	ret

0000057c <bcdToDec>:
    }else{
        return 0;
    }
    
}
uint8_t bcdToDec(uint8_t val){
 57c:	98 2f       	mov	r25, r24
    return ((val/16*10) + (val%16));
 57e:	82 95       	swap	r24
 580:	8f 70       	andi	r24, 0x0F	; 15
 582:	6a e0       	ldi	r22, 0x0A	; 10
 584:	2b d3       	rcall	.+1622   	; 0xbdc <__mulqi3>
 586:	9f 70       	andi	r25, 0x0F	; 15
}
 588:	89 0f       	add	r24, r25
 58a:	08 95       	ret

0000058c <decToBcd>:
uint8_t decToBcd(uint8_t val){
    return( (val/10*16) + (val%10) );
 58c:	6a e0       	ldi	r22, 0x0A	; 10
 58e:	40 d3       	rcall	.+1664   	; 0xc10 <__udivmodqi4>
 590:	82 95       	swap	r24
 592:	80 7f       	andi	r24, 0xF0	; 240
}
 594:	89 0f       	add	r24, r25
 596:	08 95       	ret

00000598 <i2c_in_transfer>:
        return 0;
    }
}

uint8_t i2c_in_transfer(uint8_t USISR_temp){
    USISR = USISR_temp;								//Set USISR as requested by calling function
 598:	8e b9       	out	0x0e, r24	; 14
    do{
        _delay_us(I2C_TLOW);
        USICR = 0b00101011;								//SCL Positive Edge
 59a:	8b e2       	ldi	r24, 0x2B	; 43
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 59c:	95 e0       	ldi	r25, 0x05	; 5
 59e:	9a 95       	dec	r25
 5a0:	f1 f7       	brne	.-4      	; 0x59e <i2c_in_transfer+0x6>
 5a2:	00 00       	nop
 5a4:	8d b9       	out	0x0d, r24	; 13
        while (!(PIN_USI&(1<<PIN_USI_SCL)));		//Wait for SCL to go high
 5a6:	cc 9b       	sbis	0x19, 4	; 25
 5a8:	fe cf       	rjmp	.-4      	; 0x5a6 <i2c_in_transfer+0xe>
 5aa:	94 e0       	ldi	r25, 0x04	; 4
 5ac:	9a 95       	dec	r25
 5ae:	f1 f7       	brne	.-4      	; 0x5ac <i2c_in_transfer+0x14>
        _delay_us(I2C_THIGH);
        USICR = 0b00101011;								//SCL Negative Edge
 5b0:	8d b9       	out	0x0d, r24	; 13
    }while (!(USISR&(1<<USIOIF)));					//Do until transfer is complete
 5b2:	76 9b       	sbis	0x0e, 6	; 14
 5b4:	f3 cf       	rjmp	.-26     	; 0x59c <i2c_in_transfer+0x4>
 5b6:	85 e0       	ldi	r24, 0x05	; 5
 5b8:	8a 95       	dec	r24
 5ba:	f1 f7       	brne	.-4      	; 0x5b8 <i2c_in_transfer+0x20>
 5bc:	00 00       	nop
    _delay_us(I2C_TLOW);
    return USIDR;
 5be:	8f b1       	in	r24, 0x0f	; 15
}
 5c0:	08 95       	ret

000005c2 <i2c_in_transmit>:
uint8_t i2c_in_transmit(uint8_t *msg, uint8_t msg_size){
 5c2:	ef 92       	push	r14
 5c4:	ff 92       	push	r15
 5c6:	0f 93       	push	r16
 5c8:	1f 93       	push	r17
 5ca:	cf 93       	push	r28
 5cc:	df 93       	push	r29
 5ce:	ec 01       	movw	r28, r24
 5d0:	16 2f       	mov	r17, r22
    USI_I2C_Master_State = USI_ADDRESS;
 5d2:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <USI_I2C_Master_State>
    
    //   Start Condition
    PORT_USI |=  (1 << PORT_USI_SCL); 						//Setting input makes line pull high
 5d6:	dc 9a       	sbi	0x1b, 4	; 27
    while (!(PIN_USI & (1<<PIN_USI_SCL)));		//Wait for SCL to go high
 5d8:	cc 9b       	sbis	0x19, 4	; 25
 5da:	fe cf       	rjmp	.-4      	; 0x5d8 <i2c_in_transmit+0x16>
 5dc:	84 e0       	ldi	r24, 0x04	; 4
 5de:	8a 95       	dec	r24
 5e0:	f1 f7       	brne	.-4      	; 0x5de <i2c_in_transmit+0x1c>
    #ifdef I2C_FAST_MODE
    _delay_us(I2C_THIGH);
    #else
    _delay_us(I2C_TLOW);
    #endif
    DDR_USI |=  (1 << PORT_USI_SDA);
 5e2:	d6 9a       	sbi	0x1a, 6	; 26
    DDR_USI |=  (1 << PORT_USI_SCL);
 5e4:	d4 9a       	sbi	0x1a, 4	; 26
    PORT_USI &= ~(1 << PORT_USI_SDA);
 5e6:	de 98       	cbi	0x1b, 6	; 27
 5e8:	84 e0       	ldi	r24, 0x04	; 4
 5ea:	8a 95       	dec	r24
 5ec:	f1 f7       	brne	.-4      	; 0x5ea <i2c_in_transmit+0x28>
    _delay_us(I2C_THIGH);;
    PORT_USI &= ~(1 << PORT_USI_SCL);
 5ee:	dc 98       	cbi	0x1b, 4	; 27
 5f0:	85 e0       	ldi	r24, 0x05	; 5
 5f2:	8a 95       	dec	r24
 5f4:	f1 f7       	brne	.-4      	; 0x5f2 <i2c_in_transmit+0x30>
 5f6:	00 00       	nop
    _delay_us(I2C_TLOW);
    PORT_USI |=  (1 << PORT_USI_SDA);
 5f8:	de 9a       	sbi	0x1b, 6	; 27
        switch(USI_I2C_Master_State){
            case USI_ADDRESS:
                if(!(*msg & 0x01)){
                    USI_I2C_Master_State = USI_WRITE;
                }else{
                    USI_I2C_Master_State = USI_READ;
 5fa:	02 e0       	ldi	r16, 0x02	; 2
    
    do{
        switch(USI_I2C_Master_State){
            case USI_ADDRESS:
                if(!(*msg & 0x01)){
                    USI_I2C_Master_State = USI_WRITE;
 5fc:	ff 24       	eor	r15, r15
 5fe:	f3 94       	inc	r15
                DDR_USI &= ~(1 << PORT_USI_SDA);
                (*msg) = i2c_in_transfer(0b11110000 | (0x00<<USICNT0));			
                msg++;
                DDR_USI |=  (1 << PORT_USI_SDA);				
                if(msg_size == 1){
                    USIDR = 0xFF;			//Load NACK to end transmission
 600:	ee 24       	eor	r14, r14
 602:	ea 94       	dec	r14
    PORT_USI &= ~(1 << PORT_USI_SCL);
    _delay_us(I2C_TLOW);
    PORT_USI |=  (1 << PORT_USI_SDA);
    
    do{
        switch(USI_I2C_Master_State){
 604:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <USI_I2C_Master_State>
 608:	81 30       	cpi	r24, 0x01	; 1
 60a:	61 f0       	breq	.+24     	; 0x624 <i2c_in_transmit+0x62>
 60c:	18 f0       	brcs	.+6      	; 0x614 <i2c_in_transmit+0x52>
 60e:	82 30       	cpi	r24, 0x02	; 2
 610:	c9 f0       	breq	.+50     	; 0x644 <i2c_in_transmit+0x82>
 612:	24 c0       	rjmp	.+72     	; 0x65c <i2c_in_transmit+0x9a>
            case USI_ADDRESS:
                if(!(*msg & 0x01)){
 614:	88 81       	ld	r24, Y
 616:	80 fd       	sbrc	r24, 0
 618:	03 c0       	rjmp	.+6      	; 0x620 <i2c_in_transmit+0x5e>
                    USI_I2C_Master_State = USI_WRITE;
 61a:	f0 92 0a 02 	sts	0x020A, r15	; 0x80020a <USI_I2C_Master_State>
 61e:	02 c0       	rjmp	.+4      	; 0x624 <i2c_in_transmit+0x62>
                }else{
                    USI_I2C_Master_State = USI_READ;
 620:	00 93 0a 02 	sts	0x020A, r16	; 0x80020a <USI_I2C_Master_State>
                }//no break so goes to Write
                
            case USI_WRITE:
                PORT_USI &= ~(1 << PORT_USI_SCL);
 624:	dc 98       	cbi	0x1b, 4	; 27
                USIDR = *(msg);				//Load data			
 626:	89 91       	ld	r24, Y+
 628:	8f b9       	out	0x0f, r24	; 15
                msg++;						//Increment buffer pointer
                i2c_in_transfer(0b11110000 | (0x00<<USICNT0));
 62a:	80 ef       	ldi	r24, 0xF0	; 240
 62c:	b5 df       	rcall	.-150    	; 0x598 <i2c_in_transfer>
                DDR_USI &= ~(1 << PORT_USI_SDA);
 62e:	d6 98       	cbi	0x1a, 6	; 26
                if(i2c_in_transfer(0b11110000 | (0x0E<<USICNT0)) & 0x01){
 630:	8e ef       	ldi	r24, 0xFE	; 254
 632:	b2 df       	rcall	.-156    	; 0x598 <i2c_in_transfer>
 634:	80 ff       	sbrs	r24, 0
 636:	04 c0       	rjmp	.+8      	; 0x640 <i2c_in_transmit+0x7e>
                    PORT_USI |=  (1 << PORT_USI_SCL);
 638:	dc 9a       	sbi	0x1b, 4	; 27
                    PORT_USI |=  (1 << PORT_USI_SDA);
 63a:	de 9a       	sbi	0x1b, 6	; 27
                    return 0;
 63c:	80 e0       	ldi	r24, 0x00	; 0
 63e:	1f c0       	rjmp	.+62     	; 0x67e <i2c_in_transmit+0xbc>
                }
                DDR_USI |=  (1 << PORT_USI_SDA);
 640:	d6 9a       	sbi	0x1a, 6	; 26
                break;
 642:	0c c0       	rjmp	.+24     	; 0x65c <i2c_in_transmit+0x9a>
                
            case USI_READ:
                DDR_USI &= ~(1 << PORT_USI_SDA);
 644:	d6 98       	cbi	0x1a, 6	; 26
                (*msg) = i2c_in_transfer(0b11110000 | (0x00<<USICNT0));			
 646:	80 ef       	ldi	r24, 0xF0	; 240
 648:	a7 df       	rcall	.-178    	; 0x598 <i2c_in_transfer>
 64a:	89 93       	st	Y+, r24
                msg++;
                DDR_USI |=  (1 << PORT_USI_SDA);				
 64c:	d6 9a       	sbi	0x1a, 6	; 26
                if(msg_size == 1){
 64e:	11 30       	cpi	r17, 0x01	; 1
 650:	11 f4       	brne	.+4      	; 0x656 <i2c_in_transmit+0x94>
                    USIDR = 0xFF;			//Load NACK to end transmission
 652:	ef b8       	out	0x0f, r14	; 15
 654:	01 c0       	rjmp	.+2      	; 0x658 <i2c_in_transmit+0x96>
                }else{
                    USIDR = 0x00;			//Load ACK
 656:	1f b8       	out	0x0f, r1	; 15
                }
                i2c_in_transfer(0b11110000 | (0x0E<<USICNT0));
 658:	8e ef       	ldi	r24, 0xFE	; 254
 65a:	9e df       	rcall	.-196    	; 0x598 <i2c_in_transfer>
                break;
        }
    }while(--msg_size);
 65c:	11 50       	subi	r17, 0x01	; 1
 65e:	91 f6       	brne	.-92     	; 0x604 <i2c_in_transmit+0x42>
    
    //Stop Condition
    PORT_USI &= ~(1 << PORT_USI_SDA);           				// Pull SDA low.
 660:	de 98       	cbi	0x1b, 6	; 27
 662:	85 e0       	ldi	r24, 0x05	; 5
 664:	8a 95       	dec	r24
 666:	f1 f7       	brne	.-4      	; 0x664 <i2c_in_transmit+0xa2>
 668:	00 00       	nop
    _delay_us(I2C_TLOW);
    DDR_USI &= ~(1 << PORT_USI_SCL);            				// Release SCL.
 66a:	d4 98       	cbi	0x1a, 4	; 26
    while( !(PIN_USI & (1<<PIN_USI_SCL)) );  	// Wait for SCL to go high.  
 66c:	cc 9b       	sbis	0x19, 4	; 25
 66e:	fe cf       	rjmp	.-4      	; 0x66c <i2c_in_transmit+0xaa>
 670:	84 e0       	ldi	r24, 0x04	; 4
 672:	8a 95       	dec	r24
 674:	f1 f7       	brne	.-4      	; 0x672 <i2c_in_transmit+0xb0>
    _delay_us(I2C_THIGH);
    DDR_USI &= ~(1 << PORT_USI_SDA);            				// Release SDA.
 676:	d6 98       	cbi	0x1a, 6	; 26
    while( !(PIN_USI & (1<<PIN_USI_SDA)) );  	// Wait for SDA to go high. 
 678:	ce 9b       	sbis	0x19, 6	; 25
 67a:	fe cf       	rjmp	.-4      	; 0x678 <i2c_in_transmit+0xb6>
    return 1;
 67c:	81 e0       	ldi	r24, 0x01	; 1
}
 67e:	df 91       	pop	r29
 680:	cf 91       	pop	r28
 682:	1f 91       	pop	r17
 684:	0f 91       	pop	r16
 686:	ff 90       	pop	r15
 688:	ef 90       	pop	r14
 68a:	08 95       	ret

0000068c <i2c_write>:
    i2c_write(RTC_addr,3,decToBcd(day));
    i2c_write(RTC_addr,4,decToBcd(t.monthDay));
    i2c_write(RTC_addr,5,decToBcd(t.month));
    i2c_write(RTC_addr,6,decToBcd(year));
}
uint8_t i2c_write(uint8_t addr, uint8_t adrs, uint8_t val){ // only supports 1 byte write
 68c:	cf 93       	push	r28
 68e:	df 93       	push	r29
 690:	00 d0       	rcall	.+0      	; 0x692 <i2c_write+0x6>
 692:	1f 92       	push	r1
 694:	cd b7       	in	r28, 0x3d	; 61
 696:	de b7       	in	r29, 0x3e	; 62
    uint8_t i2c_buffer[3];
    uint8_t i2c_buffer_len = 3;
    i2c_buffer[0] = (addr << 1) | I2CWRITE ;
 698:	88 0f       	add	r24, r24
 69a:	89 83       	std	Y+1, r24	; 0x01
    i2c_buffer[1] = adrs;
 69c:	6a 83       	std	Y+2, r22	; 0x02
    i2c_buffer[2] = val;
 69e:	4b 83       	std	Y+3, r20	; 0x03
    return i2c_in_transmit(i2c_buffer, i2c_buffer_len);
 6a0:	63 e0       	ldi	r22, 0x03	; 3
 6a2:	ce 01       	movw	r24, r28
 6a4:	01 96       	adiw	r24, 0x01	; 1
 6a6:	8d df       	rcall	.-230    	; 0x5c2 <i2c_in_transmit>
}
 6a8:	0f 90       	pop	r0
 6aa:	0f 90       	pop	r0
 6ac:	0f 90       	pop	r0
 6ae:	df 91       	pop	r29
 6b0:	cf 91       	pop	r28
 6b2:	08 95       	ret

000006b4 <RTC_setTime>:
        return 1;
    }else{
        return 0;
    }
}
void RTC_setTime(struct Ttime t,uint8_t day, uint8_t year){
 6b4:	0f 93       	push	r16
 6b6:	1f 93       	push	r17
 6b8:	cf 93       	push	r28
 6ba:	df 93       	push	r29
 6bc:	00 d0       	rcall	.+0      	; 0x6be <RTC_setTime+0xa>
 6be:	00 d0       	rcall	.+0      	; 0x6c0 <RTC_setTime+0xc>
 6c0:	1f 92       	push	r1
 6c2:	cd b7       	in	r28, 0x3d	; 61
 6c4:	de b7       	in	r29, 0x3e	; 62
 6c6:	49 83       	std	Y+1, r20	; 0x01
 6c8:	85 2f       	mov	r24, r21
 6ca:	6b 83       	std	Y+3, r22	; 0x03
 6cc:	7c 83       	std	Y+4, r23	; 0x04
 6ce:	12 2f       	mov	r17, r18
    i2c_write(RTC_addr,1,decToBcd(t.min));
 6d0:	5d df       	rcall	.-326    	; 0x58c <decToBcd>
 6d2:	48 2f       	mov	r20, r24
 6d4:	61 e0       	ldi	r22, 0x01	; 1
 6d6:	88 e6       	ldi	r24, 0x68	; 104
 6d8:	d9 df       	rcall	.-78     	; 0x68c <i2c_write>
    i2c_write(RTC_addr,2,decToBcd(t.hour));
 6da:	89 81       	ldd	r24, Y+1	; 0x01
 6dc:	57 df       	rcall	.-338    	; 0x58c <decToBcd>
 6de:	48 2f       	mov	r20, r24
 6e0:	62 e0       	ldi	r22, 0x02	; 2
 6e2:	88 e6       	ldi	r24, 0x68	; 104
 6e4:	d3 df       	rcall	.-90     	; 0x68c <i2c_write>
    i2c_write(RTC_addr,3,decToBcd(day));
 6e6:	81 2f       	mov	r24, r17
 6e8:	51 df       	rcall	.-350    	; 0x58c <decToBcd>
 6ea:	48 2f       	mov	r20, r24
 6ec:	63 e0       	ldi	r22, 0x03	; 3
 6ee:	88 e6       	ldi	r24, 0x68	; 104
 6f0:	cd df       	rcall	.-102    	; 0x68c <i2c_write>
    i2c_write(RTC_addr,4,decToBcd(t.monthDay));
 6f2:	8b 81       	ldd	r24, Y+3	; 0x03
 6f4:	4b df       	rcall	.-362    	; 0x58c <decToBcd>
 6f6:	48 2f       	mov	r20, r24
 6f8:	64 e0       	ldi	r22, 0x04	; 4
 6fa:	88 e6       	ldi	r24, 0x68	; 104
 6fc:	c7 df       	rcall	.-114    	; 0x68c <i2c_write>
    i2c_write(RTC_addr,5,decToBcd(t.month));
 6fe:	8c 81       	ldd	r24, Y+4	; 0x04
 700:	45 df       	rcall	.-374    	; 0x58c <decToBcd>
 702:	48 2f       	mov	r20, r24
 704:	65 e0       	ldi	r22, 0x05	; 5
 706:	88 e6       	ldi	r24, 0x68	; 104
 708:	c1 df       	rcall	.-126    	; 0x68c <i2c_write>
    i2c_write(RTC_addr,6,decToBcd(year));
 70a:	80 2f       	mov	r24, r16
 70c:	3f df       	rcall	.-386    	; 0x58c <decToBcd>
 70e:	48 2f       	mov	r20, r24
 710:	66 e0       	ldi	r22, 0x06	; 6
 712:	88 e6       	ldi	r24, 0x68	; 104
}
 714:	0f 90       	pop	r0
 716:	0f 90       	pop	r0
 718:	0f 90       	pop	r0
 71a:	0f 90       	pop	r0
 71c:	0f 90       	pop	r0
 71e:	df 91       	pop	r29
 720:	cf 91       	pop	r28
 722:	1f 91       	pop	r17
 724:	0f 91       	pop	r16
    i2c_write(RTC_addr,1,decToBcd(t.min));
    i2c_write(RTC_addr,2,decToBcd(t.hour));
    i2c_write(RTC_addr,3,decToBcd(day));
    i2c_write(RTC_addr,4,decToBcd(t.monthDay));
    i2c_write(RTC_addr,5,decToBcd(t.month));
    i2c_write(RTC_addr,6,decToBcd(year));
 726:	b2 cf       	rjmp	.-156    	; 0x68c <i2c_write>

00000728 <i2c_read>:
    i2c_buffer[0] = (addr << 1) | I2CWRITE ;
    i2c_buffer[1] = adrs;
    i2c_buffer[2] = val;
    return i2c_in_transmit(i2c_buffer, i2c_buffer_len);
}
uint8_t i2c_read(uint8_t addr, uint8_t len, uint8_t adrs, uint8_t *buf){
 728:	8f 92       	push	r8
 72a:	9f 92       	push	r9
 72c:	af 92       	push	r10
 72e:	bf 92       	push	r11
 730:	cf 92       	push	r12
 732:	df 92       	push	r13
 734:	ef 92       	push	r14
 736:	ff 92       	push	r15
 738:	0f 93       	push	r16
 73a:	1f 93       	push	r17
 73c:	cf 93       	push	r28
 73e:	df 93       	push	r29
 740:	cd b7       	in	r28, 0x3d	; 61
 742:	de b7       	in	r29, 0x3e	; 62
 744:	18 2f       	mov	r17, r24
 746:	06 2f       	mov	r16, r22
 748:	49 01       	movw	r8, r18
        }
        return 1; // provide success check
    }else{
        return 0;
    }
}
 74a:	ad b6       	in	r10, 0x3d	; 61
 74c:	be b6       	in	r11, 0x3e	; 62
    i2c_buffer[2] = val;
    return i2c_in_transmit(i2c_buffer, i2c_buffer_len);
}
uint8_t i2c_read(uint8_t addr, uint8_t len, uint8_t adrs, uint8_t *buf){
    //set register pointer to adrs
    uint8_t i2c_buffer[len+1];
 74e:	c6 2e       	mov	r12, r22
 750:	d1 2c       	mov	r13, r1
 752:	c6 01       	movw	r24, r12
 754:	01 96       	adiw	r24, 0x01	; 1
 756:	2d b7       	in	r18, 0x3d	; 61
 758:	3e b7       	in	r19, 0x3e	; 62
 75a:	28 1b       	sub	r18, r24
 75c:	39 0b       	sbc	r19, r25
 75e:	0f b6       	in	r0, 0x3f	; 63
 760:	f8 94       	cli
 762:	3e bf       	out	0x3e, r19	; 62
 764:	0f be       	out	0x3f, r0	; 63
 766:	2d bf       	out	0x3d, r18	; 61
 768:	8d b7       	in	r24, 0x3d	; 61
 76a:	9e b7       	in	r25, 0x3e	; 62
 76c:	01 96       	adiw	r24, 0x01	; 1
 76e:	7c 01       	movw	r14, r24
    uint8_t i2c_buffer_len = 2;
    i2c_buffer[0] = (addr << 1) | I2CWRITE;
 770:	81 2f       	mov	r24, r17
 772:	88 0f       	add	r24, r24
 774:	ed b7       	in	r30, 0x3d	; 61
 776:	fe b7       	in	r31, 0x3e	; 62
 778:	81 83       	std	Z+1, r24	; 0x01
    i2c_buffer[1] = adrs;
 77a:	f7 01       	movw	r30, r14
 77c:	41 83       	std	Z+1, r20	; 0x01
    i2c_in_transmit(i2c_buffer, i2c_buffer_len);
 77e:	62 e0       	ldi	r22, 0x02	; 2
 780:	c7 01       	movw	r24, r14
 782:	1f df       	rcall	.-450    	; 0x5c2 <i2c_in_transmit>
    //read actual data
    i2c_buffer_len = len+1;
    i2c_buffer[0] = (addr << 1) | I2CREAD;
 784:	11 0f       	add	r17, r17
 786:	11 60       	ori	r17, 0x01	; 1
 788:	f7 01       	movw	r30, r14
 78a:	10 83       	st	Z, r17
    if(i2c_in_transmit(i2c_buffer, i2c_buffer_len)){
 78c:	61 e0       	ldi	r22, 0x01	; 1
 78e:	60 0f       	add	r22, r16
 790:	c7 01       	movw	r24, r14
 792:	17 df       	rcall	.-466    	; 0x5c2 <i2c_in_transmit>
 794:	88 23       	and	r24, r24
 796:	91 f0       	breq	.+36     	; 0x7bc <i2c_read+0x94>
 798:	21 e0       	ldi	r18, 0x01	; 1
        uint8_t i;
        for(i=1;i<len+1;i++){ // fetch in buffer
 79a:	82 2f       	mov	r24, r18
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	c8 16       	cp	r12, r24
 7a0:	d9 06       	cpc	r13, r25
 7a2:	5c f0       	brlt	.+22     	; 0x7ba <i2c_read+0x92>
            buf[i-1]=i2c_buffer[i];
 7a4:	f4 01       	movw	r30, r8
 7a6:	e8 0f       	add	r30, r24
 7a8:	f9 1f       	adc	r31, r25
 7aa:	31 97       	sbiw	r30, 0x01	; 1
 7ac:	d7 01       	movw	r26, r14
 7ae:	a8 0f       	add	r26, r24
 7b0:	b9 1f       	adc	r27, r25
 7b2:	8c 91       	ld	r24, X
 7b4:	80 83       	st	Z, r24
    //read actual data
    i2c_buffer_len = len+1;
    i2c_buffer[0] = (addr << 1) | I2CREAD;
    if(i2c_in_transmit(i2c_buffer, i2c_buffer_len)){
        uint8_t i;
        for(i=1;i<len+1;i++){ // fetch in buffer
 7b6:	2f 5f       	subi	r18, 0xFF	; 255
 7b8:	f0 cf       	rjmp	.-32     	; 0x79a <i2c_read+0x72>
            buf[i-1]=i2c_buffer[i];
        }
        return 1; // provide success check
 7ba:	81 e0       	ldi	r24, 0x01	; 1
    }else{
        return 0;
    }
}
 7bc:	0f b6       	in	r0, 0x3f	; 63
 7be:	f8 94       	cli
 7c0:	be be       	out	0x3e, r11	; 62
 7c2:	0f be       	out	0x3f, r0	; 63
 7c4:	ad be       	out	0x3d, r10	; 61
 7c6:	df 91       	pop	r29
 7c8:	cf 91       	pop	r28
 7ca:	1f 91       	pop	r17
 7cc:	0f 91       	pop	r16
 7ce:	ff 90       	pop	r15
 7d0:	ef 90       	pop	r14
 7d2:	df 90       	pop	r13
 7d4:	cf 90       	pop	r12
 7d6:	bf 90       	pop	r11
 7d8:	af 90       	pop	r10
 7da:	9f 90       	pop	r9
 7dc:	8f 90       	pop	r8
 7de:	08 95       	ret

000007e0 <RTC_readTemp>:
            }else{return 20;}
        }else{return 10;}
    }else{return 0;}
}

int8_t RTC_readTemp(void){
 7e0:	cf 93       	push	r28
 7e2:	df 93       	push	r29
 7e4:	1f 92       	push	r1
 7e6:	cd b7       	in	r28, 0x3d	; 61
 7e8:	de b7       	in	r29, 0x3e	; 62
    int8_t data=0;
 7ea:	19 82       	std	Y+1, r1	; 0x01
    if(i2c_read(RTC_addr,1,0x11,&data)){
 7ec:	9e 01       	movw	r18, r28
 7ee:	2f 5f       	subi	r18, 0xFF	; 255
 7f0:	3f 4f       	sbci	r19, 0xFF	; 255
 7f2:	41 e1       	ldi	r20, 0x11	; 17
 7f4:	61 e0       	ldi	r22, 0x01	; 1
 7f6:	88 e6       	ldi	r24, 0x68	; 104
 7f8:	97 df       	rcall	.-210    	; 0x728 <i2c_read>
 7fa:	88 23       	and	r24, r24
 7fc:	11 f0       	breq	.+4      	; 0x802 <RTC_readTemp+0x22>
        return (data);
 7fe:	89 81       	ldd	r24, Y+1	; 0x01
 800:	01 c0       	rjmp	.+2      	; 0x804 <RTC_readTemp+0x24>
    }else{
        return 0;
 802:	80 e0       	ldi	r24, 0x00	; 0
    }
    
}
 804:	0f 90       	pop	r0
 806:	df 91       	pop	r29
 808:	cf 91       	pop	r28
 80a:	08 95       	ret

0000080c <RTC_readTime>:
    return ((val/16*10) + (val%16));
}
uint8_t decToBcd(uint8_t val){
    return( (val/10*16) + (val%10) );
}
uint8_t RTC_readTime(struct Ttime *t){
 80c:	0f 93       	push	r16
 80e:	1f 93       	push	r17
 810:	cf 93       	push	r28
 812:	df 93       	push	r29
 814:	cd b7       	in	r28, 0x3d	; 61
 816:	de b7       	in	r29, 0x3e	; 62
 818:	27 97       	sbiw	r28, 0x07	; 7
 81a:	0f b6       	in	r0, 0x3f	; 63
 81c:	f8 94       	cli
 81e:	de bf       	out	0x3e, r29	; 62
 820:	0f be       	out	0x3f, r0	; 63
 822:	cd bf       	out	0x3d, r28	; 61
 824:	8c 01       	movw	r16, r24
    uint8_t data[7] = {0};
 826:	9e 01       	movw	r18, r28
 828:	2f 5f       	subi	r18, 0xFF	; 255
 82a:	3f 4f       	sbci	r19, 0xFF	; 255
 82c:	87 e0       	ldi	r24, 0x07	; 7
 82e:	f9 01       	movw	r30, r18
 830:	11 92       	st	Z+, r1
 832:	8a 95       	dec	r24
 834:	e9 f7       	brne	.-6      	; 0x830 <RTC_readTime+0x24>
    if(i2c_read(RTC_addr,7,0x00,data)){
 836:	40 e0       	ldi	r20, 0x00	; 0
 838:	67 e0       	ldi	r22, 0x07	; 7
 83a:	88 e6       	ldi	r24, 0x68	; 104
 83c:	75 df       	rcall	.-278    	; 0x728 <i2c_read>
 83e:	88 23       	and	r24, r24
 840:	89 f0       	breq	.+34     	; 0x864 <RTC_readTime+0x58>
        t->hour = bcdToDec(data[2]);
 842:	8b 81       	ldd	r24, Y+3	; 0x03
 844:	9b de       	rcall	.-714    	; 0x57c <bcdToDec>
 846:	f8 01       	movw	r30, r16
 848:	80 83       	st	Z, r24
        t->min = bcdToDec(data[1]);
 84a:	8a 81       	ldd	r24, Y+2	; 0x02
 84c:	97 de       	rcall	.-722    	; 0x57c <bcdToDec>
 84e:	f8 01       	movw	r30, r16
 850:	81 83       	std	Z+1, r24	; 0x01
        t->monthDay = bcdToDec(data[4]);
 852:	8d 81       	ldd	r24, Y+5	; 0x05
 854:	93 de       	rcall	.-730    	; 0x57c <bcdToDec>
 856:	f8 01       	movw	r30, r16
 858:	82 83       	std	Z+2, r24	; 0x02
        t->month = bcdToDec(data[5]);
 85a:	8e 81       	ldd	r24, Y+6	; 0x06
 85c:	8f de       	rcall	.-738    	; 0x57c <bcdToDec>
 85e:	f8 01       	movw	r30, r16
 860:	83 83       	std	Z+3, r24	; 0x03
        return 1;
 862:	81 e0       	ldi	r24, 0x01	; 1
    }else{
        return 0;
    }
}
 864:	27 96       	adiw	r28, 0x07	; 7
 866:	0f b6       	in	r0, 0x3f	; 63
 868:	f8 94       	cli
 86a:	de bf       	out	0x3e, r29	; 62
 86c:	0f be       	out	0x3f, r0	; 63
 86e:	cd bf       	out	0x3d, r28	; 61
 870:	df 91       	pop	r29
 872:	cf 91       	pop	r28
 874:	1f 91       	pop	r17
 876:	0f 91       	pop	r16
 878:	08 95       	ret

0000087a <MsetEventMode>:
}
void MsetMinam(uint8_t i){
}
void MsetMinpm(uint8_t i){
}
void MsetEventMode(uint8_t i){
 87a:	08 95       	ret

0000087c <MsetRainbow>:
        TCCR1B|=(1<<CS12)|(1<<CS10);
    }
}
void MsetRainbow(uint8_t i){
  //  cli();
    sendRawData(0b11111100001111111111);//white
 87c:	6f ef       	ldi	r22, 0xFF	; 255
 87e:	73 ec       	ldi	r23, 0xC3	; 195
 880:	8f e0       	ldi	r24, 0x0F	; 15
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	3a de       	rcall	.-908    	; 0x4fa <sendRawData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 886:	2f ef       	ldi	r18, 0xFF	; 255
 888:	89 e6       	ldi	r24, 0x69	; 105
 88a:	98 e1       	ldi	r25, 0x18	; 24
 88c:	21 50       	subi	r18, 0x01	; 1
 88e:	80 40       	sbci	r24, 0x00	; 0
 890:	90 40       	sbci	r25, 0x00	; 0
 892:	e1 f7       	brne	.-8      	; 0x88c <MsetRainbow+0x10>
 894:	00 c0       	rjmp	.+0      	; 0x896 <MsetRainbow+0x1a>
 896:	00 00       	nop
    _delay_ms(500);
    sendRawData(0b11000000001111111111);//green
 898:	6f ef       	ldi	r22, 0xFF	; 255
 89a:	73 e0       	ldi	r23, 0x03	; 3
 89c:	8c e0       	ldi	r24, 0x0C	; 12
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	2c de       	rcall	.-936    	; 0x4fa <sendRawData>
 8a2:	2f ef       	ldi	r18, 0xFF	; 255
 8a4:	89 e6       	ldi	r24, 0x69	; 105
 8a6:	98 e1       	ldi	r25, 0x18	; 24
 8a8:	21 50       	subi	r18, 0x01	; 1
 8aa:	80 40       	sbci	r24, 0x00	; 0
 8ac:	90 40       	sbci	r25, 0x00	; 0
 8ae:	e1 f7       	brne	.-8      	; 0x8a8 <MsetRainbow+0x2c>
 8b0:	00 c0       	rjmp	.+0      	; 0x8b2 <MsetRainbow+0x36>
 8b2:	00 00       	nop
    _delay_ms(500);
    sendRawData(0b00001100001111111111);//red
 8b4:	6f ef       	ldi	r22, 0xFF	; 255
 8b6:	73 ec       	ldi	r23, 0xC3	; 195
 8b8:	80 e0       	ldi	r24, 0x00	; 0
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	1e de       	rcall	.-964    	; 0x4fa <sendRawData>
 8be:	2f ef       	ldi	r18, 0xFF	; 255
 8c0:	89 e6       	ldi	r24, 0x69	; 105
 8c2:	98 e1       	ldi	r25, 0x18	; 24
 8c4:	21 50       	subi	r18, 0x01	; 1
 8c6:	80 40       	sbci	r24, 0x00	; 0
 8c8:	90 40       	sbci	r25, 0x00	; 0
 8ca:	e1 f7       	brne	.-8      	; 0x8c4 <MsetRainbow+0x48>
 8cc:	00 c0       	rjmp	.+0      	; 0x8ce <MsetRainbow+0x52>
 8ce:	00 00       	nop
    _delay_ms(500);
    sendRawData(0b00110000001111111111);//blue
 8d0:	6f ef       	ldi	r22, 0xFF	; 255
 8d2:	73 e0       	ldi	r23, 0x03	; 3
 8d4:	83 e0       	ldi	r24, 0x03	; 3
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	10 de       	rcall	.-992    	; 0x4fa <sendRawData>
 8da:	2f ef       	ldi	r18, 0xFF	; 255
 8dc:	89 e6       	ldi	r24, 0x69	; 105
 8de:	98 e1       	ldi	r25, 0x18	; 24
 8e0:	21 50       	subi	r18, 0x01	; 1
 8e2:	80 40       	sbci	r24, 0x00	; 0
 8e4:	90 40       	sbci	r25, 0x00	; 0
 8e6:	e1 f7       	brne	.-8      	; 0x8e0 <MsetRainbow+0x64>
 8e8:	00 c0       	rjmp	.+0      	; 0x8ea <MsetRainbow+0x6e>
 8ea:	00 00       	nop
    _delay_ms(500);
    sendRawData(0b11110000001111111111);//cyan
 8ec:	6f ef       	ldi	r22, 0xFF	; 255
 8ee:	73 e0       	ldi	r23, 0x03	; 3
 8f0:	8f e0       	ldi	r24, 0x0F	; 15
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	02 de       	rcall	.-1020   	; 0x4fa <sendRawData>
 8f6:	2f ef       	ldi	r18, 0xFF	; 255
 8f8:	89 e6       	ldi	r24, 0x69	; 105
 8fa:	98 e1       	ldi	r25, 0x18	; 24
 8fc:	21 50       	subi	r18, 0x01	; 1
 8fe:	80 40       	sbci	r24, 0x00	; 0
 900:	90 40       	sbci	r25, 0x00	; 0
 902:	e1 f7       	brne	.-8      	; 0x8fc <MsetRainbow+0x80>
 904:	00 c0       	rjmp	.+0      	; 0x906 <MsetRainbow+0x8a>
 906:	00 00       	nop
    _delay_ms(500);
    sendRawData(0b00111100001111111111);//magenta
 908:	6f ef       	ldi	r22, 0xFF	; 255
 90a:	73 ec       	ldi	r23, 0xC3	; 195
 90c:	83 e0       	ldi	r24, 0x03	; 3
 90e:	90 e0       	ldi	r25, 0x00	; 0
 910:	f4 dd       	rcall	.-1048   	; 0x4fa <sendRawData>
 912:	2f ef       	ldi	r18, 0xFF	; 255
 914:	89 e6       	ldi	r24, 0x69	; 105
 916:	98 e1       	ldi	r25, 0x18	; 24
 918:	21 50       	subi	r18, 0x01	; 1
 91a:	80 40       	sbci	r24, 0x00	; 0
 91c:	90 40       	sbci	r25, 0x00	; 0
 91e:	e1 f7       	brne	.-8      	; 0x918 <MsetRainbow+0x9c>
 920:	00 c0       	rjmp	.+0      	; 0x922 <MsetRainbow+0xa6>
 922:	00 00       	nop
    _delay_ms(500);
    sendRawData(0b11001100001111111111);//yellow
 924:	6f ef       	ldi	r22, 0xFF	; 255
 926:	73 ec       	ldi	r23, 0xC3	; 195
 928:	8c e0       	ldi	r24, 0x0C	; 12
 92a:	90 e0       	ldi	r25, 0x00	; 0
 92c:	e6 dd       	rcall	.-1076   	; 0x4fa <sendRawData>
 92e:	2f ef       	ldi	r18, 0xFF	; 255
 930:	89 e6       	ldi	r24, 0x69	; 105
 932:	98 e1       	ldi	r25, 0x18	; 24
 934:	21 50       	subi	r18, 0x01	; 1
 936:	80 40       	sbci	r24, 0x00	; 0
 938:	90 40       	sbci	r25, 0x00	; 0
 93a:	e1 f7       	brne	.-8      	; 0x934 <MsetRainbow+0xb8>
 93c:	00 c0       	rjmp	.+0      	; 0x93e <MsetRainbow+0xc2>
 93e:	00 00       	nop
 940:	08 95       	ret

00000942 <MsetMinpm>:
 942:	08 95       	ret

00000944 <MsetHouram>:
 944:	08 95       	ret

00000946 <MsetHourpm>:
 946:	08 95       	ret

00000948 <MsetMinam>:
 948:	08 95       	ret

0000094a <findNextEntry>:
#include "Menu.h"

uint8_t mode=1;//0: hour only, 1-2: hour+temp, 3: temp only
uint8_t colorMode=0;
uint8_t findNextEntry(Menu* m,uint8_t index){
    if((index+2)>(m->nb_optn%16))return 0;
 94a:	26 2f       	mov	r18, r22
 94c:	30 e0       	ldi	r19, 0x00	; 0
 94e:	2f 5f       	subi	r18, 0xFF	; 255
 950:	3f 4f       	sbci	r19, 0xFF	; 255
 952:	fc 01       	movw	r30, r24
 954:	80 81       	ld	r24, Z
 956:	8f 70       	andi	r24, 0x0F	; 15
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	28 17       	cp	r18, r24
 95c:	39 07       	cpc	r19, r25
 95e:	1c f4       	brge	.+6      	; 0x966 <findNextEntry+0x1c>
    return index+1;
 960:	81 e0       	ldi	r24, 0x01	; 1
 962:	86 0f       	add	r24, r22
 964:	08 95       	ret
#include "Menu.h"

uint8_t mode=1;//0: hour only, 1-2: hour+temp, 3: temp only
uint8_t colorMode=0;
uint8_t findNextEntry(Menu* m,uint8_t index){
    if((index+2)>(m->nb_optn%16))return 0;
 966:	80 e0       	ldi	r24, 0x00	; 0
    return index+1;
}
 968:	08 95       	ret

0000096a <getSubMenu>:

Menu* getSubMenu(Menu* m,uint8_t index){
 96a:	9c 01       	movw	r18, r24
    if(m->sub[index].submenu==0)return 0;//if executed NULL, return blank menu (==exit setup)
 96c:	86 2f       	mov	r24, r22
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	63 e0       	ldi	r22, 0x03	; 3
 972:	70 e0       	ldi	r23, 0x00	; 0
 974:	3c d1       	rcall	.+632    	; 0xbee <__mulhi3>
 976:	82 0f       	add	r24, r18
 978:	93 1f       	adc	r25, r19
    return m->sub[index].submenu;
}
 97a:	fc 01       	movw	r30, r24
 97c:	84 81       	ldd	r24, Z+4	; 0x04
 97e:	95 81       	ldd	r25, Z+5	; 0x05
 980:	08 95       	ret

00000982 <EEPROM_write>:
void EEPROM_write(uint8_t addr, uint8_t data){
    while(EECR & (1<<EEPE));
 982:	e1 99       	sbic	0x1c, 1	; 28
 984:	fe cf       	rjmp	.-4      	; 0x982 <EEPROM_write>
    EECR = (0<<EEPM1)|(0<<EEPM0);
 986:	1c ba       	out	0x1c, r1	; 28
    EEAR = addr;
 988:	90 e0       	ldi	r25, 0x00	; 0
 98a:	9f bb       	out	0x1f, r25	; 31
 98c:	8e bb       	out	0x1e, r24	; 30
    EEDR = data;
 98e:	6d bb       	out	0x1d, r22	; 29
    EECR |= (1<<EEMPE);
 990:	e2 9a       	sbi	0x1c, 2	; 28
    EECR |= (1<<EEPE);
 992:	e1 9a       	sbi	0x1c, 1	; 28
 994:	08 95       	ret

00000996 <MsetMode>:
    {8,0},//Rainbow off
    {HEURE,&M0main}//return
}};

void MsetMode(uint8_t i){
    if(i<4){
 996:	84 30       	cpi	r24, 0x04	; 4
 998:	68 f4       	brcc	.+26     	; 0x9b4 <MsetMode+0x1e>
        TCCR1B|=(1<<CS12)|(1<<CS10);
 99a:	9e b5       	in	r25, 0x2e	; 46
 99c:	95 60       	ori	r25, 0x05	; 5
 99e:	9e bd       	out	0x2e, r25	; 46
        if(i==2)TCCR1B&=~(1<<CS10);
 9a0:	82 30       	cpi	r24, 0x02	; 2
 9a2:	19 f4       	brne	.+6      	; 0x9aa <MsetMode+0x14>
 9a4:	9e b5       	in	r25, 0x2e	; 46
 9a6:	9e 7f       	andi	r25, 0xFE	; 254
 9a8:	9e bd       	out	0x2e, r25	; 46
        mode=i;
 9aa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
        EEPROM_write(EE_MODE,i);
 9ae:	68 2f       	mov	r22, r24
 9b0:	84 e0       	ldi	r24, 0x04	; 4
 9b2:	e7 cf       	rjmp	.-50     	; 0x982 <EEPROM_write>
 9b4:	08 95       	ret

000009b6 <MsetColorMode>:
        mode=2;
    }
    return mode;
}
void MsetColorMode(uint8_t i){
    if(i<7){
 9b6:	87 30       	cpi	r24, 0x07	; 7
 9b8:	40 f4       	brcc	.+16     	; 0x9ca <MsetColorMode+0x14>
        colorMode=colorArray[i];//fixed
 9ba:	e8 2f       	mov	r30, r24
 9bc:	f0 e0       	ldi	r31, 0x00	; 0
 9be:	ed 53       	subi	r30, 0x3D	; 61
 9c0:	fe 4f       	sbci	r31, 0xFE	; 254
 9c2:	60 81       	ld	r22, Z
 9c4:	60 93 d0 01 	sts	0x01D0, r22	; 0x8001d0 <colorMode>
 9c8:	0d c0       	rjmp	.+26     	; 0x9e4 <MsetColorMode+0x2e>
        EEPROM_write(EE_COLOR,colorArray[i]);
    }else if(i==7){//cycle single
 9ca:	87 30       	cpi	r24, 0x07	; 7
 9cc:	29 f4       	brne	.+10     	; 0x9d8 <MsetColorMode+0x22>
        colorMode=WHITE+128;
 9ce:	87 e8       	ldi	r24, 0x87	; 135
 9d0:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <colorMode>
        EEPROM_write(EE_COLOR,128);
 9d4:	60 e8       	ldi	r22, 0x80	; 128
 9d6:	06 c0       	rjmp	.+12     	; 0x9e4 <MsetColorMode+0x2e>
    }else if(i==8){//cycle all
 9d8:	88 30       	cpi	r24, 0x08	; 8
 9da:	31 f4       	brne	.+12     	; 0x9e8 <MsetColorMode+0x32>
        colorMode=WHITE+64;
 9dc:	87 e4       	ldi	r24, 0x47	; 71
 9de:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <colorMode>
        EEPROM_write(EE_COLOR,64);
 9e2:	60 e4       	ldi	r22, 0x40	; 64
 9e4:	80 e0       	ldi	r24, 0x00	; 0
 9e6:	cd cf       	rjmp	.-102    	; 0x982 <EEPROM_write>
 9e8:	08 95       	ret

000009ea <MsetNightMode>:
    }else{//fixed
        return colorMode;
    }
}
void MsetNightMode(uint8_t i){
    if(i<3)EEPROM_write(EE_NIGHTMODE,i);
 9ea:	83 30       	cpi	r24, 0x03	; 3
 9ec:	18 f4       	brcc	.+6      	; 0x9f4 <MsetNightMode+0xa>
 9ee:	68 2f       	mov	r22, r24
 9f0:	81 e0       	ldi	r24, 0x01	; 1
 9f2:	c7 cf       	rjmp	.-114    	; 0x982 <EEPROM_write>
 9f4:	08 95       	ret

000009f6 <MsetNightOff>:
uint8_t isInAllowedTime(uint8_t h){
    if(EEPROM_read(EE_NIGHTMODE))return (h>=EEPROM_read(EE_ONHOUR) && h<=EEPROM_read(EE_OFFHOUR));
    return 1;
}
void MsetNightOff(uint8_t i){
    EEPROM_write(EE_OFFHOUR,12+i);
 9f6:	6c e0       	ldi	r22, 0x0C	; 12
 9f8:	68 0f       	add	r22, r24
 9fa:	83 e0       	ldi	r24, 0x03	; 3
 9fc:	c2 cf       	rjmp	.-124    	; 0x982 <EEPROM_write>

000009fe <MsetNightOn>:
}
void MsetNightOn(uint8_t i){
    EEPROM_write(EE_ONHOUR,1+i);
 9fe:	61 e0       	ldi	r22, 0x01	; 1
 a00:	68 0f       	add	r22, r24
 a02:	82 e0       	ldi	r24, 0x02	; 2
 a04:	be cf       	rjmp	.-132    	; 0x982 <EEPROM_write>

00000a06 <Mreset>:
void MsetMinpm(uint8_t i){
}
void MsetEventMode(uint8_t i){
}
void Mreset(uint8_t i){
    if(i<1){
 a06:	81 11       	cpse	r24, r1
 a08:	17 c0       	rjmp	.+46     	; 0xa38 <Mreset+0x32>
    {HEURE,&M0main}//return
}};

void MsetMode(uint8_t i){
    if(i<4){
        TCCR1B|=(1<<CS12)|(1<<CS10);
 a0a:	8e b5       	in	r24, 0x2e	; 46
 a0c:	85 60       	ori	r24, 0x05	; 5
 a0e:	8e bd       	out	0x2e, r24	; 46
        if(i==2)TCCR1B&=~(1<<CS10);
        mode=i;
 a10:	81 e0       	ldi	r24, 0x01	; 1
 a12:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
        EEPROM_write(EE_MODE,i);
 a16:	61 e0       	ldi	r22, 0x01	; 1
 a18:	84 e0       	ldi	r24, 0x04	; 4
 a1a:	b3 df       	rcall	.-154    	; 0x982 <EEPROM_write>
void MsetEventMode(uint8_t i){
}
void Mreset(uint8_t i){
    if(i<1){
        MsetMode(1);
        MsetColorMode(0);
 a1c:	80 e0       	ldi	r24, 0x00	; 0
 a1e:	cb df       	rcall	.-106    	; 0x9b6 <MsetColorMode>
        EEPROM_write(EE_NIGHTMODE,1);
 a20:	61 e0       	ldi	r22, 0x01	; 1
 a22:	81 e0       	ldi	r24, 0x01	; 1
 a24:	ae df       	rcall	.-164    	; 0x982 <EEPROM_write>
        EEPROM_write(EE_OFFHOUR,12+22);
 a26:	62 e2       	ldi	r22, 0x22	; 34
 a28:	83 e0       	ldi	r24, 0x03	; 3
 a2a:	ab df       	rcall	.-170    	; 0x982 <EEPROM_write>
        EEPROM_write(EE_ONHOUR,1+8);
 a2c:	69 e0       	ldi	r22, 0x09	; 9
 a2e:	82 e0       	ldi	r24, 0x02	; 2
 a30:	a8 df       	rcall	.-176    	; 0x982 <EEPROM_write>
        TCCR1B|=(1<<CS12)|(1<<CS10);
 a32:	8e b5       	in	r24, 0x2e	; 46
 a34:	85 60       	ori	r24, 0x05	; 5
 a36:	8e bd       	out	0x2e, r24	; 46
 a38:	08 95       	ret

00000a3a <EEPROM_read>:
    EEDR = data;
    EECR |= (1<<EEMPE);
    EECR |= (1<<EEPE);
}
uint8_t EEPROM_read(uint8_t addr){
    while(EECR & (1<<EEPE));
 a3a:	e1 99       	sbic	0x1c, 1	; 28
 a3c:	fe cf       	rjmp	.-4      	; 0xa3a <EEPROM_read>
    EEAR = addr;
 a3e:	90 e0       	ldi	r25, 0x00	; 0
 a40:	9f bb       	out	0x1f, r25	; 31
 a42:	8e bb       	out	0x1e, r24	; 30
    EECR |= (1<<EERE);
 a44:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
 a46:	8d b3       	in	r24, 0x1d	; 29
}
 a48:	08 95       	ret

00000a4a <Minit>:

void Minit(void){
    colorMode=EEPROM_read(EE_COLOR);
 a4a:	80 e0       	ldi	r24, 0x00	; 0
 a4c:	f6 df       	rcall	.-20     	; 0xa3a <EEPROM_read>
 a4e:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <colorMode>
    MsetMode(EEPROM_read(EE_MODE));
 a52:	84 e0       	ldi	r24, 0x04	; 4
 a54:	f2 df       	rcall	.-28     	; 0xa3a <EEPROM_read>
 a56:	9f cf       	rjmp	.-194    	; 0x996 <MsetMode>

00000a58 <getMode>:
        mode=i;
        EEPROM_write(EE_MODE,i);
    }
}
uint8_t getMode(void){
    if(mode==2){
 a58:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 a5c:	82 30       	cpi	r24, 0x02	; 2
 a5e:	11 f4       	brne	.+4      	; 0xa64 <getMode+0xc>
        mode=1;
 a60:	81 e0       	ldi	r24, 0x01	; 1
 a62:	03 c0       	rjmp	.+6      	; 0xa6a <getMode+0x12>
    }else if(mode==1){
 a64:	81 30       	cpi	r24, 0x01	; 1
 a66:	19 f4       	brne	.+6      	; 0xa6e <getMode+0x16>
        mode=2;
 a68:	82 e0       	ldi	r24, 0x02	; 2
 a6a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
    }
    return mode;
}
 a6e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 a72:	08 95       	ret

00000a74 <getColor>:
        colorMode=WHITE+64;
        EEPROM_write(EE_COLOR,64);
    }
}
uint8_t getColor(void){
    if(colorMode>127){//cycle single
 a74:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <colorMode>
 a78:	87 ff       	sbrs	r24, 7
 a7a:	0f c0       	rjmp	.+30     	; 0xa9a <getColor+0x26>
        if(colorMode>134)colorMode=128;
 a7c:	87 38       	cpi	r24, 0x87	; 135
 a7e:	18 f0       	brcs	.+6      	; 0xa86 <getColor+0x12>
 a80:	80 e8       	ldi	r24, 0x80	; 128
 a82:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <colorMode>
        colorMode++;
 a86:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <colorMode>
 a8a:	ef 5f       	subi	r30, 0xFF	; 255
 a8c:	e0 93 d0 01 	sts	0x01D0, r30	; 0x8001d0 <colorMode>
        return colorArray[colorMode-129];
 a90:	f0 e0       	ldi	r31, 0x00	; 0
 a92:	ee 5b       	subi	r30, 0xBE	; 190
 a94:	fe 4f       	sbci	r31, 0xFE	; 254
 a96:	80 81       	ld	r24, Z
 a98:	08 95       	ret
    }else if(colorMode>63){//cycle all
 a9a:	80 34       	cpi	r24, 0x40	; 64
 a9c:	08 f0       	brcs	.+2      	; 0xaa0 <getColor+0x2c>
        return RED;
 a9e:	84 e0       	ldi	r24, 0x04	; 4
    }else{//fixed
        return colorMode;
    }
}
 aa0:	08 95       	ret

00000aa2 <isInAllowedTime>:
void MsetNightMode(uint8_t i){
    if(i<3)EEPROM_write(EE_NIGHTMODE,i);
}
uint8_t isInAllowedTime(uint8_t h){
 aa2:	cf 93       	push	r28
 aa4:	c8 2f       	mov	r28, r24
    if(EEPROM_read(EE_NIGHTMODE))return (h>=EEPROM_read(EE_ONHOUR) && h<=EEPROM_read(EE_OFFHOUR));
 aa6:	81 e0       	ldi	r24, 0x01	; 1
 aa8:	c8 df       	rcall	.-112    	; 0xa3a <EEPROM_read>
 aaa:	88 23       	and	r24, r24
 aac:	71 f0       	breq	.+28     	; 0xaca <isInAllowedTime+0x28>
 aae:	82 e0       	ldi	r24, 0x02	; 2
 ab0:	c4 df       	rcall	.-120    	; 0xa3a <EEPROM_read>
 ab2:	c8 17       	cp	r28, r24
 ab4:	40 f0       	brcs	.+16     	; 0xac6 <isInAllowedTime+0x24>
 ab6:	83 e0       	ldi	r24, 0x03	; 3
 ab8:	c0 df       	rcall	.-128    	; 0xa3a <EEPROM_read>
 aba:	91 e0       	ldi	r25, 0x01	; 1
 abc:	8c 17       	cp	r24, r28
 abe:	08 f4       	brcc	.+2      	; 0xac2 <isInAllowedTime+0x20>
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	89 2f       	mov	r24, r25
 ac4:	03 c0       	rjmp	.+6      	; 0xacc <isInAllowedTime+0x2a>
 ac6:	80 e0       	ldi	r24, 0x00	; 0
 ac8:	01 c0       	rjmp	.+2      	; 0xacc <isInAllowedTime+0x2a>
    return 1;
 aca:	81 e0       	ldi	r24, 0x01	; 1
}
 acc:	cf 91       	pop	r28
 ace:	08 95       	ret

00000ad0 <main>:
const Menu* Mcurrent=0;
uint8_t Mindex=0;
Led leds[NBLEDS];

int main(void){    
    ledInit(leds);
 ad0:	81 ed       	ldi	r24, 0xD1	; 209
 ad2:	91 e0       	ldi	r25, 0x01	; 1
 ad4:	26 dc       	rcall	.-1972   	; 0x322 <ledInit>
    DDRA&=~(BTNINTERNAL|BTNOK);
 ad6:	8a b3       	in	r24, 0x1a	; 26
 ad8:	8f 75       	andi	r24, 0x5F	; 95
 ada:	8a bb       	out	0x1a, r24	; 26
    DDRB&=~BTNSELECT;
 adc:	ba 98       	cbi	0x17, 2	; 23
    PORTA|=(BTNINTERNAL|BTNOK);
 ade:	8b b3       	in	r24, 0x1b	; 27
 ae0:	80 6a       	ori	r24, 0xA0	; 160
 ae2:	8b bb       	out	0x1b, r24	; 27
    PORTB|=BTNSELECT;
 ae4:	c2 9a       	sbi	0x18, 2	; 24
    TIMSK1|=(1<<TOIE1);//|(1<<OCIE1B);
 ae6:	60 9a       	sbi	0x0c, 0	; 12
    // OCR1B=32768;
    TIMSK0|=(1<<TOIE0);
 ae8:	89 b7       	in	r24, 0x39	; 57
 aea:	81 60       	ori	r24, 0x01	; 1
 aec:	89 bf       	out	0x39, r24	; 57
    
    sendData(0b11111100001111111111);//white
 aee:	6f ef       	ldi	r22, 0xFF	; 255
 af0:	73 ec       	ldi	r23, 0xC3	; 195
 af2:	8f e0       	ldi	r24, 0x0F	; 15
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	b1 da       	rcall	.-2718   	; 0x5a <sendData>
 af8:	2f ef       	ldi	r18, 0xFF	; 255
 afa:	89 e6       	ldi	r24, 0x69	; 105
 afc:	98 e1       	ldi	r25, 0x18	; 24
 afe:	21 50       	subi	r18, 0x01	; 1
 b00:	80 40       	sbci	r24, 0x00	; 0
 b02:	90 40       	sbci	r25, 0x00	; 0
 b04:	e1 f7       	brne	.-8      	; 0xafe <main+0x2e>
 b06:	00 c0       	rjmp	.+0      	; 0xb08 <main+0x38>
 b08:	00 00       	nop
    _delay_ms(500);
    sendData(0b11000000001111111111);//green
 b0a:	6f ef       	ldi	r22, 0xFF	; 255
 b0c:	73 e0       	ldi	r23, 0x03	; 3
 b0e:	8c e0       	ldi	r24, 0x0C	; 12
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	a3 da       	rcall	.-2746   	; 0x5a <sendData>
 b14:	2f ef       	ldi	r18, 0xFF	; 255
 b16:	89 e6       	ldi	r24, 0x69	; 105
 b18:	98 e1       	ldi	r25, 0x18	; 24
 b1a:	21 50       	subi	r18, 0x01	; 1
 b1c:	80 40       	sbci	r24, 0x00	; 0
 b1e:	90 40       	sbci	r25, 0x00	; 0
 b20:	e1 f7       	brne	.-8      	; 0xb1a <main+0x4a>
 b22:	00 c0       	rjmp	.+0      	; 0xb24 <main+0x54>
 b24:	00 00       	nop
    _delay_ms(500);
    sendData(0b00001100001111111111);//red
 b26:	6f ef       	ldi	r22, 0xFF	; 255
 b28:	73 ec       	ldi	r23, 0xC3	; 195
 b2a:	80 e0       	ldi	r24, 0x00	; 0
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	95 da       	rcall	.-2774   	; 0x5a <sendData>
 b30:	2f ef       	ldi	r18, 0xFF	; 255
 b32:	89 e6       	ldi	r24, 0x69	; 105
 b34:	98 e1       	ldi	r25, 0x18	; 24
 b36:	21 50       	subi	r18, 0x01	; 1
 b38:	80 40       	sbci	r24, 0x00	; 0
 b3a:	90 40       	sbci	r25, 0x00	; 0
 b3c:	e1 f7       	brne	.-8      	; 0xb36 <main+0x66>
 b3e:	00 c0       	rjmp	.+0      	; 0xb40 <main+0x70>
 b40:	00 00       	nop
    _delay_ms(500);
    sendData(0b00110000001111111111);//blue
 b42:	6f ef       	ldi	r22, 0xFF	; 255
 b44:	73 e0       	ldi	r23, 0x03	; 3
 b46:	83 e0       	ldi	r24, 0x03	; 3
 b48:	90 e0       	ldi	r25, 0x00	; 0
 b4a:	87 da       	rcall	.-2802   	; 0x5a <sendData>
 b4c:	2f ef       	ldi	r18, 0xFF	; 255
 b4e:	89 e6       	ldi	r24, 0x69	; 105
 b50:	98 e1       	ldi	r25, 0x18	; 24
 b52:	21 50       	subi	r18, 0x01	; 1
 b54:	80 40       	sbci	r24, 0x00	; 0
 b56:	90 40       	sbci	r25, 0x00	; 0
 b58:	e1 f7       	brne	.-8      	; 0xb52 <main+0x82>
 b5a:	00 c0       	rjmp	.+0      	; 0xb5c <main+0x8c>
 b5c:	00 00       	nop
    _delay_ms(500);
    sendData(0b11110000001111111111);//cyan
 b5e:	6f ef       	ldi	r22, 0xFF	; 255
 b60:	73 e0       	ldi	r23, 0x03	; 3
 b62:	8f e0       	ldi	r24, 0x0F	; 15
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	79 da       	rcall	.-2830   	; 0x5a <sendData>
 b68:	2f ef       	ldi	r18, 0xFF	; 255
 b6a:	89 e6       	ldi	r24, 0x69	; 105
 b6c:	98 e1       	ldi	r25, 0x18	; 24
 b6e:	21 50       	subi	r18, 0x01	; 1
 b70:	80 40       	sbci	r24, 0x00	; 0
 b72:	90 40       	sbci	r25, 0x00	; 0
 b74:	e1 f7       	brne	.-8      	; 0xb6e <main+0x9e>
 b76:	00 c0       	rjmp	.+0      	; 0xb78 <main+0xa8>
 b78:	00 00       	nop
    _delay_ms(500);
    sendData(0b00111100001111111111);//magenta
 b7a:	6f ef       	ldi	r22, 0xFF	; 255
 b7c:	73 ec       	ldi	r23, 0xC3	; 195
 b7e:	83 e0       	ldi	r24, 0x03	; 3
 b80:	90 e0       	ldi	r25, 0x00	; 0
 b82:	6b da       	rcall	.-2858   	; 0x5a <sendData>
 b84:	2f ef       	ldi	r18, 0xFF	; 255
 b86:	89 e6       	ldi	r24, 0x69	; 105
 b88:	98 e1       	ldi	r25, 0x18	; 24
 b8a:	21 50       	subi	r18, 0x01	; 1
 b8c:	80 40       	sbci	r24, 0x00	; 0
 b8e:	90 40       	sbci	r25, 0x00	; 0
 b90:	e1 f7       	brne	.-8      	; 0xb8a <main+0xba>
 b92:	00 c0       	rjmp	.+0      	; 0xb94 <main+0xc4>
 b94:	00 00       	nop
    _delay_ms(500);
    sendData(0b11001100001111111111);//yellow
 b96:	6f ef       	ldi	r22, 0xFF	; 255
 b98:	73 ec       	ldi	r23, 0xC3	; 195
 b9a:	8c e0       	ldi	r24, 0x0C	; 12
 b9c:	90 e0       	ldi	r25, 0x00	; 0
 b9e:	5d da       	rcall	.-2886   	; 0x5a <sendData>
 ba0:	2f ef       	ldi	r18, 0xFF	; 255
 ba2:	89 e6       	ldi	r24, 0x69	; 105
 ba4:	98 e1       	ldi	r25, 0x18	; 24
 ba6:	21 50       	subi	r18, 0x01	; 1
 ba8:	80 40       	sbci	r24, 0x00	; 0
 baa:	90 40       	sbci	r25, 0x00	; 0
 bac:	e1 f7       	brne	.-8      	; 0xba6 <main+0xd6>
 bae:	00 c0       	rjmp	.+0      	; 0xbb0 <main+0xe0>
 bb0:	00 00       	nop
    _delay_ms(500);
    
    //no sooner to let inputs debounce
    GIMSK|=(1<<PCIE1)|(1<<PCIE0);
 bb2:	8b b7       	in	r24, 0x3b	; 59
 bb4:	80 63       	ori	r24, 0x30	; 48
 bb6:	8b bf       	out	0x3b, r24	; 59
    PCMSK0|=(1<<PCINT7)|(1<<PCINT5);
 bb8:	82 b3       	in	r24, 0x12	; 18
 bba:	80 6a       	ori	r24, 0xA0	; 160
 bbc:	82 bb       	out	0x12, r24	; 18
    PCMSK1|=(1<<PCINT10);
 bbe:	80 b5       	in	r24, 0x20	; 32
 bc0:	84 60       	ori	r24, 0x04	; 4
 bc2:	80 bd       	out	0x20, r24	; 32
    sei();
 bc4:	78 94       	sei
    
    //update time & UI timer
    #ifdef DELLONG
    TCCR1B|=(1<<CS12)|(1<<CS10);
 bc6:	8e b5       	in	r24, 0x2e	; 46
 bc8:	85 60       	ori	r24, 0x05	; 5
 bca:	8e bd       	out	0x2e, r24	; 46
    #else
    TCCR1B|=(1<<CS12);//|(1<<CS10);
    #endif
    
    //led mux timer
    TCCR0B|=(1<<CS01)|(1<<CS00);
 bcc:	83 b7       	in	r24, 0x33	; 51
 bce:	83 60       	ori	r24, 0x03	; 3
 bd0:	83 bf       	out	0x33, r24	; 51
    
    Minit();
 bd2:	3b df       	rcall	.-394    	; 0xa4a <Minit>
    // //RTC_setTime(currentTime,6,18);
    RTC_readTime(&currentTime);
 bd4:	8b e0       	ldi	r24, 0x0B	; 11
 bd6:	92 e0       	ldi	r25, 0x02	; 2
 bd8:	19 de       	rcall	.-974    	; 0x80c <RTC_readTime>
 bda:	ff cf       	rjmp	.-2      	; 0xbda <main+0x10a>

00000bdc <__mulqi3>:
 bdc:	00 24       	eor	r0, r0

00000bde <__mulqi3_loop>:
 bde:	80 fd       	sbrc	r24, 0
 be0:	06 0e       	add	r0, r22
 be2:	66 0f       	add	r22, r22
 be4:	11 f0       	breq	.+4      	; 0xbea <__mulqi3_exit>
 be6:	86 95       	lsr	r24
 be8:	d1 f7       	brne	.-12     	; 0xbde <__mulqi3_loop>

00000bea <__mulqi3_exit>:
 bea:	80 2d       	mov	r24, r0
 bec:	08 95       	ret

00000bee <__mulhi3>:
 bee:	00 24       	eor	r0, r0
 bf0:	55 27       	eor	r21, r21
 bf2:	04 c0       	rjmp	.+8      	; 0xbfc <__mulhi3+0xe>
 bf4:	08 0e       	add	r0, r24
 bf6:	59 1f       	adc	r21, r25
 bf8:	88 0f       	add	r24, r24
 bfa:	99 1f       	adc	r25, r25
 bfc:	00 97       	sbiw	r24, 0x00	; 0
 bfe:	29 f0       	breq	.+10     	; 0xc0a <__mulhi3+0x1c>
 c00:	76 95       	lsr	r23
 c02:	67 95       	ror	r22
 c04:	b8 f3       	brcs	.-18     	; 0xbf4 <__mulhi3+0x6>
 c06:	71 05       	cpc	r23, r1
 c08:	b9 f7       	brne	.-18     	; 0xbf8 <__mulhi3+0xa>
 c0a:	80 2d       	mov	r24, r0
 c0c:	95 2f       	mov	r25, r21
 c0e:	08 95       	ret

00000c10 <__udivmodqi4>:
 c10:	99 1b       	sub	r25, r25
 c12:	79 e0       	ldi	r23, 0x09	; 9
 c14:	04 c0       	rjmp	.+8      	; 0xc1e <__udivmodqi4_ep>

00000c16 <__udivmodqi4_loop>:
 c16:	99 1f       	adc	r25, r25
 c18:	96 17       	cp	r25, r22
 c1a:	08 f0       	brcs	.+2      	; 0xc1e <__udivmodqi4_ep>
 c1c:	96 1b       	sub	r25, r22

00000c1e <__udivmodqi4_ep>:
 c1e:	88 1f       	adc	r24, r24
 c20:	7a 95       	dec	r23
 c22:	c9 f7       	brne	.-14     	; 0xc16 <__udivmodqi4_loop>
 c24:	80 95       	com	r24
 c26:	08 95       	ret

00000c28 <_exit>:
 c28:	f8 94       	cli

00000c2a <__stop_program>:
 c2a:	ff cf       	rjmp	.-2      	; 0xc2a <__stop_program>
