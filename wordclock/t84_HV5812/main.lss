
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000092a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000092a  000009be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000069  0080006c  0080006c  000009ca  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000009ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001949  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a58  00000000  00000000  000023c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000089a  00000000  00000000  00002e21  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f4  00000000  00000000  000036bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a8  00000000  00000000  00003ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001256  00000000  00000000  00003f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000051ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	46 c0       	rjmp	.+140    	; 0x9e <__vector_8>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	82 c0       	rjmp	.+260    	; 0x11c <__vector_11>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	ea e2       	ldi	r30, 0x2A	; 42
  36:	f9 e0       	ldi	r31, 0x09	; 9
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	ac 36       	cpi	r26, 0x6C	; 108
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	ac e6       	ldi	r26, 0x6C	; 108
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a5 3d       	cpi	r26, 0xD5	; 213
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	d1 d3       	rcall	.+1954   	; 0x7f8 <main>
  56:	67 c4       	rjmp	.+2254   	; 0x926 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <sendData>:
#include <util/delay.h>
#include "defines.h"
#include "Led.h"
#include "RTC.h"

void sendData(uint32_t data){
  5a:	0f 93       	push	r16
  5c:	1f 93       	push	r17
    PORTA &=~(STROBE|CLK);
  5e:	2b b3       	in	r18, 0x1b	; 27
  60:	23 7f       	andi	r18, 0xF3	; 243
  62:	2b bb       	out	0x1b, r18	; 27
  64:	40 e0       	ldi	r20, 0x00	; 0
  66:	50 e0       	ldi	r21, 0x00	; 0
    for(uint8_t i=0;i<20;i++){
        if((data>>i) & 0x00000001){
  68:	8b 01       	movw	r16, r22
  6a:	9c 01       	movw	r18, r24
  6c:	04 2e       	mov	r0, r20
  6e:	04 c0       	rjmp	.+8      	; 0x78 <sendData+0x1e>
  70:	36 95       	lsr	r19
  72:	27 95       	ror	r18
  74:	17 95       	ror	r17
  76:	07 95       	ror	r16
  78:	0a 94       	dec	r0
  7a:	d2 f7       	brpl	.-12     	; 0x70 <sendData+0x16>
  7c:	00 ff       	sbrs	r16, 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <sendData+0x2a>
            PORTA|=DATA;
  80:	d9 9a       	sbi	0x1b, 1	; 27
  82:	01 c0       	rjmp	.+2      	; 0x86 <sendData+0x2c>
        }else{
            PORTA&=~DATA;
  84:	d9 98       	cbi	0x1b, 1	; 27
        }
        PORTA|=CLK;
  86:	db 9a       	sbi	0x1b, 3	; 27
        PORTA&=~CLK;
  88:	db 98       	cbi	0x1b, 3	; 27
  8a:	4f 5f       	subi	r20, 0xFF	; 255
  8c:	5f 4f       	sbci	r21, 0xFF	; 255
#include "Led.h"
#include "RTC.h"

void sendData(uint32_t data){
    PORTA &=~(STROBE|CLK);
    for(uint8_t i=0;i<20;i++){
  8e:	44 31       	cpi	r20, 0x14	; 20
  90:	51 05       	cpc	r21, r1
  92:	51 f7       	brne	.-44     	; 0x68 <sendData+0xe>
            PORTA&=~DATA;
        }
        PORTA|=CLK;
        PORTA&=~CLK;
    }
    PORTA|=STROBE;
  94:	da 9a       	sbi	0x1b, 2	; 27
    PORTA&=~STROBE;
  96:	da 98       	cbi	0x1b, 2	; 27
}
  98:	1f 91       	pop	r17
  9a:	0f 91       	pop	r16
  9c:	08 95       	ret

0000009e <__vector_8>:
       
    }
    return(0);
    
}
ISR( TIM1_OVF_vect ){
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	ef 92       	push	r14
  aa:	ff 92       	push	r15
  ac:	0f 93       	push	r16
  ae:	2f 93       	push	r18
  b0:	3f 93       	push	r19
  b2:	4f 93       	push	r20
  b4:	5f 93       	push	r21
  b6:	6f 93       	push	r22
  b8:	7f 93       	push	r23
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
  be:	af 93       	push	r26
  c0:	bf 93       	push	r27
  c2:	ef 93       	push	r30
  c4:	ff 93       	push	r31
    PORTA^=LED;
  c6:	9b b3       	in	r25, 0x1b	; 27
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	89 27       	eor	r24, r25
  cc:	8b bb       	out	0x1b, r24	; 27
    //RTC_readTime(&currentTime);
    setLeds(currentTime,leds,currentColor);
  ce:	e0 90 d2 00 	lds	r14, 0x00D2	; 0x8000d2 <currentColor>
  d2:	f0 90 d3 00 	lds	r15, 0x00D3	; 0x8000d3 <currentColor+0x1>
  d6:	00 91 d4 00 	lds	r16, 0x00D4	; 0x8000d4 <currentColor+0x2>
  da:	2d e6       	ldi	r18, 0x6D	; 109
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	40 91 cd 00 	lds	r20, 0x00CD	; 0x8000cd <currentTime>
  e2:	50 91 ce 00 	lds	r21, 0x00CE	; 0x8000ce <currentTime+0x1>
  e6:	60 91 cf 00 	lds	r22, 0x00CF	; 0x8000cf <currentTime+0x2>
  ea:	70 91 d0 00 	lds	r23, 0x00D0	; 0x8000d0 <currentTime+0x3>
  ee:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <currentTime+0x4>
  f2:	6f d1       	rcall	.+734    	; 0x3d2 <setLeds>
}
  f4:	ff 91       	pop	r31
  f6:	ef 91       	pop	r30
  f8:	bf 91       	pop	r27
  fa:	af 91       	pop	r26
  fc:	9f 91       	pop	r25
  fe:	8f 91       	pop	r24
 100:	7f 91       	pop	r23
 102:	6f 91       	pop	r22
 104:	5f 91       	pop	r21
 106:	4f 91       	pop	r20
 108:	3f 91       	pop	r19
 10a:	2f 91       	pop	r18
 10c:	0f 91       	pop	r16
 10e:	ff 90       	pop	r15
 110:	ef 90       	pop	r14
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <__vector_11>:
ISR( TIM0_OVF_vect ){
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
 126:	2f 93       	push	r18
 128:	3f 93       	push	r19
 12a:	4f 93       	push	r20
 12c:	5f 93       	push	r21
 12e:	6f 93       	push	r22
 130:	7f 93       	push	r23
 132:	8f 93       	push	r24
 134:	9f 93       	push	r25
 136:	af 93       	push	r26
 138:	bf 93       	push	r27
 13a:	ef 93       	push	r30
 13c:	ff 93       	push	r31
    switch(state){
 13e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 142:	82 30       	cpi	r24, 0x02	; 2
 144:	49 f1       	breq	.+82     	; 0x198 <__vector_11+0x7c>
 146:	78 f4       	brcc	.+30     	; 0x166 <__vector_11+0x4a>
 148:	88 23       	and	r24, r24
 14a:	e1 f0       	breq	.+56     	; 0x184 <__vector_11+0x68>
 14c:	81 30       	cpi	r24, 0x01	; 1
 14e:	09 f0       	breq	.+2      	; 0x152 <__vector_11+0x36>
 150:	41 c0       	rjmp	.+130    	; 0x1d4 <__vector_11+0xb8>
        case 0:
            sendData(R2 | getDataByColor(tcolor(1,0,0),0,leds));
            break;
        case 1:
            sendData(R1 | getDataByColor(tcolor(1,0,0),1,leds));
 152:	40 e0       	ldi	r20, 0x00	; 0
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	59 d0       	rcall	.+178    	; 0x20c <tcolor>
 15a:	2d e6       	ldi	r18, 0x6D	; 109
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	41 e0       	ldi	r20, 0x01	; 1
 160:	ae d0       	rcall	.+348    	; 0x2be <getDataByColor>
 162:	70 68       	ori	r23, 0x80	; 128
 164:	36 c0       	rjmp	.+108    	; 0x1d2 <__vector_11+0xb6>
    PORTA^=LED;
    //RTC_readTime(&currentTime);
    setLeds(currentTime,leds,currentColor);
}
ISR( TIM0_OVF_vect ){
    switch(state){
 166:	84 30       	cpi	r24, 0x04	; 4
 168:	59 f1       	breq	.+86     	; 0x1c0 <__vector_11+0xa4>
 16a:	00 f1       	brcs	.+64     	; 0x1ac <__vector_11+0x90>
 16c:	85 30       	cpi	r24, 0x05	; 5
 16e:	91 f5       	brne	.+100    	; 0x1d4 <__vector_11+0xb8>
            break;
        case 4:
            sendData(B2 | getDataByColor(tcolor(0,0,1),0,leds));
            break;
        case 5:
            sendData(B1 | getDataByColor(tcolor(0,0,1),1,leds));
 170:	41 e0       	ldi	r20, 0x01	; 1
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	4a d0       	rcall	.+148    	; 0x20c <tcolor>
 178:	2d e6       	ldi	r18, 0x6D	; 109
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	41 e0       	ldi	r20, 0x01	; 1
 17e:	9f d0       	rcall	.+318    	; 0x2be <getDataByColor>
 180:	81 60       	ori	r24, 0x01	; 1
 182:	27 c0       	rjmp	.+78     	; 0x1d2 <__vector_11+0xb6>
    setLeds(currentTime,leds,currentColor);
}
ISR( TIM0_OVF_vect ){
    switch(state){
        case 0:
            sendData(R2 | getDataByColor(tcolor(1,0,0),0,leds));
 184:	40 e0       	ldi	r20, 0x00	; 0
 186:	60 e0       	ldi	r22, 0x00	; 0
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	40 d0       	rcall	.+128    	; 0x20c <tcolor>
 18c:	2d e6       	ldi	r18, 0x6D	; 109
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	40 e0       	ldi	r20, 0x00	; 0
 192:	95 d0       	rcall	.+298    	; 0x2be <getDataByColor>
 194:	70 64       	ori	r23, 0x40	; 64
 196:	1d c0       	rjmp	.+58     	; 0x1d2 <__vector_11+0xb6>
            break;
        case 1:
            sendData(R1 | getDataByColor(tcolor(1,0,0),1,leds));
            break;
        case 2:
            sendData(G2 | getDataByColor(tcolor(0,1,0),0,leds));
 198:	40 e0       	ldi	r20, 0x00	; 0
 19a:	61 e0       	ldi	r22, 0x01	; 1
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	36 d0       	rcall	.+108    	; 0x20c <tcolor>
 1a0:	2d e6       	ldi	r18, 0x6D	; 109
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	40 e0       	ldi	r20, 0x00	; 0
 1a6:	8b d0       	rcall	.+278    	; 0x2be <getDataByColor>
 1a8:	84 60       	ori	r24, 0x04	; 4
 1aa:	13 c0       	rjmp	.+38     	; 0x1d2 <__vector_11+0xb6>
            break;
        case 3:
            sendData(G1 | getDataByColor(tcolor(0,1,0),1,leds));
 1ac:	40 e0       	ldi	r20, 0x00	; 0
 1ae:	61 e0       	ldi	r22, 0x01	; 1
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	2c d0       	rcall	.+88     	; 0x20c <tcolor>
 1b4:	2d e6       	ldi	r18, 0x6D	; 109
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	41 e0       	ldi	r20, 0x01	; 1
 1ba:	81 d0       	rcall	.+258    	; 0x2be <getDataByColor>
 1bc:	88 60       	ori	r24, 0x08	; 8
 1be:	09 c0       	rjmp	.+18     	; 0x1d2 <__vector_11+0xb6>
            break;
        case 4:
            sendData(B2 | getDataByColor(tcolor(0,0,1),0,leds));
 1c0:	41 e0       	ldi	r20, 0x01	; 1
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	22 d0       	rcall	.+68     	; 0x20c <tcolor>
 1c8:	2d e6       	ldi	r18, 0x6D	; 109
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	77 d0       	rcall	.+238    	; 0x2be <getDataByColor>
 1d0:	82 60       	ori	r24, 0x02	; 2
            break;
        case 5:
            sendData(B1 | getDataByColor(tcolor(0,0,1),1,leds));
 1d2:	43 df       	rcall	.-378    	; 0x5a <sendData>
            break;
    }
    state++;
 1d4:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 1d8:	8f 5f       	subi	r24, 0xFF	; 255
 1da:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
    if(state>5)state=0;
 1de:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 1e2:	86 30       	cpi	r24, 0x06	; 6
 1e4:	10 f0       	brcs	.+4      	; 0x1ea <__vector_11+0xce>
 1e6:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
}
 1ea:	ff 91       	pop	r31
 1ec:	ef 91       	pop	r30
 1ee:	bf 91       	pop	r27
 1f0:	af 91       	pop	r26
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	7f 91       	pop	r23
 1f8:	6f 91       	pop	r22
 1fa:	5f 91       	pop	r21
 1fc:	4f 91       	pop	r20
 1fe:	3f 91       	pop	r19
 200:	2f 91       	pop	r18
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

0000020c <tcolor>:
#include "Led.h" 

static const uint8_t ledMap[11]={7,8,10,14,0,4,17,2,12,6,16};

Tcolor tcolor(uint8_t r,uint8_t g,uint8_t b){
 20c:	76 2f       	mov	r23, r22
    Tcolor c={r,g,b};
    return c;
}
 20e:	68 2f       	mov	r22, r24
 210:	84 2f       	mov	r24, r20
 212:	08 95       	ret

00000214 <tcolorV>:

Tcolor tcolorV(uint32_t v){
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
 218:	dc 01       	movw	r26, r24
 21a:	cb 01       	movw	r24, r22
    Tcolor c={(v>>16)&0xFF,(v>>8)&0xFF,v&0xFF};
    return c;
 21c:	ad 01       	movw	r20, r26
 21e:	66 27       	eor	r22, r22
 220:	77 27       	eor	r23, r23
 222:	09 2f       	mov	r16, r25
 224:	1a 2f       	mov	r17, r26
 226:	2b 2f       	mov	r18, r27
 228:	33 27       	eor	r19, r19
}
 22a:	64 2f       	mov	r22, r20
 22c:	70 2f       	mov	r23, r16
 22e:	1f 91       	pop	r17
 230:	0f 91       	pop	r16
 232:	08 95       	ret

00000234 <ledInit>:

void ledInit(Led* leds){
 234:	fc 01       	movw	r30, r24
    for(uint8_t i=0;i<NBLEDS;i++){
 236:	80 e0       	ldi	r24, 0x00	; 0
        leds[i].row=i%2;//leds[0]=0, leds[1]=1
 238:	98 2f       	mov	r25, r24
 23a:	91 70       	andi	r25, 0x01	; 1
 23c:	91 83       	std	Z+1, r25	; 0x01
        if(i<10){
 23e:	8a 30       	cpi	r24, 0x0A	; 10
 240:	10 f4       	brcc	.+4      	; 0x246 <ledInit+0x12>
            leds[i].col=i;//0-9
 242:	80 83       	st	Z, r24
 244:	03 c0       	rjmp	.+6      	; 0x24c <ledInit+0x18>
        }else{
            leds[i].col=i-9;//1-9
 246:	97 ef       	ldi	r25, 0xF7	; 247
 248:	98 0f       	add	r25, r24
 24a:	90 83       	st	Z, r25
        }
        leds[i].c.r=0;
 24c:	12 82       	std	Z+2, r1	; 0x02
        leds[i].c.g=0;
 24e:	13 82       	std	Z+3, r1	; 0x03
        leds[i].c.b=0;
 250:	14 82       	std	Z+4, r1	; 0x04
    Tcolor c={(v>>16)&0xFF,(v>>8)&0xFF,v&0xFF};
    return c;
}

void ledInit(Led* leds){
    for(uint8_t i=0;i<NBLEDS;i++){
 252:	8f 5f       	subi	r24, 0xFF	; 255
 254:	35 96       	adiw	r30, 0x05	; 5
 256:	83 31       	cpi	r24, 0x13	; 19
 258:	79 f7       	brne	.-34     	; 0x238 <ledInit+0x4>
        }
        leds[i].c.r=0;
        leds[i].c.g=0;
        leds[i].c.b=0;
    }
}
 25a:	08 95       	ret

0000025c <getColorByLed>:
uint32_t getColorByLed(Led l){
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	00 d0       	rcall	.+0      	; 0x262 <__stack+0x3>
 262:	00 d0       	rcall	.+0      	; 0x264 <__stack+0x5>
 264:	1f 92       	push	r1
 266:	cd b7       	in	r28, 0x3d	; 61
 268:	de b7       	in	r29, 0x3e	; 62
 26a:	27 2f       	mov	r18, r23
 26c:	38 2f       	mov	r19, r24
    uint32_t d=0;
    if(l.row){
 26e:	55 23       	and	r21, r21
 270:	81 f0       	breq	.+32     	; 0x292 <__stack+0x33>
        if(l.c.r)d|=R2;
 272:	66 23       	and	r22, r22
 274:	29 f0       	breq	.+10     	; 0x280 <__stack+0x21>
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	70 e4       	ldi	r23, 0x40	; 64
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	03 c0       	rjmp	.+6      	; 0x286 <__stack+0x27>
        leds[i].c.g=0;
        leds[i].c.b=0;
    }
}
uint32_t getColorByLed(Led l){
    uint32_t d=0;
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	70 e0       	ldi	r23, 0x00	; 0
 284:	cb 01       	movw	r24, r22
    if(l.row){
        if(l.c.r)d|=R2;
        if(l.c.g)d|=G2;
 286:	21 11       	cpse	r18, r1
 288:	84 60       	ori	r24, 0x04	; 4
        if(l.c.b)d|=B2;
 28a:	33 23       	and	r19, r19
 28c:	81 f0       	breq	.+32     	; 0x2ae <__stack+0x4f>
 28e:	82 60       	ori	r24, 0x02	; 2
 290:	0e c0       	rjmp	.+28     	; 0x2ae <__stack+0x4f>
    }else{
        if(l.c.r)d|=R1;
 292:	66 23       	and	r22, r22
 294:	29 f0       	breq	.+10     	; 0x2a0 <__stack+0x41>
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	70 e8       	ldi	r23, 0x80	; 128
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	03 c0       	rjmp	.+6      	; 0x2a6 <__stack+0x47>
        leds[i].c.g=0;
        leds[i].c.b=0;
    }
}
uint32_t getColorByLed(Led l){
    uint32_t d=0;
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	70 e0       	ldi	r23, 0x00	; 0
 2a4:	cb 01       	movw	r24, r22
        if(l.c.r)d|=R2;
        if(l.c.g)d|=G2;
        if(l.c.b)d|=B2;
    }else{
        if(l.c.r)d|=R1;
        if(l.c.g)d|=G1;
 2a6:	21 11       	cpse	r18, r1
 2a8:	88 60       	ori	r24, 0x08	; 8
        if(l.c.b)d|=B1;
 2aa:	31 11       	cpse	r19, r1
 2ac:	81 60       	ori	r24, 0x01	; 1
    }
    return d;
}
 2ae:	0f 90       	pop	r0
 2b0:	0f 90       	pop	r0
 2b2:	0f 90       	pop	r0
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <getDataByColor>:

uint32_t getDataByColor(Tcolor c, uint8_t mode, Led* leds){
 2be:	ef 92       	push	r14
 2c0:	ff 92       	push	r15
 2c2:	0f 93       	push	r16
 2c4:	1f 93       	push	r17
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	56 2f       	mov	r21, r22
 2cc:	f7 2e       	mov	r15, r23
 2ce:	e8 2e       	mov	r14, r24
 2d0:	f9 01       	movw	r30, r18
 2d2:	d9 01       	movw	r26, r18
 2d4:	a1 5a       	subi	r26, 0xA1	; 161
 2d6:	bf 4f       	sbci	r27, 0xFF	; 255
    uint32_t data=0;
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	cb 01       	movw	r24, r22
    for(uint8_t i=0;i<NBLEDS;i++){
        if(leds[i].row==mode){
            if((leds[i].c.r && c.r) || (leds[i].c.g && c.g) || (leds[i].c.b && c.b)){
                data|=(1<<leds[i].col);
 2de:	c1 e0       	ldi	r28, 0x01	; 1
 2e0:	d0 e0       	ldi	r29, 0x00	; 0
}

uint32_t getDataByColor(Tcolor c, uint8_t mode, Led* leds){
    uint32_t data=0;
    for(uint8_t i=0;i<NBLEDS;i++){
        if(leds[i].row==mode){
 2e2:	21 81       	ldd	r18, Z+1	; 0x01
 2e4:	24 13       	cpse	r18, r20
 2e6:	1e c0       	rjmp	.+60     	; 0x324 <getDataByColor+0x66>
            if((leds[i].c.r && c.r) || (leds[i].c.g && c.g) || (leds[i].c.b && c.b)){
 2e8:	22 81       	ldd	r18, Z+2	; 0x02
 2ea:	22 23       	and	r18, r18
 2ec:	11 f0       	breq	.+4      	; 0x2f2 <getDataByColor+0x34>
 2ee:	51 11       	cpse	r21, r1
 2f0:	0a c0       	rjmp	.+20     	; 0x306 <getDataByColor+0x48>
 2f2:	23 81       	ldd	r18, Z+3	; 0x03
 2f4:	22 23       	and	r18, r18
 2f6:	11 f0       	breq	.+4      	; 0x2fc <getDataByColor+0x3e>
 2f8:	f1 10       	cpse	r15, r1
 2fa:	05 c0       	rjmp	.+10     	; 0x306 <getDataByColor+0x48>
 2fc:	24 81       	ldd	r18, Z+4	; 0x04
 2fe:	22 23       	and	r18, r18
 300:	89 f0       	breq	.+34     	; 0x324 <getDataByColor+0x66>
 302:	ee 20       	and	r14, r14
 304:	79 f0       	breq	.+30     	; 0x324 <getDataByColor+0x66>
                data|=(1<<leds[i].col);
 306:	8e 01       	movw	r16, r28
 308:	00 80       	ld	r0, Z
 30a:	02 c0       	rjmp	.+4      	; 0x310 <getDataByColor+0x52>
 30c:	00 0f       	add	r16, r16
 30e:	11 1f       	adc	r17, r17
 310:	0a 94       	dec	r0
 312:	e2 f7       	brpl	.-8      	; 0x30c <getDataByColor+0x4e>
 314:	01 2e       	mov	r0, r17
 316:	00 0c       	add	r0, r0
 318:	22 0b       	sbc	r18, r18
 31a:	33 0b       	sbc	r19, r19
 31c:	60 2b       	or	r22, r16
 31e:	71 2b       	or	r23, r17
 320:	82 2b       	or	r24, r18
 322:	93 2b       	or	r25, r19
 324:	35 96       	adiw	r30, 0x05	; 5
    return d;
}

uint32_t getDataByColor(Tcolor c, uint8_t mode, Led* leds){
    uint32_t data=0;
    for(uint8_t i=0;i<NBLEDS;i++){
 326:	ea 17       	cp	r30, r26
 328:	fb 07       	cpc	r31, r27
 32a:	d9 f6       	brne	.-74     	; 0x2e2 <getDataByColor+0x24>
                data|=(1<<leds[i].col);
            }
        }
    }
    return data;
}
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	1f 91       	pop	r17
 332:	0f 91       	pop	r16
 334:	ff 90       	pop	r15
 336:	ef 90       	pop	r14
 338:	08 95       	ret

0000033a <ledOff>:

void ledOff(Led* l){
 33a:	fc 01       	movw	r30, r24
    l->c.r=0;
 33c:	12 82       	std	Z+2, r1	; 0x02
    l->c.g=0;
 33e:	13 82       	std	Z+3, r1	; 0x03
    l->c.b=0;
 340:	14 82       	std	Z+4, r1	; 0x04
 342:	08 95       	ret

00000344 <ledOn>:
}
void ledOn(Led* l){
 344:	fc 01       	movw	r30, r24
    l->c.r=255;
 346:	8f ef       	ldi	r24, 0xFF	; 255
 348:	82 83       	std	Z+2, r24	; 0x02
    l->c.g=255;
 34a:	83 83       	std	Z+3, r24	; 0x03
    l->c.b=255;
 34c:	84 83       	std	Z+4, r24	; 0x04
 34e:	08 95       	ret

00000350 <ledOnC>:
}

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 350:	fc 01       	movw	r30, r24
 352:	42 83       	std	Z+2, r20	; 0x02
 354:	53 83       	std	Z+3, r21	; 0x03
 356:	64 83       	std	Z+4, r22	; 0x04
 358:	08 95       	ret

0000035a <ledOnV>:
}

void ledOnV(Led* l,uint32_t v){
 35a:	fc 01       	movw	r30, r24
    l->c=tcolorV(v);
 35c:	62 83       	std	Z+2, r22	; 0x02
 35e:	53 83       	std	Z+3, r21	; 0x03
 360:	44 83       	std	Z+4, r20	; 0x04
 362:	08 95       	ret

00000364 <ledIsOff>:
}

uint8_t ledIsOff(Led l){
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
 368:	00 d0       	rcall	.+0      	; 0x36a <ledIsOff+0x6>
 36a:	00 d0       	rcall	.+0      	; 0x36c <ledIsOff+0x8>
 36c:	1f 92       	push	r1
 36e:	cd b7       	in	r28, 0x3d	; 61
 370:	de b7       	in	r29, 0x3e	; 62
    return !ledIsOn(l);
}
uint8_t ledIsOn(Led l){
    return l.c.r || l.c.g || l.c.b;
 372:	61 11       	cpse	r22, r1
 374:	08 c0       	rjmp	.+16     	; 0x386 <ledIsOff+0x22>
 376:	71 11       	cpse	r23, r1
 378:	06 c0       	rjmp	.+12     	; 0x386 <ledIsOff+0x22>
 37a:	91 e0       	ldi	r25, 0x01	; 1
 37c:	81 11       	cpse	r24, r1
 37e:	01 c0       	rjmp	.+2      	; 0x382 <ledIsOff+0x1e>
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	89 2f       	mov	r24, r25
 384:	01 c0       	rjmp	.+2      	; 0x388 <ledIsOff+0x24>
 386:	81 e0       	ldi	r24, 0x01	; 1
    l->c=tcolorV(v);
}

uint8_t ledIsOff(Led l){
    return !ledIsOn(l);
}
 388:	91 e0       	ldi	r25, 0x01	; 1
 38a:	89 27       	eor	r24, r25
 38c:	0f 90       	pop	r0
 38e:	0f 90       	pop	r0
 390:	0f 90       	pop	r0
 392:	0f 90       	pop	r0
 394:	0f 90       	pop	r0
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	08 95       	ret

0000039c <ledIsOn>:
uint8_t ledIsOn(Led l){
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	00 d0       	rcall	.+0      	; 0x3a2 <ledIsOn+0x6>
 3a2:	00 d0       	rcall	.+0      	; 0x3a4 <ledIsOn+0x8>
 3a4:	1f 92       	push	r1
 3a6:	cd b7       	in	r28, 0x3d	; 61
 3a8:	de b7       	in	r29, 0x3e	; 62
 3aa:	8d 83       	std	Y+5, r24	; 0x05
    return l.c.r || l.c.g || l.c.b;
 3ac:	61 11       	cpse	r22, r1
 3ae:	08 c0       	rjmp	.+16     	; 0x3c0 <ledIsOn+0x24>
 3b0:	71 11       	cpse	r23, r1
 3b2:	06 c0       	rjmp	.+12     	; 0x3c0 <ledIsOn+0x24>
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	9d 81       	ldd	r25, Y+5	; 0x05
 3b8:	91 11       	cpse	r25, r1
 3ba:	03 c0       	rjmp	.+6      	; 0x3c2 <ledIsOn+0x26>
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	01 c0       	rjmp	.+2      	; 0x3c2 <ledIsOn+0x26>
 3c0:	81 e0       	ldi	r24, 0x01	; 1
}
 3c2:	0f 90       	pop	r0
 3c4:	0f 90       	pop	r0
 3c6:	0f 90       	pop	r0
 3c8:	0f 90       	pop	r0
 3ca:	0f 90       	pop	r0
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	08 95       	ret

000003d2 <setLeds>:
void setLeds(Ttime t,Led* l,Tcolor c){
 3d2:	6f 92       	push	r6
 3d4:	7f 92       	push	r7
 3d6:	8f 92       	push	r8
 3d8:	cf 92       	push	r12
 3da:	df 92       	push	r13
 3dc:	ef 92       	push	r14
 3de:	ff 92       	push	r15
 3e0:	0f 93       	push	r16
 3e2:	cf 93       	push	r28
 3e4:	df 93       	push	r29
 3e6:	00 d0       	rcall	.+0      	; 0x3e8 <setLeds+0x16>
 3e8:	00 d0       	rcall	.+0      	; 0x3ea <setLeds+0x18>
 3ea:	1f 92       	push	r1
 3ec:	cd b7       	in	r28, 0x3d	; 61
 3ee:	de b7       	in	r29, 0x3e	; 62
 3f0:	69 01       	movw	r12, r18
 3f2:	37 01       	movw	r6, r14
 3f4:	80 2e       	mov	r8, r16
 3f6:	f9 01       	movw	r30, r18
 3f8:	c9 01       	movw	r24, r18
 3fa:	81 5a       	subi	r24, 0xA1	; 161
 3fc:	9f 4f       	sbci	r25, 0xFF	; 255
    }
    return data;
}

void ledOff(Led* l){
    l->c.r=0;
 3fe:	12 82       	std	Z+2, r1	; 0x02
    l->c.g=0;
 400:	13 82       	std	Z+3, r1	; 0x03
    l->c.b=0;
 402:	14 82       	std	Z+4, r1	; 0x04
 404:	35 96       	adiw	r30, 0x05	; 5
uint8_t ledIsOn(Led l){
    return l.c.r || l.c.g || l.c.b;
}
void setLeds(Ttime t,Led* l,Tcolor c){
    uint8_t i=0;
    for(;i<NBLEDS;i++){
 406:	e8 17       	cp	r30, r24
 408:	f9 07       	cpc	r31, r25
 40a:	c9 f7       	brne	.-14     	; 0x3fe <setLeds+0x2c>
    l->c.g=255;
    l->c.b=255;
}

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 40c:	f6 01       	movw	r30, r12
 40e:	e6 5a       	subi	r30, 0xA6	; 166
 410:	ff 4f       	sbci	r31, 0xFF	; 255
 412:	62 82       	std	Z+2, r6	; 0x02
 414:	73 82       	std	Z+3, r7	; 0x03
 416:	84 82       	std	Z+4, r8	; 0x04
    for(;i<NBLEDS;i++){
        ledOff(&l[i]);
    }
    ledOnC(&l[ILEST],c);
    
    switch(currentTime.hour){
 418:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <currentTime>
 41c:	88 23       	and	r24, r24
 41e:	31 f0       	breq	.+12     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 420:	8c 30       	cpi	r24, 0x0C	; 12
 422:	49 f4       	brne	.+18     	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
    l->c.g=255;
    l->c.b=255;
}

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 424:	f6 01       	movw	r30, r12
 426:	ef 5b       	subi	r30, 0xBF	; 191
 428:	ff 4f       	sbci	r31, 0xFF	; 255
 42a:	23 c0       	rjmp	.+70     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 42c:	f6 01       	movw	r30, r12
 42e:	61 8a       	std	Z+17, r6	; 0x11
 430:	72 8a       	std	Z+18, r7	; 0x12
 432:	83 8a       	std	Z+19, r8	; 0x13
 434:	21 c0       	rjmp	.+66     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
            break;
        case 12 :
            ledOnC(&l[MIDI],c);
            break;
        default :
            if(currentTime.min>35){
 436:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <currentTime+0x1>
                ledOnC(&l[ledMap[(currentTime.hour%12)]],c);
 43a:	6c e0       	ldi	r22, 0x0C	; 12
            break;
        case 12 :
            ledOnC(&l[MIDI],c);
            break;
        default :
            if(currentTime.min>35){
 43c:	94 32       	cpi	r25, 0x24	; 36
 43e:	30 f0       	brcs	.+12     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
                ledOnC(&l[ledMap[(currentTime.hour%12)]],c);
 440:	66 d2       	rcall	.+1228   	; 0x90e <__udivmodqi4>
 442:	e9 2f       	mov	r30, r25
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	e0 5a       	subi	r30, 0xA0	; 160
 448:	ff 4f       	sbci	r31, 0xFF	; 255
 44a:	05 c0       	rjmp	.+10     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
            }else{
                ledOnC(&l[ledMap[(currentTime.hour%12)-1]],c);
 44c:	60 d2       	rcall	.+1216   	; 0x90e <__udivmodqi4>
 44e:	e9 2f       	mov	r30, r25
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	e1 5a       	subi	r30, 0xA1	; 161
 454:	ff 4f       	sbci	r31, 0xFF	; 255
 456:	80 81       	ld	r24, Z
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	65 e0       	ldi	r22, 0x05	; 5
 45c:	70 e0       	ldi	r23, 0x00	; 0
 45e:	46 d2       	rcall	.+1164   	; 0x8ec <__mulhi3>
 460:	8c 0d       	add	r24, r12
 462:	9d 1d       	adc	r25, r13
    l->c.g=255;
    l->c.b=255;
}

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 464:	fc 01       	movw	r30, r24
 466:	62 82       	std	Z+2, r6	; 0x02
 468:	73 82       	std	Z+3, r7	; 0x03
 46a:	84 82       	std	Z+4, r8	; 0x04
 46c:	f6 01       	movw	r30, r12
 46e:	e5 5b       	subi	r30, 0xB5	; 181
 470:	ff 4f       	sbci	r31, 0xFF	; 255
 472:	62 82       	std	Z+2, r6	; 0x02
 474:	73 82       	std	Z+3, r7	; 0x03
 476:	84 82       	std	Z+4, r8	; 0x04
                ledOnC(&l[ledMap[(currentTime.hour%12)-1]],c);
            }
            ledOnC(&l[HEURE],c);
            break;
    }
    uint8_t mins = minquad(currentTime.min); 
 478:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <currentTime+0x1>
 47c:	7c d0       	rcall	.+248    	; 0x576 <minquad>
    if(mins > 30){
 47e:	8f 31       	cpi	r24, 0x1F	; 31
 480:	38 f0       	brcs	.+14     	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
    l->c.g=255;
    l->c.b=255;
}

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 482:	f6 01       	movw	r30, r12
 484:	67 a6       	std	Z+47, r6	; 0x2f
 486:	70 aa       	std	Z+48, r7	; 0x30
 488:	81 aa       	std	Z+49, r8	; 0x31
            break;
    }
    uint8_t mins = minquad(currentTime.min); 
    if(mins > 30){
        ledOnC(&l[MOINS],c);
        mins=60-mins;
 48a:	9c e3       	ldi	r25, 0x3C	; 60
 48c:	98 1b       	sub	r25, r24
 48e:	89 2f       	mov	r24, r25
    }
    switch(mins){
 490:	84 31       	cpi	r24, 0x14	; 20
 492:	49 f0       	breq	.+18     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 494:	8e 31       	cpi	r24, 0x1E	; 30
 496:	61 f0       	breq	.+24     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 498:	8a 30       	cpi	r24, 0x0A	; 10
 49a:	71 f4       	brne	.+28     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
    l->c.g=255;
    l->c.b=255;
}

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 49c:	f6 01       	movw	r30, r12
 49e:	63 8e       	std	Z+27, r6	; 0x1b
 4a0:	74 8e       	std	Z+28, r7	; 0x1c
 4a2:	85 8e       	std	Z+29, r8	; 0x1d
 4a4:	09 c0       	rjmp	.+18     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4a6:	f6 01       	movw	r30, r12
 4a8:	61 ae       	std	Z+57, r6	; 0x39
 4aa:	72 ae       	std	Z+58, r7	; 0x3a
 4ac:	83 ae       	std	Z+59, r8	; 0x3b
 4ae:	04 c0       	rjmp	.+8      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 4b0:	f6 01       	movw	r30, r12
 4b2:	67 82       	std	Z+7, r6	; 0x07
 4b4:	70 86       	std	Z+8, r7	; 0x08
 4b6:	81 86       	std	Z+9, r8	; 0x09
            break;
        case 30 :
            ledOnC(&l[ETDEMIE],c);
            break;
    }
}
 4b8:	0f 90       	pop	r0
 4ba:	0f 90       	pop	r0
 4bc:	0f 90       	pop	r0
 4be:	0f 90       	pop	r0
 4c0:	0f 90       	pop	r0
 4c2:	df 91       	pop	r29
 4c4:	cf 91       	pop	r28
 4c6:	0f 91       	pop	r16
 4c8:	ff 90       	pop	r15
 4ca:	ef 90       	pop	r14
 4cc:	df 90       	pop	r13
 4ce:	cf 90       	pop	r12
 4d0:	8f 90       	pop	r8
 4d2:	7f 90       	pop	r7
 4d4:	6f 90       	pop	r6
 4d6:	08 95       	ret

000004d8 <setLedsNb>:

void setLedsNb(int8_t nb, Led* l, Tcolor c){
 4d8:	cf 93       	push	r28
 4da:	df 93       	push	r29
 4dc:	e8 2f       	mov	r30, r24
 4de:	db 01       	movw	r26, r22
 4e0:	eb 01       	movw	r28, r22
 4e2:	cb 01       	movw	r24, r22
 4e4:	81 5a       	subi	r24, 0xA1	; 161
 4e6:	9f 4f       	sbci	r25, 0xFF	; 255
    }
    return data;
}

void ledOff(Led* l){
    l->c.r=0;
 4e8:	1a 82       	std	Y+2, r1	; 0x02
    l->c.g=0;
 4ea:	1b 82       	std	Y+3, r1	; 0x03
    l->c.b=0;
 4ec:	1c 82       	std	Y+4, r1	; 0x04
 4ee:	25 96       	adiw	r28, 0x05	; 5
    }
}

void setLedsNb(int8_t nb, Led* l, Tcolor c){
    uint8_t i=0;
    for(;i<NBLEDS;i++){
 4f0:	8c 17       	cp	r24, r28
 4f2:	9d 07       	cpc	r25, r29
 4f4:	c9 f7       	brne	.-14     	; 0x4e8 <setLedsNb+0x10>
        ledOff(&l[i]);
    }
    if(nb < 0){
 4f6:	e7 ff       	sbrs	r30, 7
 4f8:	06 c0       	rjmp	.+12     	; 0x506 <setLedsNb+0x2e>
    l->c.g=255;
    l->c.b=255;
}

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 4fa:	9f 96       	adiw	r26, 0x2f	; 47
 4fc:	2d 93       	st	X+, r18
 4fe:	3d 93       	st	X+, r19
 500:	4c 93       	st	X, r20
 502:	d1 97       	sbiw	r26, 0x31	; 49
    for(;i<NBLEDS;i++){
        ledOff(&l[i]);
    }
    if(nb < 0){
        ledOnC(&l[MOINS],c);
        nb=-nb;
 504:	e1 95       	neg	r30
    }
    if(nb>30){
 506:	ef 31       	cpi	r30, 0x1F	; 31
 508:	64 f0       	brlt	.+24     	; 0x522 <setLedsNb+0x4a>
    l->c.g=255;
    l->c.b=255;
}

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 50a:	d9 96       	adiw	r26, 0x39	; 57
 50c:	2d 93       	st	X+, r18
 50e:	3d 93       	st	X+, r19
 510:	4c 93       	st	X, r20
 512:	db 97       	sbiw	r26, 0x3b	; 59
 514:	5b 96       	adiw	r26, 0x1b	; 27
 516:	2d 93       	st	X+, r18
 518:	3d 93       	st	X+, r19
 51a:	4c 93       	st	X, r20
 51c:	5d 97       	sbiw	r26, 0x1d	; 29
        nb=-nb;
    }
    if(nb>30){
        ledOnC(&l[VINGT],c);
        ledOnC(&l[DIX],c);
        nb=nb-30;
 51e:	ee 51       	subi	r30, 0x1E	; 30
 520:	10 c0       	rjmp	.+32     	; 0x542 <setLedsNb+0x6a>
    }else if(nb>20){
 522:	e5 31       	cpi	r30, 0x15	; 21
 524:	34 f0       	brlt	.+12     	; 0x532 <setLedsNb+0x5a>
    l->c.g=255;
    l->c.b=255;
}

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 526:	d9 96       	adiw	r26, 0x39	; 57
 528:	2d 93       	st	X+, r18
 52a:	3d 93       	st	X+, r19
 52c:	4c 93       	st	X, r20
 52e:	db 97       	sbiw	r26, 0x3b	; 59
 530:	07 c0       	rjmp	.+14     	; 0x540 <setLedsNb+0x68>
        ledOnC(&l[DIX],c);
        nb=nb-30;
    }else if(nb>20){
        ledOnC(&l[VINGT],c);
        nb=nb-10;
    }else if(nb>11){
 532:	ec 30       	cpi	r30, 0x0C	; 12
 534:	34 f0       	brlt	.+12     	; 0x542 <setLedsNb+0x6a>
    l->c.g=255;
    l->c.b=255;
}

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 536:	5b 96       	adiw	r26, 0x1b	; 27
 538:	2d 93       	st	X+, r18
 53a:	3d 93       	st	X+, r19
 53c:	4c 93       	st	X, r20
 53e:	5d 97       	sbiw	r26, 0x1d	; 29
    }else if(nb>20){
        ledOnC(&l[VINGT],c);
        nb=nb-10;
    }else if(nb>11){
        ledOnC(&l[DIX],c);
        nb=nb-10;
 540:	ea 50       	subi	r30, 0x0A	; 10
    }
    ledOnC(&l[ledMap[nb-1]],c);
 542:	0e 2e       	mov	r0, r30
 544:	00 0c       	add	r0, r0
 546:	ff 0b       	sbc	r31, r31
 548:	e1 5a       	subi	r30, 0xA1	; 161
 54a:	ff 4f       	sbci	r31, 0xFF	; 255
 54c:	80 81       	ld	r24, Z
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	65 e0       	ldi	r22, 0x05	; 5
 552:	70 e0       	ldi	r23, 0x00	; 0
 554:	cb d1       	rcall	.+918    	; 0x8ec <__mulhi3>
 556:	a8 0f       	add	r26, r24
 558:	b9 1f       	adc	r27, r25
    l->c.g=255;
    l->c.b=255;
}

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 55a:	12 96       	adiw	r26, 0x02	; 2
 55c:	2d 93       	st	X+, r18
 55e:	3d 93       	st	X+, r19
 560:	4c 93       	st	X, r20
    }else if(nb>11){
        ledOnC(&l[DIX],c);
        nb=nb-10;
    }
    ledOnC(&l[ledMap[nb-1]],c);
}
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	08 95       	ret

00000568 <setCurrentTime>:
#include "RTC.h" 

void setCurrentTime(uint8_t hour,uint8_t min,uint8_t monthDay,uint8_t month){
	currentTime.hour=hour;
 568:	ed ec       	ldi	r30, 0xCD	; 205
 56a:	f0 e0       	ldi	r31, 0x00	; 0
 56c:	80 83       	st	Z, r24
	currentTime.min=min;
 56e:	61 83       	std	Z+1, r22	; 0x01
	currentTime.monthDay=monthDay;
 570:	42 83       	std	Z+2, r20	; 0x02
	currentTime.month=month;
 572:	23 83       	std	Z+3, r18	; 0x03
 574:	08 95       	ret

00000576 <minquad>:
}

uint8_t minquad(uint8_t min){
	if(min > 5){
 576:	86 30       	cpi	r24, 0x06	; 6
 578:	a0 f0       	brcs	.+40     	; 0x5a2 <minquad+0x2c>
		if(min > 15){
 57a:	80 31       	cpi	r24, 0x10	; 16
 57c:	50 f0       	brcs	.+20     	; 0x592 <minquad+0x1c>
			if(min > 25){
 57e:	8a 31       	cpi	r24, 0x1A	; 26
 580:	50 f0       	brcs	.+20     	; 0x596 <minquad+0x20>
				if(min > 35){
 582:	84 32       	cpi	r24, 0x24	; 36
 584:	50 f0       	brcs	.+20     	; 0x59a <minquad+0x24>
					if(min > 45){
 586:	8e 32       	cpi	r24, 0x2E	; 46
 588:	50 f0       	brcs	.+20     	; 0x59e <minquad+0x28>
						if(min > 55){
 58a:	88 33       	cpi	r24, 0x38	; 56
 58c:	50 f4       	brcc	.+20     	; 0x5a2 <minquad+0x2c>
							return 0;
						}else{return 50;}
 58e:	82 e3       	ldi	r24, 0x32	; 50
 590:	08 95       	ret
					}else{return 40;}
				}else{return 30;}
			}else{return 20;}
		}else{return 10;}
 592:	8a e0       	ldi	r24, 0x0A	; 10
 594:	08 95       	ret
						if(min > 55){
							return 0;
						}else{return 50;}
					}else{return 40;}
				}else{return 30;}
			}else{return 20;}
 596:	84 e1       	ldi	r24, 0x14	; 20
 598:	08 95       	ret
					if(min > 45){
						if(min > 55){
							return 0;
						}else{return 50;}
					}else{return 40;}
				}else{return 30;}
 59a:	8e e1       	ldi	r24, 0x1E	; 30
 59c:	08 95       	ret
				if(min > 35){
					if(min > 45){
						if(min > 55){
							return 0;
						}else{return 50;}
					}else{return 40;}
 59e:	88 e2       	ldi	r24, 0x28	; 40
 5a0:	08 95       	ret
				}else{return 30;}
			}else{return 20;}
		}else{return 10;}
	}else{return 0;}
 5a2:	80 e0       	ldi	r24, 0x00	; 0
}
 5a4:	08 95       	ret

000005a6 <bcdToDec>:

uint8_t bcdToDec(uint8_t val){
 5a6:	98 2f       	mov	r25, r24
  return ((val/16*10) + (val%16));
 5a8:	82 95       	swap	r24
 5aa:	8f 70       	andi	r24, 0x0F	; 15
 5ac:	6a e0       	ldi	r22, 0x0A	; 10
 5ae:	95 d1       	rcall	.+810    	; 0x8da <__mulqi3>
 5b0:	9f 70       	andi	r25, 0x0F	; 15
}
 5b2:	89 0f       	add	r24, r25
 5b4:	08 95       	ret

000005b6 <i2c_in_transfer>:
		return 0;
	}
}

uint8_t i2c_in_transfer(uint8_t USISR_temp){
	USISR = USISR_temp;								//Set USISR as requested by calling function
 5b6:	8e b9       	out	0x0e, r24	; 14
	do{
		_delay_us(I2C_TLOW);
		USICR = 0b00101011;								//SCL Positive Edge
 5b8:	8b e2       	ldi	r24, 0x2B	; 43
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5ba:	95 e0       	ldi	r25, 0x05	; 5
 5bc:	9a 95       	dec	r25
 5be:	f1 f7       	brne	.-4      	; 0x5bc <i2c_in_transfer+0x6>
 5c0:	00 00       	nop
 5c2:	8d b9       	out	0x0d, r24	; 13
		while (!(PIN_USI&(1<<PIN_USI_SCL)));		//Wait for SCL to go high
 5c4:	cc 9b       	sbis	0x19, 4	; 25
 5c6:	fe cf       	rjmp	.-4      	; 0x5c4 <i2c_in_transfer+0xe>
 5c8:	94 e0       	ldi	r25, 0x04	; 4
 5ca:	9a 95       	dec	r25
 5cc:	f1 f7       	brne	.-4      	; 0x5ca <i2c_in_transfer+0x14>
		_delay_us(I2C_THIGH);
		USICR = 0b00101011;								//SCL Negative Edge
 5ce:	8d b9       	out	0x0d, r24	; 13
	}while (!(USISR&(1<<USIOIF)));					//Do until transfer is complete
 5d0:	76 9b       	sbis	0x0e, 6	; 14
 5d2:	f3 cf       	rjmp	.-26     	; 0x5ba <i2c_in_transfer+0x4>
 5d4:	85 e0       	ldi	r24, 0x05	; 5
 5d6:	8a 95       	dec	r24
 5d8:	f1 f7       	brne	.-4      	; 0x5d6 <i2c_in_transfer+0x20>
 5da:	00 00       	nop
	_delay_us(I2C_TLOW);
	return USIDR;
 5dc:	8f b1       	in	r24, 0x0f	; 15
}
 5de:	08 95       	ret

000005e0 <i2c_in_transmit>:
uint8_t i2c_in_transmit(uint8_t *msg, uint8_t msg_size){
 5e0:	ef 92       	push	r14
 5e2:	ff 92       	push	r15
 5e4:	0f 93       	push	r16
 5e6:	1f 93       	push	r17
 5e8:	cf 93       	push	r28
 5ea:	df 93       	push	r29
 5ec:	ec 01       	movw	r28, r24
 5ee:	16 2f       	mov	r17, r22
	USI_I2C_Master_State = USI_ADDRESS;
 5f0:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <USI_I2C_Master_State>

	//   Start Condition
	PORT_USI |=  (1 << PORT_USI_SCL); 						//Setting input makes line pull high
 5f4:	dc 9a       	sbi	0x1b, 4	; 27
	while (!(PIN_USI & (1<<PIN_USI_SCL)));		//Wait for SCL to go high
 5f6:	cc 9b       	sbis	0x19, 4	; 25
 5f8:	fe cf       	rjmp	.-4      	; 0x5f6 <i2c_in_transmit+0x16>
 5fa:	84 e0       	ldi	r24, 0x04	; 4
 5fc:	8a 95       	dec	r24
 5fe:	f1 f7       	brne	.-4      	; 0x5fc <i2c_in_transmit+0x1c>
	#ifdef I2C_FAST_MODE
		_delay_us(I2C_THIGH);
	#else
		_delay_us(I2C_TLOW);
	#endif
	DDR_USI |=  (1 << PORT_USI_SDA);
 600:	d6 9a       	sbi	0x1a, 6	; 26
	DDR_USI |=  (1 << PORT_USI_SCL);
 602:	d4 9a       	sbi	0x1a, 4	; 26
	PORT_USI &= ~(1 << PORT_USI_SDA);
 604:	de 98       	cbi	0x1b, 6	; 27
 606:	84 e0       	ldi	r24, 0x04	; 4
 608:	8a 95       	dec	r24
 60a:	f1 f7       	brne	.-4      	; 0x608 <i2c_in_transmit+0x28>
	_delay_us(I2C_THIGH);;
	PORT_USI &= ~(1 << PORT_USI_SCL);
 60c:	dc 98       	cbi	0x1b, 4	; 27
 60e:	85 e0       	ldi	r24, 0x05	; 5
 610:	8a 95       	dec	r24
 612:	f1 f7       	brne	.-4      	; 0x610 <i2c_in_transmit+0x30>
 614:	00 00       	nop
	_delay_us(I2C_TLOW);
	PORT_USI |=  (1 << PORT_USI_SDA);
 616:	de 9a       	sbi	0x1b, 6	; 27
		switch(USI_I2C_Master_State){
			case USI_ADDRESS:
				if(!(*msg & 0x01)){
					USI_I2C_Master_State = USI_WRITE;
				}else{
					USI_I2C_Master_State = USI_READ;
 618:	02 e0       	ldi	r16, 0x02	; 2
	
	do{
		switch(USI_I2C_Master_State){
			case USI_ADDRESS:
				if(!(*msg & 0x01)){
					USI_I2C_Master_State = USI_WRITE;
 61a:	ff 24       	eor	r15, r15
 61c:	f3 94       	inc	r15
				DDR_USI &= ~(1 << PORT_USI_SDA);
				(*msg) = i2c_in_transfer(0b11110000 | (0x00<<USICNT0));			
				msg++;
				DDR_USI |=  (1 << PORT_USI_SDA);				
				if(msg_size == 1){
					USIDR = 0xFF;			//Load NACK to end transmission
 61e:	ee 24       	eor	r14, r14
 620:	ea 94       	dec	r14
	PORT_USI &= ~(1 << PORT_USI_SCL);
	_delay_us(I2C_TLOW);
	PORT_USI |=  (1 << PORT_USI_SDA);
	
	do{
		switch(USI_I2C_Master_State){
 622:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <USI_I2C_Master_State>
 626:	81 30       	cpi	r24, 0x01	; 1
 628:	61 f0       	breq	.+24     	; 0x642 <i2c_in_transmit+0x62>
 62a:	18 f0       	brcs	.+6      	; 0x632 <i2c_in_transmit+0x52>
 62c:	82 30       	cpi	r24, 0x02	; 2
 62e:	c9 f0       	breq	.+50     	; 0x662 <i2c_in_transmit+0x82>
 630:	24 c0       	rjmp	.+72     	; 0x67a <i2c_in_transmit+0x9a>
			case USI_ADDRESS:
				if(!(*msg & 0x01)){
 632:	88 81       	ld	r24, Y
 634:	80 fd       	sbrc	r24, 0
 636:	03 c0       	rjmp	.+6      	; 0x63e <i2c_in_transmit+0x5e>
					USI_I2C_Master_State = USI_WRITE;
 638:	f0 92 cc 00 	sts	0x00CC, r15	; 0x8000cc <USI_I2C_Master_State>
 63c:	02 c0       	rjmp	.+4      	; 0x642 <i2c_in_transmit+0x62>
				}else{
					USI_I2C_Master_State = USI_READ;
 63e:	00 93 cc 00 	sts	0x00CC, r16	; 0x8000cc <USI_I2C_Master_State>
				}//no break so goes to Write
				
			case USI_WRITE:
				PORT_USI &= ~(1 << PORT_USI_SCL);
 642:	dc 98       	cbi	0x1b, 4	; 27
				USIDR = *(msg);				//Load data			
 644:	89 91       	ld	r24, Y+
 646:	8f b9       	out	0x0f, r24	; 15
				msg++;						//Increment buffer pointer
				i2c_in_transfer(0b11110000 | (0x00<<USICNT0));
 648:	80 ef       	ldi	r24, 0xF0	; 240
 64a:	b5 df       	rcall	.-150    	; 0x5b6 <i2c_in_transfer>
				DDR_USI &= ~(1 << PORT_USI_SDA);
 64c:	d6 98       	cbi	0x1a, 6	; 26
				if(i2c_in_transfer(0b11110000 | (0x0E<<USICNT0)) & 0x01){
 64e:	8e ef       	ldi	r24, 0xFE	; 254
 650:	b2 df       	rcall	.-156    	; 0x5b6 <i2c_in_transfer>
 652:	80 ff       	sbrs	r24, 0
 654:	04 c0       	rjmp	.+8      	; 0x65e <i2c_in_transmit+0x7e>
					PORT_USI |=  (1 << PORT_USI_SCL);
 656:	dc 9a       	sbi	0x1b, 4	; 27
					PORT_USI |=  (1 << PORT_USI_SDA);
 658:	de 9a       	sbi	0x1b, 6	; 27
					return 0;
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	1f c0       	rjmp	.+62     	; 0x69c <i2c_in_transmit+0xbc>
				}
				DDR_USI |=  (1 << PORT_USI_SDA);
 65e:	d6 9a       	sbi	0x1a, 6	; 26
				break;
 660:	0c c0       	rjmp	.+24     	; 0x67a <i2c_in_transmit+0x9a>

			case USI_READ:
				DDR_USI &= ~(1 << PORT_USI_SDA);
 662:	d6 98       	cbi	0x1a, 6	; 26
				(*msg) = i2c_in_transfer(0b11110000 | (0x00<<USICNT0));			
 664:	80 ef       	ldi	r24, 0xF0	; 240
 666:	a7 df       	rcall	.-178    	; 0x5b6 <i2c_in_transfer>
 668:	89 93       	st	Y+, r24
				msg++;
				DDR_USI |=  (1 << PORT_USI_SDA);				
 66a:	d6 9a       	sbi	0x1a, 6	; 26
				if(msg_size == 1){
 66c:	11 30       	cpi	r17, 0x01	; 1
 66e:	11 f4       	brne	.+4      	; 0x674 <i2c_in_transmit+0x94>
					USIDR = 0xFF;			//Load NACK to end transmission
 670:	ef b8       	out	0x0f, r14	; 15
 672:	01 c0       	rjmp	.+2      	; 0x676 <i2c_in_transmit+0x96>
				}else{
					USIDR = 0x00;			//Load ACK
 674:	1f b8       	out	0x0f, r1	; 15
				}
				i2c_in_transfer(0b11110000 | (0x0E<<USICNT0));
 676:	8e ef       	ldi	r24, 0xFE	; 254
 678:	9e df       	rcall	.-196    	; 0x5b6 <i2c_in_transfer>
				break;
		}
	}while(--msg_size);
 67a:	11 50       	subi	r17, 0x01	; 1
 67c:	91 f6       	brne	.-92     	; 0x622 <i2c_in_transmit+0x42>
	
	//Stop Condition
	PORT_USI &= ~(1 << PORT_USI_SDA);           				// Pull SDA low.
 67e:	de 98       	cbi	0x1b, 6	; 27
 680:	85 e0       	ldi	r24, 0x05	; 5
 682:	8a 95       	dec	r24
 684:	f1 f7       	brne	.-4      	; 0x682 <i2c_in_transmit+0xa2>
 686:	00 00       	nop
	_delay_us(I2C_TLOW);
	DDR_USI &= ~(1 << PORT_USI_SCL);            				// Release SCL.
 688:	d4 98       	cbi	0x1a, 4	; 26
	while( !(PIN_USI & (1<<PIN_USI_SCL)) );  	// Wait for SCL to go high.  
 68a:	cc 9b       	sbis	0x19, 4	; 25
 68c:	fe cf       	rjmp	.-4      	; 0x68a <i2c_in_transmit+0xaa>
 68e:	84 e0       	ldi	r24, 0x04	; 4
 690:	8a 95       	dec	r24
 692:	f1 f7       	brne	.-4      	; 0x690 <i2c_in_transmit+0xb0>
	_delay_us(I2C_THIGH);
	DDR_USI &= ~(1 << PORT_USI_SDA);            				// Release SDA.
 694:	d6 98       	cbi	0x1a, 6	; 26
	while( !(PIN_USI & (1<<PIN_USI_SDA)) );  	// Wait for SDA to go high. 
 696:	ce 9b       	sbis	0x19, 6	; 25
 698:	fe cf       	rjmp	.-4      	; 0x696 <i2c_in_transmit+0xb6>
	return 1;
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	df 91       	pop	r29
 69e:	cf 91       	pop	r28
 6a0:	1f 91       	pop	r17
 6a2:	0f 91       	pop	r16
 6a4:	ff 90       	pop	r15
 6a6:	ef 90       	pop	r14
 6a8:	08 95       	ret

000006aa <i2c_write>:
		return 1;
	}else{
		return 0;
	}
}
uint8_t i2c_write(uint8_t addr, uint8_t adrs, uint8_t val){ // only supports 1 byte write
 6aa:	cf 93       	push	r28
 6ac:	df 93       	push	r29
 6ae:	00 d0       	rcall	.+0      	; 0x6b0 <i2c_write+0x6>
 6b0:	1f 92       	push	r1
 6b2:	cd b7       	in	r28, 0x3d	; 61
 6b4:	de b7       	in	r29, 0x3e	; 62
	uint8_t i2c_buffer[3];
	uint8_t i2c_buffer_len = 3;
	i2c_buffer[0] = (addr << 1) | I2CWRITE ;
 6b6:	88 0f       	add	r24, r24
 6b8:	89 83       	std	Y+1, r24	; 0x01
	i2c_buffer[1] = adrs;
 6ba:	6a 83       	std	Y+2, r22	; 0x02
	i2c_buffer[2] = val;
 6bc:	4b 83       	std	Y+3, r20	; 0x03
	return i2c_in_transmit(i2c_buffer, i2c_buffer_len);
 6be:	63 e0       	ldi	r22, 0x03	; 3
 6c0:	ce 01       	movw	r24, r28
 6c2:	01 96       	adiw	r24, 0x01	; 1
 6c4:	8d df       	rcall	.-230    	; 0x5e0 <i2c_in_transmit>
}
 6c6:	0f 90       	pop	r0
 6c8:	0f 90       	pop	r0
 6ca:	0f 90       	pop	r0
 6cc:	df 91       	pop	r29
 6ce:	cf 91       	pop	r28
 6d0:	08 95       	ret

000006d2 <i2c_read>:
uint8_t i2c_read(uint8_t addr, uint8_t len, uint8_t adrs, uint8_t *buf){
 6d2:	8f 92       	push	r8
 6d4:	9f 92       	push	r9
 6d6:	af 92       	push	r10
 6d8:	bf 92       	push	r11
 6da:	cf 92       	push	r12
 6dc:	df 92       	push	r13
 6de:	ef 92       	push	r14
 6e0:	ff 92       	push	r15
 6e2:	0f 93       	push	r16
 6e4:	1f 93       	push	r17
 6e6:	cf 93       	push	r28
 6e8:	df 93       	push	r29
 6ea:	cd b7       	in	r28, 0x3d	; 61
 6ec:	de b7       	in	r29, 0x3e	; 62
 6ee:	18 2f       	mov	r17, r24
 6f0:	06 2f       	mov	r16, r22
 6f2:	49 01       	movw	r8, r18
		}
		return 1; // provide success check
	}else{
		return 0;
	}
}
 6f4:	ad b6       	in	r10, 0x3d	; 61
 6f6:	be b6       	in	r11, 0x3e	; 62
	i2c_buffer[2] = val;
	return i2c_in_transmit(i2c_buffer, i2c_buffer_len);
}
uint8_t i2c_read(uint8_t addr, uint8_t len, uint8_t adrs, uint8_t *buf){
	//set register pointer to adrs
	uint8_t i2c_buffer[len+1];
 6f8:	c6 2e       	mov	r12, r22
 6fa:	d1 2c       	mov	r13, r1
 6fc:	c6 01       	movw	r24, r12
 6fe:	01 96       	adiw	r24, 0x01	; 1
 700:	2d b7       	in	r18, 0x3d	; 61
 702:	3e b7       	in	r19, 0x3e	; 62
 704:	28 1b       	sub	r18, r24
 706:	39 0b       	sbc	r19, r25
 708:	0f b6       	in	r0, 0x3f	; 63
 70a:	f8 94       	cli
 70c:	3e bf       	out	0x3e, r19	; 62
 70e:	0f be       	out	0x3f, r0	; 63
 710:	2d bf       	out	0x3d, r18	; 61
 712:	8d b7       	in	r24, 0x3d	; 61
 714:	9e b7       	in	r25, 0x3e	; 62
 716:	01 96       	adiw	r24, 0x01	; 1
 718:	7c 01       	movw	r14, r24
	uint8_t i2c_buffer_len = 2;
	i2c_buffer[0] = (addr << 1) | I2CWRITE;
 71a:	81 2f       	mov	r24, r17
 71c:	88 0f       	add	r24, r24
 71e:	ed b7       	in	r30, 0x3d	; 61
 720:	fe b7       	in	r31, 0x3e	; 62
 722:	81 83       	std	Z+1, r24	; 0x01
	i2c_buffer[1] = adrs;
 724:	f7 01       	movw	r30, r14
 726:	41 83       	std	Z+1, r20	; 0x01
	i2c_in_transmit(i2c_buffer, i2c_buffer_len);
 728:	62 e0       	ldi	r22, 0x02	; 2
 72a:	c7 01       	movw	r24, r14
 72c:	59 df       	rcall	.-334    	; 0x5e0 <i2c_in_transmit>
	//read actual data
	i2c_buffer_len = len+1;
	i2c_buffer[0] = (addr << 1) | I2CREAD;
 72e:	11 0f       	add	r17, r17
 730:	11 60       	ori	r17, 0x01	; 1
 732:	f7 01       	movw	r30, r14
 734:	10 83       	st	Z, r17
	if(i2c_in_transmit(i2c_buffer, i2c_buffer_len)){
 736:	61 e0       	ldi	r22, 0x01	; 1
 738:	60 0f       	add	r22, r16
 73a:	c7 01       	movw	r24, r14
 73c:	51 df       	rcall	.-350    	; 0x5e0 <i2c_in_transmit>
 73e:	88 23       	and	r24, r24
 740:	91 f0       	breq	.+36     	; 0x766 <i2c_read+0x94>
 742:	21 e0       	ldi	r18, 0x01	; 1
		uint8_t i;
		for(i=1;i<len+1;i++){ // fetch in buffer
 744:	82 2f       	mov	r24, r18
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	c8 16       	cp	r12, r24
 74a:	d9 06       	cpc	r13, r25
 74c:	5c f0       	brlt	.+22     	; 0x764 <i2c_read+0x92>
			buf[i-1]=i2c_buffer[i];
 74e:	f4 01       	movw	r30, r8
 750:	e8 0f       	add	r30, r24
 752:	f9 1f       	adc	r31, r25
 754:	31 97       	sbiw	r30, 0x01	; 1
 756:	d7 01       	movw	r26, r14
 758:	a8 0f       	add	r26, r24
 75a:	b9 1f       	adc	r27, r25
 75c:	8c 91       	ld	r24, X
 75e:	80 83       	st	Z, r24
	//read actual data
	i2c_buffer_len = len+1;
	i2c_buffer[0] = (addr << 1) | I2CREAD;
	if(i2c_in_transmit(i2c_buffer, i2c_buffer_len)){
		uint8_t i;
		for(i=1;i<len+1;i++){ // fetch in buffer
 760:	2f 5f       	subi	r18, 0xFF	; 255
 762:	f0 cf       	rjmp	.-32     	; 0x744 <i2c_read+0x72>
			buf[i-1]=i2c_buffer[i];
		}
		return 1; // provide success check
 764:	81 e0       	ldi	r24, 0x01	; 1
	}else{
		return 0;
	}
}
 766:	0f b6       	in	r0, 0x3f	; 63
 768:	f8 94       	cli
 76a:	be be       	out	0x3e, r11	; 62
 76c:	0f be       	out	0x3f, r0	; 63
 76e:	ad be       	out	0x3d, r10	; 61
 770:	df 91       	pop	r29
 772:	cf 91       	pop	r28
 774:	1f 91       	pop	r17
 776:	0f 91       	pop	r16
 778:	ff 90       	pop	r15
 77a:	ef 90       	pop	r14
 77c:	df 90       	pop	r13
 77e:	cf 90       	pop	r12
 780:	bf 90       	pop	r11
 782:	af 90       	pop	r10
 784:	9f 90       	pop	r9
 786:	8f 90       	pop	r8
 788:	08 95       	ret

0000078a <RTC_readTime>:

uint8_t bcdToDec(uint8_t val){
  return ((val/16*10) + (val%16));
}

uint8_t RTC_readTime(struct Ttime *t){
 78a:	0f 93       	push	r16
 78c:	1f 93       	push	r17
 78e:	cf 93       	push	r28
 790:	df 93       	push	r29
 792:	cd b7       	in	r28, 0x3d	; 61
 794:	de b7       	in	r29, 0x3e	; 62
 796:	27 97       	sbiw	r28, 0x07	; 7
 798:	0f b6       	in	r0, 0x3f	; 63
 79a:	f8 94       	cli
 79c:	de bf       	out	0x3e, r29	; 62
 79e:	0f be       	out	0x3f, r0	; 63
 7a0:	cd bf       	out	0x3d, r28	; 61
 7a2:	8c 01       	movw	r16, r24
	uint8_t data[7] = {0};
 7a4:	9e 01       	movw	r18, r28
 7a6:	2f 5f       	subi	r18, 0xFF	; 255
 7a8:	3f 4f       	sbci	r19, 0xFF	; 255
 7aa:	87 e0       	ldi	r24, 0x07	; 7
 7ac:	f9 01       	movw	r30, r18
 7ae:	11 92       	st	Z+, r1
 7b0:	8a 95       	dec	r24
 7b2:	e9 f7       	brne	.-6      	; 0x7ae <RTC_readTime+0x24>
	if(i2c_read(RTC_addr,7,0x00,data)){
 7b4:	40 e0       	ldi	r20, 0x00	; 0
 7b6:	67 e0       	ldi	r22, 0x07	; 7
 7b8:	88 e6       	ldi	r24, 0x68	; 104
 7ba:	8b df       	rcall	.-234    	; 0x6d2 <i2c_read>
 7bc:	88 23       	and	r24, r24
 7be:	89 f0       	breq	.+34     	; 0x7e2 <RTC_readTime+0x58>
		t->hour = bcdToDec(data[2]);
 7c0:	8b 81       	ldd	r24, Y+3	; 0x03
 7c2:	f1 de       	rcall	.-542    	; 0x5a6 <bcdToDec>
 7c4:	f8 01       	movw	r30, r16
 7c6:	80 83       	st	Z, r24
		t->min = bcdToDec(data[1]);
 7c8:	8a 81       	ldd	r24, Y+2	; 0x02
 7ca:	ed de       	rcall	.-550    	; 0x5a6 <bcdToDec>
 7cc:	f8 01       	movw	r30, r16
 7ce:	81 83       	std	Z+1, r24	; 0x01
		t->monthDay = bcdToDec(data[4]);
 7d0:	8d 81       	ldd	r24, Y+5	; 0x05
 7d2:	e9 de       	rcall	.-558    	; 0x5a6 <bcdToDec>
 7d4:	f8 01       	movw	r30, r16
 7d6:	82 83       	std	Z+2, r24	; 0x02
		t->month = bcdToDec(data[5]);
 7d8:	8e 81       	ldd	r24, Y+6	; 0x06
 7da:	e5 de       	rcall	.-566    	; 0x5a6 <bcdToDec>
 7dc:	f8 01       	movw	r30, r16
 7de:	83 83       	std	Z+3, r24	; 0x03
		return 1;
 7e0:	81 e0       	ldi	r24, 0x01	; 1
	}else{
		return 0;
	}
}
 7e2:	27 96       	adiw	r28, 0x07	; 7
 7e4:	0f b6       	in	r0, 0x3f	; 63
 7e6:	f8 94       	cli
 7e8:	de bf       	out	0x3e, r29	; 62
 7ea:	0f be       	out	0x3f, r0	; 63
 7ec:	cd bf       	out	0x3d, r28	; 61
 7ee:	df 91       	pop	r29
 7f0:	cf 91       	pop	r28
 7f2:	1f 91       	pop	r17
 7f4:	0f 91       	pop	r16
 7f6:	08 95       	ret

000007f8 <main>:

volatile uint8_t state=0;
Led leds[NBLEDS];

int main(void){    
    DDRA |= CLK|DATA|STROBE|LED;
 7f8:	8a b3       	in	r24, 0x1a	; 26
 7fa:	8f 60       	ori	r24, 0x0F	; 15
 7fc:	8a bb       	out	0x1a, r24	; 26
    PORTA &= ~(CLK|DATA|STROBE|LED);
 7fe:	8b b3       	in	r24, 0x1b	; 27
 800:	80 7f       	andi	r24, 0xF0	; 240
 802:	8b bb       	out	0x1b, r24	; 27
    ledInit(leds);
 804:	8d e6       	ldi	r24, 0x6D	; 109
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	15 dd       	rcall	.-1494   	; 0x234 <ledInit>
    
    TIMSK1|=(1<<TOIE1);
 80a:	60 9a       	sbi	0x0c, 0	; 12
    TIMSK0|=(1<<TOIE0);
 80c:	89 b7       	in	r24, 0x39	; 57
 80e:	81 60       	ori	r24, 0x01	; 1
 810:	89 bf       	out	0x39, r24	; 57
    sei();
 812:	78 94       	sei
    
    sendData(0b11111100001111111111);
 814:	6f ef       	ldi	r22, 0xFF	; 255
 816:	73 ec       	ldi	r23, 0xC3	; 195
 818:	8f e0       	ldi	r24, 0x0F	; 15
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	1e dc       	rcall	.-1988   	; 0x5a <sendData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 81e:	2f ef       	ldi	r18, 0xFF	; 255
 820:	84 e3       	ldi	r24, 0x34	; 52
 822:	9c e0       	ldi	r25, 0x0C	; 12
 824:	21 50       	subi	r18, 0x01	; 1
 826:	80 40       	sbci	r24, 0x00	; 0
 828:	90 40       	sbci	r25, 0x00	; 0
 82a:	e1 f7       	brne	.-8      	; 0x824 <main+0x2c>
 82c:	00 c0       	rjmp	.+0      	; 0x82e <main+0x36>
 82e:	00 00       	nop
    _delay_ms(250);
    sendData(0b11000000001111111111);
 830:	6f ef       	ldi	r22, 0xFF	; 255
 832:	73 e0       	ldi	r23, 0x03	; 3
 834:	8c e0       	ldi	r24, 0x0C	; 12
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	10 dc       	rcall	.-2016   	; 0x5a <sendData>
 83a:	2f ef       	ldi	r18, 0xFF	; 255
 83c:	84 e3       	ldi	r24, 0x34	; 52
 83e:	9c e0       	ldi	r25, 0x0C	; 12
 840:	21 50       	subi	r18, 0x01	; 1
 842:	80 40       	sbci	r24, 0x00	; 0
 844:	90 40       	sbci	r25, 0x00	; 0
 846:	e1 f7       	brne	.-8      	; 0x840 <main+0x48>
 848:	00 c0       	rjmp	.+0      	; 0x84a <main+0x52>
 84a:	00 00       	nop
    _delay_ms(250);
    sendData(0b00001100001111111111);
 84c:	6f ef       	ldi	r22, 0xFF	; 255
 84e:	73 ec       	ldi	r23, 0xC3	; 195
 850:	80 e0       	ldi	r24, 0x00	; 0
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	02 dc       	rcall	.-2044   	; 0x5a <sendData>
 856:	2f ef       	ldi	r18, 0xFF	; 255
 858:	84 e3       	ldi	r24, 0x34	; 52
 85a:	9c e0       	ldi	r25, 0x0C	; 12
 85c:	21 50       	subi	r18, 0x01	; 1
 85e:	80 40       	sbci	r24, 0x00	; 0
 860:	90 40       	sbci	r25, 0x00	; 0
 862:	e1 f7       	brne	.-8      	; 0x85c <main+0x64>
 864:	00 c0       	rjmp	.+0      	; 0x866 <main+0x6e>
 866:	00 00       	nop
    _delay_ms(250);
    sendData(0b00110000001111111111);
 868:	6f ef       	ldi	r22, 0xFF	; 255
 86a:	73 e0       	ldi	r23, 0x03	; 3
 86c:	83 e0       	ldi	r24, 0x03	; 3
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	f4 db       	rcall	.-2072   	; 0x5a <sendData>
 872:	2f ef       	ldi	r18, 0xFF	; 255
 874:	84 e3       	ldi	r24, 0x34	; 52
 876:	9c e0       	ldi	r25, 0x0C	; 12
 878:	21 50       	subi	r18, 0x01	; 1
 87a:	80 40       	sbci	r24, 0x00	; 0
 87c:	90 40       	sbci	r25, 0x00	; 0
 87e:	e1 f7       	brne	.-8      	; 0x878 <main+0x80>
 880:	00 c0       	rjmp	.+0      	; 0x882 <main+0x8a>
 882:	00 00       	nop
    _delay_ms(250);
	
    #ifdef DELLONG
		TCCR1B|=(1<<CS12)|(1<<CS10);
 884:	8e b5       	in	r24, 0x2e	; 46
 886:	85 60       	ori	r24, 0x05	; 5
 888:	8e bd       	out	0x2e, r24	; 46
	#else
		TCCR1B|=(1<<CS12);//|(1<<CS10);
	#endif
	
	TCCR0B|=(1<<CS01)|(1<<CS00);
 88a:	83 b7       	in	r24, 0x33	; 51
 88c:	83 60       	ori	r24, 0x03	; 3
 88e:	83 bf       	out	0x33, r24	; 51
    
    currentColor=tcolorV(RED);
 890:	60 e0       	ldi	r22, 0x00	; 0
 892:	70 e0       	ldi	r23, 0x00	; 0
 894:	8f ef       	ldi	r24, 0xFF	; 255
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	bd dc       	rcall	.-1670   	; 0x214 <tcolorV>
 89a:	60 93 d2 00 	sts	0x00D2, r22	; 0x8000d2 <currentColor>
 89e:	70 93 d3 00 	sts	0x00D3, r23	; 0x8000d3 <currentColor+0x1>
 8a2:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <currentColor+0x2>
    setCurrentTime(15,45,7,11);
 8a6:	2b e0       	ldi	r18, 0x0B	; 11
 8a8:	47 e0       	ldi	r20, 0x07	; 7
 8aa:	6d e2       	ldi	r22, 0x2D	; 45
 8ac:	8f e0       	ldi	r24, 0x0F	; 15
 8ae:	5c de       	rcall	.-840    	; 0x568 <setCurrentTime>
	//RTC_readTime(&currentTime);
    currentTime.temp=11;
 8b0:	8b e0       	ldi	r24, 0x0B	; 11
 8b2:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <currentTime+0x4>
    setLeds(currentTime,leds,currentColor);
 8b6:	e0 90 d2 00 	lds	r14, 0x00D2	; 0x8000d2 <currentColor>
 8ba:	f0 90 d3 00 	lds	r15, 0x00D3	; 0x8000d3 <currentColor+0x1>
 8be:	00 91 d4 00 	lds	r16, 0x00D4	; 0x8000d4 <currentColor+0x2>
 8c2:	2d e6       	ldi	r18, 0x6D	; 109
 8c4:	30 e0       	ldi	r19, 0x00	; 0
 8c6:	40 91 cd 00 	lds	r20, 0x00CD	; 0x8000cd <currentTime>
 8ca:	50 91 ce 00 	lds	r21, 0x00CE	; 0x8000ce <currentTime+0x1>
 8ce:	60 91 cf 00 	lds	r22, 0x00CF	; 0x8000cf <currentTime+0x2>
 8d2:	70 91 d0 00 	lds	r23, 0x00D0	; 0x8000d0 <currentTime+0x3>
 8d6:	7d dd       	rcall	.-1286   	; 0x3d2 <setLeds>
 8d8:	ff cf       	rjmp	.-2      	; 0x8d8 <main+0xe0>

000008da <__mulqi3>:
 8da:	00 24       	eor	r0, r0

000008dc <__mulqi3_loop>:
 8dc:	80 fd       	sbrc	r24, 0
 8de:	06 0e       	add	r0, r22
 8e0:	66 0f       	add	r22, r22
 8e2:	11 f0       	breq	.+4      	; 0x8e8 <__mulqi3_exit>
 8e4:	86 95       	lsr	r24
 8e6:	d1 f7       	brne	.-12     	; 0x8dc <__mulqi3_loop>

000008e8 <__mulqi3_exit>:
 8e8:	80 2d       	mov	r24, r0
 8ea:	08 95       	ret

000008ec <__mulhi3>:
 8ec:	00 24       	eor	r0, r0
 8ee:	55 27       	eor	r21, r21
 8f0:	04 c0       	rjmp	.+8      	; 0x8fa <__mulhi3+0xe>
 8f2:	08 0e       	add	r0, r24
 8f4:	59 1f       	adc	r21, r25
 8f6:	88 0f       	add	r24, r24
 8f8:	99 1f       	adc	r25, r25
 8fa:	00 97       	sbiw	r24, 0x00	; 0
 8fc:	29 f0       	breq	.+10     	; 0x908 <__mulhi3+0x1c>
 8fe:	76 95       	lsr	r23
 900:	67 95       	ror	r22
 902:	b8 f3       	brcs	.-18     	; 0x8f2 <__mulhi3+0x6>
 904:	71 05       	cpc	r23, r1
 906:	b9 f7       	brne	.-18     	; 0x8f6 <__mulhi3+0xa>
 908:	80 2d       	mov	r24, r0
 90a:	95 2f       	mov	r25, r21
 90c:	08 95       	ret

0000090e <__udivmodqi4>:
 90e:	99 1b       	sub	r25, r25
 910:	79 e0       	ldi	r23, 0x09	; 9
 912:	04 c0       	rjmp	.+8      	; 0x91c <__udivmodqi4_ep>

00000914 <__udivmodqi4_loop>:
 914:	99 1f       	adc	r25, r25
 916:	96 17       	cp	r25, r22
 918:	08 f0       	brcs	.+2      	; 0x91c <__udivmodqi4_ep>
 91a:	96 1b       	sub	r25, r22

0000091c <__udivmodqi4_ep>:
 91c:	88 1f       	adc	r24, r24
 91e:	7a 95       	dec	r23
 920:	c9 f7       	brne	.-14     	; 0x914 <__udivmodqi4_loop>
 922:	80 95       	com	r24
 924:	08 95       	ret

00000926 <_exit>:
 926:	f8 94       	cli

00000928 <__stop_program>:
 928:	ff cf       	rjmp	.-2      	; 0x928 <__stop_program>
