
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000016a  00800060  00000b7a  00000c0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000046  008001ca  008001ca  00000d78  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002713  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d55  00000000  00000000  00003563  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000be7  00000000  00000000  000042b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005bc  00000000  00000000  00004ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000648  00000000  00000000  0000545c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000167d  00000000  00000000  00005aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00007121  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	66 c0       	rjmp	.+204    	; 0xd2 <__vector_2>
   6:	32 c0       	rjmp	.+100    	; 0x6c <__vector_3>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	b8 c0       	rjmp	.+368    	; 0x182 <__vector_8>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	30 c1       	rjmp	.+608    	; 0x278 <__vector_11>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	11 e0       	ldi	r17, 0x01	; 1
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	ea e7       	ldi	r30, 0x7A	; 122
  36:	fb e0       	ldi	r31, 0x0B	; 11
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	aa 3c       	cpi	r26, 0xCA	; 202
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	22 e0       	ldi	r18, 0x02	; 2
  46:	aa ec       	ldi	r26, 0xCA	; 202
  48:	b1 e0       	ldi	r27, 0x01	; 1
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a0 31       	cpi	r26, 0x10	; 16
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	e4 d4       	rcall	.+2504   	; 0xa1e <main>
  56:	8f c5       	rjmp	.+2846   	; 0xb76 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <sendData>:

uint8_t ledr=0;
uint8_t ledb=0;

void sendData(uint32_t data){
    if(ledr)data|=LEDR;
  5a:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <ledr>
  5e:	21 11       	cpse	r18, r1
  60:	78 60       	ori	r23, 0x08	; 8
    if(ledb)data|=LEDB;
  62:	20 91 ce 01 	lds	r18, 0x01CE	; 0x8001ce <ledb>
  66:	21 11       	cpse	r18, r1
  68:	74 60       	ori	r23, 0x04	; 4
    sendRawData(data);
  6a:	59 c2       	rjmp	.+1202   	; 0x51e <sendRawData>

0000006c <__vector_3>:
    while(1){
    }
    return(0);
    
}
ISR( PCINT1_vect){
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	3f 93       	push	r19
  7a:	4f 93       	push	r20
  7c:	5f 93       	push	r21
  7e:	6f 93       	push	r22
  80:	7f 93       	push	r23
  82:	8f 93       	push	r24
  84:	9f 93       	push	r25
  86:	af 93       	push	r26
  88:	bf 93       	push	r27
  8a:	ef 93       	push	r30
  8c:	ff 93       	push	r31
    if(PINB&BTNSELECT && Mcurrent){
  8e:	b2 9b       	sbis	0x16, 2	; 22
  90:	0f c0       	rjmp	.+30     	; 0xb0 <__vector_3+0x44>
  92:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <Mcurrent>
  96:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <Mcurrent+0x1>
  9a:	00 97       	sbiw	r24, 0x00	; 0
  9c:	49 f0       	breq	.+18     	; 0xb0 <__vector_3+0x44>
        Mindex=findNextEntry(Mcurrent,Mindex);
  9e:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <__data_end>
  a2:	03 d4       	rcall	.+2054   	; 0x8aa <findNextEntry>
  a4:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <__data_end>
        TCNT1=65534;//get straight to led update
  a8:	8e ef       	ldi	r24, 0xFE	; 254
  aa:	9f ef       	ldi	r25, 0xFF	; 255
  ac:	9d bd       	out	0x2d, r25	; 45
  ae:	8c bd       	out	0x2c, r24	; 44
    }
}
  b0:	ff 91       	pop	r31
  b2:	ef 91       	pop	r30
  b4:	bf 91       	pop	r27
  b6:	af 91       	pop	r26
  b8:	9f 91       	pop	r25
  ba:	8f 91       	pop	r24
  bc:	7f 91       	pop	r23
  be:	6f 91       	pop	r22
  c0:	5f 91       	pop	r21
  c2:	4f 91       	pop	r20
  c4:	3f 91       	pop	r19
  c6:	2f 91       	pop	r18
  c8:	0f 90       	pop	r0
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	0f 90       	pop	r0
  ce:	1f 90       	pop	r1
  d0:	18 95       	reti

000000d2 <__vector_2>:
ISR( PCINT0_vect){
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	2f 93       	push	r18
  de:	3f 93       	push	r19
  e0:	4f 93       	push	r20
  e2:	5f 93       	push	r21
  e4:	6f 93       	push	r22
  e6:	7f 93       	push	r23
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
  ec:	af 93       	push	r26
  ee:	bf 93       	push	r27
  f0:	cf 93       	push	r28
  f2:	df 93       	push	r29
  f4:	ef 93       	push	r30
  f6:	ff 93       	push	r31
    if(PINA&BTNOK){
  f8:	cf 9b       	sbis	0x19, 7	; 25
  fa:	2f c0       	rjmp	.+94     	; 0x15a <__vector_2+0x88>
        if(!Mcurrent){
  fc:	e0 91 cb 01 	lds	r30, 0x01CB	; 0x8001cb <Mcurrent>
 100:	f0 91 cc 01 	lds	r31, 0x01CC	; 0x8001cc <Mcurrent+0x1>
 104:	30 97       	sbiw	r30, 0x00	; 0
 106:	39 f4       	brne	.+14     	; 0x116 <__vector_2+0x44>
            Mcurrent=&M0main;//if not in menu mode
 108:	88 ea       	ldi	r24, 0xA8	; 168
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	90 93 cc 01 	sts	0x01CC, r25	; 0x8001cc <Mcurrent+0x1>
 110:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <Mcurrent>
 114:	1e c0       	rjmp	.+60     	; 0x152 <__vector_2+0x80>
        }else{//enter menu and execute
            if(Mcurrent->fptr!=0)Mcurrent->fptr(Mindex);//check if function is associated and selected value is not a navigation move
 116:	01 80       	ldd	r0, Z+1	; 0x01
 118:	f2 81       	ldd	r31, Z+2	; 0x02
 11a:	e0 2d       	mov	r30, r0
 11c:	30 97       	sbiw	r30, 0x00	; 0
 11e:	19 f0       	breq	.+6      	; 0x126 <__vector_2+0x54>
 120:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__data_end>
 124:	09 95       	icall
            Mcurrent=getSubMenu(Mcurrent,Mindex);//get new menu
 126:	60 91 ca 01 	lds	r22, 0x01CA	; 0x8001ca <__data_end>
 12a:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <Mcurrent>
 12e:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <Mcurrent+0x1>
 132:	cb d3       	rcall	.+1942   	; 0x8ca <getSubMenu>
 134:	90 93 cc 01 	sts	0x01CC, r25	; 0x8001cc <Mcurrent+0x1>
 138:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <Mcurrent>
            Mindex=0;
 13c:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <__data_end>
 140:	c1 ed       	ldi	r28, 0xD1	; 209
 142:	d1 e0       	ldi	r29, 0x01	; 1
            for(uint8_t i=0;i<NBLEDS;i++){//clear display after changing settings
                ledOff(&leds[i]);
 144:	ce 01       	movw	r24, r28
 146:	44 d1       	rcall	.+648    	; 0x3d0 <ledOff>
 148:	23 96       	adiw	r28, 0x03	; 3
            Mcurrent=&M0main;//if not in menu mode
        }else{//enter menu and execute
            if(Mcurrent->fptr!=0)Mcurrent->fptr(Mindex);//check if function is associated and selected value is not a navigation move
            Mcurrent=getSubMenu(Mcurrent,Mindex);//get new menu
            Mindex=0;
            for(uint8_t i=0;i<NBLEDS;i++){//clear display after changing settings
 14a:	82 e0       	ldi	r24, 0x02	; 2
 14c:	ca 30       	cpi	r28, 0x0A	; 10
 14e:	d8 07       	cpc	r29, r24
 150:	c9 f7       	brne	.-14     	; 0x144 <__vector_2+0x72>
                ledOff(&leds[i]);
            }
        }
        TCNT1=65534;//get straight to led update
 152:	8e ef       	ldi	r24, 0xFE	; 254
 154:	9f ef       	ldi	r25, 0xFF	; 255
 156:	9d bd       	out	0x2d, r25	; 45
 158:	8c bd       	out	0x2c, r24	; 44
    }
    if(PINA&BTNINTERNAL){//unused secret button
 15a:	89 b3       	in	r24, 0x19	; 25
    }
}/*
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	bf 91       	pop	r27
 166:	af 91       	pop	r26
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	7f 91       	pop	r23
 16e:	6f 91       	pop	r22
 170:	5f 91       	pop	r21
 172:	4f 91       	pop	r20
 174:	3f 91       	pop	r19
 176:	2f 91       	pop	r18
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <__vector_8>:
ISR( TIM1_COMPB_vect){
}*/
ISR( TIM1_OVF_vect ){
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1
 18c:	0f 93       	push	r16
 18e:	1f 93       	push	r17
 190:	2f 93       	push	r18
 192:	3f 93       	push	r19
 194:	4f 93       	push	r20
 196:	5f 93       	push	r21
 198:	6f 93       	push	r22
 19a:	7f 93       	push	r23
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
 1a0:	af 93       	push	r26
 1a2:	bf 93       	push	r27
 1a4:	cf 93       	push	r28
 1a6:	ef 93       	push	r30
 1a8:	ff 93       	push	r31
    if(!Mcurrent){//if in normal display mode
 1aa:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <Mcurrent>
 1ae:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <Mcurrent+0x1>
 1b2:	89 2b       	or	r24, r25
 1b4:	41 f5       	brne	.+80     	; 0x206 <__vector_8+0x84>
        uint8_t m=getMode();
 1b6:	f7 d3       	rcall	.+2030   	; 0x9a6 <getMode>
 1b8:	c8 2f       	mov	r28, r24
        RTC_readTime(&currentTime);
 1ba:	8b e0       	ldi	r24, 0x0B	; 11
 1bc:	92 e0       	ldi	r25, 0x02	; 2
 1be:	38 d3       	rcall	.+1648   	; 0x830 <RTC_readTime>
        if(isInAllowedTime(currentTime.hour)){
 1c0:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <currentTime>
 1c4:	15 d4       	rcall	.+2090   	; 0x9f0 <isInAllowedTime>
 1c6:	88 23       	and	r24, r24
 1c8:	b1 f0       	breq	.+44     	; 0x1f6 <__vector_8+0x74>
            if(m<2){
 1ca:	c2 30       	cpi	r28, 0x02	; 2
 1cc:	70 f4       	brcc	.+28     	; 0x1ea <__vector_8+0x68>
                setLeds(currentTime,leds);
 1ce:	21 ed       	ldi	r18, 0xD1	; 209
 1d0:	31 e0       	ldi	r19, 0x01	; 1
 1d2:	40 91 0b 02 	lds	r20, 0x020B	; 0x80020b <currentTime>
 1d6:	50 91 0c 02 	lds	r21, 0x020C	; 0x80020c <currentTime+0x1>
 1da:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <currentTime+0x2>
 1de:	70 91 0e 02 	lds	r23, 0x020E	; 0x80020e <currentTime+0x3>
 1e2:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <currentTime+0x4>
 1e6:	f7 d0       	rcall	.+494    	; 0x3d6 <setLeds>
 1e8:	06 c0       	rjmp	.+12     	; 0x1f6 <__vector_8+0x74>
            }else if(m<4){
 1ea:	c4 30       	cpi	r28, 0x04	; 4
 1ec:	20 f4       	brcc	.+8      	; 0x1f6 <__vector_8+0x74>
                setLedsNb(RTC_readTemp(),leds);
 1ee:	0a d3       	rcall	.+1556   	; 0x804 <RTC_readTemp>
 1f0:	61 ed       	ldi	r22, 0xD1	; 209
 1f2:	71 e0       	ldi	r23, 0x01	; 1
 1f4:	56 d1       	rcall	.+684    	; 0x4a2 <setLedsNb>
            }
        }
        ledr=!ledr;
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <ledr>
 1fc:	91 11       	cpse	r25, r1
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <ledr>
 204:	25 c0       	rjmp	.+74     	; 0x250 <__vector_8+0xce>
 206:	01 ed       	ldi	r16, 0xD1	; 209
 208:	11 e0       	ldi	r17, 0x01	; 1
    }
}/*
ISR( TIM1_COMPB_vect){
}*/
ISR( TIM1_OVF_vect ){
    if(!Mcurrent){//if in normal display mode
 20a:	c0 e0       	ldi	r28, 0x00	; 0
            }
        }
        ledr=!ledr;
    }else{//menu settings mode
        for(uint8_t i=0;i<NBLEDS;i++){
            if(Mcurrent->sub[Mindex].led==i){
 20c:	e0 91 cb 01 	lds	r30, 0x01CB	; 0x8001cb <Mcurrent>
 210:	f0 91 cc 01 	lds	r31, 0x01CC	; 0x8001cc <Mcurrent+0x1>
 214:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <__data_end>
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	01 96       	adiw	r24, 0x01	; 1
 21c:	63 e0       	ldi	r22, 0x03	; 3
 21e:	70 e0       	ldi	r23, 0x00	; 0
 220:	8d d4       	rcall	.+2330   	; 0xb3c <__mulhi3>
 222:	8e 0f       	add	r24, r30
 224:	9f 1f       	adc	r25, r31
 226:	dc 01       	movw	r26, r24
 228:	8c 91       	ld	r24, X
 22a:	8c 13       	cpse	r24, r28
 22c:	0a c0       	rjmp	.+20     	; 0x242 <__vector_8+0xc0>
                ledOn(&leds[i],colorArray[Mcurrent->nb_optn>>4]);
 22e:	e0 81       	ld	r30, Z
 230:	e2 95       	swap	r30
 232:	ef 70       	andi	r30, 0x0F	; 15
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	ef 59       	subi	r30, 0x9F	; 159
 238:	ff 4f       	sbci	r31, 0xFF	; 255
 23a:	60 81       	ld	r22, Z
 23c:	c8 01       	movw	r24, r16
 23e:	c5 d0       	rcall	.+394    	; 0x3ca <ledOn>
 240:	02 c0       	rjmp	.+4      	; 0x246 <__vector_8+0xc4>
            }else{
                ledOff(&leds[i]);
 242:	c8 01       	movw	r24, r16
 244:	c5 d0       	rcall	.+394    	; 0x3d0 <ledOff>
                setLedsNb(RTC_readTemp(),leds);
            }
        }
        ledr=!ledr;
    }else{//menu settings mode
        for(uint8_t i=0;i<NBLEDS;i++){
 246:	cf 5f       	subi	r28, 0xFF	; 255
 248:	0d 5f       	subi	r16, 0xFD	; 253
 24a:	1f 4f       	sbci	r17, 0xFF	; 255
 24c:	c3 31       	cpi	r28, 0x13	; 19
 24e:	f1 f6       	brne	.-68     	; 0x20c <__vector_8+0x8a>
            }else{
                ledOff(&leds[i]);
            }
        }
    }
}
 250:	ff 91       	pop	r31
 252:	ef 91       	pop	r30
 254:	cf 91       	pop	r28
 256:	bf 91       	pop	r27
 258:	af 91       	pop	r26
 25a:	9f 91       	pop	r25
 25c:	8f 91       	pop	r24
 25e:	7f 91       	pop	r23
 260:	6f 91       	pop	r22
 262:	5f 91       	pop	r21
 264:	4f 91       	pop	r20
 266:	3f 91       	pop	r19
 268:	2f 91       	pop	r18
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	0f 90       	pop	r0
 270:	0f be       	out	0x3f, r0	; 63
 272:	0f 90       	pop	r0
 274:	1f 90       	pop	r1
 276:	18 95       	reti

00000278 <__vector_11>:
ISR( TIM0_OVF_vect ){//mux for each color, row 0 and 1
 278:	1f 92       	push	r1
 27a:	0f 92       	push	r0
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	0f 92       	push	r0
 280:	11 24       	eor	r1, r1
 282:	2f 93       	push	r18
 284:	3f 93       	push	r19
 286:	4f 93       	push	r20
 288:	5f 93       	push	r21
 28a:	6f 93       	push	r22
 28c:	7f 93       	push	r23
 28e:	8f 93       	push	r24
 290:	9f 93       	push	r25
 292:	af 93       	push	r26
 294:	bf 93       	push	r27
 296:	ef 93       	push	r30
 298:	ff 93       	push	r31
    switch(state){
 29a:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <state>
 29e:	82 30       	cpi	r24, 0x02	; 2
 2a0:	f9 f0       	breq	.+62     	; 0x2e0 <__vector_11+0x68>
 2a2:	58 f4       	brcc	.+22     	; 0x2ba <__vector_11+0x42>
 2a4:	88 23       	and	r24, r24
 2a6:	a9 f0       	breq	.+42     	; 0x2d2 <__vector_11+0x5a>
 2a8:	81 30       	cpi	r24, 0x01	; 1
 2aa:	79 f5       	brne	.+94     	; 0x30a <__vector_11+0x92>
        case 0:
            sendData(R2 | getDataByColor(RED,0,leds));
            break;
        case 1:
            sendData(R1 | getDataByColor(RED,1,leds));
 2ac:	41 ed       	ldi	r20, 0xD1	; 209
 2ae:	51 e0       	ldi	r21, 0x01	; 1
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	84 e0       	ldi	r24, 0x04	; 4
 2b4:	5e d0       	rcall	.+188    	; 0x372 <getDataByColor>
 2b6:	70 68       	ori	r23, 0x80	; 128
 2b8:	27 c0       	rjmp	.+78     	; 0x308 <__vector_11+0x90>
            }
        }
    }
}
ISR( TIM0_OVF_vect ){//mux for each color, row 0 and 1
    switch(state){
 2ba:	84 30       	cpi	r24, 0x04	; 4
 2bc:	f9 f0       	breq	.+62     	; 0x2fc <__vector_11+0x84>
 2be:	b8 f0       	brcs	.+46     	; 0x2ee <__vector_11+0x76>
 2c0:	85 30       	cpi	r24, 0x05	; 5
 2c2:	19 f5       	brne	.+70     	; 0x30a <__vector_11+0x92>
            break;
        case 4:
            sendData(B2 | getDataByColor(BLUE,0,leds));
            break;
        case 5:
            sendData(B1 | getDataByColor(BLUE,1,leds));
 2c4:	41 ed       	ldi	r20, 0xD1	; 209
 2c6:	51 e0       	ldi	r21, 0x01	; 1
 2c8:	61 e0       	ldi	r22, 0x01	; 1
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	52 d0       	rcall	.+164    	; 0x372 <getDataByColor>
 2ce:	82 60       	ori	r24, 0x02	; 2
 2d0:	1b c0       	rjmp	.+54     	; 0x308 <__vector_11+0x90>
    }
}
ISR( TIM0_OVF_vect ){//mux for each color, row 0 and 1
    switch(state){
        case 0:
            sendData(R2 | getDataByColor(RED,0,leds));
 2d2:	41 ed       	ldi	r20, 0xD1	; 209
 2d4:	51 e0       	ldi	r21, 0x01	; 1
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	84 e0       	ldi	r24, 0x04	; 4
 2da:	4b d0       	rcall	.+150    	; 0x372 <getDataByColor>
 2dc:	70 64       	ori	r23, 0x40	; 64
 2de:	14 c0       	rjmp	.+40     	; 0x308 <__vector_11+0x90>
            break;
        case 1:
            sendData(R1 | getDataByColor(RED,1,leds));
            break;
        case 2:
            sendData(G2 | getDataByColor(GREEN,0,leds));
 2e0:	41 ed       	ldi	r20, 0xD1	; 209
 2e2:	51 e0       	ldi	r21, 0x01	; 1
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	82 e0       	ldi	r24, 0x02	; 2
 2e8:	44 d0       	rcall	.+136    	; 0x372 <getDataByColor>
 2ea:	84 60       	ori	r24, 0x04	; 4
 2ec:	0d c0       	rjmp	.+26     	; 0x308 <__vector_11+0x90>
            break;
        case 3:
            sendData(G1 | getDataByColor(GREEN,1,leds));
 2ee:	41 ed       	ldi	r20, 0xD1	; 209
 2f0:	51 e0       	ldi	r21, 0x01	; 1
 2f2:	61 e0       	ldi	r22, 0x01	; 1
 2f4:	82 e0       	ldi	r24, 0x02	; 2
 2f6:	3d d0       	rcall	.+122    	; 0x372 <getDataByColor>
 2f8:	88 60       	ori	r24, 0x08	; 8
 2fa:	06 c0       	rjmp	.+12     	; 0x308 <__vector_11+0x90>
            break;
        case 4:
            sendData(B2 | getDataByColor(BLUE,0,leds));
 2fc:	41 ed       	ldi	r20, 0xD1	; 209
 2fe:	51 e0       	ldi	r21, 0x01	; 1
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	36 d0       	rcall	.+108    	; 0x372 <getDataByColor>
 306:	81 60       	ori	r24, 0x01	; 1
            break;
        case 5:
            sendData(B1 | getDataByColor(BLUE,1,leds));
 308:	a8 de       	rcall	.-688    	; 0x5a <sendData>
            break;
    }
    state++;
 30a:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <state>
 30e:	8f 5f       	subi	r24, 0xFF	; 255
 310:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <state>
    if(state>5)state=0;
 314:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <state>
 318:	86 30       	cpi	r24, 0x06	; 6
 31a:	10 f0       	brcs	.+4      	; 0x320 <__vector_11+0xa8>
 31c:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <state>
}
 320:	ff 91       	pop	r31
 322:	ef 91       	pop	r30
 324:	bf 91       	pop	r27
 326:	af 91       	pop	r26
 328:	9f 91       	pop	r25
 32a:	8f 91       	pop	r24
 32c:	7f 91       	pop	r23
 32e:	6f 91       	pop	r22
 330:	5f 91       	pop	r21
 332:	4f 91       	pop	r20
 334:	3f 91       	pop	r19
 336:	2f 91       	pop	r18
 338:	0f 90       	pop	r0
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	0f 90       	pop	r0
 33e:	1f 90       	pop	r1
 340:	18 95       	reti

00000342 <ledInit>:

static const uint8_t ledMap[11]={7,8,10,14,0,4,17,2,12,6,16};


void ledInit(Led* leds){
    DDRA |= CLK|DATA|STROBE|LED;
 342:	2a b3       	in	r18, 0x1a	; 26
 344:	2f 60       	ori	r18, 0x0F	; 15
 346:	2a bb       	out	0x1a, r18	; 26
    PORTA &= ~(CLK|DATA|STROBE|LED);
 348:	2b b3       	in	r18, 0x1b	; 27
 34a:	20 7f       	andi	r18, 0xF0	; 240
 34c:	2b bb       	out	0x1b, r18	; 27
 34e:	fc 01       	movw	r30, r24
    
    for(uint8_t i=0;i<NBLEDS;i++){
 350:	90 e0       	ldi	r25, 0x00	; 0
        leds[i].row=i%2;//leds[0]=0, leds[1]=1
 352:	89 2f       	mov	r24, r25
 354:	81 70       	andi	r24, 0x01	; 1
 356:	81 83       	std	Z+1, r24	; 0x01
        if(i<10){
 358:	9a 30       	cpi	r25, 0x0A	; 10
 35a:	10 f4       	brcc	.+4      	; 0x360 <ledInit+0x1e>
            leds[i].col=i;//0-9
 35c:	90 83       	st	Z, r25
 35e:	03 c0       	rjmp	.+6      	; 0x366 <ledInit+0x24>
        }else{
            leds[i].col=i-9;//1-9
 360:	87 ef       	ldi	r24, 0xF7	; 247
 362:	89 0f       	add	r24, r25
 364:	80 83       	st	Z, r24
        }
        leds[i].c=BLACK;
 366:	12 82       	std	Z+2, r1	; 0x02

void ledInit(Led* leds){
    DDRA |= CLK|DATA|STROBE|LED;
    PORTA &= ~(CLK|DATA|STROBE|LED);
    
    for(uint8_t i=0;i<NBLEDS;i++){
 368:	9f 5f       	subi	r25, 0xFF	; 255
 36a:	33 96       	adiw	r30, 0x03	; 3
 36c:	93 31       	cpi	r25, 0x13	; 19
 36e:	89 f7       	brne	.-30     	; 0x352 <ledInit+0x10>
        }else{
            leds[i].col=i-9;//1-9
        }
        leds[i].c=BLACK;
    }
}
 370:	08 95       	ret

00000372 <getDataByColor>:

uint32_t getDataByColor(uint8_t c, uint8_t mode, Led* leds){
 372:	0f 93       	push	r16
 374:	1f 93       	push	r17
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	c8 2f       	mov	r28, r24
 37c:	d6 2f       	mov	r29, r22
 37e:	fa 01       	movw	r30, r20
 380:	47 5c       	subi	r20, 0xC7	; 199
 382:	5f 4f       	sbci	r21, 0xFF	; 255
    uint32_t data=0x00000000;
 384:	60 e0       	ldi	r22, 0x00	; 0
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	cb 01       	movw	r24, r22
    for(uint8_t i=0;i<NBLEDS;i++){
        if(leds[i].row==mode){
            if((leds[i].c & c) ){
                data|=(1<<leds[i].col);
 38a:	a1 e0       	ldi	r26, 0x01	; 1
 38c:	b0 e0       	ldi	r27, 0x00	; 0
}

uint32_t getDataByColor(uint8_t c, uint8_t mode, Led* leds){
    uint32_t data=0x00000000;
    for(uint8_t i=0;i<NBLEDS;i++){
        if(leds[i].row==mode){
 38e:	21 81       	ldd	r18, Z+1	; 0x01
 390:	2d 13       	cpse	r18, r29
 392:	12 c0       	rjmp	.+36     	; 0x3b8 <getDataByColor+0x46>
            if((leds[i].c & c) ){
 394:	22 81       	ldd	r18, Z+2	; 0x02
 396:	2c 23       	and	r18, r28
 398:	79 f0       	breq	.+30     	; 0x3b8 <getDataByColor+0x46>
                data|=(1<<leds[i].col);
 39a:	8d 01       	movw	r16, r26
 39c:	00 80       	ld	r0, Z
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <getDataByColor+0x32>
 3a0:	00 0f       	add	r16, r16
 3a2:	11 1f       	adc	r17, r17
 3a4:	0a 94       	dec	r0
 3a6:	e2 f7       	brpl	.-8      	; 0x3a0 <getDataByColor+0x2e>
 3a8:	01 2e       	mov	r0, r17
 3aa:	00 0c       	add	r0, r0
 3ac:	22 0b       	sbc	r18, r18
 3ae:	33 0b       	sbc	r19, r19
 3b0:	60 2b       	or	r22, r16
 3b2:	71 2b       	or	r23, r17
 3b4:	82 2b       	or	r24, r18
 3b6:	93 2b       	or	r25, r19
 3b8:	33 96       	adiw	r30, 0x03	; 3
    }
}

uint32_t getDataByColor(uint8_t c, uint8_t mode, Led* leds){
    uint32_t data=0x00000000;
    for(uint8_t i=0;i<NBLEDS;i++){
 3ba:	e4 17       	cp	r30, r20
 3bc:	f5 07       	cpc	r31, r21
 3be:	39 f7       	brne	.-50     	; 0x38e <getDataByColor+0x1c>
                data|=(1<<leds[i].col);
            }
        }
    }
    return data;
}
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	1f 91       	pop	r17
 3c6:	0f 91       	pop	r16
 3c8:	08 95       	ret

000003ca <ledOn>:

void ledOn(Led* l,uint8_t c){
    l->c=c;
 3ca:	fc 01       	movw	r30, r24
 3cc:	62 83       	std	Z+2, r22	; 0x02
 3ce:	08 95       	ret

000003d0 <ledOff>:
}
void ledOff(Led* l){
    l->c=BLACK;
 3d0:	fc 01       	movw	r30, r24
 3d2:	12 82       	std	Z+2, r1	; 0x02
 3d4:	08 95       	ret

000003d6 <setLeds>:
}

void setLeds(Ttime t,Led* l){
 3d6:	ff 92       	push	r15
 3d8:	0f 93       	push	r16
 3da:	1f 93       	push	r17
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	00 d0       	rcall	.+0      	; 0x3e2 <setLeds+0xc>
 3e2:	00 d0       	rcall	.+0      	; 0x3e4 <setLeds+0xe>
 3e4:	1f 92       	push	r1
 3e6:	cd b7       	in	r28, 0x3d	; 61
 3e8:	de b7       	in	r29, 0x3e	; 62
 3ea:	89 01       	movw	r16, r18
 3ec:	f9 01       	movw	r30, r18
 3ee:	c9 01       	movw	r24, r18
 3f0:	c9 96       	adiw	r24, 0x39	; 57

void ledOn(Led* l,uint8_t c){
    l->c=c;
}
void ledOff(Led* l){
    l->c=BLACK;
 3f2:	12 82       	std	Z+2, r1	; 0x02
 3f4:	33 96       	adiw	r30, 0x03	; 3
}

void setLeds(Ttime t,Led* l){
    uint8_t temp=0;
    for(;temp<NBLEDS;temp++){
 3f6:	e8 17       	cp	r30, r24
 3f8:	f9 07       	cpc	r31, r25
 3fa:	d9 f7       	brne	.-10     	; 0x3f2 <setLeds+0x1c>
        ledOff(&l[temp]);
    }
    ledOn(&l[ILEST],getColor());
 3fc:	e2 d2       	rcall	.+1476   	; 0x9c2 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 3fe:	f8 01       	movw	r30, r16
 400:	80 af       	std	Z+56, r24	; 0x38
    for(;temp<NBLEDS;temp++){
        ledOff(&l[temp]);
    }
    ledOn(&l[ILEST],getColor());
    
    temp=currentTime.hour;
 402:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <currentTime>
    if(currentTime.min>35){
 406:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <currentTime+0x1>
 40a:	94 32       	cpi	r25, 0x24	; 36
 40c:	08 f0       	brcs	.+2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
        temp++;
 40e:	8f 5f       	subi	r24, 0xFF	; 255
    }
    if(temp)
 410:	88 23       	and	r24, r24
 412:	29 f0       	breq	.+10     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
    temp=temp%12;
 414:	6c e0       	ldi	r22, 0x0C	; 12
 416:	a3 d3       	rcall	.+1862   	; 0xb5e <__udivmodqi4>
 418:	f9 2e       	mov	r15, r25
    switch(temp){
 41a:	91 11       	cpse	r25, r1
 41c:	04 c0       	rjmp	.+8      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
        case 0 :
            ledOn(&l[MINUIT],getColor());
 41e:	d1 d2       	rcall	.+1442   	; 0x9c2 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 420:	f8 01       	movw	r30, r16
 422:	83 87       	std	Z+11, r24	; 0x0b
 424:	12 c0       	rjmp	.+36     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
            break;
        case 12 :
            ledOn(&l[MIDI],getColor());
            break;
        default :
            ledOn(&l[ledMap[(temp-1)]],getColor());
 426:	cd d2       	rcall	.+1434   	; 0x9c2 <getColor>
 428:	28 2f       	mov	r18, r24
 42a:	ef 2d       	mov	r30, r15
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	e9 59       	subi	r30, 0x99	; 153
 430:	ff 4f       	sbci	r31, 0xFF	; 255
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 432:	80 81       	ld	r24, Z
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	63 e0       	ldi	r22, 0x03	; 3
 438:	70 e0       	ldi	r23, 0x00	; 0
 43a:	80 d3       	rcall	.+1792   	; 0xb3c <__mulhi3>
 43c:	80 0f       	add	r24, r16
 43e:	91 1f       	adc	r25, r17
 440:	fc 01       	movw	r30, r24
 442:	22 83       	std	Z+2, r18	; 0x02
        case 12 :
            ledOn(&l[MIDI],getColor());
            break;
        default :
            ledOn(&l[ledMap[(temp-1)]],getColor());
            ledOn(&l[HEURE],getColor());
 444:	be d2       	rcall	.+1404   	; 0x9c2 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 446:	f8 01       	movw	r30, r16
 448:	87 a7       	std	Z+47, r24	; 0x2f
            ledOn(&l[ledMap[(temp-1)]],getColor());
            ledOn(&l[HEURE],getColor());
            break;
    }
    
    temp = minquad(currentTime.min); 
 44a:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <currentTime+0x1>
 44e:	90 d0       	rcall	.+288    	; 0x570 <minquad>
 450:	f8 2e       	mov	r15, r24
    if(temp > 30){
 452:	fe e1       	ldi	r31, 0x1E	; 30
 454:	f8 17       	cp	r31, r24
 456:	30 f4       	brcc	.+12     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
        ledOn(&l[MOINS],getColor());
 458:	b4 d2       	rcall	.+1384   	; 0x9c2 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 45a:	f8 01       	movw	r30, r16
 45c:	85 8f       	std	Z+29, r24	; 0x1d
    }
    
    temp = minquad(currentTime.min); 
    if(temp > 30){
        ledOn(&l[MOINS],getColor());
        temp=60-temp;
 45e:	8c e3       	ldi	r24, 0x3C	; 60
 460:	8f 19       	sub	r24, r15
 462:	f8 2e       	mov	r15, r24
    }
    switch(temp){
 464:	f4 e1       	ldi	r31, 0x14	; 20
 466:	ff 16       	cp	r15, r31
 468:	51 f0       	breq	.+20     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 46a:	8e e1       	ldi	r24, 0x1E	; 30
 46c:	f8 16       	cp	r15, r24
 46e:	59 f0       	breq	.+22     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 470:	ea e0       	ldi	r30, 0x0A	; 10
 472:	fe 12       	cpse	r15, r30
 474:	0b c0       	rjmp	.+22     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
        case 10 :
            ledOn(&l[DIX],getColor());
 476:	a5 d2       	rcall	.+1354   	; 0x9c2 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 478:	f8 01       	movw	r30, r16
 47a:	81 8b       	std	Z+17, r24	; 0x11
 47c:	07 c0       	rjmp	.+14     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
    switch(temp){
        case 10 :
            ledOn(&l[DIX],getColor());
            break;
        case 20 :
            ledOn(&l[VINGT],getColor());
 47e:	a1 d2       	rcall	.+1346   	; 0x9c2 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 480:	f8 01       	movw	r30, r16
 482:	83 a3       	std	Z+35, r24	; 0x23
 484:	03 c0       	rjmp	.+6      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
            break;
        case 20 :
            ledOn(&l[VINGT],getColor());
            break;
        case 30 :
            ledOn(&l[ETDEMIE],getColor());
 486:	9d d2       	rcall	.+1338   	; 0x9c2 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 488:	f8 01       	movw	r30, r16
 48a:	85 83       	std	Z+5, r24	; 0x05
            break;
        case 30 :
            ledOn(&l[ETDEMIE],getColor());
            break;
    }
}
 48c:	0f 90       	pop	r0
 48e:	0f 90       	pop	r0
 490:	0f 90       	pop	r0
 492:	0f 90       	pop	r0
 494:	0f 90       	pop	r0
 496:	df 91       	pop	r29
 498:	cf 91       	pop	r28
 49a:	1f 91       	pop	r17
 49c:	0f 91       	pop	r16
 49e:	ff 90       	pop	r15
 4a0:	08 95       	ret

000004a2 <setLedsNb>:

void setLedsNb(int8_t nb, Led* l){
 4a2:	0f 93       	push	r16
 4a4:	1f 93       	push	r17
 4a6:	cf 93       	push	r28
 4a8:	c8 2f       	mov	r28, r24
 4aa:	8b 01       	movw	r16, r22
 4ac:	fb 01       	movw	r30, r22
 4ae:	cb 01       	movw	r24, r22
 4b0:	c9 96       	adiw	r24, 0x39	; 57

void ledOn(Led* l,uint8_t c){
    l->c=c;
}
void ledOff(Led* l){
    l->c=BLACK;
 4b2:	12 82       	std	Z+2, r1	; 0x02
 4b4:	33 96       	adiw	r30, 0x03	; 3
    }
}

void setLedsNb(int8_t nb, Led* l){
    uint8_t i=0;
    for(;i<NBLEDS;i++){
 4b6:	8e 17       	cp	r24, r30
 4b8:	9f 07       	cpc	r25, r31
 4ba:	d9 f7       	brne	.-10     	; 0x4b2 <setLedsNb+0x10>
        ledOff(&l[i]);
    }
    if(nb < 0){
 4bc:	c7 ff       	sbrs	r28, 7
 4be:	04 c0       	rjmp	.+8      	; 0x4c8 <setLedsNb+0x26>
        ledOn(&l[MOINS],getColor());
 4c0:	80 d2       	rcall	.+1280   	; 0x9c2 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 4c2:	f8 01       	movw	r30, r16
 4c4:	85 8f       	std	Z+29, r24	; 0x1d
    for(;i<NBLEDS;i++){
        ledOff(&l[i]);
    }
    if(nb < 0){
        ledOn(&l[MOINS],getColor());
        nb=-nb;
 4c6:	c1 95       	neg	r28
    }
    if(nb>29){
 4c8:	ce 31       	cpi	r28, 0x1E	; 30
 4ca:	44 f0       	brlt	.+16     	; 0x4dc <setLedsNb+0x3a>
        ledOn(&l[VINGT],getColor());
 4cc:	7a d2       	rcall	.+1268   	; 0x9c2 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 4ce:	f8 01       	movw	r30, r16
 4d0:	83 a3       	std	Z+35, r24	; 0x23
        ledOn(&l[MOINS],getColor());
        nb=-nb;
    }
    if(nb>29){
        ledOn(&l[VINGT],getColor());
        ledOn(&l[DIX],getColor());
 4d2:	77 d2       	rcall	.+1262   	; 0x9c2 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 4d4:	f8 01       	movw	r30, r16
 4d6:	81 8b       	std	Z+17, r24	; 0x11
        nb=-nb;
    }
    if(nb>29){
        ledOn(&l[VINGT],getColor());
        ledOn(&l[DIX],getColor());
        nb=nb-30;
 4d8:	ce 51       	subi	r28, 0x1E	; 30
 4da:	0d c0       	rjmp	.+26     	; 0x4f6 <setLedsNb+0x54>
    }else if(nb>19){
 4dc:	c4 31       	cpi	r28, 0x14	; 20
 4de:	2c f0       	brlt	.+10     	; 0x4ea <setLedsNb+0x48>
        ledOn(&l[VINGT],getColor());
 4e0:	70 d2       	rcall	.+1248   	; 0x9c2 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 4e2:	f8 01       	movw	r30, r16
 4e4:	83 a3       	std	Z+35, r24	; 0x23
        ledOn(&l[VINGT],getColor());
        ledOn(&l[DIX],getColor());
        nb=nb-30;
    }else if(nb>19){
        ledOn(&l[VINGT],getColor());
        nb=nb-20;
 4e6:	c4 51       	subi	r28, 0x14	; 20
 4e8:	06 c0       	rjmp	.+12     	; 0x4f6 <setLedsNb+0x54>
    }else if(nb>11){
 4ea:	cc 30       	cpi	r28, 0x0C	; 12
 4ec:	24 f0       	brlt	.+8      	; 0x4f6 <setLedsNb+0x54>
        ledOn(&l[DIX],getColor());
 4ee:	69 d2       	rcall	.+1234   	; 0x9c2 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 4f0:	f8 01       	movw	r30, r16
 4f2:	81 8b       	std	Z+17, r24	; 0x11
    }else if(nb>19){
        ledOn(&l[VINGT],getColor());
        nb=nb-20;
    }else if(nb>11){
        ledOn(&l[DIX],getColor());
        nb=nb-10;
 4f4:	ca 50       	subi	r28, 0x0A	; 10
    }
    ledOn(&l[ledMap[nb-1]],getColor());
 4f6:	65 d2       	rcall	.+1226   	; 0x9c2 <getColor>
 4f8:	28 2f       	mov	r18, r24
 4fa:	ec 2f       	mov	r30, r28
 4fc:	cc 0f       	add	r28, r28
 4fe:	ff 0b       	sbc	r31, r31
 500:	e9 59       	subi	r30, 0x99	; 153
 502:	ff 4f       	sbci	r31, 0xFF	; 255
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 504:	80 81       	ld	r24, Z
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	63 e0       	ldi	r22, 0x03	; 3
 50a:	70 e0       	ldi	r23, 0x00	; 0
 50c:	17 d3       	rcall	.+1582   	; 0xb3c <__mulhi3>
 50e:	80 0f       	add	r24, r16
 510:	91 1f       	adc	r25, r17
 512:	fc 01       	movw	r30, r24
 514:	22 83       	std	Z+2, r18	; 0x02
    }else if(nb>11){
        ledOn(&l[DIX],getColor());
        nb=nb-10;
    }
    ledOn(&l[ledMap[nb-1]],getColor());
}
 516:	cf 91       	pop	r28
 518:	1f 91       	pop	r17
 51a:	0f 91       	pop	r16
 51c:	08 95       	ret

0000051e <sendRawData>:
void sendRawData(uint32_t data){
 51e:	0f 93       	push	r16
 520:	1f 93       	push	r17
    PORTA &=~(STROBE|CLK);
 522:	2b b3       	in	r18, 0x1b	; 27
 524:	23 7f       	andi	r18, 0xF3	; 243
 526:	2b bb       	out	0x1b, r18	; 27
 528:	40 e0       	ldi	r20, 0x00	; 0
 52a:	50 e0       	ldi	r21, 0x00	; 0
    for(uint8_t i=0;i<20;i++){
        if((data>>i) & 0x00000001){
 52c:	8b 01       	movw	r16, r22
 52e:	9c 01       	movw	r18, r24
 530:	04 2e       	mov	r0, r20
 532:	04 c0       	rjmp	.+8      	; 0x53c <sendRawData+0x1e>
 534:	36 95       	lsr	r19
 536:	27 95       	ror	r18
 538:	17 95       	ror	r17
 53a:	07 95       	ror	r16
 53c:	0a 94       	dec	r0
 53e:	d2 f7       	brpl	.-12     	; 0x534 <sendRawData+0x16>
 540:	00 ff       	sbrs	r16, 0
 542:	02 c0       	rjmp	.+4      	; 0x548 <sendRawData+0x2a>
            PORTA|=DATA;
 544:	d9 9a       	sbi	0x1b, 1	; 27
 546:	01 c0       	rjmp	.+2      	; 0x54a <sendRawData+0x2c>
        }else{
            PORTA&=~DATA;
 548:	d9 98       	cbi	0x1b, 1	; 27
        }
        PORTA|=CLK;
 54a:	db 9a       	sbi	0x1b, 3	; 27
        PORTA&=~CLK;
 54c:	db 98       	cbi	0x1b, 3	; 27
 54e:	4f 5f       	subi	r20, 0xFF	; 255
 550:	5f 4f       	sbci	r21, 0xFF	; 255
    }
    ledOn(&l[ledMap[nb-1]],getColor());
}
void sendRawData(uint32_t data){
    PORTA &=~(STROBE|CLK);
    for(uint8_t i=0;i<20;i++){
 552:	44 31       	cpi	r20, 0x14	; 20
 554:	51 05       	cpc	r21, r1
 556:	51 f7       	brne	.-44     	; 0x52c <sendRawData+0xe>
            PORTA&=~DATA;
        }
        PORTA|=CLK;
        PORTA&=~CLK;
    }
    PORTA|=STROBE;
 558:	da 9a       	sbi	0x1b, 2	; 27
    PORTA&=~STROBE;
 55a:	da 98       	cbi	0x1b, 2	; 27
}
 55c:	1f 91       	pop	r17
 55e:	0f 91       	pop	r16
 560:	08 95       	ret

00000562 <setCurrentTime>:
#include "RTC.h" 

void setCurrentTime(uint8_t hour,uint8_t min,uint8_t monthDay,uint8_t month){
    currentTime.hour=hour;
 562:	eb e0       	ldi	r30, 0x0B	; 11
 564:	f2 e0       	ldi	r31, 0x02	; 2
 566:	80 83       	st	Z, r24
    currentTime.min=min;
 568:	61 83       	std	Z+1, r22	; 0x01
    currentTime.monthDay=monthDay;
 56a:	42 83       	std	Z+2, r20	; 0x02
    currentTime.month=month;
 56c:	23 83       	std	Z+3, r18	; 0x03
 56e:	08 95       	ret

00000570 <minquad>:
}

uint8_t minquad(uint8_t min){
    if(min > 5){
 570:	86 30       	cpi	r24, 0x06	; 6
 572:	a0 f0       	brcs	.+40     	; 0x59c <minquad+0x2c>
        if(min > 15){
 574:	80 31       	cpi	r24, 0x10	; 16
 576:	50 f0       	brcs	.+20     	; 0x58c <minquad+0x1c>
            if(min > 25){
 578:	8a 31       	cpi	r24, 0x1A	; 26
 57a:	50 f0       	brcs	.+20     	; 0x590 <minquad+0x20>
                if(min > 35){
 57c:	84 32       	cpi	r24, 0x24	; 36
 57e:	50 f0       	brcs	.+20     	; 0x594 <minquad+0x24>
                    if(min > 45){
 580:	8e 32       	cpi	r24, 0x2E	; 46
 582:	50 f0       	brcs	.+20     	; 0x598 <minquad+0x28>
                        if(min > 55){
 584:	88 33       	cpi	r24, 0x38	; 56
 586:	50 f4       	brcc	.+20     	; 0x59c <minquad+0x2c>
                            return 0;
                        }else{return 50;}
 588:	82 e3       	ldi	r24, 0x32	; 50
 58a:	08 95       	ret
                    }else{return 40;}
                }else{return 30;}
            }else{return 20;}
        }else{return 10;}
 58c:	8a e0       	ldi	r24, 0x0A	; 10
 58e:	08 95       	ret
                        if(min > 55){
                            return 0;
                        }else{return 50;}
                    }else{return 40;}
                }else{return 30;}
            }else{return 20;}
 590:	84 e1       	ldi	r24, 0x14	; 20
 592:	08 95       	ret
                    if(min > 45){
                        if(min > 55){
                            return 0;
                        }else{return 50;}
                    }else{return 40;}
                }else{return 30;}
 594:	8e e1       	ldi	r24, 0x1E	; 30
 596:	08 95       	ret
                if(min > 35){
                    if(min > 45){
                        if(min > 55){
                            return 0;
                        }else{return 50;}
                    }else{return 40;}
 598:	88 e2       	ldi	r24, 0x28	; 40
 59a:	08 95       	ret
                }else{return 30;}
            }else{return 20;}
        }else{return 10;}
    }else{return 0;}
 59c:	80 e0       	ldi	r24, 0x00	; 0
}
 59e:	08 95       	ret

000005a0 <bcdToDec>:
    }else{
        return 0;
    }
    
}
uint8_t bcdToDec(uint8_t val){
 5a0:	98 2f       	mov	r25, r24
    return ((val/16*10) + (val%16));
 5a2:	82 95       	swap	r24
 5a4:	8f 70       	andi	r24, 0x0F	; 15
 5a6:	6a e0       	ldi	r22, 0x0A	; 10
 5a8:	c0 d2       	rcall	.+1408   	; 0xb2a <__mulqi3>
 5aa:	9f 70       	andi	r25, 0x0F	; 15
}
 5ac:	89 0f       	add	r24, r25
 5ae:	08 95       	ret

000005b0 <decToBcd>:
uint8_t decToBcd(uint8_t val){
    return( (val/10*16) + (val%10) );
 5b0:	6a e0       	ldi	r22, 0x0A	; 10
 5b2:	d5 d2       	rcall	.+1450   	; 0xb5e <__udivmodqi4>
 5b4:	82 95       	swap	r24
 5b6:	80 7f       	andi	r24, 0xF0	; 240
}
 5b8:	89 0f       	add	r24, r25
 5ba:	08 95       	ret

000005bc <i2c_in_transfer>:
        return 0;
    }
}

uint8_t i2c_in_transfer(uint8_t USISR_temp){
    USISR = USISR_temp;								//Set USISR as requested by calling function
 5bc:	8e b9       	out	0x0e, r24	; 14
    do{
        _delay_us(I2C_TLOW);
        USICR = 0b00101011;								//SCL Positive Edge
 5be:	8b e2       	ldi	r24, 0x2B	; 43
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5c0:	95 e0       	ldi	r25, 0x05	; 5
 5c2:	9a 95       	dec	r25
 5c4:	f1 f7       	brne	.-4      	; 0x5c2 <i2c_in_transfer+0x6>
 5c6:	00 00       	nop
 5c8:	8d b9       	out	0x0d, r24	; 13
        while (!(PIN_USI&(1<<PIN_USI_SCL)));		//Wait for SCL to go high
 5ca:	cc 9b       	sbis	0x19, 4	; 25
 5cc:	fe cf       	rjmp	.-4      	; 0x5ca <i2c_in_transfer+0xe>
 5ce:	94 e0       	ldi	r25, 0x04	; 4
 5d0:	9a 95       	dec	r25
 5d2:	f1 f7       	brne	.-4      	; 0x5d0 <i2c_in_transfer+0x14>
        _delay_us(I2C_THIGH);
        USICR = 0b00101011;								//SCL Negative Edge
 5d4:	8d b9       	out	0x0d, r24	; 13
    }while (!(USISR&(1<<USIOIF)));					//Do until transfer is complete
 5d6:	76 9b       	sbis	0x0e, 6	; 14
 5d8:	f3 cf       	rjmp	.-26     	; 0x5c0 <i2c_in_transfer+0x4>
 5da:	85 e0       	ldi	r24, 0x05	; 5
 5dc:	8a 95       	dec	r24
 5de:	f1 f7       	brne	.-4      	; 0x5dc <i2c_in_transfer+0x20>
 5e0:	00 00       	nop
    _delay_us(I2C_TLOW);
    return USIDR;
 5e2:	8f b1       	in	r24, 0x0f	; 15
}
 5e4:	08 95       	ret

000005e6 <i2c_in_transmit>:
uint8_t i2c_in_transmit(uint8_t *msg, uint8_t msg_size){
 5e6:	ef 92       	push	r14
 5e8:	ff 92       	push	r15
 5ea:	0f 93       	push	r16
 5ec:	1f 93       	push	r17
 5ee:	cf 93       	push	r28
 5f0:	df 93       	push	r29
 5f2:	ec 01       	movw	r28, r24
 5f4:	16 2f       	mov	r17, r22
    USI_I2C_Master_State = USI_ADDRESS;
 5f6:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <USI_I2C_Master_State>
    
    //   Start Condition
    PORT_USI |=  (1 << PORT_USI_SCL); 						//Setting input makes line pull high
 5fa:	dc 9a       	sbi	0x1b, 4	; 27
    while (!(PIN_USI & (1<<PIN_USI_SCL)));		//Wait for SCL to go high
 5fc:	cc 9b       	sbis	0x19, 4	; 25
 5fe:	fe cf       	rjmp	.-4      	; 0x5fc <i2c_in_transmit+0x16>
 600:	84 e0       	ldi	r24, 0x04	; 4
 602:	8a 95       	dec	r24
 604:	f1 f7       	brne	.-4      	; 0x602 <i2c_in_transmit+0x1c>
    #ifdef I2C_FAST_MODE
    _delay_us(I2C_THIGH);
    #else
    _delay_us(I2C_TLOW);
    #endif
    DDR_USI |=  (1 << PORT_USI_SDA);
 606:	d6 9a       	sbi	0x1a, 6	; 26
    DDR_USI |=  (1 << PORT_USI_SCL);
 608:	d4 9a       	sbi	0x1a, 4	; 26
    PORT_USI &= ~(1 << PORT_USI_SDA);
 60a:	de 98       	cbi	0x1b, 6	; 27
 60c:	84 e0       	ldi	r24, 0x04	; 4
 60e:	8a 95       	dec	r24
 610:	f1 f7       	brne	.-4      	; 0x60e <i2c_in_transmit+0x28>
    _delay_us(I2C_THIGH);;
    PORT_USI &= ~(1 << PORT_USI_SCL);
 612:	dc 98       	cbi	0x1b, 4	; 27
 614:	85 e0       	ldi	r24, 0x05	; 5
 616:	8a 95       	dec	r24
 618:	f1 f7       	brne	.-4      	; 0x616 <i2c_in_transmit+0x30>
 61a:	00 00       	nop
    _delay_us(I2C_TLOW);
    PORT_USI |=  (1 << PORT_USI_SDA);
 61c:	de 9a       	sbi	0x1b, 6	; 27
        switch(USI_I2C_Master_State){
            case USI_ADDRESS:
                if(!(*msg & 0x01)){
                    USI_I2C_Master_State = USI_WRITE;
                }else{
                    USI_I2C_Master_State = USI_READ;
 61e:	02 e0       	ldi	r16, 0x02	; 2
    
    do{
        switch(USI_I2C_Master_State){
            case USI_ADDRESS:
                if(!(*msg & 0x01)){
                    USI_I2C_Master_State = USI_WRITE;
 620:	ff 24       	eor	r15, r15
 622:	f3 94       	inc	r15
                DDR_USI &= ~(1 << PORT_USI_SDA);
                (*msg) = i2c_in_transfer(0b11110000 | (0x00<<USICNT0));			
                msg++;
                DDR_USI |=  (1 << PORT_USI_SDA);				
                if(msg_size == 1){
                    USIDR = 0xFF;			//Load NACK to end transmission
 624:	ee 24       	eor	r14, r14
 626:	ea 94       	dec	r14
    PORT_USI &= ~(1 << PORT_USI_SCL);
    _delay_us(I2C_TLOW);
    PORT_USI |=  (1 << PORT_USI_SDA);
    
    do{
        switch(USI_I2C_Master_State){
 628:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <USI_I2C_Master_State>
 62c:	81 30       	cpi	r24, 0x01	; 1
 62e:	61 f0       	breq	.+24     	; 0x648 <i2c_in_transmit+0x62>
 630:	18 f0       	brcs	.+6      	; 0x638 <i2c_in_transmit+0x52>
 632:	82 30       	cpi	r24, 0x02	; 2
 634:	c9 f0       	breq	.+50     	; 0x668 <i2c_in_transmit+0x82>
 636:	24 c0       	rjmp	.+72     	; 0x680 <i2c_in_transmit+0x9a>
            case USI_ADDRESS:
                if(!(*msg & 0x01)){
 638:	88 81       	ld	r24, Y
 63a:	80 fd       	sbrc	r24, 0
 63c:	03 c0       	rjmp	.+6      	; 0x644 <i2c_in_transmit+0x5e>
                    USI_I2C_Master_State = USI_WRITE;
 63e:	f0 92 0a 02 	sts	0x020A, r15	; 0x80020a <USI_I2C_Master_State>
 642:	02 c0       	rjmp	.+4      	; 0x648 <i2c_in_transmit+0x62>
                }else{
                    USI_I2C_Master_State = USI_READ;
 644:	00 93 0a 02 	sts	0x020A, r16	; 0x80020a <USI_I2C_Master_State>
                }//no break so goes to Write
                
            case USI_WRITE:
                PORT_USI &= ~(1 << PORT_USI_SCL);
 648:	dc 98       	cbi	0x1b, 4	; 27
                USIDR = *(msg);				//Load data			
 64a:	89 91       	ld	r24, Y+
 64c:	8f b9       	out	0x0f, r24	; 15
                msg++;						//Increment buffer pointer
                i2c_in_transfer(0b11110000 | (0x00<<USICNT0));
 64e:	80 ef       	ldi	r24, 0xF0	; 240
 650:	b5 df       	rcall	.-150    	; 0x5bc <i2c_in_transfer>
                DDR_USI &= ~(1 << PORT_USI_SDA);
 652:	d6 98       	cbi	0x1a, 6	; 26
                if(i2c_in_transfer(0b11110000 | (0x0E<<USICNT0)) & 0x01){
 654:	8e ef       	ldi	r24, 0xFE	; 254
 656:	b2 df       	rcall	.-156    	; 0x5bc <i2c_in_transfer>
 658:	80 ff       	sbrs	r24, 0
 65a:	04 c0       	rjmp	.+8      	; 0x664 <i2c_in_transmit+0x7e>
                    PORT_USI |=  (1 << PORT_USI_SCL);
 65c:	dc 9a       	sbi	0x1b, 4	; 27
                    PORT_USI |=  (1 << PORT_USI_SDA);
 65e:	de 9a       	sbi	0x1b, 6	; 27
                    return 0;
 660:	80 e0       	ldi	r24, 0x00	; 0
 662:	1f c0       	rjmp	.+62     	; 0x6a2 <i2c_in_transmit+0xbc>
                }
                DDR_USI |=  (1 << PORT_USI_SDA);
 664:	d6 9a       	sbi	0x1a, 6	; 26
                break;
 666:	0c c0       	rjmp	.+24     	; 0x680 <i2c_in_transmit+0x9a>
                
            case USI_READ:
                DDR_USI &= ~(1 << PORT_USI_SDA);
 668:	d6 98       	cbi	0x1a, 6	; 26
                (*msg) = i2c_in_transfer(0b11110000 | (0x00<<USICNT0));			
 66a:	80 ef       	ldi	r24, 0xF0	; 240
 66c:	a7 df       	rcall	.-178    	; 0x5bc <i2c_in_transfer>
 66e:	89 93       	st	Y+, r24
                msg++;
                DDR_USI |=  (1 << PORT_USI_SDA);				
 670:	d6 9a       	sbi	0x1a, 6	; 26
                if(msg_size == 1){
 672:	11 30       	cpi	r17, 0x01	; 1
 674:	11 f4       	brne	.+4      	; 0x67a <i2c_in_transmit+0x94>
                    USIDR = 0xFF;			//Load NACK to end transmission
 676:	ef b8       	out	0x0f, r14	; 15
 678:	01 c0       	rjmp	.+2      	; 0x67c <i2c_in_transmit+0x96>
                }else{
                    USIDR = 0x00;			//Load ACK
 67a:	1f b8       	out	0x0f, r1	; 15
                }
                i2c_in_transfer(0b11110000 | (0x0E<<USICNT0));
 67c:	8e ef       	ldi	r24, 0xFE	; 254
 67e:	9e df       	rcall	.-196    	; 0x5bc <i2c_in_transfer>
                break;
        }
    }while(--msg_size);
 680:	11 50       	subi	r17, 0x01	; 1
 682:	91 f6       	brne	.-92     	; 0x628 <i2c_in_transmit+0x42>
    
    //Stop Condition
    PORT_USI &= ~(1 << PORT_USI_SDA);           				// Pull SDA low.
 684:	de 98       	cbi	0x1b, 6	; 27
 686:	85 e0       	ldi	r24, 0x05	; 5
 688:	8a 95       	dec	r24
 68a:	f1 f7       	brne	.-4      	; 0x688 <i2c_in_transmit+0xa2>
 68c:	00 00       	nop
    _delay_us(I2C_TLOW);
    DDR_USI &= ~(1 << PORT_USI_SCL);            				// Release SCL.
 68e:	d4 98       	cbi	0x1a, 4	; 26
    while( !(PIN_USI & (1<<PIN_USI_SCL)) );  	// Wait for SCL to go high.  
 690:	cc 9b       	sbis	0x19, 4	; 25
 692:	fe cf       	rjmp	.-4      	; 0x690 <i2c_in_transmit+0xaa>
 694:	84 e0       	ldi	r24, 0x04	; 4
 696:	8a 95       	dec	r24
 698:	f1 f7       	brne	.-4      	; 0x696 <i2c_in_transmit+0xb0>
    _delay_us(I2C_THIGH);
    DDR_USI &= ~(1 << PORT_USI_SDA);            				// Release SDA.
 69a:	d6 98       	cbi	0x1a, 6	; 26
    while( !(PIN_USI & (1<<PIN_USI_SDA)) );  	// Wait for SDA to go high. 
 69c:	ce 9b       	sbis	0x19, 6	; 25
 69e:	fe cf       	rjmp	.-4      	; 0x69c <i2c_in_transmit+0xb6>
    return 1;
 6a0:	81 e0       	ldi	r24, 0x01	; 1
}
 6a2:	df 91       	pop	r29
 6a4:	cf 91       	pop	r28
 6a6:	1f 91       	pop	r17
 6a8:	0f 91       	pop	r16
 6aa:	ff 90       	pop	r15
 6ac:	ef 90       	pop	r14
 6ae:	08 95       	ret

000006b0 <i2c_write>:
    i2c_write(RTC_addr,3,decToBcd(day));
    i2c_write(RTC_addr,4,decToBcd(t.monthDay));
    i2c_write(RTC_addr,5,decToBcd(t.month));
    i2c_write(RTC_addr,6,decToBcd(year));
}
uint8_t i2c_write(uint8_t addr, uint8_t adrs, uint8_t val){ // only supports 1 byte write
 6b0:	cf 93       	push	r28
 6b2:	df 93       	push	r29
 6b4:	00 d0       	rcall	.+0      	; 0x6b6 <i2c_write+0x6>
 6b6:	1f 92       	push	r1
 6b8:	cd b7       	in	r28, 0x3d	; 61
 6ba:	de b7       	in	r29, 0x3e	; 62
    uint8_t i2c_buffer[3];
    uint8_t i2c_buffer_len = 3;
    i2c_buffer[0] = (addr << 1) | I2CWRITE ;
 6bc:	88 0f       	add	r24, r24
 6be:	89 83       	std	Y+1, r24	; 0x01
    i2c_buffer[1] = adrs;
 6c0:	6a 83       	std	Y+2, r22	; 0x02
    i2c_buffer[2] = val;
 6c2:	4b 83       	std	Y+3, r20	; 0x03
    return i2c_in_transmit(i2c_buffer, i2c_buffer_len);
 6c4:	63 e0       	ldi	r22, 0x03	; 3
 6c6:	ce 01       	movw	r24, r28
 6c8:	01 96       	adiw	r24, 0x01	; 1
 6ca:	8d df       	rcall	.-230    	; 0x5e6 <i2c_in_transmit>
}
 6cc:	0f 90       	pop	r0
 6ce:	0f 90       	pop	r0
 6d0:	0f 90       	pop	r0
 6d2:	df 91       	pop	r29
 6d4:	cf 91       	pop	r28
 6d6:	08 95       	ret

000006d8 <RTC_setTime>:
        return 1;
    }else{
        return 0;
    }
}
void RTC_setTime(struct Ttime t,uint8_t day, uint8_t year){
 6d8:	0f 93       	push	r16
 6da:	1f 93       	push	r17
 6dc:	cf 93       	push	r28
 6de:	df 93       	push	r29
 6e0:	00 d0       	rcall	.+0      	; 0x6e2 <RTC_setTime+0xa>
 6e2:	00 d0       	rcall	.+0      	; 0x6e4 <RTC_setTime+0xc>
 6e4:	1f 92       	push	r1
 6e6:	cd b7       	in	r28, 0x3d	; 61
 6e8:	de b7       	in	r29, 0x3e	; 62
 6ea:	49 83       	std	Y+1, r20	; 0x01
 6ec:	85 2f       	mov	r24, r21
 6ee:	6b 83       	std	Y+3, r22	; 0x03
 6f0:	7c 83       	std	Y+4, r23	; 0x04
 6f2:	12 2f       	mov	r17, r18
    i2c_write(RTC_addr,1,decToBcd(t.min));
 6f4:	5d df       	rcall	.-326    	; 0x5b0 <decToBcd>
 6f6:	48 2f       	mov	r20, r24
 6f8:	61 e0       	ldi	r22, 0x01	; 1
 6fa:	88 e6       	ldi	r24, 0x68	; 104
 6fc:	d9 df       	rcall	.-78     	; 0x6b0 <i2c_write>
    i2c_write(RTC_addr,2,decToBcd(t.hour));
 6fe:	89 81       	ldd	r24, Y+1	; 0x01
 700:	57 df       	rcall	.-338    	; 0x5b0 <decToBcd>
 702:	48 2f       	mov	r20, r24
 704:	62 e0       	ldi	r22, 0x02	; 2
 706:	88 e6       	ldi	r24, 0x68	; 104
 708:	d3 df       	rcall	.-90     	; 0x6b0 <i2c_write>
    i2c_write(RTC_addr,3,decToBcd(day));
 70a:	81 2f       	mov	r24, r17
 70c:	51 df       	rcall	.-350    	; 0x5b0 <decToBcd>
 70e:	48 2f       	mov	r20, r24
 710:	63 e0       	ldi	r22, 0x03	; 3
 712:	88 e6       	ldi	r24, 0x68	; 104
 714:	cd df       	rcall	.-102    	; 0x6b0 <i2c_write>
    i2c_write(RTC_addr,4,decToBcd(t.monthDay));
 716:	8b 81       	ldd	r24, Y+3	; 0x03
 718:	4b df       	rcall	.-362    	; 0x5b0 <decToBcd>
 71a:	48 2f       	mov	r20, r24
 71c:	64 e0       	ldi	r22, 0x04	; 4
 71e:	88 e6       	ldi	r24, 0x68	; 104
 720:	c7 df       	rcall	.-114    	; 0x6b0 <i2c_write>
    i2c_write(RTC_addr,5,decToBcd(t.month));
 722:	8c 81       	ldd	r24, Y+4	; 0x04
 724:	45 df       	rcall	.-374    	; 0x5b0 <decToBcd>
 726:	48 2f       	mov	r20, r24
 728:	65 e0       	ldi	r22, 0x05	; 5
 72a:	88 e6       	ldi	r24, 0x68	; 104
 72c:	c1 df       	rcall	.-126    	; 0x6b0 <i2c_write>
    i2c_write(RTC_addr,6,decToBcd(year));
 72e:	80 2f       	mov	r24, r16
 730:	3f df       	rcall	.-386    	; 0x5b0 <decToBcd>
 732:	48 2f       	mov	r20, r24
 734:	66 e0       	ldi	r22, 0x06	; 6
 736:	88 e6       	ldi	r24, 0x68	; 104
}
 738:	0f 90       	pop	r0
 73a:	0f 90       	pop	r0
 73c:	0f 90       	pop	r0
 73e:	0f 90       	pop	r0
 740:	0f 90       	pop	r0
 742:	df 91       	pop	r29
 744:	cf 91       	pop	r28
 746:	1f 91       	pop	r17
 748:	0f 91       	pop	r16
    i2c_write(RTC_addr,1,decToBcd(t.min));
    i2c_write(RTC_addr,2,decToBcd(t.hour));
    i2c_write(RTC_addr,3,decToBcd(day));
    i2c_write(RTC_addr,4,decToBcd(t.monthDay));
    i2c_write(RTC_addr,5,decToBcd(t.month));
    i2c_write(RTC_addr,6,decToBcd(year));
 74a:	b2 cf       	rjmp	.-156    	; 0x6b0 <i2c_write>

0000074c <i2c_read>:
    i2c_buffer[0] = (addr << 1) | I2CWRITE ;
    i2c_buffer[1] = adrs;
    i2c_buffer[2] = val;
    return i2c_in_transmit(i2c_buffer, i2c_buffer_len);
}
uint8_t i2c_read(uint8_t addr, uint8_t len, uint8_t adrs, uint8_t *buf){
 74c:	8f 92       	push	r8
 74e:	9f 92       	push	r9
 750:	af 92       	push	r10
 752:	bf 92       	push	r11
 754:	cf 92       	push	r12
 756:	df 92       	push	r13
 758:	ef 92       	push	r14
 75a:	ff 92       	push	r15
 75c:	0f 93       	push	r16
 75e:	1f 93       	push	r17
 760:	cf 93       	push	r28
 762:	df 93       	push	r29
 764:	cd b7       	in	r28, 0x3d	; 61
 766:	de b7       	in	r29, 0x3e	; 62
 768:	18 2f       	mov	r17, r24
 76a:	06 2f       	mov	r16, r22
 76c:	49 01       	movw	r8, r18
        }
        return 1; // provide success check
    }else{
        return 0;
    }
}
 76e:	ad b6       	in	r10, 0x3d	; 61
 770:	be b6       	in	r11, 0x3e	; 62
    i2c_buffer[2] = val;
    return i2c_in_transmit(i2c_buffer, i2c_buffer_len);
}
uint8_t i2c_read(uint8_t addr, uint8_t len, uint8_t adrs, uint8_t *buf){
    //set register pointer to adrs
    uint8_t i2c_buffer[len+1];
 772:	c6 2e       	mov	r12, r22
 774:	d1 2c       	mov	r13, r1
 776:	c6 01       	movw	r24, r12
 778:	01 96       	adiw	r24, 0x01	; 1
 77a:	2d b7       	in	r18, 0x3d	; 61
 77c:	3e b7       	in	r19, 0x3e	; 62
 77e:	28 1b       	sub	r18, r24
 780:	39 0b       	sbc	r19, r25
 782:	0f b6       	in	r0, 0x3f	; 63
 784:	f8 94       	cli
 786:	3e bf       	out	0x3e, r19	; 62
 788:	0f be       	out	0x3f, r0	; 63
 78a:	2d bf       	out	0x3d, r18	; 61
 78c:	8d b7       	in	r24, 0x3d	; 61
 78e:	9e b7       	in	r25, 0x3e	; 62
 790:	01 96       	adiw	r24, 0x01	; 1
 792:	7c 01       	movw	r14, r24
    uint8_t i2c_buffer_len = 2;
    i2c_buffer[0] = (addr << 1) | I2CWRITE;
 794:	81 2f       	mov	r24, r17
 796:	88 0f       	add	r24, r24
 798:	ed b7       	in	r30, 0x3d	; 61
 79a:	fe b7       	in	r31, 0x3e	; 62
 79c:	81 83       	std	Z+1, r24	; 0x01
    i2c_buffer[1] = adrs;
 79e:	f7 01       	movw	r30, r14
 7a0:	41 83       	std	Z+1, r20	; 0x01
    i2c_in_transmit(i2c_buffer, i2c_buffer_len);
 7a2:	62 e0       	ldi	r22, 0x02	; 2
 7a4:	c7 01       	movw	r24, r14
 7a6:	1f df       	rcall	.-450    	; 0x5e6 <i2c_in_transmit>
    //read actual data
    i2c_buffer_len = len+1;
    i2c_buffer[0] = (addr << 1) | I2CREAD;
 7a8:	11 0f       	add	r17, r17
 7aa:	11 60       	ori	r17, 0x01	; 1
 7ac:	f7 01       	movw	r30, r14
 7ae:	10 83       	st	Z, r17
    if(i2c_in_transmit(i2c_buffer, i2c_buffer_len)){
 7b0:	61 e0       	ldi	r22, 0x01	; 1
 7b2:	60 0f       	add	r22, r16
 7b4:	c7 01       	movw	r24, r14
 7b6:	17 df       	rcall	.-466    	; 0x5e6 <i2c_in_transmit>
 7b8:	88 23       	and	r24, r24
 7ba:	91 f0       	breq	.+36     	; 0x7e0 <i2c_read+0x94>
 7bc:	21 e0       	ldi	r18, 0x01	; 1
        uint8_t i;
        for(i=1;i<len+1;i++){ // fetch in buffer
 7be:	82 2f       	mov	r24, r18
 7c0:	90 e0       	ldi	r25, 0x00	; 0
 7c2:	c8 16       	cp	r12, r24
 7c4:	d9 06       	cpc	r13, r25
 7c6:	5c f0       	brlt	.+22     	; 0x7de <i2c_read+0x92>
            buf[i-1]=i2c_buffer[i];
 7c8:	f4 01       	movw	r30, r8
 7ca:	e8 0f       	add	r30, r24
 7cc:	f9 1f       	adc	r31, r25
 7ce:	31 97       	sbiw	r30, 0x01	; 1
 7d0:	d7 01       	movw	r26, r14
 7d2:	a8 0f       	add	r26, r24
 7d4:	b9 1f       	adc	r27, r25
 7d6:	8c 91       	ld	r24, X
 7d8:	80 83       	st	Z, r24
    //read actual data
    i2c_buffer_len = len+1;
    i2c_buffer[0] = (addr << 1) | I2CREAD;
    if(i2c_in_transmit(i2c_buffer, i2c_buffer_len)){
        uint8_t i;
        for(i=1;i<len+1;i++){ // fetch in buffer
 7da:	2f 5f       	subi	r18, 0xFF	; 255
 7dc:	f0 cf       	rjmp	.-32     	; 0x7be <i2c_read+0x72>
            buf[i-1]=i2c_buffer[i];
        }
        return 1; // provide success check
 7de:	81 e0       	ldi	r24, 0x01	; 1
    }else{
        return 0;
    }
}
 7e0:	0f b6       	in	r0, 0x3f	; 63
 7e2:	f8 94       	cli
 7e4:	be be       	out	0x3e, r11	; 62
 7e6:	0f be       	out	0x3f, r0	; 63
 7e8:	ad be       	out	0x3d, r10	; 61
 7ea:	df 91       	pop	r29
 7ec:	cf 91       	pop	r28
 7ee:	1f 91       	pop	r17
 7f0:	0f 91       	pop	r16
 7f2:	ff 90       	pop	r15
 7f4:	ef 90       	pop	r14
 7f6:	df 90       	pop	r13
 7f8:	cf 90       	pop	r12
 7fa:	bf 90       	pop	r11
 7fc:	af 90       	pop	r10
 7fe:	9f 90       	pop	r9
 800:	8f 90       	pop	r8
 802:	08 95       	ret

00000804 <RTC_readTemp>:
            }else{return 20;}
        }else{return 10;}
    }else{return 0;}
}

int8_t RTC_readTemp(void){
 804:	cf 93       	push	r28
 806:	df 93       	push	r29
 808:	1f 92       	push	r1
 80a:	cd b7       	in	r28, 0x3d	; 61
 80c:	de b7       	in	r29, 0x3e	; 62
    int8_t data=0;
 80e:	19 82       	std	Y+1, r1	; 0x01
    if(i2c_read(RTC_addr,1,0x11,&data)){
 810:	9e 01       	movw	r18, r28
 812:	2f 5f       	subi	r18, 0xFF	; 255
 814:	3f 4f       	sbci	r19, 0xFF	; 255
 816:	41 e1       	ldi	r20, 0x11	; 17
 818:	61 e0       	ldi	r22, 0x01	; 1
 81a:	88 e6       	ldi	r24, 0x68	; 104
 81c:	97 df       	rcall	.-210    	; 0x74c <i2c_read>
 81e:	88 23       	and	r24, r24
 820:	11 f0       	breq	.+4      	; 0x826 <RTC_readTemp+0x22>
        return (data);
 822:	89 81       	ldd	r24, Y+1	; 0x01
 824:	01 c0       	rjmp	.+2      	; 0x828 <RTC_readTemp+0x24>
    }else{
        return 0;
 826:	80 e0       	ldi	r24, 0x00	; 0
    }
    
}
 828:	0f 90       	pop	r0
 82a:	df 91       	pop	r29
 82c:	cf 91       	pop	r28
 82e:	08 95       	ret

00000830 <RTC_readTime>:
    return ((val/16*10) + (val%16));
}
uint8_t decToBcd(uint8_t val){
    return( (val/10*16) + (val%10) );
}
uint8_t RTC_readTime(struct Ttime *t){
 830:	0f 93       	push	r16
 832:	1f 93       	push	r17
 834:	cf 93       	push	r28
 836:	df 93       	push	r29
 838:	cd b7       	in	r28, 0x3d	; 61
 83a:	de b7       	in	r29, 0x3e	; 62
 83c:	27 97       	sbiw	r28, 0x07	; 7
 83e:	0f b6       	in	r0, 0x3f	; 63
 840:	f8 94       	cli
 842:	de bf       	out	0x3e, r29	; 62
 844:	0f be       	out	0x3f, r0	; 63
 846:	cd bf       	out	0x3d, r28	; 61
 848:	8c 01       	movw	r16, r24
    uint8_t data[7] = {0};
 84a:	9e 01       	movw	r18, r28
 84c:	2f 5f       	subi	r18, 0xFF	; 255
 84e:	3f 4f       	sbci	r19, 0xFF	; 255
 850:	87 e0       	ldi	r24, 0x07	; 7
 852:	f9 01       	movw	r30, r18
 854:	11 92       	st	Z+, r1
 856:	8a 95       	dec	r24
 858:	e9 f7       	brne	.-6      	; 0x854 <RTC_readTime+0x24>
    if(i2c_read(RTC_addr,7,0x00,data)){
 85a:	40 e0       	ldi	r20, 0x00	; 0
 85c:	67 e0       	ldi	r22, 0x07	; 7
 85e:	88 e6       	ldi	r24, 0x68	; 104
 860:	75 df       	rcall	.-278    	; 0x74c <i2c_read>
 862:	88 23       	and	r24, r24
 864:	89 f0       	breq	.+34     	; 0x888 <RTC_readTime+0x58>
        t->hour = bcdToDec(data[2]);
 866:	8b 81       	ldd	r24, Y+3	; 0x03
 868:	9b de       	rcall	.-714    	; 0x5a0 <bcdToDec>
 86a:	f8 01       	movw	r30, r16
 86c:	80 83       	st	Z, r24
        t->min = bcdToDec(data[1]);
 86e:	8a 81       	ldd	r24, Y+2	; 0x02
 870:	97 de       	rcall	.-722    	; 0x5a0 <bcdToDec>
 872:	f8 01       	movw	r30, r16
 874:	81 83       	std	Z+1, r24	; 0x01
        t->monthDay = bcdToDec(data[4]);
 876:	8d 81       	ldd	r24, Y+5	; 0x05
 878:	93 de       	rcall	.-730    	; 0x5a0 <bcdToDec>
 87a:	f8 01       	movw	r30, r16
 87c:	82 83       	std	Z+2, r24	; 0x02
        t->month = bcdToDec(data[5]);
 87e:	8e 81       	ldd	r24, Y+6	; 0x06
 880:	8f de       	rcall	.-738    	; 0x5a0 <bcdToDec>
 882:	f8 01       	movw	r30, r16
 884:	83 83       	std	Z+3, r24	; 0x03
        return 1;
 886:	81 e0       	ldi	r24, 0x01	; 1
    }else{
        return 0;
    }
}
 888:	27 96       	adiw	r28, 0x07	; 7
 88a:	0f b6       	in	r0, 0x3f	; 63
 88c:	f8 94       	cli
 88e:	de bf       	out	0x3e, r29	; 62
 890:	0f be       	out	0x3f, r0	; 63
 892:	cd bf       	out	0x3d, r28	; 61
 894:	df 91       	pop	r29
 896:	cf 91       	pop	r28
 898:	1f 91       	pop	r17
 89a:	0f 91       	pop	r16
 89c:	08 95       	ret

0000089e <MsetRainbow>:
        MsetMode(1);
        MsetColorMode(0);
        TCCR1B|=(1<<CS12)|(1<<CS10);
    }
}
void MsetRainbow(uint8_t i){
 89e:	08 95       	ret

000008a0 <MsetEventMode>:
 8a0:	08 95       	ret

000008a2 <MsetHouram>:
 8a2:	08 95       	ret

000008a4 <MsetHourpm>:
 8a4:	08 95       	ret

000008a6 <MsetMinam>:
 8a6:	08 95       	ret

000008a8 <MsetMinpm>:
 8a8:	08 95       	ret

000008aa <findNextEntry>:
#include "Menu.h"

uint8_t mode=1;//0: hour only, 1-2: hour+temp, 3: temp only
uint8_t colorMode=0;
uint8_t findNextEntry(Menu* m,uint8_t index){
    if((index+2)>(m->nb_optn%16))return 0;
 8aa:	26 2f       	mov	r18, r22
 8ac:	30 e0       	ldi	r19, 0x00	; 0
 8ae:	2f 5f       	subi	r18, 0xFF	; 255
 8b0:	3f 4f       	sbci	r19, 0xFF	; 255
 8b2:	fc 01       	movw	r30, r24
 8b4:	80 81       	ld	r24, Z
 8b6:	8f 70       	andi	r24, 0x0F	; 15
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	28 17       	cp	r18, r24
 8bc:	39 07       	cpc	r19, r25
 8be:	1c f4       	brge	.+6      	; 0x8c6 <findNextEntry+0x1c>
    return index+1;
 8c0:	81 e0       	ldi	r24, 0x01	; 1
 8c2:	86 0f       	add	r24, r22
 8c4:	08 95       	ret
#include "Menu.h"

uint8_t mode=1;//0: hour only, 1-2: hour+temp, 3: temp only
uint8_t colorMode=0;
uint8_t findNextEntry(Menu* m,uint8_t index){
    if((index+2)>(m->nb_optn%16))return 0;
 8c6:	80 e0       	ldi	r24, 0x00	; 0
    return index+1;
}
 8c8:	08 95       	ret

000008ca <getSubMenu>:

Menu* getSubMenu(Menu* m,uint8_t index){
 8ca:	9c 01       	movw	r18, r24
    if(m->sub[index].submenu==0)return 0;//if executed NULL, return blank menu (==exit setup)
 8cc:	86 2f       	mov	r24, r22
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	63 e0       	ldi	r22, 0x03	; 3
 8d2:	70 e0       	ldi	r23, 0x00	; 0
 8d4:	33 d1       	rcall	.+614    	; 0xb3c <__mulhi3>
 8d6:	82 0f       	add	r24, r18
 8d8:	93 1f       	adc	r25, r19
    return m->sub[index].submenu;
}
 8da:	fc 01       	movw	r30, r24
 8dc:	84 81       	ldd	r24, Z+4	; 0x04
 8de:	95 81       	ldd	r25, Z+5	; 0x05
 8e0:	08 95       	ret

000008e2 <EEPROM_write>:
void EEPROM_write(uint8_t addr, uint8_t data){
    while(EECR & (1<<EEPE));
 8e2:	e1 99       	sbic	0x1c, 1	; 28
 8e4:	fe cf       	rjmp	.-4      	; 0x8e2 <EEPROM_write>
    EECR = (0<<EEPM1)|(0<<EEPM0);
 8e6:	1c ba       	out	0x1c, r1	; 28
    EEAR = addr;
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	9f bb       	out	0x1f, r25	; 31
 8ec:	8e bb       	out	0x1e, r24	; 30
    EEDR = data;
 8ee:	6d bb       	out	0x1d, r22	; 29
    EECR |= (1<<EEMPE);
 8f0:	e2 9a       	sbi	0x1c, 2	; 28
    EECR |= (1<<EEPE);
 8f2:	e1 9a       	sbi	0x1c, 1	; 28
 8f4:	08 95       	ret

000008f6 <MsetMode>:
    {8,0},//Rainbow off
    {HEURE,&M0main}//return
}};

void MsetMode(uint8_t i){
    if(i<4){
 8f6:	84 30       	cpi	r24, 0x04	; 4
 8f8:	68 f4       	brcc	.+26     	; 0x914 <MsetMode+0x1e>
        TCCR1B|=(1<<CS12)|(1<<CS10);
 8fa:	9e b5       	in	r25, 0x2e	; 46
 8fc:	95 60       	ori	r25, 0x05	; 5
 8fe:	9e bd       	out	0x2e, r25	; 46
        if(i==2)TCCR1B&=~(1<<CS10);
 900:	82 30       	cpi	r24, 0x02	; 2
 902:	19 f4       	brne	.+6      	; 0x90a <MsetMode+0x14>
 904:	9e b5       	in	r25, 0x2e	; 46
 906:	9e 7f       	andi	r25, 0xFE	; 254
 908:	9e bd       	out	0x2e, r25	; 46
        mode=i;
 90a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
        EEPROM_write(EE_MODE,i);
 90e:	68 2f       	mov	r22, r24
 910:	84 e0       	ldi	r24, 0x04	; 4
 912:	e7 cf       	rjmp	.-50     	; 0x8e2 <EEPROM_write>
 914:	08 95       	ret

00000916 <MsetColorMode>:
        mode=2;
    }
    return mode;
}
void MsetColorMode(uint8_t i){
    if(i<7){
 916:	87 30       	cpi	r24, 0x07	; 7
 918:	40 f4       	brcc	.+16     	; 0x92a <MsetColorMode+0x14>
        colorMode=colorArray[i];//fixed
 91a:	e8 2f       	mov	r30, r24
 91c:	f0 e0       	ldi	r31, 0x00	; 0
 91e:	ed 53       	subi	r30, 0x3D	; 61
 920:	fe 4f       	sbci	r31, 0xFE	; 254
 922:	60 81       	ld	r22, Z
 924:	60 93 d0 01 	sts	0x01D0, r22	; 0x8001d0 <colorMode>
 928:	0d c0       	rjmp	.+26     	; 0x944 <MsetColorMode+0x2e>
        EEPROM_write(EE_COLOR,colorArray[i]);
    }else if(i==7){//cycle single
 92a:	87 30       	cpi	r24, 0x07	; 7
 92c:	29 f4       	brne	.+10     	; 0x938 <MsetColorMode+0x22>
        colorMode=WHITE+128;
 92e:	87 e8       	ldi	r24, 0x87	; 135
 930:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <colorMode>
        EEPROM_write(EE_COLOR,128);
 934:	60 e8       	ldi	r22, 0x80	; 128
 936:	06 c0       	rjmp	.+12     	; 0x944 <MsetColorMode+0x2e>
    }else if(i==8){//cycle all
 938:	88 30       	cpi	r24, 0x08	; 8
 93a:	31 f4       	brne	.+12     	; 0x948 <MsetColorMode+0x32>
        colorMode=WHITE+64;
 93c:	87 e4       	ldi	r24, 0x47	; 71
 93e:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <colorMode>
        EEPROM_write(EE_COLOR,64);
 942:	60 e4       	ldi	r22, 0x40	; 64
 944:	80 e0       	ldi	r24, 0x00	; 0
 946:	cd cf       	rjmp	.-102    	; 0x8e2 <EEPROM_write>
 948:	08 95       	ret

0000094a <MsetNightMode>:
    }else{//fixed
        return colorMode;
    }
}
void MsetNightMode(uint8_t i){
    if(i<3)EEPROM_write(EE_NIGHTMODE,i);
 94a:	83 30       	cpi	r24, 0x03	; 3
 94c:	18 f4       	brcc	.+6      	; 0x954 <MsetNightMode+0xa>
 94e:	68 2f       	mov	r22, r24
 950:	81 e0       	ldi	r24, 0x01	; 1
 952:	c7 cf       	rjmp	.-114    	; 0x8e2 <EEPROM_write>
 954:	08 95       	ret

00000956 <MsetNightOff>:
uint8_t isInAllowedTime(uint8_t h){
    if(EEPROM_read(EE_NIGHTMODE))return (h>=EEPROM_read(EE_ONHOUR) && h<=EEPROM_read(EE_OFFHOUR));
    return 1;
}
void MsetNightOff(uint8_t i){
    EEPROM_write(EE_OFFHOUR,12+i);
 956:	6c e0       	ldi	r22, 0x0C	; 12
 958:	68 0f       	add	r22, r24
 95a:	83 e0       	ldi	r24, 0x03	; 3
 95c:	c2 cf       	rjmp	.-124    	; 0x8e2 <EEPROM_write>

0000095e <MsetNightOn>:
}
void MsetNightOn(uint8_t i){
    EEPROM_write(EE_ONHOUR,1+i);
 95e:	61 e0       	ldi	r22, 0x01	; 1
 960:	68 0f       	add	r22, r24
 962:	82 e0       	ldi	r24, 0x02	; 2
 964:	be cf       	rjmp	.-132    	; 0x8e2 <EEPROM_write>

00000966 <Mreset>:
void MsetMinpm(uint8_t i){
}
void MsetEventMode(uint8_t i){
}
void Mreset(uint8_t i){
    if(i<1){
 966:	81 11       	cpse	r24, r1
 968:	0e c0       	rjmp	.+28     	; 0x986 <Mreset+0x20>
    {HEURE,&M0main}//return
}};

void MsetMode(uint8_t i){
    if(i<4){
        TCCR1B|=(1<<CS12)|(1<<CS10);
 96a:	8e b5       	in	r24, 0x2e	; 46
 96c:	85 60       	ori	r24, 0x05	; 5
 96e:	8e bd       	out	0x2e, r24	; 46
        if(i==2)TCCR1B&=~(1<<CS10);
        mode=i;
 970:	81 e0       	ldi	r24, 0x01	; 1
 972:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
        EEPROM_write(EE_MODE,i);
 976:	61 e0       	ldi	r22, 0x01	; 1
 978:	84 e0       	ldi	r24, 0x04	; 4
 97a:	b3 df       	rcall	.-154    	; 0x8e2 <EEPROM_write>
void MsetEventMode(uint8_t i){
}
void Mreset(uint8_t i){
    if(i<1){
        MsetMode(1);
        MsetColorMode(0);
 97c:	80 e0       	ldi	r24, 0x00	; 0
 97e:	cb df       	rcall	.-106    	; 0x916 <MsetColorMode>
        TCCR1B|=(1<<CS12)|(1<<CS10);
 980:	8e b5       	in	r24, 0x2e	; 46
 982:	85 60       	ori	r24, 0x05	; 5
 984:	8e bd       	out	0x2e, r24	; 46
 986:	08 95       	ret

00000988 <EEPROM_read>:
    EEDR = data;
    EECR |= (1<<EEMPE);
    EECR |= (1<<EEPE);
}
uint8_t EEPROM_read(uint8_t addr){
    while(EECR & (1<<EEPE));
 988:	e1 99       	sbic	0x1c, 1	; 28
 98a:	fe cf       	rjmp	.-4      	; 0x988 <EEPROM_read>
    EEAR = addr;
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	9f bb       	out	0x1f, r25	; 31
 990:	8e bb       	out	0x1e, r24	; 30
    EECR |= (1<<EERE);
 992:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
 994:	8d b3       	in	r24, 0x1d	; 29
}
 996:	08 95       	ret

00000998 <Minit>:

void Minit(void){
    colorMode=EEPROM_read(EE_COLOR);
 998:	80 e0       	ldi	r24, 0x00	; 0
 99a:	f6 df       	rcall	.-20     	; 0x988 <EEPROM_read>
 99c:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <colorMode>
    MsetMode(EEPROM_read(EE_MODE));
 9a0:	84 e0       	ldi	r24, 0x04	; 4
 9a2:	f2 df       	rcall	.-28     	; 0x988 <EEPROM_read>
 9a4:	a8 cf       	rjmp	.-176    	; 0x8f6 <MsetMode>

000009a6 <getMode>:
        mode=i;
        EEPROM_write(EE_MODE,i);
    }
}
uint8_t getMode(void){
    if(mode==2){
 9a6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 9aa:	82 30       	cpi	r24, 0x02	; 2
 9ac:	11 f4       	brne	.+4      	; 0x9b2 <getMode+0xc>
        mode=1;
 9ae:	81 e0       	ldi	r24, 0x01	; 1
 9b0:	03 c0       	rjmp	.+6      	; 0x9b8 <getMode+0x12>
    }else if(mode==1){
 9b2:	81 30       	cpi	r24, 0x01	; 1
 9b4:	19 f4       	brne	.+6      	; 0x9bc <getMode+0x16>
        mode=2;
 9b6:	82 e0       	ldi	r24, 0x02	; 2
 9b8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
    }
    return mode;
}
 9bc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 9c0:	08 95       	ret

000009c2 <getColor>:
        colorMode=WHITE+64;
        EEPROM_write(EE_COLOR,64);
    }
}
uint8_t getColor(void){
    if(colorMode>127){//cycle single
 9c2:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <colorMode>
 9c6:	87 ff       	sbrs	r24, 7
 9c8:	0f c0       	rjmp	.+30     	; 0x9e8 <getColor+0x26>
        if(colorMode>134)colorMode=128;
 9ca:	87 38       	cpi	r24, 0x87	; 135
 9cc:	18 f0       	brcs	.+6      	; 0x9d4 <getColor+0x12>
 9ce:	80 e8       	ldi	r24, 0x80	; 128
 9d0:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <colorMode>
        colorMode++;
 9d4:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <colorMode>
 9d8:	ef 5f       	subi	r30, 0xFF	; 255
 9da:	e0 93 d0 01 	sts	0x01D0, r30	; 0x8001d0 <colorMode>
        return colorArray[colorMode-128];
 9de:	f0 e0       	ldi	r31, 0x00	; 0
 9e0:	ed 5b       	subi	r30, 0xBD	; 189
 9e2:	fe 4f       	sbci	r31, 0xFE	; 254
 9e4:	80 81       	ld	r24, Z
 9e6:	08 95       	ret
    }else if(colorMode>63){//cycle all
 9e8:	80 34       	cpi	r24, 0x40	; 64
 9ea:	08 f0       	brcs	.+2      	; 0x9ee <getColor+0x2c>
        return RED;
 9ec:	84 e0       	ldi	r24, 0x04	; 4
    }else{//fixed
        return colorMode;
    }
}
 9ee:	08 95       	ret

000009f0 <isInAllowedTime>:
void MsetNightMode(uint8_t i){
    if(i<3)EEPROM_write(EE_NIGHTMODE,i);
}
uint8_t isInAllowedTime(uint8_t h){
 9f0:	cf 93       	push	r28
 9f2:	c8 2f       	mov	r28, r24
    if(EEPROM_read(EE_NIGHTMODE))return (h>=EEPROM_read(EE_ONHOUR) && h<=EEPROM_read(EE_OFFHOUR));
 9f4:	81 e0       	ldi	r24, 0x01	; 1
 9f6:	c8 df       	rcall	.-112    	; 0x988 <EEPROM_read>
 9f8:	88 23       	and	r24, r24
 9fa:	71 f0       	breq	.+28     	; 0xa18 <isInAllowedTime+0x28>
 9fc:	82 e0       	ldi	r24, 0x02	; 2
 9fe:	c4 df       	rcall	.-120    	; 0x988 <EEPROM_read>
 a00:	c8 17       	cp	r28, r24
 a02:	40 f0       	brcs	.+16     	; 0xa14 <isInAllowedTime+0x24>
 a04:	83 e0       	ldi	r24, 0x03	; 3
 a06:	c0 df       	rcall	.-128    	; 0x988 <EEPROM_read>
 a08:	91 e0       	ldi	r25, 0x01	; 1
 a0a:	8c 17       	cp	r24, r28
 a0c:	08 f4       	brcc	.+2      	; 0xa10 <isInAllowedTime+0x20>
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	89 2f       	mov	r24, r25
 a12:	03 c0       	rjmp	.+6      	; 0xa1a <isInAllowedTime+0x2a>
 a14:	80 e0       	ldi	r24, 0x00	; 0
 a16:	01 c0       	rjmp	.+2      	; 0xa1a <isInAllowedTime+0x2a>
    return 1;
 a18:	81 e0       	ldi	r24, 0x01	; 1
}
 a1a:	cf 91       	pop	r28
 a1c:	08 95       	ret

00000a1e <main>:
const Menu* Mcurrent=0;
uint8_t Mindex=0;
Led leds[NBLEDS];

int main(void){    
    ledInit(leds);
 a1e:	81 ed       	ldi	r24, 0xD1	; 209
 a20:	91 e0       	ldi	r25, 0x01	; 1
 a22:	8f dc       	rcall	.-1762   	; 0x342 <ledInit>
    DDRA&=~(BTNINTERNAL|BTNOK);
 a24:	8a b3       	in	r24, 0x1a	; 26
 a26:	8f 75       	andi	r24, 0x5F	; 95
 a28:	8a bb       	out	0x1a, r24	; 26
    DDRB&=~BTNSELECT;
 a2a:	ba 98       	cbi	0x17, 2	; 23
    PORTA|=(BTNINTERNAL|BTNOK);
 a2c:	8b b3       	in	r24, 0x1b	; 27
 a2e:	80 6a       	ori	r24, 0xA0	; 160
 a30:	8b bb       	out	0x1b, r24	; 27
    PORTB|=BTNSELECT;
 a32:	c2 9a       	sbi	0x18, 2	; 24
    TIMSK1|=(1<<TOIE1);//|(1<<OCIE1B);
 a34:	60 9a       	sbi	0x0c, 0	; 12
   // OCR1B=32768;
    TIMSK0|=(1<<TOIE0);
 a36:	89 b7       	in	r24, 0x39	; 57
 a38:	81 60       	ori	r24, 0x01	; 1
 a3a:	89 bf       	out	0x39, r24	; 57
    
    sendData(0b11111100001111111111);//white
 a3c:	6f ef       	ldi	r22, 0xFF	; 255
 a3e:	73 ec       	ldi	r23, 0xC3	; 195
 a40:	8f e0       	ldi	r24, 0x0F	; 15
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	0a db       	rcall	.-2540   	; 0x5a <sendData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a46:	2f ef       	ldi	r18, 0xFF	; 255
 a48:	89 e6       	ldi	r24, 0x69	; 105
 a4a:	98 e1       	ldi	r25, 0x18	; 24
 a4c:	21 50       	subi	r18, 0x01	; 1
 a4e:	80 40       	sbci	r24, 0x00	; 0
 a50:	90 40       	sbci	r25, 0x00	; 0
 a52:	e1 f7       	brne	.-8      	; 0xa4c <main+0x2e>
 a54:	00 c0       	rjmp	.+0      	; 0xa56 <main+0x38>
 a56:	00 00       	nop
    _delay_ms(500);
    sendData(0b11000000001111111111);//green
 a58:	6f ef       	ldi	r22, 0xFF	; 255
 a5a:	73 e0       	ldi	r23, 0x03	; 3
 a5c:	8c e0       	ldi	r24, 0x0C	; 12
 a5e:	90 e0       	ldi	r25, 0x00	; 0
 a60:	fc da       	rcall	.-2568   	; 0x5a <sendData>
 a62:	2f ef       	ldi	r18, 0xFF	; 255
 a64:	89 e6       	ldi	r24, 0x69	; 105
 a66:	98 e1       	ldi	r25, 0x18	; 24
 a68:	21 50       	subi	r18, 0x01	; 1
 a6a:	80 40       	sbci	r24, 0x00	; 0
 a6c:	90 40       	sbci	r25, 0x00	; 0
 a6e:	e1 f7       	brne	.-8      	; 0xa68 <main+0x4a>
 a70:	00 c0       	rjmp	.+0      	; 0xa72 <main+0x54>
 a72:	00 00       	nop
    _delay_ms(500);
    sendData(0b00001100001111111111);//red
 a74:	6f ef       	ldi	r22, 0xFF	; 255
 a76:	73 ec       	ldi	r23, 0xC3	; 195
 a78:	80 e0       	ldi	r24, 0x00	; 0
 a7a:	90 e0       	ldi	r25, 0x00	; 0
 a7c:	ee da       	rcall	.-2596   	; 0x5a <sendData>
 a7e:	2f ef       	ldi	r18, 0xFF	; 255
 a80:	89 e6       	ldi	r24, 0x69	; 105
 a82:	98 e1       	ldi	r25, 0x18	; 24
 a84:	21 50       	subi	r18, 0x01	; 1
 a86:	80 40       	sbci	r24, 0x00	; 0
 a88:	90 40       	sbci	r25, 0x00	; 0
 a8a:	e1 f7       	brne	.-8      	; 0xa84 <main+0x66>
 a8c:	00 c0       	rjmp	.+0      	; 0xa8e <main+0x70>
 a8e:	00 00       	nop
    _delay_ms(500);
    sendData(0b00110000001111111111);//blue
 a90:	6f ef       	ldi	r22, 0xFF	; 255
 a92:	73 e0       	ldi	r23, 0x03	; 3
 a94:	83 e0       	ldi	r24, 0x03	; 3
 a96:	90 e0       	ldi	r25, 0x00	; 0
 a98:	e0 da       	rcall	.-2624   	; 0x5a <sendData>
 a9a:	2f ef       	ldi	r18, 0xFF	; 255
 a9c:	89 e6       	ldi	r24, 0x69	; 105
 a9e:	98 e1       	ldi	r25, 0x18	; 24
 aa0:	21 50       	subi	r18, 0x01	; 1
 aa2:	80 40       	sbci	r24, 0x00	; 0
 aa4:	90 40       	sbci	r25, 0x00	; 0
 aa6:	e1 f7       	brne	.-8      	; 0xaa0 <main+0x82>
 aa8:	00 c0       	rjmp	.+0      	; 0xaaa <main+0x8c>
 aaa:	00 00       	nop
    _delay_ms(500);
    sendData(0b11110000001111111111);//cyan
 aac:	6f ef       	ldi	r22, 0xFF	; 255
 aae:	73 e0       	ldi	r23, 0x03	; 3
 ab0:	8f e0       	ldi	r24, 0x0F	; 15
 ab2:	90 e0       	ldi	r25, 0x00	; 0
 ab4:	d2 da       	rcall	.-2652   	; 0x5a <sendData>
 ab6:	2f ef       	ldi	r18, 0xFF	; 255
 ab8:	89 e6       	ldi	r24, 0x69	; 105
 aba:	98 e1       	ldi	r25, 0x18	; 24
 abc:	21 50       	subi	r18, 0x01	; 1
 abe:	80 40       	sbci	r24, 0x00	; 0
 ac0:	90 40       	sbci	r25, 0x00	; 0
 ac2:	e1 f7       	brne	.-8      	; 0xabc <main+0x9e>
 ac4:	00 c0       	rjmp	.+0      	; 0xac6 <main+0xa8>
 ac6:	00 00       	nop
    _delay_ms(500);
    sendData(0b00111100001111111111);//magenta
 ac8:	6f ef       	ldi	r22, 0xFF	; 255
 aca:	73 ec       	ldi	r23, 0xC3	; 195
 acc:	83 e0       	ldi	r24, 0x03	; 3
 ace:	90 e0       	ldi	r25, 0x00	; 0
 ad0:	c4 da       	rcall	.-2680   	; 0x5a <sendData>
 ad2:	2f ef       	ldi	r18, 0xFF	; 255
 ad4:	89 e6       	ldi	r24, 0x69	; 105
 ad6:	98 e1       	ldi	r25, 0x18	; 24
 ad8:	21 50       	subi	r18, 0x01	; 1
 ada:	80 40       	sbci	r24, 0x00	; 0
 adc:	90 40       	sbci	r25, 0x00	; 0
 ade:	e1 f7       	brne	.-8      	; 0xad8 <main+0xba>
 ae0:	00 c0       	rjmp	.+0      	; 0xae2 <main+0xc4>
 ae2:	00 00       	nop
    _delay_ms(500);
    sendData(0b11001100001111111111);//yellow
 ae4:	6f ef       	ldi	r22, 0xFF	; 255
 ae6:	73 ec       	ldi	r23, 0xC3	; 195
 ae8:	8c e0       	ldi	r24, 0x0C	; 12
 aea:	90 e0       	ldi	r25, 0x00	; 0
 aec:	b6 da       	rcall	.-2708   	; 0x5a <sendData>
 aee:	2f ef       	ldi	r18, 0xFF	; 255
 af0:	89 e6       	ldi	r24, 0x69	; 105
 af2:	98 e1       	ldi	r25, 0x18	; 24
 af4:	21 50       	subi	r18, 0x01	; 1
 af6:	80 40       	sbci	r24, 0x00	; 0
 af8:	90 40       	sbci	r25, 0x00	; 0
 afa:	e1 f7       	brne	.-8      	; 0xaf4 <main+0xd6>
 afc:	00 c0       	rjmp	.+0      	; 0xafe <main+0xe0>
 afe:	00 00       	nop
    _delay_ms(500);
    
    //no sooner to let inputs debounce
    GIMSK|=(1<<PCIE1)|(1<<PCIE0);
 b00:	8b b7       	in	r24, 0x3b	; 59
 b02:	80 63       	ori	r24, 0x30	; 48
 b04:	8b bf       	out	0x3b, r24	; 59
    PCMSK0|=(1<<PCINT7)|(1<<PCINT5);
 b06:	82 b3       	in	r24, 0x12	; 18
 b08:	80 6a       	ori	r24, 0xA0	; 160
 b0a:	82 bb       	out	0x12, r24	; 18
    PCMSK1|=(1<<PCINT10);
 b0c:	80 b5       	in	r24, 0x20	; 32
 b0e:	84 60       	ori	r24, 0x04	; 4
 b10:	80 bd       	out	0x20, r24	; 32
    sei();
 b12:	78 94       	sei
    
    //update time & UI timer
    #ifdef DELLONG
    TCCR1B|=(1<<CS12)|(1<<CS10);
 b14:	8e b5       	in	r24, 0x2e	; 46
 b16:	85 60       	ori	r24, 0x05	; 5
 b18:	8e bd       	out	0x2e, r24	; 46
    #else
    TCCR1B|=(1<<CS12);//|(1<<CS10);
    #endif
    
    //led mux timer
    TCCR0B|=(1<<CS01)|(1<<CS00);
 b1a:	83 b7       	in	r24, 0x33	; 51
 b1c:	83 60       	ori	r24, 0x03	; 3
 b1e:	83 bf       	out	0x33, r24	; 51
    
    Minit();
 b20:	3b df       	rcall	.-394    	; 0x998 <Minit>
    // //RTC_setTime(currentTime,6,18);
    RTC_readTime(&currentTime);
 b22:	8b e0       	ldi	r24, 0x0B	; 11
 b24:	92 e0       	ldi	r25, 0x02	; 2
 b26:	84 de       	rcall	.-760    	; 0x830 <RTC_readTime>
 b28:	ff cf       	rjmp	.-2      	; 0xb28 <main+0x10a>

00000b2a <__mulqi3>:
 b2a:	00 24       	eor	r0, r0

00000b2c <__mulqi3_loop>:
 b2c:	80 fd       	sbrc	r24, 0
 b2e:	06 0e       	add	r0, r22
 b30:	66 0f       	add	r22, r22
 b32:	11 f0       	breq	.+4      	; 0xb38 <__mulqi3_exit>
 b34:	86 95       	lsr	r24
 b36:	d1 f7       	brne	.-12     	; 0xb2c <__mulqi3_loop>

00000b38 <__mulqi3_exit>:
 b38:	80 2d       	mov	r24, r0
 b3a:	08 95       	ret

00000b3c <__mulhi3>:
 b3c:	00 24       	eor	r0, r0
 b3e:	55 27       	eor	r21, r21
 b40:	04 c0       	rjmp	.+8      	; 0xb4a <__mulhi3+0xe>
 b42:	08 0e       	add	r0, r24
 b44:	59 1f       	adc	r21, r25
 b46:	88 0f       	add	r24, r24
 b48:	99 1f       	adc	r25, r25
 b4a:	00 97       	sbiw	r24, 0x00	; 0
 b4c:	29 f0       	breq	.+10     	; 0xb58 <__mulhi3+0x1c>
 b4e:	76 95       	lsr	r23
 b50:	67 95       	ror	r22
 b52:	b8 f3       	brcs	.-18     	; 0xb42 <__mulhi3+0x6>
 b54:	71 05       	cpc	r23, r1
 b56:	b9 f7       	brne	.-18     	; 0xb46 <__mulhi3+0xa>
 b58:	80 2d       	mov	r24, r0
 b5a:	95 2f       	mov	r25, r21
 b5c:	08 95       	ret

00000b5e <__udivmodqi4>:
 b5e:	99 1b       	sub	r25, r25
 b60:	79 e0       	ldi	r23, 0x09	; 9
 b62:	04 c0       	rjmp	.+8      	; 0xb6c <__udivmodqi4_ep>

00000b64 <__udivmodqi4_loop>:
 b64:	99 1f       	adc	r25, r25
 b66:	96 17       	cp	r25, r22
 b68:	08 f0       	brcs	.+2      	; 0xb6c <__udivmodqi4_ep>
 b6a:	96 1b       	sub	r25, r22

00000b6c <__udivmodqi4_ep>:
 b6c:	88 1f       	adc	r24, r24
 b6e:	7a 95       	dec	r23
 b70:	c9 f7       	brne	.-14     	; 0xb64 <__udivmodqi4_loop>
 b72:	80 95       	com	r24
 b74:	08 95       	ret

00000b76 <_exit>:
 b76:	f8 94       	cli

00000b78 <__stop_program>:
 b78:	ff cf       	rjmp	.-2      	; 0xb78 <__stop_program>
