
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000de6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000168  00800060  00000de6  00000e7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000046  008001c8  008001c8  00000fe2  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000fe2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ff4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002fab  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000de7  00000000  00000000  00004063  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000daf  00000000  00000000  00004e4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005d4  00000000  00000000  00005bfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a1  00000000  00000000  000061d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c60  00000000  00000000  00006871  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000084d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	66 c0       	rjmp	.+204    	; 0xd2 <__vector_2>
   6:	32 c0       	rjmp	.+100    	; 0x6c <__vector_3>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	ae c0       	rjmp	.+348    	; 0x16e <__vector_8>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	81 c1       	rjmp	.+770    	; 0x31a <__vector_11>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	11 e0       	ldi	r17, 0x01	; 1
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e6 ee       	ldi	r30, 0xE6	; 230
  36:	fd e0       	ldi	r31, 0x0D	; 13
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a8 3c       	cpi	r26, 0xC8	; 200
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	22 e0       	ldi	r18, 0x02	; 2
  46:	a8 ec       	ldi	r26, 0xC8	; 200
  48:	b1 e0       	ldi	r27, 0x01	; 1
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	ae 30       	cpi	r26, 0x0E	; 14
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	f3 d5       	rcall	.+3046   	; 0xc3c <main>
  56:	c5 c6       	rjmp	.+3466   	; 0xde2 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <sendData>:

uint8_t ledr=0;
uint8_t ledb=0;

void sendData(uint32_t data){
    if(ledr)data|=LEDR;
  5a:	20 91 cd 01 	lds	r18, 0x01CD	; 0x8001cd <ledr>
  5e:	21 11       	cpse	r18, r1
  60:	78 60       	ori	r23, 0x08	; 8
    if(ledb)data|=LEDB;
  62:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <ledb>
  66:	21 11       	cpse	r18, r1
  68:	74 60       	ori	r23, 0x04	; 4
    sendRawData(data);
  6a:	bb c2       	rjmp	.+1398   	; 0x5e2 <sendRawData>

0000006c <__vector_3>:
    while(1){
    }
    return(0);
    
}
ISR( PCINT1_vect){
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	3f 93       	push	r19
  7a:	4f 93       	push	r20
  7c:	5f 93       	push	r21
  7e:	6f 93       	push	r22
  80:	7f 93       	push	r23
  82:	8f 93       	push	r24
  84:	9f 93       	push	r25
  86:	af 93       	push	r26
  88:	bf 93       	push	r27
  8a:	ef 93       	push	r30
  8c:	ff 93       	push	r31
    if(PINB&BTNSELECT && Mcurrent){
  8e:	b2 9b       	sbis	0x16, 2	; 22
  90:	0f c0       	rjmp	.+30     	; 0xb0 <__vector_3+0x44>
  92:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <Mcurrent>
  96:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <Mcurrent+0x1>
  9a:	00 97       	sbiw	r24, 0x00	; 0
  9c:	49 f0       	breq	.+18     	; 0xb0 <__vector_3+0x44>
        Mindex=findNextEntry(Mcurrent,Mindex);
  9e:	60 91 c8 01 	lds	r22, 0x01C8	; 0x8001c8 <__data_end>
  a2:	ea d4       	rcall	.+2516   	; 0xa78 <findNextEntry>
  a4:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <__data_end>
        TCNT1=65534;//get straight to led update
  a8:	8e ef       	ldi	r24, 0xFE	; 254
  aa:	9f ef       	ldi	r25, 0xFF	; 255
  ac:	9d bd       	out	0x2d, r25	; 45
  ae:	8c bd       	out	0x2c, r24	; 44
    }
}
  b0:	ff 91       	pop	r31
  b2:	ef 91       	pop	r30
  b4:	bf 91       	pop	r27
  b6:	af 91       	pop	r26
  b8:	9f 91       	pop	r25
  ba:	8f 91       	pop	r24
  bc:	7f 91       	pop	r23
  be:	6f 91       	pop	r22
  c0:	5f 91       	pop	r21
  c2:	4f 91       	pop	r20
  c4:	3f 91       	pop	r19
  c6:	2f 91       	pop	r18
  c8:	0f 90       	pop	r0
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	0f 90       	pop	r0
  ce:	1f 90       	pop	r1
  d0:	18 95       	reti

000000d2 <__vector_2>:
ISR( PCINT0_vect){
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	2f 93       	push	r18
  de:	3f 93       	push	r19
  e0:	4f 93       	push	r20
  e2:	5f 93       	push	r21
  e4:	6f 93       	push	r22
  e6:	7f 93       	push	r23
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
  ec:	af 93       	push	r26
  ee:	bf 93       	push	r27
  f0:	ef 93       	push	r30
  f2:	ff 93       	push	r31
    if(PINA&BTNOK){
  f4:	cf 9b       	sbis	0x19, 7	; 25
  f6:	29 c0       	rjmp	.+82     	; 0x14a <__vector_2+0x78>
        if(!Mcurrent){
  f8:	e0 91 c9 01 	lds	r30, 0x01C9	; 0x8001c9 <Mcurrent>
  fc:	f0 91 ca 01 	lds	r31, 0x01CA	; 0x8001ca <Mcurrent+0x1>
 100:	30 97       	sbiw	r30, 0x00	; 0
 102:	39 f4       	brne	.+14     	; 0x112 <__vector_2+0x40>
            Mcurrent=&M0main;//if not in menu mode
 104:	85 ea       	ldi	r24, 0xA5	; 165
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <Mcurrent+0x1>
 10c:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <Mcurrent>
 110:	18 c0       	rjmp	.+48     	; 0x142 <__vector_2+0x70>
        }else{//enter menu and execute
            if(Mcurrent->fptr!=0)Mcurrent->fptr(Mindex);//check if function is associated and selected value is not a navigation move
 112:	01 80       	ldd	r0, Z+1	; 0x01
 114:	f2 81       	ldd	r31, Z+2	; 0x02
 116:	e0 2d       	mov	r30, r0
 118:	30 97       	sbiw	r30, 0x00	; 0
 11a:	19 f0       	breq	.+6      	; 0x122 <__vector_2+0x50>
 11c:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <__data_end>
 120:	09 95       	icall
            Mcurrent=getSubMenu(Mcurrent,Mindex);//get new menu
 122:	60 91 c8 01 	lds	r22, 0x01C8	; 0x8001c8 <__data_end>
 126:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <Mcurrent>
 12a:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <Mcurrent+0x1>
 12e:	b4 d4       	rcall	.+2408   	; 0xa98 <getSubMenu>
 130:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <Mcurrent+0x1>
 134:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <Mcurrent>
            Mindex=0;
 138:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <__data_end>
            clearLeds(leds);
 13c:	8f ec       	ldi	r24, 0xCF	; 207
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	a9 d1       	rcall	.+850    	; 0x494 <clearLeds>
        }
        TCNT1=65534;//get straight to led update
 142:	8e ef       	ldi	r24, 0xFE	; 254
 144:	9f ef       	ldi	r25, 0xFF	; 255
 146:	9d bd       	out	0x2d, r25	; 45
 148:	8c bd       	out	0x2c, r24	; 44
    }
    if(PINA&BTNINTERNAL){//unused secret button
 14a:	89 b3       	in	r24, 0x19	; 25
    }
}/*
 14c:	ff 91       	pop	r31
 14e:	ef 91       	pop	r30
 150:	bf 91       	pop	r27
 152:	af 91       	pop	r26
 154:	9f 91       	pop	r25
 156:	8f 91       	pop	r24
 158:	7f 91       	pop	r23
 15a:	6f 91       	pop	r22
 15c:	5f 91       	pop	r21
 15e:	4f 91       	pop	r20
 160:	3f 91       	pop	r19
 162:	2f 91       	pop	r18
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <__vector_8>:
ISR( TIM1_COMPB_vect){
}*/
ISR( TIM1_OVF_vect ){
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	2f 93       	push	r18
 17a:	3f 93       	push	r19
 17c:	4f 93       	push	r20
 17e:	5f 93       	push	r21
 180:	6f 93       	push	r22
 182:	7f 93       	push	r23
 184:	8f 93       	push	r24
 186:	9f 93       	push	r25
 188:	af 93       	push	r26
 18a:	bf 93       	push	r27
 18c:	cf 93       	push	r28
 18e:	ef 93       	push	r30
 190:	ff 93       	push	r31
    if(!Mcurrent){//if in normal display mode
 192:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <Mcurrent>
 196:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <Mcurrent+0x1>
 19a:	89 2b       	or	r24, r25
 19c:	09 f0       	breq	.+2      	; 0x1a0 <__vector_8+0x32>
 19e:	8c c0       	rjmp	.+280    	; 0x2b8 <__stack+0x59>
        uint8_t m=getMode();
 1a0:	01 d5       	rcall	.+2562   	; 0xba4 <getMode>
 1a2:	c8 2f       	mov	r28, r24
        RTC_readTime(&currentTime);
 1a4:	89 e0       	ldi	r24, 0x09	; 9
 1a6:	92 e0       	ldi	r25, 0x02	; 2
 1a8:	af d3       	rcall	.+1886   	; 0x908 <RTC_readTime>
        if(isInAllowedTime(currentTime.hour)){
 1aa:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <currentTime>
 1ae:	30 d5       	rcall	.+2656   	; 0xc10 <isInAllowedTime>
 1b0:	88 23       	and	r24, r24
 1b2:	09 f4       	brne	.+2      	; 0x1b6 <__vector_8+0x48>
 1b4:	7d c0       	rjmp	.+250    	; 0x2b0 <__stack+0x51>
            if(m<2){
 1b6:	c2 30       	cpi	r28, 0x02	; 2
 1b8:	08 f4       	brcc	.+2      	; 0x1bc <__vector_8+0x4e>
 1ba:	6c c0       	rjmp	.+216    	; 0x294 <__stack+0x35>
                setLeds(currentTime,leds);
            }else if(m<4){
 1bc:	c4 30       	cpi	r28, 0x04	; 4
 1be:	28 f4       	brcc	.+10     	; 0x1ca <__vector_8+0x5c>
                setLedsNb(RTC_readTemp(),leds);
 1c0:	8d d3       	rcall	.+1818   	; 0x8dc <RTC_readTemp>
 1c2:	6f ec       	ldi	r22, 0xCF	; 207
 1c4:	71 e0       	ldi	r23, 0x01	; 1
 1c6:	d5 d1       	rcall	.+938    	; 0x572 <setLedsNb>
 1c8:	96 c0       	rjmp	.+300    	; 0x2f6 <__stack+0x97>
            }else if(m==4){
 1ca:	c4 30       	cpi	r28, 0x04	; 4
 1cc:	09 f0       	breq	.+2      	; 0x1d0 <__vector_8+0x62>
 1ce:	93 c0       	rjmp	.+294    	; 0x2f6 <__stack+0x97>
                sendData(0b11111100001111111111);//white
 1d0:	6f ef       	ldi	r22, 0xFF	; 255
 1d2:	73 ec       	ldi	r23, 0xC3	; 195
 1d4:	8f e0       	ldi	r24, 0x0F	; 15
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	40 df       	rcall	.-384    	; 0x5a <sendData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1da:	2f ef       	ldi	r18, 0xFF	; 255
 1dc:	89 e6       	ldi	r24, 0x69	; 105
 1de:	98 e1       	ldi	r25, 0x18	; 24
 1e0:	21 50       	subi	r18, 0x01	; 1
 1e2:	80 40       	sbci	r24, 0x00	; 0
 1e4:	90 40       	sbci	r25, 0x00	; 0
 1e6:	e1 f7       	brne	.-8      	; 0x1e0 <__vector_8+0x72>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <__vector_8+0x7c>
 1ea:	00 00       	nop
                _delay_ms(500);
                sendData(0b11000000001111111111);//green
 1ec:	6f ef       	ldi	r22, 0xFF	; 255
 1ee:	73 e0       	ldi	r23, 0x03	; 3
 1f0:	8c e0       	ldi	r24, 0x0C	; 12
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	32 df       	rcall	.-412    	; 0x5a <sendData>
 1f6:	2f ef       	ldi	r18, 0xFF	; 255
 1f8:	89 e6       	ldi	r24, 0x69	; 105
 1fa:	98 e1       	ldi	r25, 0x18	; 24
 1fc:	21 50       	subi	r18, 0x01	; 1
 1fe:	80 40       	sbci	r24, 0x00	; 0
 200:	90 40       	sbci	r25, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <__vector_8+0x8e>
 204:	00 c0       	rjmp	.+0      	; 0x206 <__vector_8+0x98>
 206:	00 00       	nop
                _delay_ms(500);
                sendData(0b00001100001111111111);//red
 208:	6f ef       	ldi	r22, 0xFF	; 255
 20a:	73 ec       	ldi	r23, 0xC3	; 195
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	24 df       	rcall	.-440    	; 0x5a <sendData>
 212:	2f ef       	ldi	r18, 0xFF	; 255
 214:	89 e6       	ldi	r24, 0x69	; 105
 216:	98 e1       	ldi	r25, 0x18	; 24
 218:	21 50       	subi	r18, 0x01	; 1
 21a:	80 40       	sbci	r24, 0x00	; 0
 21c:	90 40       	sbci	r25, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <__vector_8+0xaa>
 220:	00 c0       	rjmp	.+0      	; 0x222 <__vector_8+0xb4>
 222:	00 00       	nop
                _delay_ms(500);
                sendData(0b00110000001111111111);//blue
 224:	6f ef       	ldi	r22, 0xFF	; 255
 226:	73 e0       	ldi	r23, 0x03	; 3
 228:	83 e0       	ldi	r24, 0x03	; 3
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	16 df       	rcall	.-468    	; 0x5a <sendData>
 22e:	2f ef       	ldi	r18, 0xFF	; 255
 230:	89 e6       	ldi	r24, 0x69	; 105
 232:	98 e1       	ldi	r25, 0x18	; 24
 234:	21 50       	subi	r18, 0x01	; 1
 236:	80 40       	sbci	r24, 0x00	; 0
 238:	90 40       	sbci	r25, 0x00	; 0
 23a:	e1 f7       	brne	.-8      	; 0x234 <__vector_8+0xc6>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <__vector_8+0xd0>
 23e:	00 00       	nop
                _delay_ms(500);
                sendData(0b11110000001111111111);//cyan
 240:	6f ef       	ldi	r22, 0xFF	; 255
 242:	73 e0       	ldi	r23, 0x03	; 3
 244:	8f e0       	ldi	r24, 0x0F	; 15
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	08 df       	rcall	.-496    	; 0x5a <sendData>
 24a:	2f ef       	ldi	r18, 0xFF	; 255
 24c:	89 e6       	ldi	r24, 0x69	; 105
 24e:	98 e1       	ldi	r25, 0x18	; 24
 250:	21 50       	subi	r18, 0x01	; 1
 252:	80 40       	sbci	r24, 0x00	; 0
 254:	90 40       	sbci	r25, 0x00	; 0
 256:	e1 f7       	brne	.-8      	; 0x250 <__vector_8+0xe2>
 258:	00 c0       	rjmp	.+0      	; 0x25a <__vector_8+0xec>
 25a:	00 00       	nop
                _delay_ms(500);
                sendData(0b00111100001111111111);//magenta
 25c:	6f ef       	ldi	r22, 0xFF	; 255
 25e:	73 ec       	ldi	r23, 0xC3	; 195
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	fa de       	rcall	.-524    	; 0x5a <sendData>
 266:	2f ef       	ldi	r18, 0xFF	; 255
 268:	89 e6       	ldi	r24, 0x69	; 105
 26a:	98 e1       	ldi	r25, 0x18	; 24
 26c:	21 50       	subi	r18, 0x01	; 1
 26e:	80 40       	sbci	r24, 0x00	; 0
 270:	90 40       	sbci	r25, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <__stack+0xd>
 274:	00 c0       	rjmp	.+0      	; 0x276 <__stack+0x17>
 276:	00 00       	nop
                _delay_ms(500);
                sendData(0b11001100001111111111);//yellow
 278:	6f ef       	ldi	r22, 0xFF	; 255
 27a:	73 ec       	ldi	r23, 0xC3	; 195
 27c:	8c e0       	ldi	r24, 0x0C	; 12
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	ec de       	rcall	.-552    	; 0x5a <sendData>
 282:	2f ef       	ldi	r18, 0xFF	; 255
 284:	89 e6       	ldi	r24, 0x69	; 105
 286:	98 e1       	ldi	r25, 0x18	; 24
 288:	21 50       	subi	r18, 0x01	; 1
 28a:	80 40       	sbci	r24, 0x00	; 0
 28c:	90 40       	sbci	r25, 0x00	; 0
 28e:	e1 f7       	brne	.-8      	; 0x288 <__stack+0x29>
 290:	00 c0       	rjmp	.+0      	; 0x292 <__stack+0x33>
 292:	00 00       	nop
                _delay_ms(500);
                setLeds(currentTime,leds);
 294:	2f ec       	ldi	r18, 0xCF	; 207
 296:	31 e0       	ldi	r19, 0x01	; 1
 298:	40 91 09 02 	lds	r20, 0x0209	; 0x800209 <currentTime>
 29c:	50 91 0a 02 	lds	r21, 0x020A	; 0x80020a <currentTime+0x1>
 2a0:	60 91 0b 02 	lds	r22, 0x020B	; 0x80020b <currentTime+0x2>
 2a4:	70 91 0c 02 	lds	r23, 0x020C	; 0x80020c <currentTime+0x3>
 2a8:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <currentTime+0x4>
 2ac:	fd d0       	rcall	.+506    	; 0x4a8 <setLeds>
 2ae:	23 c0       	rjmp	.+70     	; 0x2f6 <__stack+0x97>
            }
        }else{
            clearLeds(leds);
 2b0:	8f ec       	ldi	r24, 0xCF	; 207
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	ef d0       	rcall	.+478    	; 0x494 <clearLeds>
 2b6:	1f c0       	rjmp	.+62     	; 0x2f6 <__stack+0x97>
        }
        //ledr=!ledr;
    }else{//menu settings mode
        clearLeds(leds);
 2b8:	8f ec       	ldi	r24, 0xCF	; 207
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	eb d0       	rcall	.+470    	; 0x494 <clearLeds>
        ledOn(&leds[Mcurrent->sub[Mindex].led],colorArray[Mcurrent->nb_optn>>4]);
 2be:	a0 91 c9 01 	lds	r26, 0x01C9	; 0x8001c9 <Mcurrent>
 2c2:	b0 91 ca 01 	lds	r27, 0x01CA	; 0x8001ca <Mcurrent+0x1>
 2c6:	ec 91       	ld	r30, X
 2c8:	e2 95       	swap	r30
 2ca:	ef 70       	andi	r30, 0x0F	; 15
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	ef 59       	subi	r30, 0x9F	; 159
 2d0:	ff 4f       	sbci	r31, 0xFF	; 255
 2d2:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <__data_end>
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	01 96       	adiw	r24, 0x01	; 1
 2da:	63 e0       	ldi	r22, 0x03	; 3
 2dc:	70 e0       	ldi	r23, 0x00	; 0
 2de:	3d d5       	rcall	.+2682   	; 0xd5a <__mulhi3>
 2e0:	a8 0f       	add	r26, r24
 2e2:	b9 1f       	adc	r27, r25
 2e4:	8c 91       	ld	r24, X
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	63 e0       	ldi	r22, 0x03	; 3
 2ea:	70 e0       	ldi	r23, 0x00	; 0
 2ec:	36 d5       	rcall	.+2668   	; 0xd5a <__mulhi3>
 2ee:	60 81       	ld	r22, Z
 2f0:	81 53       	subi	r24, 0x31	; 49
 2f2:	9e 4f       	sbci	r25, 0xFE	; 254
 2f4:	c9 d0       	rcall	.+402    	; 0x488 <ledOn>
    }
    
}
 2f6:	ff 91       	pop	r31
 2f8:	ef 91       	pop	r30
 2fa:	cf 91       	pop	r28
 2fc:	bf 91       	pop	r27
 2fe:	af 91       	pop	r26
 300:	9f 91       	pop	r25
 302:	8f 91       	pop	r24
 304:	7f 91       	pop	r23
 306:	6f 91       	pop	r22
 308:	5f 91       	pop	r21
 30a:	4f 91       	pop	r20
 30c:	3f 91       	pop	r19
 30e:	2f 91       	pop	r18
 310:	0f 90       	pop	r0
 312:	0f be       	out	0x3f, r0	; 63
 314:	0f 90       	pop	r0
 316:	1f 90       	pop	r1
 318:	18 95       	reti

0000031a <__vector_11>:
ISR( TIM0_OVF_vect ){//mux for each color, row 0 and 1
 31a:	1f 92       	push	r1
 31c:	0f 92       	push	r0
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	0f 92       	push	r0
 322:	11 24       	eor	r1, r1
 324:	2f 93       	push	r18
 326:	3f 93       	push	r19
 328:	4f 93       	push	r20
 32a:	5f 93       	push	r21
 32c:	6f 93       	push	r22
 32e:	7f 93       	push	r23
 330:	8f 93       	push	r24
 332:	9f 93       	push	r25
 334:	af 93       	push	r26
 336:	bf 93       	push	r27
 338:	ef 93       	push	r30
 33a:	ff 93       	push	r31
    switch(state){
 33c:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <state>
 340:	84 30       	cpi	r24, 0x04	; 4
 342:	01 f1       	breq	.+64     	; 0x384 <__vector_11+0x6a>
 344:	58 f4       	brcc	.+22     	; 0x35c <__vector_11+0x42>
 346:	88 23       	and	r24, r24
 348:	b1 f0       	breq	.+44     	; 0x376 <__vector_11+0x5c>
 34a:	82 30       	cpi	r24, 0x02	; 2
 34c:	81 f5       	brne	.+96     	; 0x3ae <__vector_11+0x94>
        case 0:
            sendData(R2 | getDataByColor(RED,0,leds));
            break;
        case 2:
            sendData(R1 | getDataByColor(RED,1,leds));
 34e:	4f ec       	ldi	r20, 0xCF	; 207
 350:	51 e0       	ldi	r21, 0x01	; 1
 352:	61 e0       	ldi	r22, 0x01	; 1
 354:	84 e0       	ldi	r24, 0x04	; 4
 356:	6c d0       	rcall	.+216    	; 0x430 <getDataByColor>
 358:	70 68       	ori	r23, 0x80	; 128
 35a:	2c c0       	rjmp	.+88     	; 0x3b4 <__vector_11+0x9a>
        ledOn(&leds[Mcurrent->sub[Mindex].led],colorArray[Mcurrent->nb_optn>>4]);
    }
    
}
ISR( TIM0_OVF_vect ){//mux for each color, row 0 and 1
    switch(state){
 35c:	88 30       	cpi	r24, 0x08	; 8
 35e:	c9 f0       	breq	.+50     	; 0x392 <__vector_11+0x78>
 360:	8a 30       	cpi	r24, 0x0A	; 10
 362:	f1 f0       	breq	.+60     	; 0x3a0 <__vector_11+0x86>
 364:	86 30       	cpi	r24, 0x06	; 6
 366:	19 f5       	brne	.+70     	; 0x3ae <__vector_11+0x94>
            break;
        case 4:
            sendData(G2 | getDataByColor(GREEN,0,leds));
            break;
        case 6:
            sendData(G1 | getDataByColor(GREEN,1,leds));
 368:	4f ec       	ldi	r20, 0xCF	; 207
 36a:	51 e0       	ldi	r21, 0x01	; 1
 36c:	61 e0       	ldi	r22, 0x01	; 1
 36e:	82 e0       	ldi	r24, 0x02	; 2
 370:	5f d0       	rcall	.+190    	; 0x430 <getDataByColor>
 372:	88 60       	ori	r24, 0x08	; 8
 374:	1f c0       	rjmp	.+62     	; 0x3b4 <__vector_11+0x9a>
    
}
ISR( TIM0_OVF_vect ){//mux for each color, row 0 and 1
    switch(state){
        case 0:
            sendData(R2 | getDataByColor(RED,0,leds));
 376:	4f ec       	ldi	r20, 0xCF	; 207
 378:	51 e0       	ldi	r21, 0x01	; 1
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	84 e0       	ldi	r24, 0x04	; 4
 37e:	58 d0       	rcall	.+176    	; 0x430 <getDataByColor>
 380:	70 64       	ori	r23, 0x40	; 64
 382:	18 c0       	rjmp	.+48     	; 0x3b4 <__vector_11+0x9a>
            break;
        case 2:
            sendData(R1 | getDataByColor(RED,1,leds));
            break;
        case 4:
            sendData(G2 | getDataByColor(GREEN,0,leds));
 384:	4f ec       	ldi	r20, 0xCF	; 207
 386:	51 e0       	ldi	r21, 0x01	; 1
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	82 e0       	ldi	r24, 0x02	; 2
 38c:	51 d0       	rcall	.+162    	; 0x430 <getDataByColor>
 38e:	84 60       	ori	r24, 0x04	; 4
 390:	11 c0       	rjmp	.+34     	; 0x3b4 <__vector_11+0x9a>
            break;
        case 6:
            sendData(G1 | getDataByColor(GREEN,1,leds));
            break;
        case 8:
            sendData(B2 | getDataByColor(BLUE,0,leds));
 392:	4f ec       	ldi	r20, 0xCF	; 207
 394:	51 e0       	ldi	r21, 0x01	; 1
 396:	60 e0       	ldi	r22, 0x00	; 0
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	4a d0       	rcall	.+148    	; 0x430 <getDataByColor>
 39c:	81 60       	ori	r24, 0x01	; 1
 39e:	0a c0       	rjmp	.+20     	; 0x3b4 <__vector_11+0x9a>
            break;
        case 10:
            sendData(B1 | getDataByColor(BLUE,1,leds));
 3a0:	4f ec       	ldi	r20, 0xCF	; 207
 3a2:	51 e0       	ldi	r21, 0x01	; 1
 3a4:	61 e0       	ldi	r22, 0x01	; 1
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	43 d0       	rcall	.+134    	; 0x430 <getDataByColor>
 3aa:	82 60       	ori	r24, 0x02	; 2
 3ac:	03 c0       	rjmp	.+6      	; 0x3b4 <__vector_11+0x9a>
            break;
        default:
            sendData(0x000000);
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	70 e0       	ldi	r23, 0x00	; 0
 3b2:	cb 01       	movw	r24, r22
 3b4:	52 de       	rcall	.-860    	; 0x5a <sendData>
    }
    if(EEPROM_read(EE_NIGHTMODE)!=1)state++;
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	e2 d3       	rcall	.+1988   	; 0xb7e <EEPROM_read>
 3ba:	81 30       	cpi	r24, 0x01	; 1
 3bc:	29 f0       	breq	.+10     	; 0x3c8 <__vector_11+0xae>
 3be:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <state>
 3c2:	8f 5f       	subi	r24, 0xFF	; 255
 3c4:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <state>
    state++;
 3c8:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <state>
 3cc:	8f 5f       	subi	r24, 0xFF	; 255
 3ce:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <state>
    if(state>10)state=0;
 3d2:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <state>
 3d6:	8b 30       	cpi	r24, 0x0B	; 11
 3d8:	10 f0       	brcs	.+4      	; 0x3de <__vector_11+0xc4>
 3da:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <state>
}
 3de:	ff 91       	pop	r31
 3e0:	ef 91       	pop	r30
 3e2:	bf 91       	pop	r27
 3e4:	af 91       	pop	r26
 3e6:	9f 91       	pop	r25
 3e8:	8f 91       	pop	r24
 3ea:	7f 91       	pop	r23
 3ec:	6f 91       	pop	r22
 3ee:	5f 91       	pop	r21
 3f0:	4f 91       	pop	r20
 3f2:	3f 91       	pop	r19
 3f4:	2f 91       	pop	r18
 3f6:	0f 90       	pop	r0
 3f8:	0f be       	out	0x3f, r0	; 63
 3fa:	0f 90       	pop	r0
 3fc:	1f 90       	pop	r1
 3fe:	18 95       	reti

00000400 <ledInit>:

static const uint8_t ledMap[11]={7,8,10,14,0,4,17,2,12,6,16};


void ledInit(Led* leds){
    DDRA |= CLK|DATA|STROBE|LED;
 400:	2a b3       	in	r18, 0x1a	; 26
 402:	2f 60       	ori	r18, 0x0F	; 15
 404:	2a bb       	out	0x1a, r18	; 26
    PORTA &= ~(CLK|DATA|STROBE|LED);
 406:	2b b3       	in	r18, 0x1b	; 27
 408:	20 7f       	andi	r18, 0xF0	; 240
 40a:	2b bb       	out	0x1b, r18	; 27
 40c:	fc 01       	movw	r30, r24
    
    for(uint8_t i=0;i<NBLEDS;i++){
 40e:	90 e0       	ldi	r25, 0x00	; 0
        leds[i].row=i%2;//leds[0]=0, leds[1]=1
 410:	89 2f       	mov	r24, r25
 412:	81 70       	andi	r24, 0x01	; 1
 414:	81 83       	std	Z+1, r24	; 0x01
        if(i<10){
 416:	9a 30       	cpi	r25, 0x0A	; 10
 418:	10 f4       	brcc	.+4      	; 0x41e <ledInit+0x1e>
            leds[i].col=i;//0-9
 41a:	90 83       	st	Z, r25
 41c:	03 c0       	rjmp	.+6      	; 0x424 <ledInit+0x24>
        }else{
            leds[i].col=i-9;//1-9
 41e:	87 ef       	ldi	r24, 0xF7	; 247
 420:	89 0f       	add	r24, r25
 422:	80 83       	st	Z, r24
        }
        leds[i].c=BLACK;
 424:	12 82       	std	Z+2, r1	; 0x02

void ledInit(Led* leds){
    DDRA |= CLK|DATA|STROBE|LED;
    PORTA &= ~(CLK|DATA|STROBE|LED);
    
    for(uint8_t i=0;i<NBLEDS;i++){
 426:	9f 5f       	subi	r25, 0xFF	; 255
 428:	33 96       	adiw	r30, 0x03	; 3
 42a:	93 31       	cpi	r25, 0x13	; 19
 42c:	89 f7       	brne	.-30     	; 0x410 <ledInit+0x10>
        }else{
            leds[i].col=i-9;//1-9
        }
        leds[i].c=BLACK;
    }
}
 42e:	08 95       	ret

00000430 <getDataByColor>:

uint32_t getDataByColor(uint8_t c, uint8_t mode, Led* leds){
 430:	0f 93       	push	r16
 432:	1f 93       	push	r17
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	c8 2f       	mov	r28, r24
 43a:	d6 2f       	mov	r29, r22
 43c:	fa 01       	movw	r30, r20
 43e:	47 5c       	subi	r20, 0xC7	; 199
 440:	5f 4f       	sbci	r21, 0xFF	; 255
    uint32_t data=0x00000000;
 442:	60 e0       	ldi	r22, 0x00	; 0
 444:	70 e0       	ldi	r23, 0x00	; 0
 446:	cb 01       	movw	r24, r22
    for(uint8_t i=0;i<NBLEDS;i++){
        if(leds[i].row==mode){
            if((leds[i].c & c) ){
                data|=(1<<leds[i].col);
 448:	a1 e0       	ldi	r26, 0x01	; 1
 44a:	b0 e0       	ldi	r27, 0x00	; 0
}

uint32_t getDataByColor(uint8_t c, uint8_t mode, Led* leds){
    uint32_t data=0x00000000;
    for(uint8_t i=0;i<NBLEDS;i++){
        if(leds[i].row==mode){
 44c:	21 81       	ldd	r18, Z+1	; 0x01
 44e:	2d 13       	cpse	r18, r29
 450:	12 c0       	rjmp	.+36     	; 0x476 <getDataByColor+0x46>
            if((leds[i].c & c) ){
 452:	22 81       	ldd	r18, Z+2	; 0x02
 454:	2c 23       	and	r18, r28
 456:	79 f0       	breq	.+30     	; 0x476 <getDataByColor+0x46>
                data|=(1<<leds[i].col);
 458:	8d 01       	movw	r16, r26
 45a:	00 80       	ld	r0, Z
 45c:	02 c0       	rjmp	.+4      	; 0x462 <getDataByColor+0x32>
 45e:	00 0f       	add	r16, r16
 460:	11 1f       	adc	r17, r17
 462:	0a 94       	dec	r0
 464:	e2 f7       	brpl	.-8      	; 0x45e <getDataByColor+0x2e>
 466:	01 2e       	mov	r0, r17
 468:	00 0c       	add	r0, r0
 46a:	22 0b       	sbc	r18, r18
 46c:	33 0b       	sbc	r19, r19
 46e:	60 2b       	or	r22, r16
 470:	71 2b       	or	r23, r17
 472:	82 2b       	or	r24, r18
 474:	93 2b       	or	r25, r19
 476:	33 96       	adiw	r30, 0x03	; 3
    }
}

uint32_t getDataByColor(uint8_t c, uint8_t mode, Led* leds){
    uint32_t data=0x00000000;
    for(uint8_t i=0;i<NBLEDS;i++){
 478:	e4 17       	cp	r30, r20
 47a:	f5 07       	cpc	r31, r21
 47c:	39 f7       	brne	.-50     	; 0x44c <getDataByColor+0x1c>
                data|=(1<<leds[i].col);
            }
        }
    }
    return data;
}
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	1f 91       	pop	r17
 484:	0f 91       	pop	r16
 486:	08 95       	ret

00000488 <ledOn>:

void ledOn(Led* l,uint8_t c){
    l->c=c;
 488:	fc 01       	movw	r30, r24
 48a:	62 83       	std	Z+2, r22	; 0x02
 48c:	08 95       	ret

0000048e <ledOff>:
}
void ledOff(Led* l){
    l->c=BLACK;
 48e:	fc 01       	movw	r30, r24
 490:	12 82       	std	Z+2, r1	; 0x02
 492:	08 95       	ret

00000494 <clearLeds>:
}
void clearLeds(Led* l){
 494:	9c 01       	movw	r18, r24
 496:	27 5c       	subi	r18, 0xC7	; 199
 498:	3f 4f       	sbci	r19, 0xFF	; 255

void ledOn(Led* l,uint8_t c){
    l->c=c;
}
void ledOff(Led* l){
    l->c=BLACK;
 49a:	fc 01       	movw	r30, r24
 49c:	12 82       	std	Z+2, r1	; 0x02
 49e:	03 96       	adiw	r24, 0x03	; 3
}
void clearLeds(Led* l){
    for(uint8_t i=0;i<NBLEDS;i++){
 4a0:	82 17       	cp	r24, r18
 4a2:	93 07       	cpc	r25, r19
 4a4:	d1 f7       	brne	.-12     	; 0x49a <clearLeds+0x6>
        ledOff(&l[i]);
    }
}
 4a6:	08 95       	ret

000004a8 <setLeds>:

void setLeds(Ttime t,Led* l){
 4a8:	ff 92       	push	r15
 4aa:	0f 93       	push	r16
 4ac:	1f 93       	push	r17
 4ae:	cf 93       	push	r28
 4b0:	df 93       	push	r29
 4b2:	00 d0       	rcall	.+0      	; 0x4b4 <setLeds+0xc>
 4b4:	00 d0       	rcall	.+0      	; 0x4b6 <setLeds+0xe>
 4b6:	1f 92       	push	r1
 4b8:	cd b7       	in	r28, 0x3d	; 61
 4ba:	de b7       	in	r29, 0x3e	; 62
 4bc:	89 01       	movw	r16, r18
    uint8_t temp=0;
    clearLeds(l);
 4be:	c9 01       	movw	r24, r18
 4c0:	e9 df       	rcall	.-46     	; 0x494 <clearLeds>
    ledOn(&l[ILEST],getColor());
 4c2:	8c d3       	rcall	.+1816   	; 0xbdc <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 4c4:	f8 01       	movw	r30, r16
 4c6:	80 af       	std	Z+56, r24	; 0x38
void setLeds(Ttime t,Led* l){
    uint8_t temp=0;
    clearLeds(l);
    ledOn(&l[ILEST],getColor());
    
    temp=currentTime.hour;
 4c8:	f0 90 09 02 	lds	r15, 0x0209	; 0x800209 <currentTime>
    if(currentTime.min>35){
 4cc:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <currentTime+0x1>
 4d0:	84 32       	cpi	r24, 0x24	; 36
 4d2:	08 f0       	brcs	.+2      	; 0x4d6 <setLeds+0x2e>
        temp++;
 4d4:	f3 94       	inc	r15
    }
    if(temp==0){
 4d6:	f1 10       	cpse	r15, r1
 4d8:	04 c0       	rjmp	.+8      	; 0x4e2 <setLeds+0x3a>
        ledOn(&l[MINUIT],getColor());
 4da:	80 d3       	rcall	.+1792   	; 0xbdc <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 4dc:	f8 01       	movw	r30, r16
 4de:	83 87       	std	Z+11, r24	; 0x0b
 4e0:	1c c0       	rjmp	.+56     	; 0x51a <setLeds+0x72>
    if(currentTime.min>35){
        temp++;
    }
    if(temp==0){
        ledOn(&l[MINUIT],getColor());
    }else if(temp==12){
 4e2:	fc e0       	ldi	r31, 0x0C	; 12
 4e4:	ff 12       	cpse	r15, r31
 4e6:	04 c0       	rjmp	.+8      	; 0x4f0 <setLeds+0x48>
            ledOn(&l[MIDI],getColor());
 4e8:	79 d3       	rcall	.+1778   	; 0xbdc <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 4ea:	f8 01       	movw	r30, r16
 4ec:	81 a7       	std	Z+41, r24	; 0x29
 4ee:	15 c0       	rjmp	.+42     	; 0x51a <setLeds+0x72>
        ledOn(&l[MINUIT],getColor());
    }else if(temp==12){
            ledOn(&l[MIDI],getColor());
    }else{
        temp=temp%12;
        ledOn(&l[ledMap[(temp-1)]],getColor());
 4f0:	75 d3       	rcall	.+1770   	; 0xbdc <getColor>
 4f2:	28 2f       	mov	r18, r24
 4f4:	8f 2d       	mov	r24, r15
 4f6:	6c e0       	ldi	r22, 0x0C	; 12
 4f8:	41 d4       	rcall	.+2178   	; 0xd7c <__udivmodqi4>
 4fa:	e9 2f       	mov	r30, r25
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	e9 59       	subi	r30, 0x99	; 153
 500:	ff 4f       	sbci	r31, 0xFF	; 255
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 502:	80 81       	ld	r24, Z
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	63 e0       	ldi	r22, 0x03	; 3
 508:	70 e0       	ldi	r23, 0x00	; 0
 50a:	27 d4       	rcall	.+2126   	; 0xd5a <__mulhi3>
 50c:	80 0f       	add	r24, r16
 50e:	91 1f       	adc	r25, r17
 510:	fc 01       	movw	r30, r24
 512:	22 83       	std	Z+2, r18	; 0x02
    }else if(temp==12){
            ledOn(&l[MIDI],getColor());
    }else{
        temp=temp%12;
        ledOn(&l[ledMap[(temp-1)]],getColor());
        ledOn(&l[HEURE],getColor());
 514:	63 d3       	rcall	.+1734   	; 0xbdc <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 516:	f8 01       	movw	r30, r16
 518:	87 a7       	std	Z+47, r24	; 0x2f
        temp=temp%12;
        ledOn(&l[ledMap[(temp-1)]],getColor());
        ledOn(&l[HEURE],getColor());
    }
    
    temp = minquad(currentTime.min); 
 51a:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <currentTime+0x1>
 51e:	8a d0       	rcall	.+276    	; 0x634 <minquad>
 520:	f8 2e       	mov	r15, r24
    if(temp > 30){
 522:	fe e1       	ldi	r31, 0x1E	; 30
 524:	f8 17       	cp	r31, r24
 526:	30 f4       	brcc	.+12     	; 0x534 <setLeds+0x8c>
        ledOn(&l[MOINS],getColor());
 528:	59 d3       	rcall	.+1714   	; 0xbdc <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 52a:	f8 01       	movw	r30, r16
 52c:	85 8f       	std	Z+29, r24	; 0x1d
    }
    
    temp = minquad(currentTime.min); 
    if(temp > 30){
        ledOn(&l[MOINS],getColor());
        temp=60-temp;
 52e:	8c e3       	ldi	r24, 0x3C	; 60
 530:	8f 19       	sub	r24, r15
 532:	f8 2e       	mov	r15, r24
    }
    switch(temp){
 534:	f4 e1       	ldi	r31, 0x14	; 20
 536:	ff 16       	cp	r15, r31
 538:	51 f0       	breq	.+20     	; 0x54e <setLeds+0xa6>
 53a:	8e e1       	ldi	r24, 0x1E	; 30
 53c:	f8 16       	cp	r15, r24
 53e:	59 f0       	breq	.+22     	; 0x556 <setLeds+0xae>
 540:	ea e0       	ldi	r30, 0x0A	; 10
 542:	fe 12       	cpse	r15, r30
 544:	0b c0       	rjmp	.+22     	; 0x55c <setLeds+0xb4>
        case 10 :
            ledOn(&l[DIX],getColor());
 546:	4a d3       	rcall	.+1684   	; 0xbdc <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 548:	f8 01       	movw	r30, r16
 54a:	81 8b       	std	Z+17, r24	; 0x11
 54c:	07 c0       	rjmp	.+14     	; 0x55c <setLeds+0xb4>
    switch(temp){
        case 10 :
            ledOn(&l[DIX],getColor());
            break;
        case 20 :
            ledOn(&l[VINGT],getColor());
 54e:	46 d3       	rcall	.+1676   	; 0xbdc <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 550:	f8 01       	movw	r30, r16
 552:	83 a3       	std	Z+35, r24	; 0x23
 554:	03 c0       	rjmp	.+6      	; 0x55c <setLeds+0xb4>
            break;
        case 20 :
            ledOn(&l[VINGT],getColor());
            break;
        case 30 :
            ledOn(&l[ETDEMIE],getColor());
 556:	42 d3       	rcall	.+1668   	; 0xbdc <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 558:	f8 01       	movw	r30, r16
 55a:	85 83       	std	Z+5, r24	; 0x05
            break;
        case 30 :
            ledOn(&l[ETDEMIE],getColor());
            break;
    }
}
 55c:	0f 90       	pop	r0
 55e:	0f 90       	pop	r0
 560:	0f 90       	pop	r0
 562:	0f 90       	pop	r0
 564:	0f 90       	pop	r0
 566:	df 91       	pop	r29
 568:	cf 91       	pop	r28
 56a:	1f 91       	pop	r17
 56c:	0f 91       	pop	r16
 56e:	ff 90       	pop	r15
 570:	08 95       	ret

00000572 <setLedsNb>:

void setLedsNb(int8_t nb, Led* l){
 572:	0f 93       	push	r16
 574:	1f 93       	push	r17
 576:	cf 93       	push	r28
 578:	c8 2f       	mov	r28, r24
 57a:	8b 01       	movw	r16, r22
    clearLeds(l);
 57c:	cb 01       	movw	r24, r22
 57e:	8a df       	rcall	.-236    	; 0x494 <clearLeds>
    if(nb < 0){
 580:	c7 ff       	sbrs	r28, 7
 582:	04 c0       	rjmp	.+8      	; 0x58c <setLedsNb+0x1a>
        ledOn(&l[MOINS],getColor());
 584:	2b d3       	rcall	.+1622   	; 0xbdc <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 586:	f8 01       	movw	r30, r16
 588:	85 8f       	std	Z+29, r24	; 0x1d

void setLedsNb(int8_t nb, Led* l){
    clearLeds(l);
    if(nb < 0){
        ledOn(&l[MOINS],getColor());
        nb=-nb;
 58a:	c1 95       	neg	r28
    }
    if(nb>29){
 58c:	ce 31       	cpi	r28, 0x1E	; 30
 58e:	44 f0       	brlt	.+16     	; 0x5a0 <setLedsNb+0x2e>
        ledOn(&l[VINGT],getColor());
 590:	25 d3       	rcall	.+1610   	; 0xbdc <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 592:	f8 01       	movw	r30, r16
 594:	83 a3       	std	Z+35, r24	; 0x23
        ledOn(&l[MOINS],getColor());
        nb=-nb;
    }
    if(nb>29){
        ledOn(&l[VINGT],getColor());
        ledOn(&l[DIX],getColor());
 596:	22 d3       	rcall	.+1604   	; 0xbdc <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 598:	f8 01       	movw	r30, r16
 59a:	81 8b       	std	Z+17, r24	; 0x11
        nb=-nb;
    }
    if(nb>29){
        ledOn(&l[VINGT],getColor());
        ledOn(&l[DIX],getColor());
        nb=nb-30;
 59c:	ce 51       	subi	r28, 0x1E	; 30
 59e:	0d c0       	rjmp	.+26     	; 0x5ba <setLedsNb+0x48>
    }else if(nb>19){
 5a0:	c4 31       	cpi	r28, 0x14	; 20
 5a2:	2c f0       	brlt	.+10     	; 0x5ae <setLedsNb+0x3c>
        ledOn(&l[VINGT],getColor());
 5a4:	1b d3       	rcall	.+1590   	; 0xbdc <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 5a6:	f8 01       	movw	r30, r16
 5a8:	83 a3       	std	Z+35, r24	; 0x23
        ledOn(&l[VINGT],getColor());
        ledOn(&l[DIX],getColor());
        nb=nb-30;
    }else if(nb>19){
        ledOn(&l[VINGT],getColor());
        nb=nb-20;
 5aa:	c4 51       	subi	r28, 0x14	; 20
 5ac:	06 c0       	rjmp	.+12     	; 0x5ba <setLedsNb+0x48>
    }else if(nb>11){
 5ae:	cc 30       	cpi	r28, 0x0C	; 12
 5b0:	24 f0       	brlt	.+8      	; 0x5ba <setLedsNb+0x48>
        ledOn(&l[DIX],getColor());
 5b2:	14 d3       	rcall	.+1576   	; 0xbdc <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 5b4:	f8 01       	movw	r30, r16
 5b6:	81 8b       	std	Z+17, r24	; 0x11
    }else if(nb>19){
        ledOn(&l[VINGT],getColor());
        nb=nb-20;
    }else if(nb>11){
        ledOn(&l[DIX],getColor());
        nb=nb-10;
 5b8:	ca 50       	subi	r28, 0x0A	; 10
    }
    ledOn(&l[ledMap[nb-1]],getColor());
 5ba:	10 d3       	rcall	.+1568   	; 0xbdc <getColor>
 5bc:	28 2f       	mov	r18, r24
 5be:	ec 2f       	mov	r30, r28
 5c0:	cc 0f       	add	r28, r28
 5c2:	ff 0b       	sbc	r31, r31
 5c4:	e9 59       	subi	r30, 0x99	; 153
 5c6:	ff 4f       	sbci	r31, 0xFF	; 255
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 5c8:	80 81       	ld	r24, Z
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	63 e0       	ldi	r22, 0x03	; 3
 5ce:	70 e0       	ldi	r23, 0x00	; 0
 5d0:	c4 d3       	rcall	.+1928   	; 0xd5a <__mulhi3>
 5d2:	80 0f       	add	r24, r16
 5d4:	91 1f       	adc	r25, r17
 5d6:	fc 01       	movw	r30, r24
 5d8:	22 83       	std	Z+2, r18	; 0x02
    }else if(nb>11){
        ledOn(&l[DIX],getColor());
        nb=nb-10;
    }
    ledOn(&l[ledMap[nb-1]],getColor());
}
 5da:	cf 91       	pop	r28
 5dc:	1f 91       	pop	r17
 5de:	0f 91       	pop	r16
 5e0:	08 95       	ret

000005e2 <sendRawData>:
void sendRawData(uint32_t data){
 5e2:	0f 93       	push	r16
 5e4:	1f 93       	push	r17
    PORTA &=~(STROBE|CLK);
 5e6:	2b b3       	in	r18, 0x1b	; 27
 5e8:	23 7f       	andi	r18, 0xF3	; 243
 5ea:	2b bb       	out	0x1b, r18	; 27
 5ec:	40 e0       	ldi	r20, 0x00	; 0
 5ee:	50 e0       	ldi	r21, 0x00	; 0
    for(uint8_t i=0;i<20;i++){
        if((data>>i) & 0x00000001){
 5f0:	8b 01       	movw	r16, r22
 5f2:	9c 01       	movw	r18, r24
 5f4:	04 2e       	mov	r0, r20
 5f6:	04 c0       	rjmp	.+8      	; 0x600 <sendRawData+0x1e>
 5f8:	36 95       	lsr	r19
 5fa:	27 95       	ror	r18
 5fc:	17 95       	ror	r17
 5fe:	07 95       	ror	r16
 600:	0a 94       	dec	r0
 602:	d2 f7       	brpl	.-12     	; 0x5f8 <sendRawData+0x16>
 604:	00 ff       	sbrs	r16, 0
 606:	02 c0       	rjmp	.+4      	; 0x60c <sendRawData+0x2a>
            PORTA|=DATA;
 608:	d9 9a       	sbi	0x1b, 1	; 27
 60a:	01 c0       	rjmp	.+2      	; 0x60e <sendRawData+0x2c>
        }else{
            PORTA&=~DATA;
 60c:	d9 98       	cbi	0x1b, 1	; 27
        }
        PORTA|=CLK;
 60e:	db 9a       	sbi	0x1b, 3	; 27
        PORTA&=~CLK;
 610:	db 98       	cbi	0x1b, 3	; 27
 612:	4f 5f       	subi	r20, 0xFF	; 255
 614:	5f 4f       	sbci	r21, 0xFF	; 255
    }
    ledOn(&l[ledMap[nb-1]],getColor());
}
void sendRawData(uint32_t data){
    PORTA &=~(STROBE|CLK);
    for(uint8_t i=0;i<20;i++){
 616:	44 31       	cpi	r20, 0x14	; 20
 618:	51 05       	cpc	r21, r1
 61a:	51 f7       	brne	.-44     	; 0x5f0 <sendRawData+0xe>
            PORTA&=~DATA;
        }
        PORTA|=CLK;
        PORTA&=~CLK;
    }
    PORTA|=STROBE;
 61c:	da 9a       	sbi	0x1b, 2	; 27
    PORTA&=~STROBE;
 61e:	da 98       	cbi	0x1b, 2	; 27
}
 620:	1f 91       	pop	r17
 622:	0f 91       	pop	r16
 624:	08 95       	ret

00000626 <setCurrentTime>:
#include "RTC.h" 

void setCurrentTime(uint8_t hour,uint8_t min,uint8_t monthDay,uint8_t month){
    currentTime.hour=hour;
 626:	e9 e0       	ldi	r30, 0x09	; 9
 628:	f2 e0       	ldi	r31, 0x02	; 2
 62a:	80 83       	st	Z, r24
    currentTime.min=min;
 62c:	61 83       	std	Z+1, r22	; 0x01
    currentTime.monthDay=monthDay;
 62e:	42 83       	std	Z+2, r20	; 0x02
    currentTime.month=month;
 630:	23 83       	std	Z+3, r18	; 0x03
 632:	08 95       	ret

00000634 <minquad>:
}

uint8_t minquad(uint8_t min){
    if(min > 5){
 634:	86 30       	cpi	r24, 0x06	; 6
 636:	a0 f0       	brcs	.+40     	; 0x660 <minquad+0x2c>
        if(min > 15){
 638:	80 31       	cpi	r24, 0x10	; 16
 63a:	50 f0       	brcs	.+20     	; 0x650 <minquad+0x1c>
            if(min > 25){
 63c:	8a 31       	cpi	r24, 0x1A	; 26
 63e:	50 f0       	brcs	.+20     	; 0x654 <minquad+0x20>
                if(min > 35){
 640:	84 32       	cpi	r24, 0x24	; 36
 642:	50 f0       	brcs	.+20     	; 0x658 <minquad+0x24>
                    if(min > 45){
 644:	8e 32       	cpi	r24, 0x2E	; 46
 646:	50 f0       	brcs	.+20     	; 0x65c <minquad+0x28>
                        if(min > 55){
 648:	88 33       	cpi	r24, 0x38	; 56
 64a:	50 f4       	brcc	.+20     	; 0x660 <minquad+0x2c>
                            return 0;
                        }else{return 50;}
 64c:	82 e3       	ldi	r24, 0x32	; 50
 64e:	08 95       	ret
                    }else{return 40;}
                }else{return 30;}
            }else{return 20;}
        }else{return 10;}
 650:	8a e0       	ldi	r24, 0x0A	; 10
 652:	08 95       	ret
                        if(min > 55){
                            return 0;
                        }else{return 50;}
                    }else{return 40;}
                }else{return 30;}
            }else{return 20;}
 654:	84 e1       	ldi	r24, 0x14	; 20
 656:	08 95       	ret
                    if(min > 45){
                        if(min > 55){
                            return 0;
                        }else{return 50;}
                    }else{return 40;}
                }else{return 30;}
 658:	8e e1       	ldi	r24, 0x1E	; 30
 65a:	08 95       	ret
                if(min > 35){
                    if(min > 45){
                        if(min > 55){
                            return 0;
                        }else{return 50;}
                    }else{return 40;}
 65c:	88 e2       	ldi	r24, 0x28	; 40
 65e:	08 95       	ret
                }else{return 30;}
            }else{return 20;}
        }else{return 10;}
    }else{return 0;}
 660:	80 e0       	ldi	r24, 0x00	; 0
}
 662:	08 95       	ret

00000664 <bcdToDec>:
    }else{
        return 0;
    }
    
}
uint8_t bcdToDec(uint8_t val){
 664:	98 2f       	mov	r25, r24
    return ((val/16*10) + (val%16));
 666:	82 95       	swap	r24
 668:	8f 70       	andi	r24, 0x0F	; 15
 66a:	6a e0       	ldi	r22, 0x0A	; 10
 66c:	6d d3       	rcall	.+1754   	; 0xd48 <__mulqi3>
 66e:	9f 70       	andi	r25, 0x0F	; 15
}
 670:	89 0f       	add	r24, r25
 672:	08 95       	ret

00000674 <decToBcd>:
uint8_t decToBcd(uint8_t val){
    return( (val/10*16) + (val%10) );
 674:	6a e0       	ldi	r22, 0x0A	; 10
 676:	82 d3       	rcall	.+1796   	; 0xd7c <__udivmodqi4>
 678:	82 95       	swap	r24
 67a:	80 7f       	andi	r24, 0xF0	; 240
}
 67c:	89 0f       	add	r24, r25
 67e:	08 95       	ret

00000680 <i2c_in_transfer>:
        return 0;
    }
}

uint8_t i2c_in_transfer(uint8_t USISR_temp){
    USISR = USISR_temp;								//Set USISR as requested by calling function
 680:	8e b9       	out	0x0e, r24	; 14
    do{
        _delay_us(I2C_TLOW);
        USICR = 0b00101011;								//SCL Positive Edge
 682:	8b e2       	ldi	r24, 0x2B	; 43
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 684:	95 e0       	ldi	r25, 0x05	; 5
 686:	9a 95       	dec	r25
 688:	f1 f7       	brne	.-4      	; 0x686 <i2c_in_transfer+0x6>
 68a:	00 00       	nop
 68c:	8d b9       	out	0x0d, r24	; 13
        while (!(PIN_USI&(1<<PIN_USI_SCL)));		//Wait for SCL to go high
 68e:	cc 9b       	sbis	0x19, 4	; 25
 690:	fe cf       	rjmp	.-4      	; 0x68e <i2c_in_transfer+0xe>
 692:	94 e0       	ldi	r25, 0x04	; 4
 694:	9a 95       	dec	r25
 696:	f1 f7       	brne	.-4      	; 0x694 <i2c_in_transfer+0x14>
        _delay_us(I2C_THIGH);
        USICR = 0b00101011;								//SCL Negative Edge
 698:	8d b9       	out	0x0d, r24	; 13
    }while (!(USISR&(1<<USIOIF)));					//Do until transfer is complete
 69a:	76 9b       	sbis	0x0e, 6	; 14
 69c:	f3 cf       	rjmp	.-26     	; 0x684 <i2c_in_transfer+0x4>
 69e:	85 e0       	ldi	r24, 0x05	; 5
 6a0:	8a 95       	dec	r24
 6a2:	f1 f7       	brne	.-4      	; 0x6a0 <i2c_in_transfer+0x20>
 6a4:	00 00       	nop
    _delay_us(I2C_TLOW);
    return USIDR;
 6a6:	8f b1       	in	r24, 0x0f	; 15
}
 6a8:	08 95       	ret

000006aa <i2c_in_transmit>:
uint8_t i2c_in_transmit(uint8_t *msg, uint8_t msg_size){
 6aa:	ef 92       	push	r14
 6ac:	ff 92       	push	r15
 6ae:	0f 93       	push	r16
 6b0:	1f 93       	push	r17
 6b2:	cf 93       	push	r28
 6b4:	df 93       	push	r29
 6b6:	ec 01       	movw	r28, r24
 6b8:	16 2f       	mov	r17, r22
    USI_I2C_Master_State = USI_ADDRESS;
 6ba:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <USI_I2C_Master_State>
    
    //   Start Condition
    PORT_USI |=  (1 << PORT_USI_SCL); 						//Setting input makes line pull high
 6be:	dc 9a       	sbi	0x1b, 4	; 27
    while (!(PIN_USI & (1<<PIN_USI_SCL)));		//Wait for SCL to go high
 6c0:	cc 9b       	sbis	0x19, 4	; 25
 6c2:	fe cf       	rjmp	.-4      	; 0x6c0 <i2c_in_transmit+0x16>
 6c4:	84 e0       	ldi	r24, 0x04	; 4
 6c6:	8a 95       	dec	r24
 6c8:	f1 f7       	brne	.-4      	; 0x6c6 <i2c_in_transmit+0x1c>
    #ifdef I2C_FAST_MODE
    _delay_us(I2C_THIGH);
    #else
    _delay_us(I2C_TLOW);
    #endif
    DDR_USI |=  (1 << PORT_USI_SDA);
 6ca:	d6 9a       	sbi	0x1a, 6	; 26
    DDR_USI |=  (1 << PORT_USI_SCL);
 6cc:	d4 9a       	sbi	0x1a, 4	; 26
    PORT_USI &= ~(1 << PORT_USI_SDA);
 6ce:	de 98       	cbi	0x1b, 6	; 27
 6d0:	84 e0       	ldi	r24, 0x04	; 4
 6d2:	8a 95       	dec	r24
 6d4:	f1 f7       	brne	.-4      	; 0x6d2 <i2c_in_transmit+0x28>
    _delay_us(I2C_THIGH);;
    PORT_USI &= ~(1 << PORT_USI_SCL);
 6d6:	dc 98       	cbi	0x1b, 4	; 27
 6d8:	85 e0       	ldi	r24, 0x05	; 5
 6da:	8a 95       	dec	r24
 6dc:	f1 f7       	brne	.-4      	; 0x6da <i2c_in_transmit+0x30>
 6de:	00 00       	nop
    _delay_us(I2C_TLOW);
    PORT_USI |=  (1 << PORT_USI_SDA);
 6e0:	de 9a       	sbi	0x1b, 6	; 27
        switch(USI_I2C_Master_State){
            case USI_ADDRESS:
                if(!(*msg & 0x01)){
                    USI_I2C_Master_State = USI_WRITE;
                }else{
                    USI_I2C_Master_State = USI_READ;
 6e2:	02 e0       	ldi	r16, 0x02	; 2
    
    do{
        switch(USI_I2C_Master_State){
            case USI_ADDRESS:
                if(!(*msg & 0x01)){
                    USI_I2C_Master_State = USI_WRITE;
 6e4:	ff 24       	eor	r15, r15
 6e6:	f3 94       	inc	r15
                DDR_USI &= ~(1 << PORT_USI_SDA);
                (*msg) = i2c_in_transfer(0b11110000 | (0x00<<USICNT0));			
                msg++;
                DDR_USI |=  (1 << PORT_USI_SDA);				
                if(msg_size == 1){
                    USIDR = 0xFF;			//Load NACK to end transmission
 6e8:	ee 24       	eor	r14, r14
 6ea:	ea 94       	dec	r14
    PORT_USI &= ~(1 << PORT_USI_SCL);
    _delay_us(I2C_TLOW);
    PORT_USI |=  (1 << PORT_USI_SDA);
    
    do{
        switch(USI_I2C_Master_State){
 6ec:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <USI_I2C_Master_State>
 6f0:	81 30       	cpi	r24, 0x01	; 1
 6f2:	61 f0       	breq	.+24     	; 0x70c <i2c_in_transmit+0x62>
 6f4:	18 f0       	brcs	.+6      	; 0x6fc <i2c_in_transmit+0x52>
 6f6:	82 30       	cpi	r24, 0x02	; 2
 6f8:	c9 f0       	breq	.+50     	; 0x72c <i2c_in_transmit+0x82>
 6fa:	24 c0       	rjmp	.+72     	; 0x744 <i2c_in_transmit+0x9a>
            case USI_ADDRESS:
                if(!(*msg & 0x01)){
 6fc:	88 81       	ld	r24, Y
 6fe:	80 fd       	sbrc	r24, 0
 700:	03 c0       	rjmp	.+6      	; 0x708 <i2c_in_transmit+0x5e>
                    USI_I2C_Master_State = USI_WRITE;
 702:	f0 92 08 02 	sts	0x0208, r15	; 0x800208 <USI_I2C_Master_State>
 706:	02 c0       	rjmp	.+4      	; 0x70c <i2c_in_transmit+0x62>
                }else{
                    USI_I2C_Master_State = USI_READ;
 708:	00 93 08 02 	sts	0x0208, r16	; 0x800208 <USI_I2C_Master_State>
                }//no break so goes to Write
                
            case USI_WRITE:
                PORT_USI &= ~(1 << PORT_USI_SCL);
 70c:	dc 98       	cbi	0x1b, 4	; 27
                USIDR = *(msg);				//Load data			
 70e:	89 91       	ld	r24, Y+
 710:	8f b9       	out	0x0f, r24	; 15
                msg++;						//Increment buffer pointer
                i2c_in_transfer(0b11110000 | (0x00<<USICNT0));
 712:	80 ef       	ldi	r24, 0xF0	; 240
 714:	b5 df       	rcall	.-150    	; 0x680 <i2c_in_transfer>
                DDR_USI &= ~(1 << PORT_USI_SDA);
 716:	d6 98       	cbi	0x1a, 6	; 26
                if(i2c_in_transfer(0b11110000 | (0x0E<<USICNT0)) & 0x01){
 718:	8e ef       	ldi	r24, 0xFE	; 254
 71a:	b2 df       	rcall	.-156    	; 0x680 <i2c_in_transfer>
 71c:	80 ff       	sbrs	r24, 0
 71e:	04 c0       	rjmp	.+8      	; 0x728 <i2c_in_transmit+0x7e>
                    PORT_USI |=  (1 << PORT_USI_SCL);
 720:	dc 9a       	sbi	0x1b, 4	; 27
                    PORT_USI |=  (1 << PORT_USI_SDA);
 722:	de 9a       	sbi	0x1b, 6	; 27
                    return 0;
 724:	80 e0       	ldi	r24, 0x00	; 0
 726:	1f c0       	rjmp	.+62     	; 0x766 <i2c_in_transmit+0xbc>
                }
                DDR_USI |=  (1 << PORT_USI_SDA);
 728:	d6 9a       	sbi	0x1a, 6	; 26
                break;
 72a:	0c c0       	rjmp	.+24     	; 0x744 <i2c_in_transmit+0x9a>
                
            case USI_READ:
                DDR_USI &= ~(1 << PORT_USI_SDA);
 72c:	d6 98       	cbi	0x1a, 6	; 26
                (*msg) = i2c_in_transfer(0b11110000 | (0x00<<USICNT0));			
 72e:	80 ef       	ldi	r24, 0xF0	; 240
 730:	a7 df       	rcall	.-178    	; 0x680 <i2c_in_transfer>
 732:	89 93       	st	Y+, r24
                msg++;
                DDR_USI |=  (1 << PORT_USI_SDA);				
 734:	d6 9a       	sbi	0x1a, 6	; 26
                if(msg_size == 1){
 736:	11 30       	cpi	r17, 0x01	; 1
 738:	11 f4       	brne	.+4      	; 0x73e <i2c_in_transmit+0x94>
                    USIDR = 0xFF;			//Load NACK to end transmission
 73a:	ef b8       	out	0x0f, r14	; 15
 73c:	01 c0       	rjmp	.+2      	; 0x740 <i2c_in_transmit+0x96>
                }else{
                    USIDR = 0x00;			//Load ACK
 73e:	1f b8       	out	0x0f, r1	; 15
                }
                i2c_in_transfer(0b11110000 | (0x0E<<USICNT0));
 740:	8e ef       	ldi	r24, 0xFE	; 254
 742:	9e df       	rcall	.-196    	; 0x680 <i2c_in_transfer>
                break;
        }
    }while(--msg_size);
 744:	11 50       	subi	r17, 0x01	; 1
 746:	91 f6       	brne	.-92     	; 0x6ec <i2c_in_transmit+0x42>
    
    //Stop Condition
    PORT_USI &= ~(1 << PORT_USI_SDA);           				// Pull SDA low.
 748:	de 98       	cbi	0x1b, 6	; 27
 74a:	85 e0       	ldi	r24, 0x05	; 5
 74c:	8a 95       	dec	r24
 74e:	f1 f7       	brne	.-4      	; 0x74c <i2c_in_transmit+0xa2>
 750:	00 00       	nop
    _delay_us(I2C_TLOW);
    DDR_USI &= ~(1 << PORT_USI_SCL);            				// Release SCL.
 752:	d4 98       	cbi	0x1a, 4	; 26
    while( !(PIN_USI & (1<<PIN_USI_SCL)) );  	// Wait for SCL to go high.  
 754:	cc 9b       	sbis	0x19, 4	; 25
 756:	fe cf       	rjmp	.-4      	; 0x754 <i2c_in_transmit+0xaa>
 758:	84 e0       	ldi	r24, 0x04	; 4
 75a:	8a 95       	dec	r24
 75c:	f1 f7       	brne	.-4      	; 0x75a <i2c_in_transmit+0xb0>
    _delay_us(I2C_THIGH);
    DDR_USI &= ~(1 << PORT_USI_SDA);            				// Release SDA.
 75e:	d6 98       	cbi	0x1a, 6	; 26
    while( !(PIN_USI & (1<<PIN_USI_SDA)) );  	// Wait for SDA to go high. 
 760:	ce 9b       	sbis	0x19, 6	; 25
 762:	fe cf       	rjmp	.-4      	; 0x760 <i2c_in_transmit+0xb6>
    return 1;
 764:	81 e0       	ldi	r24, 0x01	; 1
}
 766:	df 91       	pop	r29
 768:	cf 91       	pop	r28
 76a:	1f 91       	pop	r17
 76c:	0f 91       	pop	r16
 76e:	ff 90       	pop	r15
 770:	ef 90       	pop	r14
 772:	08 95       	ret

00000774 <i2c_write>:
    i2c_write(RTC_addr,2,decToBcd(hour));
}
void RTC_setMin(uint8_t min){
    i2c_write(RTC_addr,1,decToBcd(min));
}
uint8_t i2c_write(uint8_t addr, uint8_t adrs, uint8_t val){ // only supports 1 byte write
 774:	cf 93       	push	r28
 776:	df 93       	push	r29
 778:	00 d0       	rcall	.+0      	; 0x77a <i2c_write+0x6>
 77a:	1f 92       	push	r1
 77c:	cd b7       	in	r28, 0x3d	; 61
 77e:	de b7       	in	r29, 0x3e	; 62
    uint8_t i2c_buffer[3];
    uint8_t i2c_buffer_len = 3;
    i2c_buffer[0] = (addr << 1) | I2CWRITE ;
 780:	88 0f       	add	r24, r24
 782:	89 83       	std	Y+1, r24	; 0x01
    i2c_buffer[1] = adrs;
 784:	6a 83       	std	Y+2, r22	; 0x02
    i2c_buffer[2] = val;
 786:	4b 83       	std	Y+3, r20	; 0x03
    return i2c_in_transmit(i2c_buffer, i2c_buffer_len);
 788:	63 e0       	ldi	r22, 0x03	; 3
 78a:	ce 01       	movw	r24, r28
 78c:	01 96       	adiw	r24, 0x01	; 1
 78e:	8d df       	rcall	.-230    	; 0x6aa <i2c_in_transmit>
}
 790:	0f 90       	pop	r0
 792:	0f 90       	pop	r0
 794:	0f 90       	pop	r0
 796:	df 91       	pop	r29
 798:	cf 91       	pop	r28
 79a:	08 95       	ret

0000079c <RTC_setTime>:
        return 1;
    }else{
        return 0;
    }
}
void RTC_setTime(struct Ttime t,uint8_t day, uint8_t year){
 79c:	0f 93       	push	r16
 79e:	1f 93       	push	r17
 7a0:	cf 93       	push	r28
 7a2:	df 93       	push	r29
 7a4:	00 d0       	rcall	.+0      	; 0x7a6 <RTC_setTime+0xa>
 7a6:	00 d0       	rcall	.+0      	; 0x7a8 <RTC_setTime+0xc>
 7a8:	1f 92       	push	r1
 7aa:	cd b7       	in	r28, 0x3d	; 61
 7ac:	de b7       	in	r29, 0x3e	; 62
 7ae:	49 83       	std	Y+1, r20	; 0x01
 7b0:	85 2f       	mov	r24, r21
 7b2:	6b 83       	std	Y+3, r22	; 0x03
 7b4:	7c 83       	std	Y+4, r23	; 0x04
 7b6:	12 2f       	mov	r17, r18
    i2c_write(RTC_addr,1,decToBcd(t.min));
 7b8:	5d df       	rcall	.-326    	; 0x674 <decToBcd>
 7ba:	48 2f       	mov	r20, r24
 7bc:	61 e0       	ldi	r22, 0x01	; 1
 7be:	88 e6       	ldi	r24, 0x68	; 104
 7c0:	d9 df       	rcall	.-78     	; 0x774 <i2c_write>
    i2c_write(RTC_addr,2,decToBcd(t.hour));
 7c2:	89 81       	ldd	r24, Y+1	; 0x01
 7c4:	57 df       	rcall	.-338    	; 0x674 <decToBcd>
 7c6:	48 2f       	mov	r20, r24
 7c8:	62 e0       	ldi	r22, 0x02	; 2
 7ca:	88 e6       	ldi	r24, 0x68	; 104
 7cc:	d3 df       	rcall	.-90     	; 0x774 <i2c_write>
    i2c_write(RTC_addr,3,decToBcd(day));
 7ce:	81 2f       	mov	r24, r17
 7d0:	51 df       	rcall	.-350    	; 0x674 <decToBcd>
 7d2:	48 2f       	mov	r20, r24
 7d4:	63 e0       	ldi	r22, 0x03	; 3
 7d6:	88 e6       	ldi	r24, 0x68	; 104
 7d8:	cd df       	rcall	.-102    	; 0x774 <i2c_write>
    i2c_write(RTC_addr,4,decToBcd(t.monthDay));
 7da:	8b 81       	ldd	r24, Y+3	; 0x03
 7dc:	4b df       	rcall	.-362    	; 0x674 <decToBcd>
 7de:	48 2f       	mov	r20, r24
 7e0:	64 e0       	ldi	r22, 0x04	; 4
 7e2:	88 e6       	ldi	r24, 0x68	; 104
 7e4:	c7 df       	rcall	.-114    	; 0x774 <i2c_write>
    i2c_write(RTC_addr,5,decToBcd(t.month));
 7e6:	8c 81       	ldd	r24, Y+4	; 0x04
 7e8:	45 df       	rcall	.-374    	; 0x674 <decToBcd>
 7ea:	48 2f       	mov	r20, r24
 7ec:	65 e0       	ldi	r22, 0x05	; 5
 7ee:	88 e6       	ldi	r24, 0x68	; 104
 7f0:	c1 df       	rcall	.-126    	; 0x774 <i2c_write>
    i2c_write(RTC_addr,6,decToBcd(year));
 7f2:	80 2f       	mov	r24, r16
 7f4:	3f df       	rcall	.-386    	; 0x674 <decToBcd>
 7f6:	48 2f       	mov	r20, r24
 7f8:	66 e0       	ldi	r22, 0x06	; 6
 7fa:	88 e6       	ldi	r24, 0x68	; 104
}
 7fc:	0f 90       	pop	r0
 7fe:	0f 90       	pop	r0
 800:	0f 90       	pop	r0
 802:	0f 90       	pop	r0
 804:	0f 90       	pop	r0
 806:	df 91       	pop	r29
 808:	cf 91       	pop	r28
 80a:	1f 91       	pop	r17
 80c:	0f 91       	pop	r16
    i2c_write(RTC_addr,1,decToBcd(t.min));
    i2c_write(RTC_addr,2,decToBcd(t.hour));
    i2c_write(RTC_addr,3,decToBcd(day));
    i2c_write(RTC_addr,4,decToBcd(t.monthDay));
    i2c_write(RTC_addr,5,decToBcd(t.month));
    i2c_write(RTC_addr,6,decToBcd(year));
 80e:	b2 cf       	rjmp	.-156    	; 0x774 <i2c_write>

00000810 <RTC_setHour>:
}

void RTC_setHour(uint8_t hour){
    i2c_write(RTC_addr,2,decToBcd(hour));
 810:	31 df       	rcall	.-414    	; 0x674 <decToBcd>
 812:	48 2f       	mov	r20, r24
 814:	62 e0       	ldi	r22, 0x02	; 2
 816:	88 e6       	ldi	r24, 0x68	; 104
 818:	ad cf       	rjmp	.-166    	; 0x774 <i2c_write>

0000081a <RTC_setMin>:
}
void RTC_setMin(uint8_t min){
    i2c_write(RTC_addr,1,decToBcd(min));
 81a:	2c df       	rcall	.-424    	; 0x674 <decToBcd>
 81c:	48 2f       	mov	r20, r24
 81e:	61 e0       	ldi	r22, 0x01	; 1
 820:	88 e6       	ldi	r24, 0x68	; 104
 822:	a8 cf       	rjmp	.-176    	; 0x774 <i2c_write>

00000824 <i2c_read>:
    i2c_buffer[0] = (addr << 1) | I2CWRITE ;
    i2c_buffer[1] = adrs;
    i2c_buffer[2] = val;
    return i2c_in_transmit(i2c_buffer, i2c_buffer_len);
}
uint8_t i2c_read(uint8_t addr, uint8_t len, uint8_t adrs, uint8_t *buf){
 824:	8f 92       	push	r8
 826:	9f 92       	push	r9
 828:	af 92       	push	r10
 82a:	bf 92       	push	r11
 82c:	cf 92       	push	r12
 82e:	df 92       	push	r13
 830:	ef 92       	push	r14
 832:	ff 92       	push	r15
 834:	0f 93       	push	r16
 836:	1f 93       	push	r17
 838:	cf 93       	push	r28
 83a:	df 93       	push	r29
 83c:	cd b7       	in	r28, 0x3d	; 61
 83e:	de b7       	in	r29, 0x3e	; 62
 840:	18 2f       	mov	r17, r24
 842:	06 2f       	mov	r16, r22
 844:	49 01       	movw	r8, r18
        }
        return 1; // provide success check
    }else{
        return 0;
    }
}
 846:	ad b6       	in	r10, 0x3d	; 61
 848:	be b6       	in	r11, 0x3e	; 62
    i2c_buffer[2] = val;
    return i2c_in_transmit(i2c_buffer, i2c_buffer_len);
}
uint8_t i2c_read(uint8_t addr, uint8_t len, uint8_t adrs, uint8_t *buf){
    //set register pointer to adrs
    uint8_t i2c_buffer[len+1];
 84a:	c6 2e       	mov	r12, r22
 84c:	d1 2c       	mov	r13, r1
 84e:	c6 01       	movw	r24, r12
 850:	01 96       	adiw	r24, 0x01	; 1
 852:	2d b7       	in	r18, 0x3d	; 61
 854:	3e b7       	in	r19, 0x3e	; 62
 856:	28 1b       	sub	r18, r24
 858:	39 0b       	sbc	r19, r25
 85a:	0f b6       	in	r0, 0x3f	; 63
 85c:	f8 94       	cli
 85e:	3e bf       	out	0x3e, r19	; 62
 860:	0f be       	out	0x3f, r0	; 63
 862:	2d bf       	out	0x3d, r18	; 61
 864:	8d b7       	in	r24, 0x3d	; 61
 866:	9e b7       	in	r25, 0x3e	; 62
 868:	01 96       	adiw	r24, 0x01	; 1
 86a:	7c 01       	movw	r14, r24
    uint8_t i2c_buffer_len = 2;
    i2c_buffer[0] = (addr << 1) | I2CWRITE;
 86c:	81 2f       	mov	r24, r17
 86e:	88 0f       	add	r24, r24
 870:	ed b7       	in	r30, 0x3d	; 61
 872:	fe b7       	in	r31, 0x3e	; 62
 874:	81 83       	std	Z+1, r24	; 0x01
    i2c_buffer[1] = adrs;
 876:	f7 01       	movw	r30, r14
 878:	41 83       	std	Z+1, r20	; 0x01
    i2c_in_transmit(i2c_buffer, i2c_buffer_len);
 87a:	62 e0       	ldi	r22, 0x02	; 2
 87c:	c7 01       	movw	r24, r14
 87e:	15 df       	rcall	.-470    	; 0x6aa <i2c_in_transmit>
    //read actual data
    i2c_buffer_len = len+1;
    i2c_buffer[0] = (addr << 1) | I2CREAD;
 880:	11 0f       	add	r17, r17
 882:	11 60       	ori	r17, 0x01	; 1
 884:	f7 01       	movw	r30, r14
 886:	10 83       	st	Z, r17
    if(i2c_in_transmit(i2c_buffer, i2c_buffer_len)){
 888:	61 e0       	ldi	r22, 0x01	; 1
 88a:	60 0f       	add	r22, r16
 88c:	c7 01       	movw	r24, r14
 88e:	0d df       	rcall	.-486    	; 0x6aa <i2c_in_transmit>
 890:	88 23       	and	r24, r24
 892:	91 f0       	breq	.+36     	; 0x8b8 <i2c_read+0x94>
 894:	21 e0       	ldi	r18, 0x01	; 1
        uint8_t i;
        for(i=1;i<len+1;i++){ // fetch in buffer
 896:	82 2f       	mov	r24, r18
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	c8 16       	cp	r12, r24
 89c:	d9 06       	cpc	r13, r25
 89e:	5c f0       	brlt	.+22     	; 0x8b6 <i2c_read+0x92>
            buf[i-1]=i2c_buffer[i];
 8a0:	f4 01       	movw	r30, r8
 8a2:	e8 0f       	add	r30, r24
 8a4:	f9 1f       	adc	r31, r25
 8a6:	31 97       	sbiw	r30, 0x01	; 1
 8a8:	d7 01       	movw	r26, r14
 8aa:	a8 0f       	add	r26, r24
 8ac:	b9 1f       	adc	r27, r25
 8ae:	8c 91       	ld	r24, X
 8b0:	80 83       	st	Z, r24
    //read actual data
    i2c_buffer_len = len+1;
    i2c_buffer[0] = (addr << 1) | I2CREAD;
    if(i2c_in_transmit(i2c_buffer, i2c_buffer_len)){
        uint8_t i;
        for(i=1;i<len+1;i++){ // fetch in buffer
 8b2:	2f 5f       	subi	r18, 0xFF	; 255
 8b4:	f0 cf       	rjmp	.-32     	; 0x896 <i2c_read+0x72>
            buf[i-1]=i2c_buffer[i];
        }
        return 1; // provide success check
 8b6:	81 e0       	ldi	r24, 0x01	; 1
    }else{
        return 0;
    }
}
 8b8:	0f b6       	in	r0, 0x3f	; 63
 8ba:	f8 94       	cli
 8bc:	be be       	out	0x3e, r11	; 62
 8be:	0f be       	out	0x3f, r0	; 63
 8c0:	ad be       	out	0x3d, r10	; 61
 8c2:	df 91       	pop	r29
 8c4:	cf 91       	pop	r28
 8c6:	1f 91       	pop	r17
 8c8:	0f 91       	pop	r16
 8ca:	ff 90       	pop	r15
 8cc:	ef 90       	pop	r14
 8ce:	df 90       	pop	r13
 8d0:	cf 90       	pop	r12
 8d2:	bf 90       	pop	r11
 8d4:	af 90       	pop	r10
 8d6:	9f 90       	pop	r9
 8d8:	8f 90       	pop	r8
 8da:	08 95       	ret

000008dc <RTC_readTemp>:
            }else{return 20;}
        }else{return 10;}
    }else{return 0;}
}

int8_t RTC_readTemp(void){
 8dc:	cf 93       	push	r28
 8de:	df 93       	push	r29
 8e0:	1f 92       	push	r1
 8e2:	cd b7       	in	r28, 0x3d	; 61
 8e4:	de b7       	in	r29, 0x3e	; 62
    int8_t data=0;
 8e6:	19 82       	std	Y+1, r1	; 0x01
    if(i2c_read(RTC_addr,1,0x11,&data)){
 8e8:	9e 01       	movw	r18, r28
 8ea:	2f 5f       	subi	r18, 0xFF	; 255
 8ec:	3f 4f       	sbci	r19, 0xFF	; 255
 8ee:	41 e1       	ldi	r20, 0x11	; 17
 8f0:	61 e0       	ldi	r22, 0x01	; 1
 8f2:	88 e6       	ldi	r24, 0x68	; 104
 8f4:	97 df       	rcall	.-210    	; 0x824 <i2c_read>
 8f6:	88 23       	and	r24, r24
 8f8:	11 f0       	breq	.+4      	; 0x8fe <RTC_readTemp+0x22>
        return (data);
 8fa:	89 81       	ldd	r24, Y+1	; 0x01
 8fc:	01 c0       	rjmp	.+2      	; 0x900 <RTC_readTemp+0x24>
    }else{
        return 0;
 8fe:	80 e0       	ldi	r24, 0x00	; 0
    }
    
}
 900:	0f 90       	pop	r0
 902:	df 91       	pop	r29
 904:	cf 91       	pop	r28
 906:	08 95       	ret

00000908 <RTC_readTime>:
    return ((val/16*10) + (val%16));
}
uint8_t decToBcd(uint8_t val){
    return( (val/10*16) + (val%10) );
}
uint8_t RTC_readTime(struct Ttime *t){
 908:	0f 93       	push	r16
 90a:	1f 93       	push	r17
 90c:	cf 93       	push	r28
 90e:	df 93       	push	r29
 910:	cd b7       	in	r28, 0x3d	; 61
 912:	de b7       	in	r29, 0x3e	; 62
 914:	27 97       	sbiw	r28, 0x07	; 7
 916:	0f b6       	in	r0, 0x3f	; 63
 918:	f8 94       	cli
 91a:	de bf       	out	0x3e, r29	; 62
 91c:	0f be       	out	0x3f, r0	; 63
 91e:	cd bf       	out	0x3d, r28	; 61
 920:	8c 01       	movw	r16, r24
    uint8_t data[7] = {0};
 922:	9e 01       	movw	r18, r28
 924:	2f 5f       	subi	r18, 0xFF	; 255
 926:	3f 4f       	sbci	r19, 0xFF	; 255
 928:	87 e0       	ldi	r24, 0x07	; 7
 92a:	f9 01       	movw	r30, r18
 92c:	11 92       	st	Z+, r1
 92e:	8a 95       	dec	r24
 930:	e9 f7       	brne	.-6      	; 0x92c <RTC_readTime+0x24>
    if(i2c_read(RTC_addr,7,0x00,data)){
 932:	40 e0       	ldi	r20, 0x00	; 0
 934:	67 e0       	ldi	r22, 0x07	; 7
 936:	88 e6       	ldi	r24, 0x68	; 104
 938:	75 df       	rcall	.-278    	; 0x824 <i2c_read>
 93a:	88 23       	and	r24, r24
 93c:	89 f0       	breq	.+34     	; 0x960 <RTC_readTime+0x58>
        t->hour = bcdToDec(data[2]);
 93e:	8b 81       	ldd	r24, Y+3	; 0x03
 940:	91 de       	rcall	.-734    	; 0x664 <bcdToDec>
 942:	f8 01       	movw	r30, r16
 944:	80 83       	st	Z, r24
        t->min = bcdToDec(data[1]);
 946:	8a 81       	ldd	r24, Y+2	; 0x02
 948:	8d de       	rcall	.-742    	; 0x664 <bcdToDec>
 94a:	f8 01       	movw	r30, r16
 94c:	81 83       	std	Z+1, r24	; 0x01
        t->monthDay = bcdToDec(data[4]);
 94e:	8d 81       	ldd	r24, Y+5	; 0x05
 950:	89 de       	rcall	.-750    	; 0x664 <bcdToDec>
 952:	f8 01       	movw	r30, r16
 954:	82 83       	std	Z+2, r24	; 0x02
        t->month = bcdToDec(data[5]);
 956:	8e 81       	ldd	r24, Y+6	; 0x06
 958:	85 de       	rcall	.-758    	; 0x664 <bcdToDec>
 95a:	f8 01       	movw	r30, r16
 95c:	83 83       	std	Z+3, r24	; 0x03
        return 1;
 95e:	81 e0       	ldi	r24, 0x01	; 1
    }else{
        return 0;
    }
}
 960:	27 96       	adiw	r28, 0x07	; 7
 962:	0f b6       	in	r0, 0x3f	; 63
 964:	f8 94       	cli
 966:	de bf       	out	0x3e, r29	; 62
 968:	0f be       	out	0x3f, r0	; 63
 96a:	cd bf       	out	0x3d, r28	; 61
 96c:	df 91       	pop	r29
 96e:	cf 91       	pop	r28
 970:	1f 91       	pop	r17
 972:	0f 91       	pop	r16
 974:	08 95       	ret

00000976 <MsetHouram>:
}
void MsetNightOn(uint8_t i){
    EEPROM_write(EE_ONHOUR,1+i);
}
void MsetHouram(uint8_t i){
   if(i<12)RTC_setHour(i+1);
 976:	8c 30       	cpi	r24, 0x0C	; 12
 978:	10 f4       	brcc	.+4      	; 0x97e <MsetHouram+0x8>
 97a:	8f 5f       	subi	r24, 0xFF	; 255
 97c:	49 cf       	rjmp	.-366    	; 0x810 <RTC_setHour>
 97e:	08 95       	ret

00000980 <MsetHourpm>:
}
void MsetHourpm(uint8_t i){
   if(i<11)RTC_setHour(i+13);    
 980:	8b 30       	cpi	r24, 0x0B	; 11
 982:	10 f4       	brcc	.+4      	; 0x988 <MsetHourpm+0x8>
 984:	83 5f       	subi	r24, 0xF3	; 243
 986:	44 cf       	rjmp	.-376    	; 0x810 <RTC_setHour>
 988:	08 95       	ret

0000098a <MsetRainbow>:
        TCCR1B|=(1<<CS12)|(1<<CS10);
    }
}

void MsetRainbow(uint8_t i){
    if(i<2)mode=4;
 98a:	82 30       	cpi	r24, 0x02	; 2
 98c:	18 f4       	brcc	.+6      	; 0x994 <MsetRainbow+0xa>
 98e:	84 e0       	ldi	r24, 0x04	; 4
 990:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
  //  cli();
    sendRawData(0b11111100001111111111);//white
 994:	6f ef       	ldi	r22, 0xFF	; 255
 996:	73 ec       	ldi	r23, 0xC3	; 195
 998:	8f e0       	ldi	r24, 0x0F	; 15
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	22 de       	rcall	.-956    	; 0x5e2 <sendRawData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 99e:	2f ef       	ldi	r18, 0xFF	; 255
 9a0:	89 e6       	ldi	r24, 0x69	; 105
 9a2:	98 e1       	ldi	r25, 0x18	; 24
 9a4:	21 50       	subi	r18, 0x01	; 1
 9a6:	80 40       	sbci	r24, 0x00	; 0
 9a8:	90 40       	sbci	r25, 0x00	; 0
 9aa:	e1 f7       	brne	.-8      	; 0x9a4 <MsetRainbow+0x1a>
 9ac:	00 c0       	rjmp	.+0      	; 0x9ae <MsetRainbow+0x24>
 9ae:	00 00       	nop
    _delay_ms(500);
    sendRawData(0b11000000001111111111);//green
 9b0:	6f ef       	ldi	r22, 0xFF	; 255
 9b2:	73 e0       	ldi	r23, 0x03	; 3
 9b4:	8c e0       	ldi	r24, 0x0C	; 12
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	14 de       	rcall	.-984    	; 0x5e2 <sendRawData>
 9ba:	2f ef       	ldi	r18, 0xFF	; 255
 9bc:	89 e6       	ldi	r24, 0x69	; 105
 9be:	98 e1       	ldi	r25, 0x18	; 24
 9c0:	21 50       	subi	r18, 0x01	; 1
 9c2:	80 40       	sbci	r24, 0x00	; 0
 9c4:	90 40       	sbci	r25, 0x00	; 0
 9c6:	e1 f7       	brne	.-8      	; 0x9c0 <MsetRainbow+0x36>
 9c8:	00 c0       	rjmp	.+0      	; 0x9ca <MsetRainbow+0x40>
 9ca:	00 00       	nop
    _delay_ms(500);
    sendRawData(0b00001100001111111111);//red
 9cc:	6f ef       	ldi	r22, 0xFF	; 255
 9ce:	73 ec       	ldi	r23, 0xC3	; 195
 9d0:	80 e0       	ldi	r24, 0x00	; 0
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	06 de       	rcall	.-1012   	; 0x5e2 <sendRawData>
 9d6:	2f ef       	ldi	r18, 0xFF	; 255
 9d8:	89 e6       	ldi	r24, 0x69	; 105
 9da:	98 e1       	ldi	r25, 0x18	; 24
 9dc:	21 50       	subi	r18, 0x01	; 1
 9de:	80 40       	sbci	r24, 0x00	; 0
 9e0:	90 40       	sbci	r25, 0x00	; 0
 9e2:	e1 f7       	brne	.-8      	; 0x9dc <MsetRainbow+0x52>
 9e4:	00 c0       	rjmp	.+0      	; 0x9e6 <MsetRainbow+0x5c>
 9e6:	00 00       	nop
    _delay_ms(500);
    sendRawData(0b00110000001111111111);//blue
 9e8:	6f ef       	ldi	r22, 0xFF	; 255
 9ea:	73 e0       	ldi	r23, 0x03	; 3
 9ec:	83 e0       	ldi	r24, 0x03	; 3
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	f8 dd       	rcall	.-1040   	; 0x5e2 <sendRawData>
 9f2:	2f ef       	ldi	r18, 0xFF	; 255
 9f4:	89 e6       	ldi	r24, 0x69	; 105
 9f6:	98 e1       	ldi	r25, 0x18	; 24
 9f8:	21 50       	subi	r18, 0x01	; 1
 9fa:	80 40       	sbci	r24, 0x00	; 0
 9fc:	90 40       	sbci	r25, 0x00	; 0
 9fe:	e1 f7       	brne	.-8      	; 0x9f8 <MsetRainbow+0x6e>
 a00:	00 c0       	rjmp	.+0      	; 0xa02 <MsetRainbow+0x78>
 a02:	00 00       	nop
    _delay_ms(500);
    sendRawData(0b11110000001111111111);//cyan
 a04:	6f ef       	ldi	r22, 0xFF	; 255
 a06:	73 e0       	ldi	r23, 0x03	; 3
 a08:	8f e0       	ldi	r24, 0x0F	; 15
 a0a:	90 e0       	ldi	r25, 0x00	; 0
 a0c:	ea dd       	rcall	.-1068   	; 0x5e2 <sendRawData>
 a0e:	2f ef       	ldi	r18, 0xFF	; 255
 a10:	89 e6       	ldi	r24, 0x69	; 105
 a12:	98 e1       	ldi	r25, 0x18	; 24
 a14:	21 50       	subi	r18, 0x01	; 1
 a16:	80 40       	sbci	r24, 0x00	; 0
 a18:	90 40       	sbci	r25, 0x00	; 0
 a1a:	e1 f7       	brne	.-8      	; 0xa14 <MsetRainbow+0x8a>
 a1c:	00 c0       	rjmp	.+0      	; 0xa1e <MsetRainbow+0x94>
 a1e:	00 00       	nop
    _delay_ms(500);
    sendRawData(0b00111100001111111111);//magenta
 a20:	6f ef       	ldi	r22, 0xFF	; 255
 a22:	73 ec       	ldi	r23, 0xC3	; 195
 a24:	83 e0       	ldi	r24, 0x03	; 3
 a26:	90 e0       	ldi	r25, 0x00	; 0
 a28:	dc dd       	rcall	.-1096   	; 0x5e2 <sendRawData>
 a2a:	2f ef       	ldi	r18, 0xFF	; 255
 a2c:	89 e6       	ldi	r24, 0x69	; 105
 a2e:	98 e1       	ldi	r25, 0x18	; 24
 a30:	21 50       	subi	r18, 0x01	; 1
 a32:	80 40       	sbci	r24, 0x00	; 0
 a34:	90 40       	sbci	r25, 0x00	; 0
 a36:	e1 f7       	brne	.-8      	; 0xa30 <MsetRainbow+0xa6>
 a38:	00 c0       	rjmp	.+0      	; 0xa3a <MsetRainbow+0xb0>
 a3a:	00 00       	nop
    _delay_ms(500);
    sendRawData(0b11001100001111111111);//yellow
 a3c:	6f ef       	ldi	r22, 0xFF	; 255
 a3e:	73 ec       	ldi	r23, 0xC3	; 195
 a40:	8c e0       	ldi	r24, 0x0C	; 12
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	ce dd       	rcall	.-1124   	; 0x5e2 <sendRawData>
 a46:	2f ef       	ldi	r18, 0xFF	; 255
 a48:	89 e6       	ldi	r24, 0x69	; 105
 a4a:	98 e1       	ldi	r25, 0x18	; 24
 a4c:	21 50       	subi	r18, 0x01	; 1
 a4e:	80 40       	sbci	r24, 0x00	; 0
 a50:	90 40       	sbci	r25, 0x00	; 0
 a52:	e1 f7       	brne	.-8      	; 0xa4c <MsetRainbow+0xc2>
 a54:	00 c0       	rjmp	.+0      	; 0xa56 <MsetRainbow+0xcc>
 a56:	00 00       	nop
 a58:	08 95       	ret

00000a5a <MsetMinam>:
}
void MsetHourpm(uint8_t i){
   if(i<11)RTC_setHour(i+13);    
}
void MsetMinam(uint8_t i){
    if(i<3)RTC_setMin((i+1)*10);
 a5a:	83 30       	cpi	r24, 0x03	; 3
 a5c:	20 f4       	brcc	.+8      	; 0xa66 <MsetMinam+0xc>
 a5e:	8f 5f       	subi	r24, 0xFF	; 255
 a60:	6a e0       	ldi	r22, 0x0A	; 10
 a62:	72 d1       	rcall	.+740    	; 0xd48 <__mulqi3>
 a64:	da ce       	rjmp	.-588    	; 0x81a <RTC_setMin>
 a66:	08 95       	ret

00000a68 <MsetMinpm>:
    }
void MsetMinpm(uint8_t i){
    if(i<3)RTC_setMin(60-(i+1)*10);
 a68:	83 30       	cpi	r24, 0x03	; 3
 a6a:	28 f4       	brcc	.+10     	; 0xa76 <MsetMinpm+0xe>
 a6c:	8f 5f       	subi	r24, 0xFF	; 255
 a6e:	66 ef       	ldi	r22, 0xF6	; 246
 a70:	6b d1       	rcall	.+726    	; 0xd48 <__mulqi3>
 a72:	84 5c       	subi	r24, 0xC4	; 196
 a74:	d2 ce       	rjmp	.-604    	; 0x81a <RTC_setMin>
 a76:	08 95       	ret

00000a78 <findNextEntry>:

uint8_t mode=1;//0: hour only, 1-2: hour+temp, 3: temp only, >=4:Rainbow !
uint8_t colorMode=0;

uint8_t findNextEntry(Menu* m,uint8_t index){
    if((index+2)>(m->nb_optn%16))return 0;
 a78:	26 2f       	mov	r18, r22
 a7a:	30 e0       	ldi	r19, 0x00	; 0
 a7c:	2f 5f       	subi	r18, 0xFF	; 255
 a7e:	3f 4f       	sbci	r19, 0xFF	; 255
 a80:	fc 01       	movw	r30, r24
 a82:	80 81       	ld	r24, Z
 a84:	8f 70       	andi	r24, 0x0F	; 15
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	28 17       	cp	r18, r24
 a8a:	39 07       	cpc	r19, r25
 a8c:	1c f4       	brge	.+6      	; 0xa94 <findNextEntry+0x1c>
    return index+1;
 a8e:	81 e0       	ldi	r24, 0x01	; 1
 a90:	86 0f       	add	r24, r22
 a92:	08 95       	ret

uint8_t mode=1;//0: hour only, 1-2: hour+temp, 3: temp only, >=4:Rainbow !
uint8_t colorMode=0;

uint8_t findNextEntry(Menu* m,uint8_t index){
    if((index+2)>(m->nb_optn%16))return 0;
 a94:	80 e0       	ldi	r24, 0x00	; 0
    return index+1;
}
 a96:	08 95       	ret

00000a98 <getSubMenu>:

Menu* getSubMenu(Menu* m,uint8_t index){
 a98:	9c 01       	movw	r18, r24
    if(m->sub[index].submenu==0)return 0;//if executed NULL, return blank menu (==exit setup)
 a9a:	86 2f       	mov	r24, r22
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	63 e0       	ldi	r22, 0x03	; 3
 aa0:	70 e0       	ldi	r23, 0x00	; 0
 aa2:	5b d1       	rcall	.+694    	; 0xd5a <__mulhi3>
 aa4:	82 0f       	add	r24, r18
 aa6:	93 1f       	adc	r25, r19
    return m->sub[index].submenu;
}
 aa8:	fc 01       	movw	r30, r24
 aaa:	84 81       	ldd	r24, Z+4	; 0x04
 aac:	95 81       	ldd	r25, Z+5	; 0x05
 aae:	08 95       	ret

00000ab0 <EEPROM_write>:
void EEPROM_write(uint8_t addr, uint8_t data){
    while(EECR & (1<<EEPE));
 ab0:	e1 99       	sbic	0x1c, 1	; 28
 ab2:	fe cf       	rjmp	.-4      	; 0xab0 <EEPROM_write>
    EECR = (0<<EEPM1)|(0<<EEPM0);
 ab4:	1c ba       	out	0x1c, r1	; 28
    EEAR = addr;
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	9f bb       	out	0x1f, r25	; 31
 aba:	8e bb       	out	0x1e, r24	; 30
    EEDR = data;
 abc:	6d bb       	out	0x1d, r22	; 29
    EECR |= (1<<EEMPE);
 abe:	e2 9a       	sbi	0x1c, 2	; 28
    EECR |= (1<<EEPE);
 ac0:	e1 9a       	sbi	0x1c, 1	; 28
 ac2:	08 95       	ret

00000ac4 <MsetMode>:
    {8,0},//Rainbow off
    {HEURE,&M0main}//return
}};

void MsetMode(uint8_t i){
   if(i<4){
 ac4:	84 30       	cpi	r24, 0x04	; 4
 ac6:	68 f4       	brcc	.+26     	; 0xae2 <MsetMode+0x1e>
        TCCR1B|=(1<<CS12)|(1<<CS10);
 ac8:	9e b5       	in	r25, 0x2e	; 46
 aca:	95 60       	ori	r25, 0x05	; 5
 acc:	9e bd       	out	0x2e, r25	; 46
        if(i==2)TCCR1B&=~(1<<CS10);
 ace:	82 30       	cpi	r24, 0x02	; 2
 ad0:	19 f4       	brne	.+6      	; 0xad8 <MsetMode+0x14>
 ad2:	9e b5       	in	r25, 0x2e	; 46
 ad4:	9e 7f       	andi	r25, 0xFE	; 254
 ad6:	9e bd       	out	0x2e, r25	; 46
        mode=i;
 ad8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
        EEPROM_write(EE_MODE,i);
 adc:	68 2f       	mov	r22, r24
 ade:	84 e0       	ldi	r24, 0x04	; 4
 ae0:	e7 cf       	rjmp	.-50     	; 0xab0 <EEPROM_write>
 ae2:	08 95       	ret

00000ae4 <MsetColorMode>:
        colorMode=((colorMode-64+1)%7)+64;
    }
    return mode;
}
void MsetColorMode(uint8_t i){
    if(i<7){
 ae4:	87 30       	cpi	r24, 0x07	; 7
 ae6:	40 f4       	brcc	.+16     	; 0xaf8 <MsetColorMode+0x14>
        colorMode=colorArray[i];//fixed
 ae8:	e8 2f       	mov	r30, r24
 aea:	f0 e0       	ldi	r31, 0x00	; 0
 aec:	e0 54       	subi	r30, 0x40	; 64
 aee:	fe 4f       	sbci	r31, 0xFE	; 254
 af0:	60 81       	ld	r22, Z
 af2:	60 93 ce 01 	sts	0x01CE, r22	; 0x8001ce <colorMode>
 af6:	0d c0       	rjmp	.+26     	; 0xb12 <MsetColorMode+0x2e>
        EEPROM_write(EE_COLOR,colorArray[i]);
    }else if(i==7){//cycle single
 af8:	87 30       	cpi	r24, 0x07	; 7
 afa:	29 f4       	brne	.+10     	; 0xb06 <MsetColorMode+0x22>
        colorMode=WHITE+128;
 afc:	87 e8       	ldi	r24, 0x87	; 135
 afe:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <colorMode>
        EEPROM_write(EE_COLOR,128);
 b02:	60 e8       	ldi	r22, 0x80	; 128
 b04:	06 c0       	rjmp	.+12     	; 0xb12 <MsetColorMode+0x2e>
    }else if(i==8){//cycle all
 b06:	88 30       	cpi	r24, 0x08	; 8
 b08:	31 f4       	brne	.+12     	; 0xb16 <MsetColorMode+0x32>
        colorMode=WHITE+64;
 b0a:	87 e4       	ldi	r24, 0x47	; 71
 b0c:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <colorMode>
        EEPROM_write(EE_COLOR,64);
 b10:	60 e4       	ldi	r22, 0x40	; 64
 b12:	80 e0       	ldi	r24, 0x00	; 0
 b14:	cd cf       	rjmp	.-102    	; 0xab0 <EEPROM_write>
 b16:	08 95       	ret

00000b18 <MsetNightMode>:
    }else{//fixed
        return colorMode;
    }
}
void MsetNightMode(uint8_t i){
    if(i<3)EEPROM_write(EE_NIGHTMODE,i);
 b18:	83 30       	cpi	r24, 0x03	; 3
 b1a:	18 f4       	brcc	.+6      	; 0xb22 <MsetNightMode+0xa>
 b1c:	68 2f       	mov	r22, r24
 b1e:	81 e0       	ldi	r24, 0x01	; 1
 b20:	c7 cf       	rjmp	.-114    	; 0xab0 <EEPROM_write>
 b22:	08 95       	ret

00000b24 <MsetNightOff>:
uint8_t isInAllowedTime(uint8_t h){
    if(EEPROM_read(EE_NIGHTMODE)==2)return (h>=EEPROM_read(EE_ONHOUR) && h<=EEPROM_read(EE_OFFHOUR));
    return 1;
}
void MsetNightOff(uint8_t i){
    EEPROM_write(EE_OFFHOUR,12+i);
 b24:	6c e0       	ldi	r22, 0x0C	; 12
 b26:	68 0f       	add	r22, r24
 b28:	83 e0       	ldi	r24, 0x03	; 3
 b2a:	c2 cf       	rjmp	.-124    	; 0xab0 <EEPROM_write>

00000b2c <MsetNightOn>:
}
void MsetNightOn(uint8_t i){
    EEPROM_write(EE_ONHOUR,1+i);
 b2c:	61 e0       	ldi	r22, 0x01	; 1
 b2e:	68 0f       	add	r22, r24
 b30:	82 e0       	ldi	r24, 0x02	; 2
 b32:	be cf       	rjmp	.-132    	; 0xab0 <EEPROM_write>

00000b34 <MsetEventMode>:
    }
void MsetMinpm(uint8_t i){
    if(i<3)RTC_setMin(60-(i+1)*10);
}
void MsetEventMode(uint8_t i){
    if(i<2)EEPROM_write(EE_EVENT,1-i);//1 for active
 b34:	82 30       	cpi	r24, 0x02	; 2
 b36:	20 f4       	brcc	.+8      	; 0xb40 <MsetEventMode+0xc>
 b38:	61 e0       	ldi	r22, 0x01	; 1
 b3a:	68 1b       	sub	r22, r24
 b3c:	85 e0       	ldi	r24, 0x05	; 5
 b3e:	b8 cf       	rjmp	.-144    	; 0xab0 <EEPROM_write>
 b40:	08 95       	ret

00000b42 <Mreset>:
}
void Mreset(uint8_t i){
    if(i<1){
 b42:	81 11       	cpse	r24, r1
 b44:	1b c0       	rjmp	.+54     	; 0xb7c <Mreset+0x3a>
    {HEURE,&M0main}//return
}};

void MsetMode(uint8_t i){
   if(i<4){
        TCCR1B|=(1<<CS12)|(1<<CS10);
 b46:	8e b5       	in	r24, 0x2e	; 46
 b48:	85 60       	ori	r24, 0x05	; 5
 b4a:	8e bd       	out	0x2e, r24	; 46
        if(i==2)TCCR1B&=~(1<<CS10);
        mode=i;
 b4c:	81 e0       	ldi	r24, 0x01	; 1
 b4e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
        EEPROM_write(EE_MODE,i);
 b52:	61 e0       	ldi	r22, 0x01	; 1
 b54:	84 e0       	ldi	r24, 0x04	; 4
 b56:	ac df       	rcall	.-168    	; 0xab0 <EEPROM_write>
void MsetColorMode(uint8_t i){
    if(i<7){
        colorMode=colorArray[i];//fixed
        EEPROM_write(EE_COLOR,colorArray[i]);
    }else if(i==7){//cycle single
        colorMode=WHITE+128;
 b58:	87 e8       	ldi	r24, 0x87	; 135
 b5a:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <colorMode>
        EEPROM_write(EE_COLOR,128);
 b5e:	60 e8       	ldi	r22, 0x80	; 128
 b60:	80 e0       	ldi	r24, 0x00	; 0
 b62:	a6 df       	rcall	.-180    	; 0xab0 <EEPROM_write>
}
void Mreset(uint8_t i){
    if(i<1){
        MsetMode(1);
        MsetColorMode(7);
        EEPROM_write(EE_NIGHTMODE,1);
 b64:	61 e0       	ldi	r22, 0x01	; 1
 b66:	81 e0       	ldi	r24, 0x01	; 1
 b68:	a3 df       	rcall	.-186    	; 0xab0 <EEPROM_write>
        EEPROM_write(EE_OFFHOUR,12+10);
 b6a:	66 e1       	ldi	r22, 0x16	; 22
 b6c:	83 e0       	ldi	r24, 0x03	; 3
 b6e:	a0 df       	rcall	.-192    	; 0xab0 <EEPROM_write>
        EEPROM_write(EE_ONHOUR,1+8);
 b70:	69 e0       	ldi	r22, 0x09	; 9
 b72:	82 e0       	ldi	r24, 0x02	; 2
 b74:	9d df       	rcall	.-198    	; 0xab0 <EEPROM_write>
        TCCR1B|=(1<<CS12)|(1<<CS10);
 b76:	8e b5       	in	r24, 0x2e	; 46
 b78:	85 60       	ori	r24, 0x05	; 5
 b7a:	8e bd       	out	0x2e, r24	; 46
 b7c:	08 95       	ret

00000b7e <EEPROM_read>:
    EEDR = data;
    EECR |= (1<<EEMPE);
    EECR |= (1<<EEPE);
}
uint8_t EEPROM_read(uint8_t addr){
    while(EECR & (1<<EEPE));
 b7e:	e1 99       	sbic	0x1c, 1	; 28
 b80:	fe cf       	rjmp	.-4      	; 0xb7e <EEPROM_read>
    EEAR = addr;
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	9f bb       	out	0x1f, r25	; 31
 b86:	8e bb       	out	0x1e, r24	; 30
    EECR |= (1<<EERE);
 b88:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
 b8a:	8d b3       	in	r24, 0x1d	; 29
}
 b8c:	08 95       	ret

00000b8e <Minit>:

void Minit(void){
    colorMode=EEPROM_read(EE_COLOR);
 b8e:	80 e0       	ldi	r24, 0x00	; 0
 b90:	f6 df       	rcall	.-20     	; 0xb7e <EEPROM_read>
 b92:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <colorMode>
    mode=EEPROM_read(EE_MODE);
 b96:	84 e0       	ldi	r24, 0x04	; 4
 b98:	f2 df       	rcall	.-28     	; 0xb7e <EEPROM_read>
 b9a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
    MsetMode(EEPROM_read(EE_MODE));
 b9e:	84 e0       	ldi	r24, 0x04	; 4
 ba0:	ee df       	rcall	.-36     	; 0xb7e <EEPROM_read>
 ba2:	90 cf       	rjmp	.-224    	; 0xac4 <MsetMode>

00000ba4 <getMode>:
        mode=i;
        EEPROM_write(EE_MODE,i);
    }
}
uint8_t getMode(void){
    if(mode==2){
 ba4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 ba8:	82 30       	cpi	r24, 0x02	; 2
 baa:	11 f4       	brne	.+4      	; 0xbb0 <getMode+0xc>
        mode=1;
 bac:	81 e0       	ldi	r24, 0x01	; 1
 bae:	03 c0       	rjmp	.+6      	; 0xbb6 <getMode+0x12>
    }else if(mode==1){
 bb0:	81 30       	cpi	r24, 0x01	; 1
 bb2:	19 f4       	brne	.+6      	; 0xbba <getMode+0x16>
        mode=2;
 bb4:	82 e0       	ldi	r24, 0x02	; 2
 bb6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
    }
    if(colorMode>63 && colorMode<128){
 bba:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <colorMode>
 bbe:	90 ec       	ldi	r25, 0xC0	; 192
 bc0:	98 0f       	add	r25, r24
 bc2:	90 34       	cpi	r25, 0x40	; 64
 bc4:	40 f4       	brcc	.+16     	; 0xbd6 <getMode+0x32>
        colorMode=((colorMode-64+1)%7)+64;
 bc6:	90 e0       	ldi	r25, 0x00	; 0
 bc8:	cf 97       	sbiw	r24, 0x3f	; 63
 bca:	67 e0       	ldi	r22, 0x07	; 7
 bcc:	70 e0       	ldi	r23, 0x00	; 0
 bce:	e2 d0       	rcall	.+452    	; 0xd94 <__divmodhi4>
 bd0:	80 5c       	subi	r24, 0xC0	; 192
 bd2:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <colorMode>
    }
    return mode;
}
 bd6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 bda:	08 95       	ret

00000bdc <getColor>:
        colorMode=WHITE+64;
        EEPROM_write(EE_COLOR,64);
    }
}
uint8_t getColor(void){
    if(colorMode>127){//cycle single
 bdc:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <colorMode>
 be0:	87 ff       	sbrs	r24, 7
 be2:	0e c0       	rjmp	.+28     	; 0xc00 <getColor+0x24>
        if(colorMode>134)colorMode=128;
 be4:	87 38       	cpi	r24, 0x87	; 135
 be6:	18 f0       	brcs	.+6      	; 0xbee <getColor+0x12>
 be8:	80 e8       	ldi	r24, 0x80	; 128
 bea:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <colorMode>
        colorMode++;
 bee:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <colorMode>
 bf2:	ef 5f       	subi	r30, 0xFF	; 255
 bf4:	e0 93 ce 01 	sts	0x01CE, r30	; 0x8001ce <colorMode>
        return colorArray[colorMode-129];
 bf8:	f0 e0       	ldi	r31, 0x00	; 0
 bfa:	e1 5c       	subi	r30, 0xC1	; 193
 bfc:	fe 4f       	sbci	r31, 0xFE	; 254
 bfe:	06 c0       	rjmp	.+12     	; 0xc0c <getColor+0x30>
    }else if(colorMode>63){//cycle all
 c00:	80 34       	cpi	r24, 0x40	; 64
 c02:	28 f0       	brcs	.+10     	; 0xc0e <getColor+0x32>
        return colorArray[colorMode-64];
 c04:	e8 2f       	mov	r30, r24
 c06:	f0 e0       	ldi	r31, 0x00	; 0
 c08:	e0 58       	subi	r30, 0x80	; 128
 c0a:	fe 4f       	sbci	r31, 0xFE	; 254
 c0c:	80 81       	ld	r24, Z
    }else{//fixed
        return colorMode;
    }
}
 c0e:	08 95       	ret

00000c10 <isInAllowedTime>:
void MsetNightMode(uint8_t i){
    if(i<3)EEPROM_write(EE_NIGHTMODE,i);
}
uint8_t isInAllowedTime(uint8_t h){
 c10:	cf 93       	push	r28
 c12:	c8 2f       	mov	r28, r24
    if(EEPROM_read(EE_NIGHTMODE)==2)return (h>=EEPROM_read(EE_ONHOUR) && h<=EEPROM_read(EE_OFFHOUR));
 c14:	81 e0       	ldi	r24, 0x01	; 1
 c16:	b3 df       	rcall	.-154    	; 0xb7e <EEPROM_read>
 c18:	82 30       	cpi	r24, 0x02	; 2
 c1a:	69 f4       	brne	.+26     	; 0xc36 <isInAllowedTime+0x26>
 c1c:	b0 df       	rcall	.-160    	; 0xb7e <EEPROM_read>
 c1e:	c8 17       	cp	r28, r24
 c20:	40 f0       	brcs	.+16     	; 0xc32 <isInAllowedTime+0x22>
 c22:	83 e0       	ldi	r24, 0x03	; 3
 c24:	ac df       	rcall	.-168    	; 0xb7e <EEPROM_read>
 c26:	91 e0       	ldi	r25, 0x01	; 1
 c28:	8c 17       	cp	r24, r28
 c2a:	08 f4       	brcc	.+2      	; 0xc2e <isInAllowedTime+0x1e>
 c2c:	90 e0       	ldi	r25, 0x00	; 0
 c2e:	89 2f       	mov	r24, r25
 c30:	03 c0       	rjmp	.+6      	; 0xc38 <isInAllowedTime+0x28>
 c32:	80 e0       	ldi	r24, 0x00	; 0
 c34:	01 c0       	rjmp	.+2      	; 0xc38 <isInAllowedTime+0x28>
    return 1;
 c36:	81 e0       	ldi	r24, 0x01	; 1
}
 c38:	cf 91       	pop	r28
 c3a:	08 95       	ret

00000c3c <main>:
const Menu* Mcurrent=0;
uint8_t Mindex=0;
Led leds[NBLEDS];

int main(void){    
    ledInit(leds);
 c3c:	8f ec       	ldi	r24, 0xCF	; 207
 c3e:	91 e0       	ldi	r25, 0x01	; 1
 c40:	df db       	rcall	.-2114   	; 0x400 <ledInit>
    DDRA&=~(BTNINTERNAL|BTNOK);
 c42:	8a b3       	in	r24, 0x1a	; 26
 c44:	8f 75       	andi	r24, 0x5F	; 95
 c46:	8a bb       	out	0x1a, r24	; 26
    DDRB&=~BTNSELECT;
 c48:	ba 98       	cbi	0x17, 2	; 23
    PORTA|=(BTNINTERNAL|BTNOK);
 c4a:	8b b3       	in	r24, 0x1b	; 27
 c4c:	80 6a       	ori	r24, 0xA0	; 160
 c4e:	8b bb       	out	0x1b, r24	; 27
    PORTB|=BTNSELECT;
 c50:	c2 9a       	sbi	0x18, 2	; 24
    TIMSK1|=(1<<TOIE1);//|(1<<OCIE1B);
 c52:	60 9a       	sbi	0x0c, 0	; 12
    // OCR1B=32768;
    TIMSK0|=(1<<TOIE0);
 c54:	89 b7       	in	r24, 0x39	; 57
 c56:	81 60       	ori	r24, 0x01	; 1
 c58:	89 bf       	out	0x39, r24	; 57
    
    sendData(0b11111100001111111111);//white
 c5a:	6f ef       	ldi	r22, 0xFF	; 255
 c5c:	73 ec       	ldi	r23, 0xC3	; 195
 c5e:	8f e0       	ldi	r24, 0x0F	; 15
 c60:	90 e0       	ldi	r25, 0x00	; 0
 c62:	fb d9       	rcall	.-3082   	; 0x5a <sendData>
 c64:	2f ef       	ldi	r18, 0xFF	; 255
 c66:	89 e6       	ldi	r24, 0x69	; 105
 c68:	98 e1       	ldi	r25, 0x18	; 24
 c6a:	21 50       	subi	r18, 0x01	; 1
 c6c:	80 40       	sbci	r24, 0x00	; 0
 c6e:	90 40       	sbci	r25, 0x00	; 0
 c70:	e1 f7       	brne	.-8      	; 0xc6a <main+0x2e>
 c72:	00 c0       	rjmp	.+0      	; 0xc74 <main+0x38>
 c74:	00 00       	nop
    _delay_ms(500);
    sendData(0b11000000001111111111);//green
 c76:	6f ef       	ldi	r22, 0xFF	; 255
 c78:	73 e0       	ldi	r23, 0x03	; 3
 c7a:	8c e0       	ldi	r24, 0x0C	; 12
 c7c:	90 e0       	ldi	r25, 0x00	; 0
 c7e:	ed d9       	rcall	.-3110   	; 0x5a <sendData>
 c80:	2f ef       	ldi	r18, 0xFF	; 255
 c82:	89 e6       	ldi	r24, 0x69	; 105
 c84:	98 e1       	ldi	r25, 0x18	; 24
 c86:	21 50       	subi	r18, 0x01	; 1
 c88:	80 40       	sbci	r24, 0x00	; 0
 c8a:	90 40       	sbci	r25, 0x00	; 0
 c8c:	e1 f7       	brne	.-8      	; 0xc86 <main+0x4a>
 c8e:	00 c0       	rjmp	.+0      	; 0xc90 <main+0x54>
 c90:	00 00       	nop
    _delay_ms(500);
    sendData(0b00001100001111111111);//red
 c92:	6f ef       	ldi	r22, 0xFF	; 255
 c94:	73 ec       	ldi	r23, 0xC3	; 195
 c96:	80 e0       	ldi	r24, 0x00	; 0
 c98:	90 e0       	ldi	r25, 0x00	; 0
 c9a:	df d9       	rcall	.-3138   	; 0x5a <sendData>
 c9c:	2f ef       	ldi	r18, 0xFF	; 255
 c9e:	89 e6       	ldi	r24, 0x69	; 105
 ca0:	98 e1       	ldi	r25, 0x18	; 24
 ca2:	21 50       	subi	r18, 0x01	; 1
 ca4:	80 40       	sbci	r24, 0x00	; 0
 ca6:	90 40       	sbci	r25, 0x00	; 0
 ca8:	e1 f7       	brne	.-8      	; 0xca2 <main+0x66>
 caa:	00 c0       	rjmp	.+0      	; 0xcac <main+0x70>
 cac:	00 00       	nop
    _delay_ms(500);
    sendData(0b00110000001111111111);//blue
 cae:	6f ef       	ldi	r22, 0xFF	; 255
 cb0:	73 e0       	ldi	r23, 0x03	; 3
 cb2:	83 e0       	ldi	r24, 0x03	; 3
 cb4:	90 e0       	ldi	r25, 0x00	; 0
 cb6:	d1 d9       	rcall	.-3166   	; 0x5a <sendData>
 cb8:	2f ef       	ldi	r18, 0xFF	; 255
 cba:	89 e6       	ldi	r24, 0x69	; 105
 cbc:	98 e1       	ldi	r25, 0x18	; 24
 cbe:	21 50       	subi	r18, 0x01	; 1
 cc0:	80 40       	sbci	r24, 0x00	; 0
 cc2:	90 40       	sbci	r25, 0x00	; 0
 cc4:	e1 f7       	brne	.-8      	; 0xcbe <main+0x82>
 cc6:	00 c0       	rjmp	.+0      	; 0xcc8 <main+0x8c>
 cc8:	00 00       	nop
    _delay_ms(500);
    sendData(0b11110000001111111111);//cyan
 cca:	6f ef       	ldi	r22, 0xFF	; 255
 ccc:	73 e0       	ldi	r23, 0x03	; 3
 cce:	8f e0       	ldi	r24, 0x0F	; 15
 cd0:	90 e0       	ldi	r25, 0x00	; 0
 cd2:	c3 d9       	rcall	.-3194   	; 0x5a <sendData>
 cd4:	2f ef       	ldi	r18, 0xFF	; 255
 cd6:	89 e6       	ldi	r24, 0x69	; 105
 cd8:	98 e1       	ldi	r25, 0x18	; 24
 cda:	21 50       	subi	r18, 0x01	; 1
 cdc:	80 40       	sbci	r24, 0x00	; 0
 cde:	90 40       	sbci	r25, 0x00	; 0
 ce0:	e1 f7       	brne	.-8      	; 0xcda <main+0x9e>
 ce2:	00 c0       	rjmp	.+0      	; 0xce4 <main+0xa8>
 ce4:	00 00       	nop
    _delay_ms(500);
    sendData(0b00111100001111111111);//magenta
 ce6:	6f ef       	ldi	r22, 0xFF	; 255
 ce8:	73 ec       	ldi	r23, 0xC3	; 195
 cea:	83 e0       	ldi	r24, 0x03	; 3
 cec:	90 e0       	ldi	r25, 0x00	; 0
 cee:	b5 d9       	rcall	.-3222   	; 0x5a <sendData>
 cf0:	2f ef       	ldi	r18, 0xFF	; 255
 cf2:	89 e6       	ldi	r24, 0x69	; 105
 cf4:	98 e1       	ldi	r25, 0x18	; 24
 cf6:	21 50       	subi	r18, 0x01	; 1
 cf8:	80 40       	sbci	r24, 0x00	; 0
 cfa:	90 40       	sbci	r25, 0x00	; 0
 cfc:	e1 f7       	brne	.-8      	; 0xcf6 <main+0xba>
 cfe:	00 c0       	rjmp	.+0      	; 0xd00 <main+0xc4>
 d00:	00 00       	nop
    _delay_ms(500);
    sendData(0b11001100001111111111);//yellow
 d02:	6f ef       	ldi	r22, 0xFF	; 255
 d04:	73 ec       	ldi	r23, 0xC3	; 195
 d06:	8c e0       	ldi	r24, 0x0C	; 12
 d08:	90 e0       	ldi	r25, 0x00	; 0
 d0a:	a7 d9       	rcall	.-3250   	; 0x5a <sendData>
 d0c:	2f ef       	ldi	r18, 0xFF	; 255
 d0e:	89 e6       	ldi	r24, 0x69	; 105
 d10:	98 e1       	ldi	r25, 0x18	; 24
 d12:	21 50       	subi	r18, 0x01	; 1
 d14:	80 40       	sbci	r24, 0x00	; 0
 d16:	90 40       	sbci	r25, 0x00	; 0
 d18:	e1 f7       	brne	.-8      	; 0xd12 <main+0xd6>
 d1a:	00 c0       	rjmp	.+0      	; 0xd1c <main+0xe0>
 d1c:	00 00       	nop
    _delay_ms(500);
    
    //no sooner to let inputs debounce
    GIMSK|=(1<<PCIE1)|(1<<PCIE0);
 d1e:	8b b7       	in	r24, 0x3b	; 59
 d20:	80 63       	ori	r24, 0x30	; 48
 d22:	8b bf       	out	0x3b, r24	; 59
    PCMSK0|=(1<<PCINT7)|(1<<PCINT5);
 d24:	82 b3       	in	r24, 0x12	; 18
 d26:	80 6a       	ori	r24, 0xA0	; 160
 d28:	82 bb       	out	0x12, r24	; 18
    PCMSK1|=(1<<PCINT10);
 d2a:	80 b5       	in	r24, 0x20	; 32
 d2c:	84 60       	ori	r24, 0x04	; 4
 d2e:	80 bd       	out	0x20, r24	; 32
    sei();
 d30:	78 94       	sei
    
    //update time & UI timer
    #ifdef DELLONG
    TCCR1B|=(1<<CS12)|(1<<CS10);
 d32:	8e b5       	in	r24, 0x2e	; 46
 d34:	85 60       	ori	r24, 0x05	; 5
 d36:	8e bd       	out	0x2e, r24	; 46
    #else
    TCCR1B|=(1<<CS12);//|(1<<CS10);
    #endif
    
    //led mux timer
    TCCR0B|=(1<<CS01)|(1<<CS00);
 d38:	83 b7       	in	r24, 0x33	; 51
 d3a:	83 60       	ori	r24, 0x03	; 3
 d3c:	83 bf       	out	0x33, r24	; 51
    
    Minit();
 d3e:	27 df       	rcall	.-434    	; 0xb8e <Minit>
    // //RTC_setTime(currentTime,6,18);
    RTC_readTime(&currentTime);
 d40:	89 e0       	ldi	r24, 0x09	; 9
 d42:	92 e0       	ldi	r25, 0x02	; 2
 d44:	e1 dd       	rcall	.-1086   	; 0x908 <RTC_readTime>
 d46:	ff cf       	rjmp	.-2      	; 0xd46 <main+0x10a>

00000d48 <__mulqi3>:
 d48:	00 24       	eor	r0, r0

00000d4a <__mulqi3_loop>:
 d4a:	80 fd       	sbrc	r24, 0
 d4c:	06 0e       	add	r0, r22
 d4e:	66 0f       	add	r22, r22
 d50:	11 f0       	breq	.+4      	; 0xd56 <__mulqi3_exit>
 d52:	86 95       	lsr	r24
 d54:	d1 f7       	brne	.-12     	; 0xd4a <__mulqi3_loop>

00000d56 <__mulqi3_exit>:
 d56:	80 2d       	mov	r24, r0
 d58:	08 95       	ret

00000d5a <__mulhi3>:
 d5a:	00 24       	eor	r0, r0
 d5c:	55 27       	eor	r21, r21
 d5e:	04 c0       	rjmp	.+8      	; 0xd68 <__mulhi3+0xe>
 d60:	08 0e       	add	r0, r24
 d62:	59 1f       	adc	r21, r25
 d64:	88 0f       	add	r24, r24
 d66:	99 1f       	adc	r25, r25
 d68:	00 97       	sbiw	r24, 0x00	; 0
 d6a:	29 f0       	breq	.+10     	; 0xd76 <__mulhi3+0x1c>
 d6c:	76 95       	lsr	r23
 d6e:	67 95       	ror	r22
 d70:	b8 f3       	brcs	.-18     	; 0xd60 <__mulhi3+0x6>
 d72:	71 05       	cpc	r23, r1
 d74:	b9 f7       	brne	.-18     	; 0xd64 <__mulhi3+0xa>
 d76:	80 2d       	mov	r24, r0
 d78:	95 2f       	mov	r25, r21
 d7a:	08 95       	ret

00000d7c <__udivmodqi4>:
 d7c:	99 1b       	sub	r25, r25
 d7e:	79 e0       	ldi	r23, 0x09	; 9
 d80:	04 c0       	rjmp	.+8      	; 0xd8a <__udivmodqi4_ep>

00000d82 <__udivmodqi4_loop>:
 d82:	99 1f       	adc	r25, r25
 d84:	96 17       	cp	r25, r22
 d86:	08 f0       	brcs	.+2      	; 0xd8a <__udivmodqi4_ep>
 d88:	96 1b       	sub	r25, r22

00000d8a <__udivmodqi4_ep>:
 d8a:	88 1f       	adc	r24, r24
 d8c:	7a 95       	dec	r23
 d8e:	c9 f7       	brne	.-14     	; 0xd82 <__udivmodqi4_loop>
 d90:	80 95       	com	r24
 d92:	08 95       	ret

00000d94 <__divmodhi4>:
 d94:	97 fb       	bst	r25, 7
 d96:	07 2e       	mov	r0, r23
 d98:	16 f4       	brtc	.+4      	; 0xd9e <__divmodhi4+0xa>
 d9a:	00 94       	com	r0
 d9c:	06 d0       	rcall	.+12     	; 0xdaa <__divmodhi4_neg1>
 d9e:	77 fd       	sbrc	r23, 7
 da0:	08 d0       	rcall	.+16     	; 0xdb2 <__divmodhi4_neg2>
 da2:	0b d0       	rcall	.+22     	; 0xdba <__udivmodhi4>
 da4:	07 fc       	sbrc	r0, 7
 da6:	05 d0       	rcall	.+10     	; 0xdb2 <__divmodhi4_neg2>
 da8:	3e f4       	brtc	.+14     	; 0xdb8 <__divmodhi4_exit>

00000daa <__divmodhi4_neg1>:
 daa:	90 95       	com	r25
 dac:	81 95       	neg	r24
 dae:	9f 4f       	sbci	r25, 0xFF	; 255
 db0:	08 95       	ret

00000db2 <__divmodhi4_neg2>:
 db2:	70 95       	com	r23
 db4:	61 95       	neg	r22
 db6:	7f 4f       	sbci	r23, 0xFF	; 255

00000db8 <__divmodhi4_exit>:
 db8:	08 95       	ret

00000dba <__udivmodhi4>:
 dba:	aa 1b       	sub	r26, r26
 dbc:	bb 1b       	sub	r27, r27
 dbe:	51 e1       	ldi	r21, 0x11	; 17
 dc0:	07 c0       	rjmp	.+14     	; 0xdd0 <__udivmodhi4_ep>

00000dc2 <__udivmodhi4_loop>:
 dc2:	aa 1f       	adc	r26, r26
 dc4:	bb 1f       	adc	r27, r27
 dc6:	a6 17       	cp	r26, r22
 dc8:	b7 07       	cpc	r27, r23
 dca:	10 f0       	brcs	.+4      	; 0xdd0 <__udivmodhi4_ep>
 dcc:	a6 1b       	sub	r26, r22
 dce:	b7 0b       	sbc	r27, r23

00000dd0 <__udivmodhi4_ep>:
 dd0:	88 1f       	adc	r24, r24
 dd2:	99 1f       	adc	r25, r25
 dd4:	5a 95       	dec	r21
 dd6:	a9 f7       	brne	.-22     	; 0xdc2 <__udivmodhi4_loop>
 dd8:	80 95       	com	r24
 dda:	90 95       	com	r25
 ddc:	bc 01       	movw	r22, r24
 dde:	cd 01       	movw	r24, r26
 de0:	08 95       	ret

00000de2 <_exit>:
 de2:	f8 94       	cli

00000de4 <__stop_program>:
 de4:	ff cf       	rjmp	.-2      	; 0xde4 <__stop_program>
