
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000168  00800060  00000d58  00000dec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000046  008001c8  008001c8  00000f54  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002f36  00000000  00000000  0000102c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dcb  00000000  00000000  00003f62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d8c  00000000  00000000  00004d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005d4  00000000  00000000  00005abc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a1  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c0f  00000000  00000000  00006731  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00008340  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	66 c0       	rjmp	.+204    	; 0xd2 <__vector_2>
   6:	32 c0       	rjmp	.+100    	; 0x6c <__vector_3>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	ae c0       	rjmp	.+348    	; 0x16e <__vector_8>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	88 c1       	rjmp	.+784    	; 0x328 <__vector_11>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	11 e0       	ldi	r17, 0x01	; 1
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e8 e5       	ldi	r30, 0x58	; 88
  36:	fd e0       	ldi	r31, 0x0D	; 13
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a8 3c       	cpi	r26, 0xC8	; 200
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	22 e0       	ldi	r18, 0x02	; 2
  46:	a8 ec       	ldi	r26, 0xC8	; 200
  48:	b1 e0       	ldi	r27, 0x01	; 1
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	ae 30       	cpi	r26, 0x0E	; 14
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	d3 d5       	rcall	.+2982   	; 0xbfc <main>
  56:	7e c6       	rjmp	.+3324   	; 0xd54 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <sendData>:

uint8_t ledr=0;
uint8_t ledb=0;

void sendData(uint32_t data){
    if(ledr)data|=LEDR;
  5a:	20 91 cd 01 	lds	r18, 0x01CD	; 0x8001cd <ledr>
  5e:	21 11       	cpse	r18, r1
  60:	78 60       	ori	r23, 0x08	; 8
    if(ledb)data|=LEDB;
  62:	20 91 cc 01 	lds	r18, 0x01CC	; 0x8001cc <ledb>
  66:	21 11       	cpse	r18, r1
  68:	74 60       	ori	r23, 0x04	; 4
    sendRawData(data);
  6a:	af c2       	rjmp	.+1374   	; 0x5ca <sendRawData>

0000006c <__vector_3>:
    while(1){
    }
    return(0);
    
}
ISR( PCINT1_vect){
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	3f 93       	push	r19
  7a:	4f 93       	push	r20
  7c:	5f 93       	push	r21
  7e:	6f 93       	push	r22
  80:	7f 93       	push	r23
  82:	8f 93       	push	r24
  84:	9f 93       	push	r25
  86:	af 93       	push	r26
  88:	bf 93       	push	r27
  8a:	ef 93       	push	r30
  8c:	ff 93       	push	r31
    if(PINB&BTNSELECT && Mcurrent){
  8e:	b2 9b       	sbis	0x16, 2	; 22
  90:	0f c0       	rjmp	.+30     	; 0xb0 <__vector_3+0x44>
  92:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <Mcurrent>
  96:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <Mcurrent+0x1>
  9a:	00 97       	sbiw	r24, 0x00	; 0
  9c:	49 f0       	breq	.+18     	; 0xb0 <__vector_3+0x44>
        Mindex=findNextEntry(Mcurrent,Mindex);
  9e:	60 91 c8 01 	lds	r22, 0x01C8	; 0x8001c8 <__data_end>
  a2:	de d4       	rcall	.+2492   	; 0xa60 <findNextEntry>
  a4:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <__data_end>
        TCNT1=65534;//get straight to led update
  a8:	8e ef       	ldi	r24, 0xFE	; 254
  aa:	9f ef       	ldi	r25, 0xFF	; 255
  ac:	9d bd       	out	0x2d, r25	; 45
  ae:	8c bd       	out	0x2c, r24	; 44
    }
}
  b0:	ff 91       	pop	r31
  b2:	ef 91       	pop	r30
  b4:	bf 91       	pop	r27
  b6:	af 91       	pop	r26
  b8:	9f 91       	pop	r25
  ba:	8f 91       	pop	r24
  bc:	7f 91       	pop	r23
  be:	6f 91       	pop	r22
  c0:	5f 91       	pop	r21
  c2:	4f 91       	pop	r20
  c4:	3f 91       	pop	r19
  c6:	2f 91       	pop	r18
  c8:	0f 90       	pop	r0
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	0f 90       	pop	r0
  ce:	1f 90       	pop	r1
  d0:	18 95       	reti

000000d2 <__vector_2>:
ISR( PCINT0_vect){
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	2f 93       	push	r18
  de:	3f 93       	push	r19
  e0:	4f 93       	push	r20
  e2:	5f 93       	push	r21
  e4:	6f 93       	push	r22
  e6:	7f 93       	push	r23
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
  ec:	af 93       	push	r26
  ee:	bf 93       	push	r27
  f0:	ef 93       	push	r30
  f2:	ff 93       	push	r31
    if(PINA&BTNOK){
  f4:	cf 9b       	sbis	0x19, 7	; 25
  f6:	29 c0       	rjmp	.+82     	; 0x14a <__vector_2+0x78>
        if(!Mcurrent){
  f8:	e0 91 c9 01 	lds	r30, 0x01C9	; 0x8001c9 <Mcurrent>
  fc:	f0 91 ca 01 	lds	r31, 0x01CA	; 0x8001ca <Mcurrent+0x1>
 100:	30 97       	sbiw	r30, 0x00	; 0
 102:	39 f4       	brne	.+14     	; 0x112 <__vector_2+0x40>
            Mcurrent=&M0main;//if not in menu mode
 104:	85 ea       	ldi	r24, 0xA5	; 165
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <Mcurrent+0x1>
 10c:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <Mcurrent>
 110:	18 c0       	rjmp	.+48     	; 0x142 <__vector_2+0x70>
        }else{//enter menu and execute
            if(Mcurrent->fptr!=0)Mcurrent->fptr(Mindex);//check if function is associated and selected value is not a navigation move
 112:	01 80       	ldd	r0, Z+1	; 0x01
 114:	f2 81       	ldd	r31, Z+2	; 0x02
 116:	e0 2d       	mov	r30, r0
 118:	30 97       	sbiw	r30, 0x00	; 0
 11a:	19 f0       	breq	.+6      	; 0x122 <__vector_2+0x50>
 11c:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <__data_end>
 120:	09 95       	icall
            Mcurrent=getSubMenu(Mcurrent,Mindex);//get new menu
 122:	60 91 c8 01 	lds	r22, 0x01C8	; 0x8001c8 <__data_end>
 126:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <Mcurrent>
 12a:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <Mcurrent+0x1>
 12e:	a8 d4       	rcall	.+2384   	; 0xa80 <getSubMenu>
 130:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <Mcurrent+0x1>
 134:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <Mcurrent>
            Mindex=0;
 138:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <__data_end>
            clearLeds(leds);
 13c:	8f ec       	ldi	r24, 0xCF	; 207
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	a2 d1       	rcall	.+836    	; 0x486 <clearLeds>
        }
        TCNT1=65534;//get straight to led update
 142:	8e ef       	ldi	r24, 0xFE	; 254
 144:	9f ef       	ldi	r25, 0xFF	; 255
 146:	9d bd       	out	0x2d, r25	; 45
 148:	8c bd       	out	0x2c, r24	; 44
    }
    if(PINA&BTNINTERNAL){//unused secret button
 14a:	89 b3       	in	r24, 0x19	; 25
    }
}/*
 14c:	ff 91       	pop	r31
 14e:	ef 91       	pop	r30
 150:	bf 91       	pop	r27
 152:	af 91       	pop	r26
 154:	9f 91       	pop	r25
 156:	8f 91       	pop	r24
 158:	7f 91       	pop	r23
 15a:	6f 91       	pop	r22
 15c:	5f 91       	pop	r21
 15e:	4f 91       	pop	r20
 160:	3f 91       	pop	r19
 162:	2f 91       	pop	r18
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <__vector_8>:
ISR( TIM1_COMPB_vect){
}*/
ISR( TIM1_OVF_vect ){
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	2f 93       	push	r18
 17a:	3f 93       	push	r19
 17c:	4f 93       	push	r20
 17e:	5f 93       	push	r21
 180:	6f 93       	push	r22
 182:	7f 93       	push	r23
 184:	8f 93       	push	r24
 186:	9f 93       	push	r25
 188:	af 93       	push	r26
 18a:	bf 93       	push	r27
 18c:	cf 93       	push	r28
 18e:	ef 93       	push	r30
 190:	ff 93       	push	r31
    if(!Mcurrent){//if in normal display mode
 192:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <Mcurrent>
 196:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <Mcurrent+0x1>
 19a:	89 2b       	or	r24, r25
 19c:	09 f0       	breq	.+2      	; 0x1a0 <__vector_8+0x32>
 19e:	93 c0       	rjmp	.+294    	; 0x2c6 <__stack+0x67>
        uint8_t m=getMode();
 1a0:	f1 d4       	rcall	.+2530   	; 0xb84 <getMode>
 1a2:	c8 2f       	mov	r28, r24
        RTC_readTime(&currentTime);
 1a4:	89 e0       	ldi	r24, 0x09	; 9
 1a6:	92 e0       	ldi	r25, 0x02	; 2
 1a8:	a3 d3       	rcall	.+1862   	; 0x8f0 <RTC_readTime>
        if(isInAllowedTime(currentTime.hour)){
 1aa:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <currentTime>
 1ae:	0f d5       	rcall	.+2590   	; 0xbce <isInAllowedTime>
 1b0:	88 23       	and	r24, r24
 1b2:	09 f4       	brne	.+2      	; 0x1b6 <__vector_8+0x48>
 1b4:	7d c0       	rjmp	.+250    	; 0x2b0 <__stack+0x51>
            if(m<2){
 1b6:	c2 30       	cpi	r28, 0x02	; 2
 1b8:	08 f4       	brcc	.+2      	; 0x1bc <__vector_8+0x4e>
 1ba:	6c c0       	rjmp	.+216    	; 0x294 <__stack+0x35>
                setLeds(currentTime,leds);
            }else if(m<4){
 1bc:	c4 30       	cpi	r28, 0x04	; 4
 1be:	28 f4       	brcc	.+10     	; 0x1ca <__vector_8+0x5c>
                setLedsNb(RTC_readTemp(),leds);
 1c0:	81 d3       	rcall	.+1794   	; 0x8c4 <RTC_readTemp>
 1c2:	6f ec       	ldi	r22, 0xCF	; 207
 1c4:	71 e0       	ldi	r23, 0x01	; 1
 1c6:	c9 d1       	rcall	.+914    	; 0x55a <setLedsNb>
 1c8:	76 c0       	rjmp	.+236    	; 0x2b6 <__stack+0x57>
            }else if(m==4){
 1ca:	c4 30       	cpi	r28, 0x04	; 4
 1cc:	09 f0       	breq	.+2      	; 0x1d0 <__vector_8+0x62>
 1ce:	73 c0       	rjmp	.+230    	; 0x2b6 <__stack+0x57>
                sendData(0b11111100001111111111);//white
 1d0:	6f ef       	ldi	r22, 0xFF	; 255
 1d2:	73 ec       	ldi	r23, 0xC3	; 195
 1d4:	8f e0       	ldi	r24, 0x0F	; 15
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	40 df       	rcall	.-384    	; 0x5a <sendData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1da:	2f ef       	ldi	r18, 0xFF	; 255
 1dc:	89 e6       	ldi	r24, 0x69	; 105
 1de:	98 e1       	ldi	r25, 0x18	; 24
 1e0:	21 50       	subi	r18, 0x01	; 1
 1e2:	80 40       	sbci	r24, 0x00	; 0
 1e4:	90 40       	sbci	r25, 0x00	; 0
 1e6:	e1 f7       	brne	.-8      	; 0x1e0 <__vector_8+0x72>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <__vector_8+0x7c>
 1ea:	00 00       	nop
                _delay_ms(500);
                sendData(0b11000000001111111111);//green
 1ec:	6f ef       	ldi	r22, 0xFF	; 255
 1ee:	73 e0       	ldi	r23, 0x03	; 3
 1f0:	8c e0       	ldi	r24, 0x0C	; 12
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	32 df       	rcall	.-412    	; 0x5a <sendData>
 1f6:	2f ef       	ldi	r18, 0xFF	; 255
 1f8:	89 e6       	ldi	r24, 0x69	; 105
 1fa:	98 e1       	ldi	r25, 0x18	; 24
 1fc:	21 50       	subi	r18, 0x01	; 1
 1fe:	80 40       	sbci	r24, 0x00	; 0
 200:	90 40       	sbci	r25, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <__vector_8+0x8e>
 204:	00 c0       	rjmp	.+0      	; 0x206 <__vector_8+0x98>
 206:	00 00       	nop
                _delay_ms(500);
                sendData(0b00001100001111111111);//red
 208:	6f ef       	ldi	r22, 0xFF	; 255
 20a:	73 ec       	ldi	r23, 0xC3	; 195
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	24 df       	rcall	.-440    	; 0x5a <sendData>
 212:	2f ef       	ldi	r18, 0xFF	; 255
 214:	89 e6       	ldi	r24, 0x69	; 105
 216:	98 e1       	ldi	r25, 0x18	; 24
 218:	21 50       	subi	r18, 0x01	; 1
 21a:	80 40       	sbci	r24, 0x00	; 0
 21c:	90 40       	sbci	r25, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <__vector_8+0xaa>
 220:	00 c0       	rjmp	.+0      	; 0x222 <__vector_8+0xb4>
 222:	00 00       	nop
                _delay_ms(500);
                sendData(0b00110000001111111111);//blue
 224:	6f ef       	ldi	r22, 0xFF	; 255
 226:	73 e0       	ldi	r23, 0x03	; 3
 228:	83 e0       	ldi	r24, 0x03	; 3
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	16 df       	rcall	.-468    	; 0x5a <sendData>
 22e:	2f ef       	ldi	r18, 0xFF	; 255
 230:	89 e6       	ldi	r24, 0x69	; 105
 232:	98 e1       	ldi	r25, 0x18	; 24
 234:	21 50       	subi	r18, 0x01	; 1
 236:	80 40       	sbci	r24, 0x00	; 0
 238:	90 40       	sbci	r25, 0x00	; 0
 23a:	e1 f7       	brne	.-8      	; 0x234 <__vector_8+0xc6>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <__vector_8+0xd0>
 23e:	00 00       	nop
                _delay_ms(500);
                sendData(0b11110000001111111111);//cyan
 240:	6f ef       	ldi	r22, 0xFF	; 255
 242:	73 e0       	ldi	r23, 0x03	; 3
 244:	8f e0       	ldi	r24, 0x0F	; 15
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	08 df       	rcall	.-496    	; 0x5a <sendData>
 24a:	2f ef       	ldi	r18, 0xFF	; 255
 24c:	89 e6       	ldi	r24, 0x69	; 105
 24e:	98 e1       	ldi	r25, 0x18	; 24
 250:	21 50       	subi	r18, 0x01	; 1
 252:	80 40       	sbci	r24, 0x00	; 0
 254:	90 40       	sbci	r25, 0x00	; 0
 256:	e1 f7       	brne	.-8      	; 0x250 <__vector_8+0xe2>
 258:	00 c0       	rjmp	.+0      	; 0x25a <__vector_8+0xec>
 25a:	00 00       	nop
                _delay_ms(500);
                sendData(0b00111100001111111111);//magenta
 25c:	6f ef       	ldi	r22, 0xFF	; 255
 25e:	73 ec       	ldi	r23, 0xC3	; 195
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	fa de       	rcall	.-524    	; 0x5a <sendData>
 266:	2f ef       	ldi	r18, 0xFF	; 255
 268:	89 e6       	ldi	r24, 0x69	; 105
 26a:	98 e1       	ldi	r25, 0x18	; 24
 26c:	21 50       	subi	r18, 0x01	; 1
 26e:	80 40       	sbci	r24, 0x00	; 0
 270:	90 40       	sbci	r25, 0x00	; 0
 272:	e1 f7       	brne	.-8      	; 0x26c <__stack+0xd>
 274:	00 c0       	rjmp	.+0      	; 0x276 <__stack+0x17>
 276:	00 00       	nop
                _delay_ms(500);
                sendData(0b11001100001111111111);//yellow
 278:	6f ef       	ldi	r22, 0xFF	; 255
 27a:	73 ec       	ldi	r23, 0xC3	; 195
 27c:	8c e0       	ldi	r24, 0x0C	; 12
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	ec de       	rcall	.-552    	; 0x5a <sendData>
 282:	2f ef       	ldi	r18, 0xFF	; 255
 284:	89 e6       	ldi	r24, 0x69	; 105
 286:	98 e1       	ldi	r25, 0x18	; 24
 288:	21 50       	subi	r18, 0x01	; 1
 28a:	80 40       	sbci	r24, 0x00	; 0
 28c:	90 40       	sbci	r25, 0x00	; 0
 28e:	e1 f7       	brne	.-8      	; 0x288 <__stack+0x29>
 290:	00 c0       	rjmp	.+0      	; 0x292 <__stack+0x33>
 292:	00 00       	nop
                _delay_ms(500);
                setLeds(currentTime,leds);
 294:	2f ec       	ldi	r18, 0xCF	; 207
 296:	31 e0       	ldi	r19, 0x01	; 1
 298:	40 91 09 02 	lds	r20, 0x0209	; 0x800209 <currentTime>
 29c:	50 91 0a 02 	lds	r21, 0x020A	; 0x80020a <currentTime+0x1>
 2a0:	60 91 0b 02 	lds	r22, 0x020B	; 0x80020b <currentTime+0x2>
 2a4:	70 91 0c 02 	lds	r23, 0x020C	; 0x80020c <currentTime+0x3>
 2a8:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <currentTime+0x4>
 2ac:	f6 d0       	rcall	.+492    	; 0x49a <setLeds>
 2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <__stack+0x57>
            }
        }else{
            clearLeds(leds);
 2b0:	8f ec       	ldi	r24, 0xCF	; 207
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	e8 d0       	rcall	.+464    	; 0x486 <clearLeds>
        }
        ledr=!ledr;
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <ledr>
 2bc:	91 11       	cpse	r25, r1
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <ledr>
 2c4:	1f c0       	rjmp	.+62     	; 0x304 <__stack+0xa5>
    }else{//menu settings mode
        clearLeds(leds);
 2c6:	8f ec       	ldi	r24, 0xCF	; 207
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	dd d0       	rcall	.+442    	; 0x486 <clearLeds>
        ledOn(&leds[Mcurrent->sub[Mindex].led],colorArray[Mcurrent->nb_optn>>4]);
 2cc:	a0 91 c9 01 	lds	r26, 0x01C9	; 0x8001c9 <Mcurrent>
 2d0:	b0 91 ca 01 	lds	r27, 0x01CA	; 0x8001ca <Mcurrent+0x1>
 2d4:	ec 91       	ld	r30, X
 2d6:	e2 95       	swap	r30
 2d8:	ef 70       	andi	r30, 0x0F	; 15
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	ef 59       	subi	r30, 0x9F	; 159
 2de:	ff 4f       	sbci	r31, 0xFF	; 255
 2e0:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <__data_end>
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	01 96       	adiw	r24, 0x01	; 1
 2e8:	63 e0       	ldi	r22, 0x03	; 3
 2ea:	70 e0       	ldi	r23, 0x00	; 0
 2ec:	16 d5       	rcall	.+2604   	; 0xd1a <__mulhi3>
 2ee:	a8 0f       	add	r26, r24
 2f0:	b9 1f       	adc	r27, r25
 2f2:	8c 91       	ld	r24, X
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	63 e0       	ldi	r22, 0x03	; 3
 2f8:	70 e0       	ldi	r23, 0x00	; 0
 2fa:	0f d5       	rcall	.+2590   	; 0xd1a <__mulhi3>
 2fc:	60 81       	ld	r22, Z
 2fe:	81 53       	subi	r24, 0x31	; 49
 300:	9e 4f       	sbci	r25, 0xFE	; 254
 302:	bb d0       	rcall	.+374    	; 0x47a <ledOn>
    }
    
}
 304:	ff 91       	pop	r31
 306:	ef 91       	pop	r30
 308:	cf 91       	pop	r28
 30a:	bf 91       	pop	r27
 30c:	af 91       	pop	r26
 30e:	9f 91       	pop	r25
 310:	8f 91       	pop	r24
 312:	7f 91       	pop	r23
 314:	6f 91       	pop	r22
 316:	5f 91       	pop	r21
 318:	4f 91       	pop	r20
 31a:	3f 91       	pop	r19
 31c:	2f 91       	pop	r18
 31e:	0f 90       	pop	r0
 320:	0f be       	out	0x3f, r0	; 63
 322:	0f 90       	pop	r0
 324:	1f 90       	pop	r1
 326:	18 95       	reti

00000328 <__vector_11>:
ISR( TIM0_OVF_vect ){//mux for each color, row 0 and 1
 328:	1f 92       	push	r1
 32a:	0f 92       	push	r0
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	0f 92       	push	r0
 330:	11 24       	eor	r1, r1
 332:	2f 93       	push	r18
 334:	3f 93       	push	r19
 336:	4f 93       	push	r20
 338:	5f 93       	push	r21
 33a:	6f 93       	push	r22
 33c:	7f 93       	push	r23
 33e:	8f 93       	push	r24
 340:	9f 93       	push	r25
 342:	af 93       	push	r26
 344:	bf 93       	push	r27
 346:	ef 93       	push	r30
 348:	ff 93       	push	r31
    switch(state){
 34a:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <state>
 34e:	82 30       	cpi	r24, 0x02	; 2
 350:	f9 f0       	breq	.+62     	; 0x390 <__vector_11+0x68>
 352:	58 f4       	brcc	.+22     	; 0x36a <__vector_11+0x42>
 354:	88 23       	and	r24, r24
 356:	a9 f0       	breq	.+42     	; 0x382 <__vector_11+0x5a>
 358:	81 30       	cpi	r24, 0x01	; 1
 35a:	79 f5       	brne	.+94     	; 0x3ba <__vector_11+0x92>
        case 0:
            sendData(R2 | getDataByColor(RED,0,leds));
            break;
        case 1:
            sendData(R1 | getDataByColor(RED,1,leds));
 35c:	4f ec       	ldi	r20, 0xCF	; 207
 35e:	51 e0       	ldi	r21, 0x01	; 1
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	84 e0       	ldi	r24, 0x04	; 4
 364:	5e d0       	rcall	.+188    	; 0x422 <getDataByColor>
 366:	70 68       	ori	r23, 0x80	; 128
 368:	27 c0       	rjmp	.+78     	; 0x3b8 <__vector_11+0x90>
        ledOn(&leds[Mcurrent->sub[Mindex].led],colorArray[Mcurrent->nb_optn>>4]);
    }
    
}
ISR( TIM0_OVF_vect ){//mux for each color, row 0 and 1
    switch(state){
 36a:	84 30       	cpi	r24, 0x04	; 4
 36c:	f9 f0       	breq	.+62     	; 0x3ac <__vector_11+0x84>
 36e:	b8 f0       	brcs	.+46     	; 0x39e <__vector_11+0x76>
 370:	85 30       	cpi	r24, 0x05	; 5
 372:	19 f5       	brne	.+70     	; 0x3ba <__vector_11+0x92>
            break;
        case 4:
            sendData(B2 | getDataByColor(BLUE,0,leds));
            break;
        case 5:
            sendData(B1 | getDataByColor(BLUE,1,leds));
 374:	4f ec       	ldi	r20, 0xCF	; 207
 376:	51 e0       	ldi	r21, 0x01	; 1
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	52 d0       	rcall	.+164    	; 0x422 <getDataByColor>
 37e:	82 60       	ori	r24, 0x02	; 2
 380:	1b c0       	rjmp	.+54     	; 0x3b8 <__vector_11+0x90>
    
}
ISR( TIM0_OVF_vect ){//mux for each color, row 0 and 1
    switch(state){
        case 0:
            sendData(R2 | getDataByColor(RED,0,leds));
 382:	4f ec       	ldi	r20, 0xCF	; 207
 384:	51 e0       	ldi	r21, 0x01	; 1
 386:	60 e0       	ldi	r22, 0x00	; 0
 388:	84 e0       	ldi	r24, 0x04	; 4
 38a:	4b d0       	rcall	.+150    	; 0x422 <getDataByColor>
 38c:	70 64       	ori	r23, 0x40	; 64
 38e:	14 c0       	rjmp	.+40     	; 0x3b8 <__vector_11+0x90>
            break;
        case 1:
            sendData(R1 | getDataByColor(RED,1,leds));
            break;
        case 2:
            sendData(G2 | getDataByColor(GREEN,0,leds));
 390:	4f ec       	ldi	r20, 0xCF	; 207
 392:	51 e0       	ldi	r21, 0x01	; 1
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	82 e0       	ldi	r24, 0x02	; 2
 398:	44 d0       	rcall	.+136    	; 0x422 <getDataByColor>
 39a:	84 60       	ori	r24, 0x04	; 4
 39c:	0d c0       	rjmp	.+26     	; 0x3b8 <__vector_11+0x90>
            break;
        case 3:
            sendData(G1 | getDataByColor(GREEN,1,leds));
 39e:	4f ec       	ldi	r20, 0xCF	; 207
 3a0:	51 e0       	ldi	r21, 0x01	; 1
 3a2:	61 e0       	ldi	r22, 0x01	; 1
 3a4:	82 e0       	ldi	r24, 0x02	; 2
 3a6:	3d d0       	rcall	.+122    	; 0x422 <getDataByColor>
 3a8:	88 60       	ori	r24, 0x08	; 8
 3aa:	06 c0       	rjmp	.+12     	; 0x3b8 <__vector_11+0x90>
            break;
        case 4:
            sendData(B2 | getDataByColor(BLUE,0,leds));
 3ac:	4f ec       	ldi	r20, 0xCF	; 207
 3ae:	51 e0       	ldi	r21, 0x01	; 1
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	36 d0       	rcall	.+108    	; 0x422 <getDataByColor>
 3b6:	81 60       	ori	r24, 0x01	; 1
            break;
        case 5:
            sendData(B1 | getDataByColor(BLUE,1,leds));
 3b8:	50 de       	rcall	.-864    	; 0x5a <sendData>
            break;
    }
    state++;
 3ba:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <state>
 3be:	8f 5f       	subi	r24, 0xFF	; 255
 3c0:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <state>
    if(state>5)state=0;
 3c4:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <state>
 3c8:	86 30       	cpi	r24, 0x06	; 6
 3ca:	10 f0       	brcs	.+4      	; 0x3d0 <__vector_11+0xa8>
 3cc:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <state>
}
 3d0:	ff 91       	pop	r31
 3d2:	ef 91       	pop	r30
 3d4:	bf 91       	pop	r27
 3d6:	af 91       	pop	r26
 3d8:	9f 91       	pop	r25
 3da:	8f 91       	pop	r24
 3dc:	7f 91       	pop	r23
 3de:	6f 91       	pop	r22
 3e0:	5f 91       	pop	r21
 3e2:	4f 91       	pop	r20
 3e4:	3f 91       	pop	r19
 3e6:	2f 91       	pop	r18
 3e8:	0f 90       	pop	r0
 3ea:	0f be       	out	0x3f, r0	; 63
 3ec:	0f 90       	pop	r0
 3ee:	1f 90       	pop	r1
 3f0:	18 95       	reti

000003f2 <ledInit>:

static const uint8_t ledMap[11]={7,8,10,14,0,4,17,2,12,6,16};


void ledInit(Led* leds){
    DDRA |= CLK|DATA|STROBE|LED;
 3f2:	2a b3       	in	r18, 0x1a	; 26
 3f4:	2f 60       	ori	r18, 0x0F	; 15
 3f6:	2a bb       	out	0x1a, r18	; 26
    PORTA &= ~(CLK|DATA|STROBE|LED);
 3f8:	2b b3       	in	r18, 0x1b	; 27
 3fa:	20 7f       	andi	r18, 0xF0	; 240
 3fc:	2b bb       	out	0x1b, r18	; 27
 3fe:	fc 01       	movw	r30, r24
    
    for(uint8_t i=0;i<NBLEDS;i++){
 400:	90 e0       	ldi	r25, 0x00	; 0
        leds[i].row=i%2;//leds[0]=0, leds[1]=1
 402:	89 2f       	mov	r24, r25
 404:	81 70       	andi	r24, 0x01	; 1
 406:	81 83       	std	Z+1, r24	; 0x01
        if(i<10){
 408:	9a 30       	cpi	r25, 0x0A	; 10
 40a:	10 f4       	brcc	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
            leds[i].col=i;//0-9
 40c:	90 83       	st	Z, r25
 40e:	03 c0       	rjmp	.+6      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
        }else{
            leds[i].col=i-9;//1-9
 410:	87 ef       	ldi	r24, 0xF7	; 247
 412:	89 0f       	add	r24, r25
 414:	80 83       	st	Z, r24
        }
        leds[i].c=BLACK;
 416:	12 82       	std	Z+2, r1	; 0x02

void ledInit(Led* leds){
    DDRA |= CLK|DATA|STROBE|LED;
    PORTA &= ~(CLK|DATA|STROBE|LED);
    
    for(uint8_t i=0;i<NBLEDS;i++){
 418:	9f 5f       	subi	r25, 0xFF	; 255
 41a:	33 96       	adiw	r30, 0x03	; 3
 41c:	93 31       	cpi	r25, 0x13	; 19
 41e:	89 f7       	brne	.-30     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
        }else{
            leds[i].col=i-9;//1-9
        }
        leds[i].c=BLACK;
    }
}
 420:	08 95       	ret

00000422 <getDataByColor>:

uint32_t getDataByColor(uint8_t c, uint8_t mode, Led* leds){
 422:	0f 93       	push	r16
 424:	1f 93       	push	r17
 426:	cf 93       	push	r28
 428:	df 93       	push	r29
 42a:	c8 2f       	mov	r28, r24
 42c:	d6 2f       	mov	r29, r22
 42e:	fa 01       	movw	r30, r20
 430:	47 5c       	subi	r20, 0xC7	; 199
 432:	5f 4f       	sbci	r21, 0xFF	; 255
    uint32_t data=0x00000000;
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	70 e0       	ldi	r23, 0x00	; 0
 438:	cb 01       	movw	r24, r22
    for(uint8_t i=0;i<NBLEDS;i++){
        if(leds[i].row==mode){
            if((leds[i].c & c) ){
                data|=(1<<leds[i].col);
 43a:	a1 e0       	ldi	r26, 0x01	; 1
 43c:	b0 e0       	ldi	r27, 0x00	; 0
}

uint32_t getDataByColor(uint8_t c, uint8_t mode, Led* leds){
    uint32_t data=0x00000000;
    for(uint8_t i=0;i<NBLEDS;i++){
        if(leds[i].row==mode){
 43e:	21 81       	ldd	r18, Z+1	; 0x01
 440:	2d 13       	cpse	r18, r29
 442:	12 c0       	rjmp	.+36     	; 0x468 <getDataByColor+0x46>
            if((leds[i].c & c) ){
 444:	22 81       	ldd	r18, Z+2	; 0x02
 446:	2c 23       	and	r18, r28
 448:	79 f0       	breq	.+30     	; 0x468 <getDataByColor+0x46>
                data|=(1<<leds[i].col);
 44a:	8d 01       	movw	r16, r26
 44c:	00 80       	ld	r0, Z
 44e:	02 c0       	rjmp	.+4      	; 0x454 <getDataByColor+0x32>
 450:	00 0f       	add	r16, r16
 452:	11 1f       	adc	r17, r17
 454:	0a 94       	dec	r0
 456:	e2 f7       	brpl	.-8      	; 0x450 <getDataByColor+0x2e>
 458:	01 2e       	mov	r0, r17
 45a:	00 0c       	add	r0, r0
 45c:	22 0b       	sbc	r18, r18
 45e:	33 0b       	sbc	r19, r19
 460:	60 2b       	or	r22, r16
 462:	71 2b       	or	r23, r17
 464:	82 2b       	or	r24, r18
 466:	93 2b       	or	r25, r19
 468:	33 96       	adiw	r30, 0x03	; 3
    }
}

uint32_t getDataByColor(uint8_t c, uint8_t mode, Led* leds){
    uint32_t data=0x00000000;
    for(uint8_t i=0;i<NBLEDS;i++){
 46a:	e4 17       	cp	r30, r20
 46c:	f5 07       	cpc	r31, r21
 46e:	39 f7       	brne	.-50     	; 0x43e <getDataByColor+0x1c>
                data|=(1<<leds[i].col);
            }
        }
    }
    return data;
}
 470:	df 91       	pop	r29
 472:	cf 91       	pop	r28
 474:	1f 91       	pop	r17
 476:	0f 91       	pop	r16
 478:	08 95       	ret

0000047a <ledOn>:

void ledOn(Led* l,uint8_t c){
    l->c=c;
 47a:	fc 01       	movw	r30, r24
 47c:	62 83       	std	Z+2, r22	; 0x02
 47e:	08 95       	ret

00000480 <ledOff>:
}
void ledOff(Led* l){
    l->c=BLACK;
 480:	fc 01       	movw	r30, r24
 482:	12 82       	std	Z+2, r1	; 0x02
 484:	08 95       	ret

00000486 <clearLeds>:
}
void clearLeds(Led* l){
 486:	9c 01       	movw	r18, r24
 488:	27 5c       	subi	r18, 0xC7	; 199
 48a:	3f 4f       	sbci	r19, 0xFF	; 255

void ledOn(Led* l,uint8_t c){
    l->c=c;
}
void ledOff(Led* l){
    l->c=BLACK;
 48c:	fc 01       	movw	r30, r24
 48e:	12 82       	std	Z+2, r1	; 0x02
 490:	03 96       	adiw	r24, 0x03	; 3
}
void clearLeds(Led* l){
    for(uint8_t i=0;i<NBLEDS;i++){
 492:	82 17       	cp	r24, r18
 494:	93 07       	cpc	r25, r19
 496:	d1 f7       	brne	.-12     	; 0x48c <clearLeds+0x6>
        ledOff(&l[i]);
    }
}
 498:	08 95       	ret

0000049a <setLeds>:

void setLeds(Ttime t,Led* l){
 49a:	ff 92       	push	r15
 49c:	0f 93       	push	r16
 49e:	1f 93       	push	r17
 4a0:	cf 93       	push	r28
 4a2:	df 93       	push	r29
 4a4:	00 d0       	rcall	.+0      	; 0x4a6 <setLeds+0xc>
 4a6:	00 d0       	rcall	.+0      	; 0x4a8 <setLeds+0xe>
 4a8:	1f 92       	push	r1
 4aa:	cd b7       	in	r28, 0x3d	; 61
 4ac:	de b7       	in	r29, 0x3e	; 62
 4ae:	89 01       	movw	r16, r18
    uint8_t temp=0;
    clearLeds(l);
 4b0:	c9 01       	movw	r24, r18
 4b2:	e9 df       	rcall	.-46     	; 0x486 <clearLeds>
    ledOn(&l[ILEST],getColor());
 4b4:	75 d3       	rcall	.+1770   	; 0xba0 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 4b6:	f8 01       	movw	r30, r16
 4b8:	80 af       	std	Z+56, r24	; 0x38
void setLeds(Ttime t,Led* l){
    uint8_t temp=0;
    clearLeds(l);
    ledOn(&l[ILEST],getColor());
    
    temp=currentTime.hour;
 4ba:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <currentTime>
    if(currentTime.min>35){
 4be:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <currentTime+0x1>
 4c2:	94 32       	cpi	r25, 0x24	; 36
 4c4:	08 f0       	brcs	.+2      	; 0x4c8 <setLeds+0x2e>
        temp++;
 4c6:	8f 5f       	subi	r24, 0xFF	; 255
    }
    if(temp)
 4c8:	88 23       	and	r24, r24
 4ca:	29 f0       	breq	.+10     	; 0x4d6 <setLeds+0x3c>
        temp=temp%12;
 4cc:	6c e0       	ldi	r22, 0x0C	; 12
 4ce:	36 d4       	rcall	.+2156   	; 0xd3c <__udivmodqi4>
 4d0:	f9 2e       	mov	r15, r25
    switch(temp){
 4d2:	91 11       	cpse	r25, r1
 4d4:	04 c0       	rjmp	.+8      	; 0x4de <setLeds+0x44>
        case 0 :
            ledOn(&l[MINUIT],getColor());
 4d6:	64 d3       	rcall	.+1736   	; 0xba0 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 4d8:	f8 01       	movw	r30, r16
 4da:	83 87       	std	Z+11, r24	; 0x0b
 4dc:	12 c0       	rjmp	.+36     	; 0x502 <setLeds+0x68>
            break;
        case 12 :
            ledOn(&l[MIDI],getColor());
            break;
        default :
            ledOn(&l[ledMap[(temp-1)]],getColor());
 4de:	60 d3       	rcall	.+1728   	; 0xba0 <getColor>
 4e0:	28 2f       	mov	r18, r24
 4e2:	ef 2d       	mov	r30, r15
 4e4:	f0 e0       	ldi	r31, 0x00	; 0
 4e6:	e9 59       	subi	r30, 0x99	; 153
 4e8:	ff 4f       	sbci	r31, 0xFF	; 255
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 4ea:	80 81       	ld	r24, Z
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	63 e0       	ldi	r22, 0x03	; 3
 4f0:	70 e0       	ldi	r23, 0x00	; 0
 4f2:	13 d4       	rcall	.+2086   	; 0xd1a <__mulhi3>
 4f4:	80 0f       	add	r24, r16
 4f6:	91 1f       	adc	r25, r17
 4f8:	fc 01       	movw	r30, r24
 4fa:	22 83       	std	Z+2, r18	; 0x02
        case 12 :
            ledOn(&l[MIDI],getColor());
            break;
        default :
            ledOn(&l[ledMap[(temp-1)]],getColor());
            ledOn(&l[HEURE],getColor());
 4fc:	51 d3       	rcall	.+1698   	; 0xba0 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 4fe:	f8 01       	movw	r30, r16
 500:	87 a7       	std	Z+47, r24	; 0x2f
            ledOn(&l[ledMap[(temp-1)]],getColor());
            ledOn(&l[HEURE],getColor());
            break;
    }
    
    temp = minquad(currentTime.min); 
 502:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <currentTime+0x1>
 506:	8a d0       	rcall	.+276    	; 0x61c <minquad>
 508:	f8 2e       	mov	r15, r24
    if(temp > 30){
 50a:	fe e1       	ldi	r31, 0x1E	; 30
 50c:	f8 17       	cp	r31, r24
 50e:	30 f4       	brcc	.+12     	; 0x51c <setLeds+0x82>
        ledOn(&l[MOINS],getColor());
 510:	47 d3       	rcall	.+1678   	; 0xba0 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 512:	f8 01       	movw	r30, r16
 514:	85 8f       	std	Z+29, r24	; 0x1d
    }
    
    temp = minquad(currentTime.min); 
    if(temp > 30){
        ledOn(&l[MOINS],getColor());
        temp=60-temp;
 516:	8c e3       	ldi	r24, 0x3C	; 60
 518:	8f 19       	sub	r24, r15
 51a:	f8 2e       	mov	r15, r24
    }
    switch(temp){
 51c:	f4 e1       	ldi	r31, 0x14	; 20
 51e:	ff 16       	cp	r15, r31
 520:	51 f0       	breq	.+20     	; 0x536 <setLeds+0x9c>
 522:	8e e1       	ldi	r24, 0x1E	; 30
 524:	f8 16       	cp	r15, r24
 526:	59 f0       	breq	.+22     	; 0x53e <setLeds+0xa4>
 528:	ea e0       	ldi	r30, 0x0A	; 10
 52a:	fe 12       	cpse	r15, r30
 52c:	0b c0       	rjmp	.+22     	; 0x544 <setLeds+0xaa>
        case 10 :
            ledOn(&l[DIX],getColor());
 52e:	38 d3       	rcall	.+1648   	; 0xba0 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 530:	f8 01       	movw	r30, r16
 532:	81 8b       	std	Z+17, r24	; 0x11
 534:	07 c0       	rjmp	.+14     	; 0x544 <setLeds+0xaa>
    switch(temp){
        case 10 :
            ledOn(&l[DIX],getColor());
            break;
        case 20 :
            ledOn(&l[VINGT],getColor());
 536:	34 d3       	rcall	.+1640   	; 0xba0 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 538:	f8 01       	movw	r30, r16
 53a:	83 a3       	std	Z+35, r24	; 0x23
 53c:	03 c0       	rjmp	.+6      	; 0x544 <setLeds+0xaa>
            break;
        case 20 :
            ledOn(&l[VINGT],getColor());
            break;
        case 30 :
            ledOn(&l[ETDEMIE],getColor());
 53e:	30 d3       	rcall	.+1632   	; 0xba0 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 540:	f8 01       	movw	r30, r16
 542:	85 83       	std	Z+5, r24	; 0x05
            break;
        case 30 :
            ledOn(&l[ETDEMIE],getColor());
            break;
    }
}
 544:	0f 90       	pop	r0
 546:	0f 90       	pop	r0
 548:	0f 90       	pop	r0
 54a:	0f 90       	pop	r0
 54c:	0f 90       	pop	r0
 54e:	df 91       	pop	r29
 550:	cf 91       	pop	r28
 552:	1f 91       	pop	r17
 554:	0f 91       	pop	r16
 556:	ff 90       	pop	r15
 558:	08 95       	ret

0000055a <setLedsNb>:

void setLedsNb(int8_t nb, Led* l){
 55a:	0f 93       	push	r16
 55c:	1f 93       	push	r17
 55e:	cf 93       	push	r28
 560:	c8 2f       	mov	r28, r24
 562:	8b 01       	movw	r16, r22
    clearLeds(l);
 564:	cb 01       	movw	r24, r22
 566:	8f df       	rcall	.-226    	; 0x486 <clearLeds>
    if(nb < 0){
 568:	c7 ff       	sbrs	r28, 7
 56a:	04 c0       	rjmp	.+8      	; 0x574 <setLedsNb+0x1a>
        ledOn(&l[MOINS],getColor());
 56c:	19 d3       	rcall	.+1586   	; 0xba0 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 56e:	f8 01       	movw	r30, r16
 570:	85 8f       	std	Z+29, r24	; 0x1d

void setLedsNb(int8_t nb, Led* l){
    clearLeds(l);
    if(nb < 0){
        ledOn(&l[MOINS],getColor());
        nb=-nb;
 572:	c1 95       	neg	r28
    }
    if(nb>29){
 574:	ce 31       	cpi	r28, 0x1E	; 30
 576:	44 f0       	brlt	.+16     	; 0x588 <setLedsNb+0x2e>
        ledOn(&l[VINGT],getColor());
 578:	13 d3       	rcall	.+1574   	; 0xba0 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 57a:	f8 01       	movw	r30, r16
 57c:	83 a3       	std	Z+35, r24	; 0x23
        ledOn(&l[MOINS],getColor());
        nb=-nb;
    }
    if(nb>29){
        ledOn(&l[VINGT],getColor());
        ledOn(&l[DIX],getColor());
 57e:	10 d3       	rcall	.+1568   	; 0xba0 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 580:	f8 01       	movw	r30, r16
 582:	81 8b       	std	Z+17, r24	; 0x11
        nb=-nb;
    }
    if(nb>29){
        ledOn(&l[VINGT],getColor());
        ledOn(&l[DIX],getColor());
        nb=nb-30;
 584:	ce 51       	subi	r28, 0x1E	; 30
 586:	0d c0       	rjmp	.+26     	; 0x5a2 <setLedsNb+0x48>
    }else if(nb>19){
 588:	c4 31       	cpi	r28, 0x14	; 20
 58a:	2c f0       	brlt	.+10     	; 0x596 <setLedsNb+0x3c>
        ledOn(&l[VINGT],getColor());
 58c:	09 d3       	rcall	.+1554   	; 0xba0 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 58e:	f8 01       	movw	r30, r16
 590:	83 a3       	std	Z+35, r24	; 0x23
        ledOn(&l[VINGT],getColor());
        ledOn(&l[DIX],getColor());
        nb=nb-30;
    }else if(nb>19){
        ledOn(&l[VINGT],getColor());
        nb=nb-20;
 592:	c4 51       	subi	r28, 0x14	; 20
 594:	06 c0       	rjmp	.+12     	; 0x5a2 <setLedsNb+0x48>
    }else if(nb>11){
 596:	cc 30       	cpi	r28, 0x0C	; 12
 598:	24 f0       	brlt	.+8      	; 0x5a2 <setLedsNb+0x48>
        ledOn(&l[DIX],getColor());
 59a:	02 d3       	rcall	.+1540   	; 0xba0 <getColor>
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 59c:	f8 01       	movw	r30, r16
 59e:	81 8b       	std	Z+17, r24	; 0x11
    }else if(nb>19){
        ledOn(&l[VINGT],getColor());
        nb=nb-20;
    }else if(nb>11){
        ledOn(&l[DIX],getColor());
        nb=nb-10;
 5a0:	ca 50       	subi	r28, 0x0A	; 10
    }
    ledOn(&l[ledMap[nb-1]],getColor());
 5a2:	fe d2       	rcall	.+1532   	; 0xba0 <getColor>
 5a4:	28 2f       	mov	r18, r24
 5a6:	ec 2f       	mov	r30, r28
 5a8:	cc 0f       	add	r28, r28
 5aa:	ff 0b       	sbc	r31, r31
 5ac:	e9 59       	subi	r30, 0x99	; 153
 5ae:	ff 4f       	sbci	r31, 0xFF	; 255
    }
    return data;
}

void ledOn(Led* l,uint8_t c){
    l->c=c;
 5b0:	80 81       	ld	r24, Z
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	63 e0       	ldi	r22, 0x03	; 3
 5b6:	70 e0       	ldi	r23, 0x00	; 0
 5b8:	b0 d3       	rcall	.+1888   	; 0xd1a <__mulhi3>
 5ba:	80 0f       	add	r24, r16
 5bc:	91 1f       	adc	r25, r17
 5be:	fc 01       	movw	r30, r24
 5c0:	22 83       	std	Z+2, r18	; 0x02
    }else if(nb>11){
        ledOn(&l[DIX],getColor());
        nb=nb-10;
    }
    ledOn(&l[ledMap[nb-1]],getColor());
}
 5c2:	cf 91       	pop	r28
 5c4:	1f 91       	pop	r17
 5c6:	0f 91       	pop	r16
 5c8:	08 95       	ret

000005ca <sendRawData>:
void sendRawData(uint32_t data){
 5ca:	0f 93       	push	r16
 5cc:	1f 93       	push	r17
    PORTA &=~(STROBE|CLK);
 5ce:	2b b3       	in	r18, 0x1b	; 27
 5d0:	23 7f       	andi	r18, 0xF3	; 243
 5d2:	2b bb       	out	0x1b, r18	; 27
 5d4:	40 e0       	ldi	r20, 0x00	; 0
 5d6:	50 e0       	ldi	r21, 0x00	; 0
    for(uint8_t i=0;i<20;i++){
        if((data>>i) & 0x00000001){
 5d8:	8b 01       	movw	r16, r22
 5da:	9c 01       	movw	r18, r24
 5dc:	04 2e       	mov	r0, r20
 5de:	04 c0       	rjmp	.+8      	; 0x5e8 <sendRawData+0x1e>
 5e0:	36 95       	lsr	r19
 5e2:	27 95       	ror	r18
 5e4:	17 95       	ror	r17
 5e6:	07 95       	ror	r16
 5e8:	0a 94       	dec	r0
 5ea:	d2 f7       	brpl	.-12     	; 0x5e0 <sendRawData+0x16>
 5ec:	00 ff       	sbrs	r16, 0
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <sendRawData+0x2a>
            PORTA|=DATA;
 5f0:	d9 9a       	sbi	0x1b, 1	; 27
 5f2:	01 c0       	rjmp	.+2      	; 0x5f6 <sendRawData+0x2c>
        }else{
            PORTA&=~DATA;
 5f4:	d9 98       	cbi	0x1b, 1	; 27
        }
        PORTA|=CLK;
 5f6:	db 9a       	sbi	0x1b, 3	; 27
        PORTA&=~CLK;
 5f8:	db 98       	cbi	0x1b, 3	; 27
 5fa:	4f 5f       	subi	r20, 0xFF	; 255
 5fc:	5f 4f       	sbci	r21, 0xFF	; 255
    }
    ledOn(&l[ledMap[nb-1]],getColor());
}
void sendRawData(uint32_t data){
    PORTA &=~(STROBE|CLK);
    for(uint8_t i=0;i<20;i++){
 5fe:	44 31       	cpi	r20, 0x14	; 20
 600:	51 05       	cpc	r21, r1
 602:	51 f7       	brne	.-44     	; 0x5d8 <sendRawData+0xe>
            PORTA&=~DATA;
        }
        PORTA|=CLK;
        PORTA&=~CLK;
    }
    PORTA|=STROBE;
 604:	da 9a       	sbi	0x1b, 2	; 27
    PORTA&=~STROBE;
 606:	da 98       	cbi	0x1b, 2	; 27
}
 608:	1f 91       	pop	r17
 60a:	0f 91       	pop	r16
 60c:	08 95       	ret

0000060e <setCurrentTime>:
#include "RTC.h" 

void setCurrentTime(uint8_t hour,uint8_t min,uint8_t monthDay,uint8_t month){
    currentTime.hour=hour;
 60e:	e9 e0       	ldi	r30, 0x09	; 9
 610:	f2 e0       	ldi	r31, 0x02	; 2
 612:	80 83       	st	Z, r24
    currentTime.min=min;
 614:	61 83       	std	Z+1, r22	; 0x01
    currentTime.monthDay=monthDay;
 616:	42 83       	std	Z+2, r20	; 0x02
    currentTime.month=month;
 618:	23 83       	std	Z+3, r18	; 0x03
 61a:	08 95       	ret

0000061c <minquad>:
}

uint8_t minquad(uint8_t min){
    if(min > 5){
 61c:	86 30       	cpi	r24, 0x06	; 6
 61e:	a0 f0       	brcs	.+40     	; 0x648 <minquad+0x2c>
        if(min > 15){
 620:	80 31       	cpi	r24, 0x10	; 16
 622:	50 f0       	brcs	.+20     	; 0x638 <minquad+0x1c>
            if(min > 25){
 624:	8a 31       	cpi	r24, 0x1A	; 26
 626:	50 f0       	brcs	.+20     	; 0x63c <minquad+0x20>
                if(min > 35){
 628:	84 32       	cpi	r24, 0x24	; 36
 62a:	50 f0       	brcs	.+20     	; 0x640 <minquad+0x24>
                    if(min > 45){
 62c:	8e 32       	cpi	r24, 0x2E	; 46
 62e:	50 f0       	brcs	.+20     	; 0x644 <minquad+0x28>
                        if(min > 55){
 630:	88 33       	cpi	r24, 0x38	; 56
 632:	50 f4       	brcc	.+20     	; 0x648 <minquad+0x2c>
                            return 0;
                        }else{return 50;}
 634:	82 e3       	ldi	r24, 0x32	; 50
 636:	08 95       	ret
                    }else{return 40;}
                }else{return 30;}
            }else{return 20;}
        }else{return 10;}
 638:	8a e0       	ldi	r24, 0x0A	; 10
 63a:	08 95       	ret
                        if(min > 55){
                            return 0;
                        }else{return 50;}
                    }else{return 40;}
                }else{return 30;}
            }else{return 20;}
 63c:	84 e1       	ldi	r24, 0x14	; 20
 63e:	08 95       	ret
                    if(min > 45){
                        if(min > 55){
                            return 0;
                        }else{return 50;}
                    }else{return 40;}
                }else{return 30;}
 640:	8e e1       	ldi	r24, 0x1E	; 30
 642:	08 95       	ret
                if(min > 35){
                    if(min > 45){
                        if(min > 55){
                            return 0;
                        }else{return 50;}
                    }else{return 40;}
 644:	88 e2       	ldi	r24, 0x28	; 40
 646:	08 95       	ret
                }else{return 30;}
            }else{return 20;}
        }else{return 10;}
    }else{return 0;}
 648:	80 e0       	ldi	r24, 0x00	; 0
}
 64a:	08 95       	ret

0000064c <bcdToDec>:
    }else{
        return 0;
    }
    
}
uint8_t bcdToDec(uint8_t val){
 64c:	98 2f       	mov	r25, r24
    return ((val/16*10) + (val%16));
 64e:	82 95       	swap	r24
 650:	8f 70       	andi	r24, 0x0F	; 15
 652:	6a e0       	ldi	r22, 0x0A	; 10
 654:	59 d3       	rcall	.+1714   	; 0xd08 <__mulqi3>
 656:	9f 70       	andi	r25, 0x0F	; 15
}
 658:	89 0f       	add	r24, r25
 65a:	08 95       	ret

0000065c <decToBcd>:
uint8_t decToBcd(uint8_t val){
    return( (val/10*16) + (val%10) );
 65c:	6a e0       	ldi	r22, 0x0A	; 10
 65e:	6e d3       	rcall	.+1756   	; 0xd3c <__udivmodqi4>
 660:	82 95       	swap	r24
 662:	80 7f       	andi	r24, 0xF0	; 240
}
 664:	89 0f       	add	r24, r25
 666:	08 95       	ret

00000668 <i2c_in_transfer>:
        return 0;
    }
}

uint8_t i2c_in_transfer(uint8_t USISR_temp){
    USISR = USISR_temp;								//Set USISR as requested by calling function
 668:	8e b9       	out	0x0e, r24	; 14
    do{
        _delay_us(I2C_TLOW);
        USICR = 0b00101011;								//SCL Positive Edge
 66a:	8b e2       	ldi	r24, 0x2B	; 43
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 66c:	95 e0       	ldi	r25, 0x05	; 5
 66e:	9a 95       	dec	r25
 670:	f1 f7       	brne	.-4      	; 0x66e <i2c_in_transfer+0x6>
 672:	00 00       	nop
 674:	8d b9       	out	0x0d, r24	; 13
        while (!(PIN_USI&(1<<PIN_USI_SCL)));		//Wait for SCL to go high
 676:	cc 9b       	sbis	0x19, 4	; 25
 678:	fe cf       	rjmp	.-4      	; 0x676 <i2c_in_transfer+0xe>
 67a:	94 e0       	ldi	r25, 0x04	; 4
 67c:	9a 95       	dec	r25
 67e:	f1 f7       	brne	.-4      	; 0x67c <i2c_in_transfer+0x14>
        _delay_us(I2C_THIGH);
        USICR = 0b00101011;								//SCL Negative Edge
 680:	8d b9       	out	0x0d, r24	; 13
    }while (!(USISR&(1<<USIOIF)));					//Do until transfer is complete
 682:	76 9b       	sbis	0x0e, 6	; 14
 684:	f3 cf       	rjmp	.-26     	; 0x66c <i2c_in_transfer+0x4>
 686:	85 e0       	ldi	r24, 0x05	; 5
 688:	8a 95       	dec	r24
 68a:	f1 f7       	brne	.-4      	; 0x688 <i2c_in_transfer+0x20>
 68c:	00 00       	nop
    _delay_us(I2C_TLOW);
    return USIDR;
 68e:	8f b1       	in	r24, 0x0f	; 15
}
 690:	08 95       	ret

00000692 <i2c_in_transmit>:
uint8_t i2c_in_transmit(uint8_t *msg, uint8_t msg_size){
 692:	ef 92       	push	r14
 694:	ff 92       	push	r15
 696:	0f 93       	push	r16
 698:	1f 93       	push	r17
 69a:	cf 93       	push	r28
 69c:	df 93       	push	r29
 69e:	ec 01       	movw	r28, r24
 6a0:	16 2f       	mov	r17, r22
    USI_I2C_Master_State = USI_ADDRESS;
 6a2:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <USI_I2C_Master_State>
    
    //   Start Condition
    PORT_USI |=  (1 << PORT_USI_SCL); 						//Setting input makes line pull high
 6a6:	dc 9a       	sbi	0x1b, 4	; 27
    while (!(PIN_USI & (1<<PIN_USI_SCL)));		//Wait for SCL to go high
 6a8:	cc 9b       	sbis	0x19, 4	; 25
 6aa:	fe cf       	rjmp	.-4      	; 0x6a8 <i2c_in_transmit+0x16>
 6ac:	84 e0       	ldi	r24, 0x04	; 4
 6ae:	8a 95       	dec	r24
 6b0:	f1 f7       	brne	.-4      	; 0x6ae <i2c_in_transmit+0x1c>
    #ifdef I2C_FAST_MODE
    _delay_us(I2C_THIGH);
    #else
    _delay_us(I2C_TLOW);
    #endif
    DDR_USI |=  (1 << PORT_USI_SDA);
 6b2:	d6 9a       	sbi	0x1a, 6	; 26
    DDR_USI |=  (1 << PORT_USI_SCL);
 6b4:	d4 9a       	sbi	0x1a, 4	; 26
    PORT_USI &= ~(1 << PORT_USI_SDA);
 6b6:	de 98       	cbi	0x1b, 6	; 27
 6b8:	84 e0       	ldi	r24, 0x04	; 4
 6ba:	8a 95       	dec	r24
 6bc:	f1 f7       	brne	.-4      	; 0x6ba <i2c_in_transmit+0x28>
    _delay_us(I2C_THIGH);;
    PORT_USI &= ~(1 << PORT_USI_SCL);
 6be:	dc 98       	cbi	0x1b, 4	; 27
 6c0:	85 e0       	ldi	r24, 0x05	; 5
 6c2:	8a 95       	dec	r24
 6c4:	f1 f7       	brne	.-4      	; 0x6c2 <i2c_in_transmit+0x30>
 6c6:	00 00       	nop
    _delay_us(I2C_TLOW);
    PORT_USI |=  (1 << PORT_USI_SDA);
 6c8:	de 9a       	sbi	0x1b, 6	; 27
        switch(USI_I2C_Master_State){
            case USI_ADDRESS:
                if(!(*msg & 0x01)){
                    USI_I2C_Master_State = USI_WRITE;
                }else{
                    USI_I2C_Master_State = USI_READ;
 6ca:	02 e0       	ldi	r16, 0x02	; 2
    
    do{
        switch(USI_I2C_Master_State){
            case USI_ADDRESS:
                if(!(*msg & 0x01)){
                    USI_I2C_Master_State = USI_WRITE;
 6cc:	ff 24       	eor	r15, r15
 6ce:	f3 94       	inc	r15
                DDR_USI &= ~(1 << PORT_USI_SDA);
                (*msg) = i2c_in_transfer(0b11110000 | (0x00<<USICNT0));			
                msg++;
                DDR_USI |=  (1 << PORT_USI_SDA);				
                if(msg_size == 1){
                    USIDR = 0xFF;			//Load NACK to end transmission
 6d0:	ee 24       	eor	r14, r14
 6d2:	ea 94       	dec	r14
    PORT_USI &= ~(1 << PORT_USI_SCL);
    _delay_us(I2C_TLOW);
    PORT_USI |=  (1 << PORT_USI_SDA);
    
    do{
        switch(USI_I2C_Master_State){
 6d4:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <USI_I2C_Master_State>
 6d8:	81 30       	cpi	r24, 0x01	; 1
 6da:	61 f0       	breq	.+24     	; 0x6f4 <i2c_in_transmit+0x62>
 6dc:	18 f0       	brcs	.+6      	; 0x6e4 <i2c_in_transmit+0x52>
 6de:	82 30       	cpi	r24, 0x02	; 2
 6e0:	c9 f0       	breq	.+50     	; 0x714 <i2c_in_transmit+0x82>
 6e2:	24 c0       	rjmp	.+72     	; 0x72c <i2c_in_transmit+0x9a>
            case USI_ADDRESS:
                if(!(*msg & 0x01)){
 6e4:	88 81       	ld	r24, Y
 6e6:	80 fd       	sbrc	r24, 0
 6e8:	03 c0       	rjmp	.+6      	; 0x6f0 <i2c_in_transmit+0x5e>
                    USI_I2C_Master_State = USI_WRITE;
 6ea:	f0 92 08 02 	sts	0x0208, r15	; 0x800208 <USI_I2C_Master_State>
 6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <i2c_in_transmit+0x62>
                }else{
                    USI_I2C_Master_State = USI_READ;
 6f0:	00 93 08 02 	sts	0x0208, r16	; 0x800208 <USI_I2C_Master_State>
                }//no break so goes to Write
                
            case USI_WRITE:
                PORT_USI &= ~(1 << PORT_USI_SCL);
 6f4:	dc 98       	cbi	0x1b, 4	; 27
                USIDR = *(msg);				//Load data			
 6f6:	89 91       	ld	r24, Y+
 6f8:	8f b9       	out	0x0f, r24	; 15
                msg++;						//Increment buffer pointer
                i2c_in_transfer(0b11110000 | (0x00<<USICNT0));
 6fa:	80 ef       	ldi	r24, 0xF0	; 240
 6fc:	b5 df       	rcall	.-150    	; 0x668 <i2c_in_transfer>
                DDR_USI &= ~(1 << PORT_USI_SDA);
 6fe:	d6 98       	cbi	0x1a, 6	; 26
                if(i2c_in_transfer(0b11110000 | (0x0E<<USICNT0)) & 0x01){
 700:	8e ef       	ldi	r24, 0xFE	; 254
 702:	b2 df       	rcall	.-156    	; 0x668 <i2c_in_transfer>
 704:	80 ff       	sbrs	r24, 0
 706:	04 c0       	rjmp	.+8      	; 0x710 <i2c_in_transmit+0x7e>
                    PORT_USI |=  (1 << PORT_USI_SCL);
 708:	dc 9a       	sbi	0x1b, 4	; 27
                    PORT_USI |=  (1 << PORT_USI_SDA);
 70a:	de 9a       	sbi	0x1b, 6	; 27
                    return 0;
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	1f c0       	rjmp	.+62     	; 0x74e <i2c_in_transmit+0xbc>
                }
                DDR_USI |=  (1 << PORT_USI_SDA);
 710:	d6 9a       	sbi	0x1a, 6	; 26
                break;
 712:	0c c0       	rjmp	.+24     	; 0x72c <i2c_in_transmit+0x9a>
                
            case USI_READ:
                DDR_USI &= ~(1 << PORT_USI_SDA);
 714:	d6 98       	cbi	0x1a, 6	; 26
                (*msg) = i2c_in_transfer(0b11110000 | (0x00<<USICNT0));			
 716:	80 ef       	ldi	r24, 0xF0	; 240
 718:	a7 df       	rcall	.-178    	; 0x668 <i2c_in_transfer>
 71a:	89 93       	st	Y+, r24
                msg++;
                DDR_USI |=  (1 << PORT_USI_SDA);				
 71c:	d6 9a       	sbi	0x1a, 6	; 26
                if(msg_size == 1){
 71e:	11 30       	cpi	r17, 0x01	; 1
 720:	11 f4       	brne	.+4      	; 0x726 <i2c_in_transmit+0x94>
                    USIDR = 0xFF;			//Load NACK to end transmission
 722:	ef b8       	out	0x0f, r14	; 15
 724:	01 c0       	rjmp	.+2      	; 0x728 <i2c_in_transmit+0x96>
                }else{
                    USIDR = 0x00;			//Load ACK
 726:	1f b8       	out	0x0f, r1	; 15
                }
                i2c_in_transfer(0b11110000 | (0x0E<<USICNT0));
 728:	8e ef       	ldi	r24, 0xFE	; 254
 72a:	9e df       	rcall	.-196    	; 0x668 <i2c_in_transfer>
                break;
        }
    }while(--msg_size);
 72c:	11 50       	subi	r17, 0x01	; 1
 72e:	91 f6       	brne	.-92     	; 0x6d4 <i2c_in_transmit+0x42>
    
    //Stop Condition
    PORT_USI &= ~(1 << PORT_USI_SDA);           				// Pull SDA low.
 730:	de 98       	cbi	0x1b, 6	; 27
 732:	85 e0       	ldi	r24, 0x05	; 5
 734:	8a 95       	dec	r24
 736:	f1 f7       	brne	.-4      	; 0x734 <i2c_in_transmit+0xa2>
 738:	00 00       	nop
    _delay_us(I2C_TLOW);
    DDR_USI &= ~(1 << PORT_USI_SCL);            				// Release SCL.
 73a:	d4 98       	cbi	0x1a, 4	; 26
    while( !(PIN_USI & (1<<PIN_USI_SCL)) );  	// Wait for SCL to go high.  
 73c:	cc 9b       	sbis	0x19, 4	; 25
 73e:	fe cf       	rjmp	.-4      	; 0x73c <i2c_in_transmit+0xaa>
 740:	84 e0       	ldi	r24, 0x04	; 4
 742:	8a 95       	dec	r24
 744:	f1 f7       	brne	.-4      	; 0x742 <i2c_in_transmit+0xb0>
    _delay_us(I2C_THIGH);
    DDR_USI &= ~(1 << PORT_USI_SDA);            				// Release SDA.
 746:	d6 98       	cbi	0x1a, 6	; 26
    while( !(PIN_USI & (1<<PIN_USI_SDA)) );  	// Wait for SDA to go high. 
 748:	ce 9b       	sbis	0x19, 6	; 25
 74a:	fe cf       	rjmp	.-4      	; 0x748 <i2c_in_transmit+0xb6>
    return 1;
 74c:	81 e0       	ldi	r24, 0x01	; 1
}
 74e:	df 91       	pop	r29
 750:	cf 91       	pop	r28
 752:	1f 91       	pop	r17
 754:	0f 91       	pop	r16
 756:	ff 90       	pop	r15
 758:	ef 90       	pop	r14
 75a:	08 95       	ret

0000075c <i2c_write>:
    i2c_write(RTC_addr,2,decToBcd(hour));
}
void RTC_setMin(uint8_t min){
    i2c_write(RTC_addr,1,decToBcd(min));
}
uint8_t i2c_write(uint8_t addr, uint8_t adrs, uint8_t val){ // only supports 1 byte write
 75c:	cf 93       	push	r28
 75e:	df 93       	push	r29
 760:	00 d0       	rcall	.+0      	; 0x762 <i2c_write+0x6>
 762:	1f 92       	push	r1
 764:	cd b7       	in	r28, 0x3d	; 61
 766:	de b7       	in	r29, 0x3e	; 62
    uint8_t i2c_buffer[3];
    uint8_t i2c_buffer_len = 3;
    i2c_buffer[0] = (addr << 1) | I2CWRITE ;
 768:	88 0f       	add	r24, r24
 76a:	89 83       	std	Y+1, r24	; 0x01
    i2c_buffer[1] = adrs;
 76c:	6a 83       	std	Y+2, r22	; 0x02
    i2c_buffer[2] = val;
 76e:	4b 83       	std	Y+3, r20	; 0x03
    return i2c_in_transmit(i2c_buffer, i2c_buffer_len);
 770:	63 e0       	ldi	r22, 0x03	; 3
 772:	ce 01       	movw	r24, r28
 774:	01 96       	adiw	r24, 0x01	; 1
 776:	8d df       	rcall	.-230    	; 0x692 <i2c_in_transmit>
}
 778:	0f 90       	pop	r0
 77a:	0f 90       	pop	r0
 77c:	0f 90       	pop	r0
 77e:	df 91       	pop	r29
 780:	cf 91       	pop	r28
 782:	08 95       	ret

00000784 <RTC_setTime>:
        return 1;
    }else{
        return 0;
    }
}
void RTC_setTime(struct Ttime t,uint8_t day, uint8_t year){
 784:	0f 93       	push	r16
 786:	1f 93       	push	r17
 788:	cf 93       	push	r28
 78a:	df 93       	push	r29
 78c:	00 d0       	rcall	.+0      	; 0x78e <RTC_setTime+0xa>
 78e:	00 d0       	rcall	.+0      	; 0x790 <RTC_setTime+0xc>
 790:	1f 92       	push	r1
 792:	cd b7       	in	r28, 0x3d	; 61
 794:	de b7       	in	r29, 0x3e	; 62
 796:	49 83       	std	Y+1, r20	; 0x01
 798:	85 2f       	mov	r24, r21
 79a:	6b 83       	std	Y+3, r22	; 0x03
 79c:	7c 83       	std	Y+4, r23	; 0x04
 79e:	12 2f       	mov	r17, r18
    i2c_write(RTC_addr,1,decToBcd(t.min));
 7a0:	5d df       	rcall	.-326    	; 0x65c <decToBcd>
 7a2:	48 2f       	mov	r20, r24
 7a4:	61 e0       	ldi	r22, 0x01	; 1
 7a6:	88 e6       	ldi	r24, 0x68	; 104
 7a8:	d9 df       	rcall	.-78     	; 0x75c <i2c_write>
    i2c_write(RTC_addr,2,decToBcd(t.hour));
 7aa:	89 81       	ldd	r24, Y+1	; 0x01
 7ac:	57 df       	rcall	.-338    	; 0x65c <decToBcd>
 7ae:	48 2f       	mov	r20, r24
 7b0:	62 e0       	ldi	r22, 0x02	; 2
 7b2:	88 e6       	ldi	r24, 0x68	; 104
 7b4:	d3 df       	rcall	.-90     	; 0x75c <i2c_write>
    i2c_write(RTC_addr,3,decToBcd(day));
 7b6:	81 2f       	mov	r24, r17
 7b8:	51 df       	rcall	.-350    	; 0x65c <decToBcd>
 7ba:	48 2f       	mov	r20, r24
 7bc:	63 e0       	ldi	r22, 0x03	; 3
 7be:	88 e6       	ldi	r24, 0x68	; 104
 7c0:	cd df       	rcall	.-102    	; 0x75c <i2c_write>
    i2c_write(RTC_addr,4,decToBcd(t.monthDay));
 7c2:	8b 81       	ldd	r24, Y+3	; 0x03
 7c4:	4b df       	rcall	.-362    	; 0x65c <decToBcd>
 7c6:	48 2f       	mov	r20, r24
 7c8:	64 e0       	ldi	r22, 0x04	; 4
 7ca:	88 e6       	ldi	r24, 0x68	; 104
 7cc:	c7 df       	rcall	.-114    	; 0x75c <i2c_write>
    i2c_write(RTC_addr,5,decToBcd(t.month));
 7ce:	8c 81       	ldd	r24, Y+4	; 0x04
 7d0:	45 df       	rcall	.-374    	; 0x65c <decToBcd>
 7d2:	48 2f       	mov	r20, r24
 7d4:	65 e0       	ldi	r22, 0x05	; 5
 7d6:	88 e6       	ldi	r24, 0x68	; 104
 7d8:	c1 df       	rcall	.-126    	; 0x75c <i2c_write>
    i2c_write(RTC_addr,6,decToBcd(year));
 7da:	80 2f       	mov	r24, r16
 7dc:	3f df       	rcall	.-386    	; 0x65c <decToBcd>
 7de:	48 2f       	mov	r20, r24
 7e0:	66 e0       	ldi	r22, 0x06	; 6
 7e2:	88 e6       	ldi	r24, 0x68	; 104
}
 7e4:	0f 90       	pop	r0
 7e6:	0f 90       	pop	r0
 7e8:	0f 90       	pop	r0
 7ea:	0f 90       	pop	r0
 7ec:	0f 90       	pop	r0
 7ee:	df 91       	pop	r29
 7f0:	cf 91       	pop	r28
 7f2:	1f 91       	pop	r17
 7f4:	0f 91       	pop	r16
    i2c_write(RTC_addr,1,decToBcd(t.min));
    i2c_write(RTC_addr,2,decToBcd(t.hour));
    i2c_write(RTC_addr,3,decToBcd(day));
    i2c_write(RTC_addr,4,decToBcd(t.monthDay));
    i2c_write(RTC_addr,5,decToBcd(t.month));
    i2c_write(RTC_addr,6,decToBcd(year));
 7f6:	b2 cf       	rjmp	.-156    	; 0x75c <i2c_write>

000007f8 <RTC_setHour>:
}

void RTC_setHour(uint8_t hour){
    i2c_write(RTC_addr,2,decToBcd(hour));
 7f8:	31 df       	rcall	.-414    	; 0x65c <decToBcd>
 7fa:	48 2f       	mov	r20, r24
 7fc:	62 e0       	ldi	r22, 0x02	; 2
 7fe:	88 e6       	ldi	r24, 0x68	; 104
 800:	ad cf       	rjmp	.-166    	; 0x75c <i2c_write>

00000802 <RTC_setMin>:
}
void RTC_setMin(uint8_t min){
    i2c_write(RTC_addr,1,decToBcd(min));
 802:	2c df       	rcall	.-424    	; 0x65c <decToBcd>
 804:	48 2f       	mov	r20, r24
 806:	61 e0       	ldi	r22, 0x01	; 1
 808:	88 e6       	ldi	r24, 0x68	; 104
 80a:	a8 cf       	rjmp	.-176    	; 0x75c <i2c_write>

0000080c <i2c_read>:
    i2c_buffer[0] = (addr << 1) | I2CWRITE ;
    i2c_buffer[1] = adrs;
    i2c_buffer[2] = val;
    return i2c_in_transmit(i2c_buffer, i2c_buffer_len);
}
uint8_t i2c_read(uint8_t addr, uint8_t len, uint8_t adrs, uint8_t *buf){
 80c:	8f 92       	push	r8
 80e:	9f 92       	push	r9
 810:	af 92       	push	r10
 812:	bf 92       	push	r11
 814:	cf 92       	push	r12
 816:	df 92       	push	r13
 818:	ef 92       	push	r14
 81a:	ff 92       	push	r15
 81c:	0f 93       	push	r16
 81e:	1f 93       	push	r17
 820:	cf 93       	push	r28
 822:	df 93       	push	r29
 824:	cd b7       	in	r28, 0x3d	; 61
 826:	de b7       	in	r29, 0x3e	; 62
 828:	18 2f       	mov	r17, r24
 82a:	06 2f       	mov	r16, r22
 82c:	49 01       	movw	r8, r18
        }
        return 1; // provide success check
    }else{
        return 0;
    }
}
 82e:	ad b6       	in	r10, 0x3d	; 61
 830:	be b6       	in	r11, 0x3e	; 62
    i2c_buffer[2] = val;
    return i2c_in_transmit(i2c_buffer, i2c_buffer_len);
}
uint8_t i2c_read(uint8_t addr, uint8_t len, uint8_t adrs, uint8_t *buf){
    //set register pointer to adrs
    uint8_t i2c_buffer[len+1];
 832:	c6 2e       	mov	r12, r22
 834:	d1 2c       	mov	r13, r1
 836:	c6 01       	movw	r24, r12
 838:	01 96       	adiw	r24, 0x01	; 1
 83a:	2d b7       	in	r18, 0x3d	; 61
 83c:	3e b7       	in	r19, 0x3e	; 62
 83e:	28 1b       	sub	r18, r24
 840:	39 0b       	sbc	r19, r25
 842:	0f b6       	in	r0, 0x3f	; 63
 844:	f8 94       	cli
 846:	3e bf       	out	0x3e, r19	; 62
 848:	0f be       	out	0x3f, r0	; 63
 84a:	2d bf       	out	0x3d, r18	; 61
 84c:	8d b7       	in	r24, 0x3d	; 61
 84e:	9e b7       	in	r25, 0x3e	; 62
 850:	01 96       	adiw	r24, 0x01	; 1
 852:	7c 01       	movw	r14, r24
    uint8_t i2c_buffer_len = 2;
    i2c_buffer[0] = (addr << 1) | I2CWRITE;
 854:	81 2f       	mov	r24, r17
 856:	88 0f       	add	r24, r24
 858:	ed b7       	in	r30, 0x3d	; 61
 85a:	fe b7       	in	r31, 0x3e	; 62
 85c:	81 83       	std	Z+1, r24	; 0x01
    i2c_buffer[1] = adrs;
 85e:	f7 01       	movw	r30, r14
 860:	41 83       	std	Z+1, r20	; 0x01
    i2c_in_transmit(i2c_buffer, i2c_buffer_len);
 862:	62 e0       	ldi	r22, 0x02	; 2
 864:	c7 01       	movw	r24, r14
 866:	15 df       	rcall	.-470    	; 0x692 <i2c_in_transmit>
    //read actual data
    i2c_buffer_len = len+1;
    i2c_buffer[0] = (addr << 1) | I2CREAD;
 868:	11 0f       	add	r17, r17
 86a:	11 60       	ori	r17, 0x01	; 1
 86c:	f7 01       	movw	r30, r14
 86e:	10 83       	st	Z, r17
    if(i2c_in_transmit(i2c_buffer, i2c_buffer_len)){
 870:	61 e0       	ldi	r22, 0x01	; 1
 872:	60 0f       	add	r22, r16
 874:	c7 01       	movw	r24, r14
 876:	0d df       	rcall	.-486    	; 0x692 <i2c_in_transmit>
 878:	88 23       	and	r24, r24
 87a:	91 f0       	breq	.+36     	; 0x8a0 <i2c_read+0x94>
 87c:	21 e0       	ldi	r18, 0x01	; 1
        uint8_t i;
        for(i=1;i<len+1;i++){ // fetch in buffer
 87e:	82 2f       	mov	r24, r18
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	c8 16       	cp	r12, r24
 884:	d9 06       	cpc	r13, r25
 886:	5c f0       	brlt	.+22     	; 0x89e <i2c_read+0x92>
            buf[i-1]=i2c_buffer[i];
 888:	f4 01       	movw	r30, r8
 88a:	e8 0f       	add	r30, r24
 88c:	f9 1f       	adc	r31, r25
 88e:	31 97       	sbiw	r30, 0x01	; 1
 890:	d7 01       	movw	r26, r14
 892:	a8 0f       	add	r26, r24
 894:	b9 1f       	adc	r27, r25
 896:	8c 91       	ld	r24, X
 898:	80 83       	st	Z, r24
    //read actual data
    i2c_buffer_len = len+1;
    i2c_buffer[0] = (addr << 1) | I2CREAD;
    if(i2c_in_transmit(i2c_buffer, i2c_buffer_len)){
        uint8_t i;
        for(i=1;i<len+1;i++){ // fetch in buffer
 89a:	2f 5f       	subi	r18, 0xFF	; 255
 89c:	f0 cf       	rjmp	.-32     	; 0x87e <i2c_read+0x72>
            buf[i-1]=i2c_buffer[i];
        }
        return 1; // provide success check
 89e:	81 e0       	ldi	r24, 0x01	; 1
    }else{
        return 0;
    }
}
 8a0:	0f b6       	in	r0, 0x3f	; 63
 8a2:	f8 94       	cli
 8a4:	be be       	out	0x3e, r11	; 62
 8a6:	0f be       	out	0x3f, r0	; 63
 8a8:	ad be       	out	0x3d, r10	; 61
 8aa:	df 91       	pop	r29
 8ac:	cf 91       	pop	r28
 8ae:	1f 91       	pop	r17
 8b0:	0f 91       	pop	r16
 8b2:	ff 90       	pop	r15
 8b4:	ef 90       	pop	r14
 8b6:	df 90       	pop	r13
 8b8:	cf 90       	pop	r12
 8ba:	bf 90       	pop	r11
 8bc:	af 90       	pop	r10
 8be:	9f 90       	pop	r9
 8c0:	8f 90       	pop	r8
 8c2:	08 95       	ret

000008c4 <RTC_readTemp>:
            }else{return 20;}
        }else{return 10;}
    }else{return 0;}
}

int8_t RTC_readTemp(void){
 8c4:	cf 93       	push	r28
 8c6:	df 93       	push	r29
 8c8:	1f 92       	push	r1
 8ca:	cd b7       	in	r28, 0x3d	; 61
 8cc:	de b7       	in	r29, 0x3e	; 62
    int8_t data=0;
 8ce:	19 82       	std	Y+1, r1	; 0x01
    if(i2c_read(RTC_addr,1,0x11,&data)){
 8d0:	9e 01       	movw	r18, r28
 8d2:	2f 5f       	subi	r18, 0xFF	; 255
 8d4:	3f 4f       	sbci	r19, 0xFF	; 255
 8d6:	41 e1       	ldi	r20, 0x11	; 17
 8d8:	61 e0       	ldi	r22, 0x01	; 1
 8da:	88 e6       	ldi	r24, 0x68	; 104
 8dc:	97 df       	rcall	.-210    	; 0x80c <i2c_read>
 8de:	88 23       	and	r24, r24
 8e0:	11 f0       	breq	.+4      	; 0x8e6 <RTC_readTemp+0x22>
        return (data);
 8e2:	89 81       	ldd	r24, Y+1	; 0x01
 8e4:	01 c0       	rjmp	.+2      	; 0x8e8 <RTC_readTemp+0x24>
    }else{
        return 0;
 8e6:	80 e0       	ldi	r24, 0x00	; 0
    }
    
}
 8e8:	0f 90       	pop	r0
 8ea:	df 91       	pop	r29
 8ec:	cf 91       	pop	r28
 8ee:	08 95       	ret

000008f0 <RTC_readTime>:
    return ((val/16*10) + (val%16));
}
uint8_t decToBcd(uint8_t val){
    return( (val/10*16) + (val%10) );
}
uint8_t RTC_readTime(struct Ttime *t){
 8f0:	0f 93       	push	r16
 8f2:	1f 93       	push	r17
 8f4:	cf 93       	push	r28
 8f6:	df 93       	push	r29
 8f8:	cd b7       	in	r28, 0x3d	; 61
 8fa:	de b7       	in	r29, 0x3e	; 62
 8fc:	27 97       	sbiw	r28, 0x07	; 7
 8fe:	0f b6       	in	r0, 0x3f	; 63
 900:	f8 94       	cli
 902:	de bf       	out	0x3e, r29	; 62
 904:	0f be       	out	0x3f, r0	; 63
 906:	cd bf       	out	0x3d, r28	; 61
 908:	8c 01       	movw	r16, r24
    uint8_t data[7] = {0};
 90a:	9e 01       	movw	r18, r28
 90c:	2f 5f       	subi	r18, 0xFF	; 255
 90e:	3f 4f       	sbci	r19, 0xFF	; 255
 910:	87 e0       	ldi	r24, 0x07	; 7
 912:	f9 01       	movw	r30, r18
 914:	11 92       	st	Z+, r1
 916:	8a 95       	dec	r24
 918:	e9 f7       	brne	.-6      	; 0x914 <RTC_readTime+0x24>
    if(i2c_read(RTC_addr,7,0x00,data)){
 91a:	40 e0       	ldi	r20, 0x00	; 0
 91c:	67 e0       	ldi	r22, 0x07	; 7
 91e:	88 e6       	ldi	r24, 0x68	; 104
 920:	75 df       	rcall	.-278    	; 0x80c <i2c_read>
 922:	88 23       	and	r24, r24
 924:	89 f0       	breq	.+34     	; 0x948 <RTC_readTime+0x58>
        t->hour = bcdToDec(data[2]);
 926:	8b 81       	ldd	r24, Y+3	; 0x03
 928:	91 de       	rcall	.-734    	; 0x64c <bcdToDec>
 92a:	f8 01       	movw	r30, r16
 92c:	80 83       	st	Z, r24
        t->min = bcdToDec(data[1]);
 92e:	8a 81       	ldd	r24, Y+2	; 0x02
 930:	8d de       	rcall	.-742    	; 0x64c <bcdToDec>
 932:	f8 01       	movw	r30, r16
 934:	81 83       	std	Z+1, r24	; 0x01
        t->monthDay = bcdToDec(data[4]);
 936:	8d 81       	ldd	r24, Y+5	; 0x05
 938:	89 de       	rcall	.-750    	; 0x64c <bcdToDec>
 93a:	f8 01       	movw	r30, r16
 93c:	82 83       	std	Z+2, r24	; 0x02
        t->month = bcdToDec(data[5]);
 93e:	8e 81       	ldd	r24, Y+6	; 0x06
 940:	85 de       	rcall	.-758    	; 0x64c <bcdToDec>
 942:	f8 01       	movw	r30, r16
 944:	83 83       	std	Z+3, r24	; 0x03
        return 1;
 946:	81 e0       	ldi	r24, 0x01	; 1
    }else{
        return 0;
    }
}
 948:	27 96       	adiw	r28, 0x07	; 7
 94a:	0f b6       	in	r0, 0x3f	; 63
 94c:	f8 94       	cli
 94e:	de bf       	out	0x3e, r29	; 62
 950:	0f be       	out	0x3f, r0	; 63
 952:	cd bf       	out	0x3d, r28	; 61
 954:	df 91       	pop	r29
 956:	cf 91       	pop	r28
 958:	1f 91       	pop	r17
 95a:	0f 91       	pop	r16
 95c:	08 95       	ret

0000095e <MsetHouram>:
}
void MsetNightOn(uint8_t i){
    EEPROM_write(EE_ONHOUR,1+i);
}
void MsetHouram(uint8_t i){
   if(i<12)RTC_setHour(i+1);
 95e:	8c 30       	cpi	r24, 0x0C	; 12
 960:	10 f4       	brcc	.+4      	; 0x966 <MsetHouram+0x8>
 962:	8f 5f       	subi	r24, 0xFF	; 255
 964:	49 cf       	rjmp	.-366    	; 0x7f8 <RTC_setHour>
 966:	08 95       	ret

00000968 <MsetHourpm>:
}
void MsetHourpm(uint8_t i){
   if(i<11)RTC_setHour(i+13);    
 968:	8b 30       	cpi	r24, 0x0B	; 11
 96a:	10 f4       	brcc	.+4      	; 0x970 <MsetHourpm+0x8>
 96c:	83 5f       	subi	r24, 0xF3	; 243
 96e:	44 cf       	rjmp	.-376    	; 0x7f8 <RTC_setHour>
 970:	08 95       	ret

00000972 <MsetRainbow>:
        TCCR1B|=(1<<CS12)|(1<<CS10);
    }
}

void MsetRainbow(uint8_t i){
    if(i<2)mode=4;
 972:	82 30       	cpi	r24, 0x02	; 2
 974:	18 f4       	brcc	.+6      	; 0x97c <MsetRainbow+0xa>
 976:	84 e0       	ldi	r24, 0x04	; 4
 978:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
  //  cli();
    sendRawData(0b11111100001111111111);//white
 97c:	6f ef       	ldi	r22, 0xFF	; 255
 97e:	73 ec       	ldi	r23, 0xC3	; 195
 980:	8f e0       	ldi	r24, 0x0F	; 15
 982:	90 e0       	ldi	r25, 0x00	; 0
 984:	22 de       	rcall	.-956    	; 0x5ca <sendRawData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 986:	2f ef       	ldi	r18, 0xFF	; 255
 988:	89 e6       	ldi	r24, 0x69	; 105
 98a:	98 e1       	ldi	r25, 0x18	; 24
 98c:	21 50       	subi	r18, 0x01	; 1
 98e:	80 40       	sbci	r24, 0x00	; 0
 990:	90 40       	sbci	r25, 0x00	; 0
 992:	e1 f7       	brne	.-8      	; 0x98c <MsetRainbow+0x1a>
 994:	00 c0       	rjmp	.+0      	; 0x996 <MsetRainbow+0x24>
 996:	00 00       	nop
    _delay_ms(500);
    sendRawData(0b11000000001111111111);//green
 998:	6f ef       	ldi	r22, 0xFF	; 255
 99a:	73 e0       	ldi	r23, 0x03	; 3
 99c:	8c e0       	ldi	r24, 0x0C	; 12
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	14 de       	rcall	.-984    	; 0x5ca <sendRawData>
 9a2:	2f ef       	ldi	r18, 0xFF	; 255
 9a4:	89 e6       	ldi	r24, 0x69	; 105
 9a6:	98 e1       	ldi	r25, 0x18	; 24
 9a8:	21 50       	subi	r18, 0x01	; 1
 9aa:	80 40       	sbci	r24, 0x00	; 0
 9ac:	90 40       	sbci	r25, 0x00	; 0
 9ae:	e1 f7       	brne	.-8      	; 0x9a8 <MsetRainbow+0x36>
 9b0:	00 c0       	rjmp	.+0      	; 0x9b2 <MsetRainbow+0x40>
 9b2:	00 00       	nop
    _delay_ms(500);
    sendRawData(0b00001100001111111111);//red
 9b4:	6f ef       	ldi	r22, 0xFF	; 255
 9b6:	73 ec       	ldi	r23, 0xC3	; 195
 9b8:	80 e0       	ldi	r24, 0x00	; 0
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	06 de       	rcall	.-1012   	; 0x5ca <sendRawData>
 9be:	2f ef       	ldi	r18, 0xFF	; 255
 9c0:	89 e6       	ldi	r24, 0x69	; 105
 9c2:	98 e1       	ldi	r25, 0x18	; 24
 9c4:	21 50       	subi	r18, 0x01	; 1
 9c6:	80 40       	sbci	r24, 0x00	; 0
 9c8:	90 40       	sbci	r25, 0x00	; 0
 9ca:	e1 f7       	brne	.-8      	; 0x9c4 <MsetRainbow+0x52>
 9cc:	00 c0       	rjmp	.+0      	; 0x9ce <MsetRainbow+0x5c>
 9ce:	00 00       	nop
    _delay_ms(500);
    sendRawData(0b00110000001111111111);//blue
 9d0:	6f ef       	ldi	r22, 0xFF	; 255
 9d2:	73 e0       	ldi	r23, 0x03	; 3
 9d4:	83 e0       	ldi	r24, 0x03	; 3
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	f8 dd       	rcall	.-1040   	; 0x5ca <sendRawData>
 9da:	2f ef       	ldi	r18, 0xFF	; 255
 9dc:	89 e6       	ldi	r24, 0x69	; 105
 9de:	98 e1       	ldi	r25, 0x18	; 24
 9e0:	21 50       	subi	r18, 0x01	; 1
 9e2:	80 40       	sbci	r24, 0x00	; 0
 9e4:	90 40       	sbci	r25, 0x00	; 0
 9e6:	e1 f7       	brne	.-8      	; 0x9e0 <MsetRainbow+0x6e>
 9e8:	00 c0       	rjmp	.+0      	; 0x9ea <MsetRainbow+0x78>
 9ea:	00 00       	nop
    _delay_ms(500);
    sendRawData(0b11110000001111111111);//cyan
 9ec:	6f ef       	ldi	r22, 0xFF	; 255
 9ee:	73 e0       	ldi	r23, 0x03	; 3
 9f0:	8f e0       	ldi	r24, 0x0F	; 15
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	ea dd       	rcall	.-1068   	; 0x5ca <sendRawData>
 9f6:	2f ef       	ldi	r18, 0xFF	; 255
 9f8:	89 e6       	ldi	r24, 0x69	; 105
 9fa:	98 e1       	ldi	r25, 0x18	; 24
 9fc:	21 50       	subi	r18, 0x01	; 1
 9fe:	80 40       	sbci	r24, 0x00	; 0
 a00:	90 40       	sbci	r25, 0x00	; 0
 a02:	e1 f7       	brne	.-8      	; 0x9fc <MsetRainbow+0x8a>
 a04:	00 c0       	rjmp	.+0      	; 0xa06 <MsetRainbow+0x94>
 a06:	00 00       	nop
    _delay_ms(500);
    sendRawData(0b00111100001111111111);//magenta
 a08:	6f ef       	ldi	r22, 0xFF	; 255
 a0a:	73 ec       	ldi	r23, 0xC3	; 195
 a0c:	83 e0       	ldi	r24, 0x03	; 3
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	dc dd       	rcall	.-1096   	; 0x5ca <sendRawData>
 a12:	2f ef       	ldi	r18, 0xFF	; 255
 a14:	89 e6       	ldi	r24, 0x69	; 105
 a16:	98 e1       	ldi	r25, 0x18	; 24
 a18:	21 50       	subi	r18, 0x01	; 1
 a1a:	80 40       	sbci	r24, 0x00	; 0
 a1c:	90 40       	sbci	r25, 0x00	; 0
 a1e:	e1 f7       	brne	.-8      	; 0xa18 <MsetRainbow+0xa6>
 a20:	00 c0       	rjmp	.+0      	; 0xa22 <MsetRainbow+0xb0>
 a22:	00 00       	nop
    _delay_ms(500);
    sendRawData(0b11001100001111111111);//yellow
 a24:	6f ef       	ldi	r22, 0xFF	; 255
 a26:	73 ec       	ldi	r23, 0xC3	; 195
 a28:	8c e0       	ldi	r24, 0x0C	; 12
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	ce dd       	rcall	.-1124   	; 0x5ca <sendRawData>
 a2e:	2f ef       	ldi	r18, 0xFF	; 255
 a30:	89 e6       	ldi	r24, 0x69	; 105
 a32:	98 e1       	ldi	r25, 0x18	; 24
 a34:	21 50       	subi	r18, 0x01	; 1
 a36:	80 40       	sbci	r24, 0x00	; 0
 a38:	90 40       	sbci	r25, 0x00	; 0
 a3a:	e1 f7       	brne	.-8      	; 0xa34 <MsetRainbow+0xc2>
 a3c:	00 c0       	rjmp	.+0      	; 0xa3e <MsetRainbow+0xcc>
 a3e:	00 00       	nop
 a40:	08 95       	ret

00000a42 <MsetMinam>:
}
void MsetHourpm(uint8_t i){
   if(i<11)RTC_setHour(i+13);    
}
void MsetMinam(uint8_t i){
    if(i<3)RTC_setMin((i+1)*10);
 a42:	83 30       	cpi	r24, 0x03	; 3
 a44:	20 f4       	brcc	.+8      	; 0xa4e <MsetMinam+0xc>
 a46:	8f 5f       	subi	r24, 0xFF	; 255
 a48:	6a e0       	ldi	r22, 0x0A	; 10
 a4a:	5e d1       	rcall	.+700    	; 0xd08 <__mulqi3>
 a4c:	da ce       	rjmp	.-588    	; 0x802 <RTC_setMin>
 a4e:	08 95       	ret

00000a50 <MsetMinpm>:
    }
void MsetMinpm(uint8_t i){
    if(i<3)RTC_setMin(60-(i+1)*10);
 a50:	83 30       	cpi	r24, 0x03	; 3
 a52:	28 f4       	brcc	.+10     	; 0xa5e <MsetMinpm+0xe>
 a54:	8f 5f       	subi	r24, 0xFF	; 255
 a56:	66 ef       	ldi	r22, 0xF6	; 246
 a58:	57 d1       	rcall	.+686    	; 0xd08 <__mulqi3>
 a5a:	84 5c       	subi	r24, 0xC4	; 196
 a5c:	d2 ce       	rjmp	.-604    	; 0x802 <RTC_setMin>
 a5e:	08 95       	ret

00000a60 <findNextEntry>:

uint8_t mode=1;//0: hour only, 1-2: hour+temp, 3: temp only, >=4:Rainbow !
uint8_t colorMode=0;

uint8_t findNextEntry(Menu* m,uint8_t index){
    if((index+2)>(m->nb_optn%16))return 0;
 a60:	26 2f       	mov	r18, r22
 a62:	30 e0       	ldi	r19, 0x00	; 0
 a64:	2f 5f       	subi	r18, 0xFF	; 255
 a66:	3f 4f       	sbci	r19, 0xFF	; 255
 a68:	fc 01       	movw	r30, r24
 a6a:	80 81       	ld	r24, Z
 a6c:	8f 70       	andi	r24, 0x0F	; 15
 a6e:	90 e0       	ldi	r25, 0x00	; 0
 a70:	28 17       	cp	r18, r24
 a72:	39 07       	cpc	r19, r25
 a74:	1c f4       	brge	.+6      	; 0xa7c <findNextEntry+0x1c>
    return index+1;
 a76:	81 e0       	ldi	r24, 0x01	; 1
 a78:	86 0f       	add	r24, r22
 a7a:	08 95       	ret

uint8_t mode=1;//0: hour only, 1-2: hour+temp, 3: temp only, >=4:Rainbow !
uint8_t colorMode=0;

uint8_t findNextEntry(Menu* m,uint8_t index){
    if((index+2)>(m->nb_optn%16))return 0;
 a7c:	80 e0       	ldi	r24, 0x00	; 0
    return index+1;
}
 a7e:	08 95       	ret

00000a80 <getSubMenu>:

Menu* getSubMenu(Menu* m,uint8_t index){
 a80:	9c 01       	movw	r18, r24
    if(m->sub[index].submenu==0)return 0;//if executed NULL, return blank menu (==exit setup)
 a82:	86 2f       	mov	r24, r22
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	63 e0       	ldi	r22, 0x03	; 3
 a88:	70 e0       	ldi	r23, 0x00	; 0
 a8a:	47 d1       	rcall	.+654    	; 0xd1a <__mulhi3>
 a8c:	82 0f       	add	r24, r18
 a8e:	93 1f       	adc	r25, r19
    return m->sub[index].submenu;
}
 a90:	fc 01       	movw	r30, r24
 a92:	84 81       	ldd	r24, Z+4	; 0x04
 a94:	95 81       	ldd	r25, Z+5	; 0x05
 a96:	08 95       	ret

00000a98 <EEPROM_write>:
void EEPROM_write(uint8_t addr, uint8_t data){
    while(EECR & (1<<EEPE));
 a98:	e1 99       	sbic	0x1c, 1	; 28
 a9a:	fe cf       	rjmp	.-4      	; 0xa98 <EEPROM_write>
    EECR = (0<<EEPM1)|(0<<EEPM0);
 a9c:	1c ba       	out	0x1c, r1	; 28
    EEAR = addr;
 a9e:	90 e0       	ldi	r25, 0x00	; 0
 aa0:	9f bb       	out	0x1f, r25	; 31
 aa2:	8e bb       	out	0x1e, r24	; 30
    EEDR = data;
 aa4:	6d bb       	out	0x1d, r22	; 29
    EECR |= (1<<EEMPE);
 aa6:	e2 9a       	sbi	0x1c, 2	; 28
    EECR |= (1<<EEPE);
 aa8:	e1 9a       	sbi	0x1c, 1	; 28
 aaa:	08 95       	ret

00000aac <MsetMode>:
    {8,0},//Rainbow off
    {HEURE,&M0main}//return
}};

void MsetMode(uint8_t i){
   if(i<4){
 aac:	84 30       	cpi	r24, 0x04	; 4
 aae:	68 f4       	brcc	.+26     	; 0xaca <MsetMode+0x1e>
        TCCR1B|=(1<<CS12)|(1<<CS10);
 ab0:	9e b5       	in	r25, 0x2e	; 46
 ab2:	95 60       	ori	r25, 0x05	; 5
 ab4:	9e bd       	out	0x2e, r25	; 46
        if(i==2)TCCR1B&=~(1<<CS10);
 ab6:	82 30       	cpi	r24, 0x02	; 2
 ab8:	19 f4       	brne	.+6      	; 0xac0 <MsetMode+0x14>
 aba:	9e b5       	in	r25, 0x2e	; 46
 abc:	9e 7f       	andi	r25, 0xFE	; 254
 abe:	9e bd       	out	0x2e, r25	; 46
        mode=i;
 ac0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
        EEPROM_write(EE_MODE,i);
 ac4:	68 2f       	mov	r22, r24
 ac6:	84 e0       	ldi	r24, 0x04	; 4
 ac8:	e7 cf       	rjmp	.-50     	; 0xa98 <EEPROM_write>
 aca:	08 95       	ret

00000acc <MsetColorMode>:
        mode=2;
    }
    return mode;
}
void MsetColorMode(uint8_t i){
    if(i<7){
 acc:	87 30       	cpi	r24, 0x07	; 7
 ace:	40 f4       	brcc	.+16     	; 0xae0 <MsetColorMode+0x14>
        colorMode=colorArray[i];//fixed
 ad0:	e8 2f       	mov	r30, r24
 ad2:	f0 e0       	ldi	r31, 0x00	; 0
 ad4:	e0 54       	subi	r30, 0x40	; 64
 ad6:	fe 4f       	sbci	r31, 0xFE	; 254
 ad8:	60 81       	ld	r22, Z
 ada:	60 93 ce 01 	sts	0x01CE, r22	; 0x8001ce <colorMode>
 ade:	0d c0       	rjmp	.+26     	; 0xafa <MsetColorMode+0x2e>
        EEPROM_write(EE_COLOR,colorArray[i]);
    }else if(i==7){//cycle single
 ae0:	87 30       	cpi	r24, 0x07	; 7
 ae2:	29 f4       	brne	.+10     	; 0xaee <MsetColorMode+0x22>
        colorMode=WHITE+128;
 ae4:	87 e8       	ldi	r24, 0x87	; 135
 ae6:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <colorMode>
        EEPROM_write(EE_COLOR,128);
 aea:	60 e8       	ldi	r22, 0x80	; 128
 aec:	06 c0       	rjmp	.+12     	; 0xafa <MsetColorMode+0x2e>
    }else if(i==8){//cycle all
 aee:	88 30       	cpi	r24, 0x08	; 8
 af0:	31 f4       	brne	.+12     	; 0xafe <MsetColorMode+0x32>
        colorMode=WHITE+64;
 af2:	87 e4       	ldi	r24, 0x47	; 71
 af4:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <colorMode>
        EEPROM_write(EE_COLOR,64);
 af8:	60 e4       	ldi	r22, 0x40	; 64
 afa:	80 e0       	ldi	r24, 0x00	; 0
 afc:	cd cf       	rjmp	.-102    	; 0xa98 <EEPROM_write>
 afe:	08 95       	ret

00000b00 <MsetNightMode>:
    }else{//fixed
        return colorMode;
    }
}
void MsetNightMode(uint8_t i){
    if(i<3)EEPROM_write(EE_NIGHTMODE,i);
 b00:	83 30       	cpi	r24, 0x03	; 3
 b02:	18 f4       	brcc	.+6      	; 0xb0a <MsetNightMode+0xa>
 b04:	68 2f       	mov	r22, r24
 b06:	81 e0       	ldi	r24, 0x01	; 1
 b08:	c7 cf       	rjmp	.-114    	; 0xa98 <EEPROM_write>
 b0a:	08 95       	ret

00000b0c <MsetNightOff>:
uint8_t isInAllowedTime(uint8_t h){
    if(EEPROM_read(EE_NIGHTMODE))return (h>=EEPROM_read(EE_ONHOUR) && h<=EEPROM_read(EE_OFFHOUR));
    return 1;
}
void MsetNightOff(uint8_t i){
    EEPROM_write(EE_OFFHOUR,12+i);
 b0c:	6c e0       	ldi	r22, 0x0C	; 12
 b0e:	68 0f       	add	r22, r24
 b10:	83 e0       	ldi	r24, 0x03	; 3
 b12:	c2 cf       	rjmp	.-124    	; 0xa98 <EEPROM_write>

00000b14 <MsetNightOn>:
}
void MsetNightOn(uint8_t i){
    EEPROM_write(EE_ONHOUR,1+i);
 b14:	61 e0       	ldi	r22, 0x01	; 1
 b16:	68 0f       	add	r22, r24
 b18:	82 e0       	ldi	r24, 0x02	; 2
 b1a:	be cf       	rjmp	.-132    	; 0xa98 <EEPROM_write>

00000b1c <MsetEventMode>:
    }
void MsetMinpm(uint8_t i){
    if(i<3)RTC_setMin(60-(i+1)*10);
}
void MsetEventMode(uint8_t i){
    if(i<2)EEPROM_write(EE_EVENT,1-i);//1 for active
 b1c:	82 30       	cpi	r24, 0x02	; 2
 b1e:	20 f4       	brcc	.+8      	; 0xb28 <MsetEventMode+0xc>
 b20:	61 e0       	ldi	r22, 0x01	; 1
 b22:	68 1b       	sub	r22, r24
 b24:	85 e0       	ldi	r24, 0x05	; 5
 b26:	b8 cf       	rjmp	.-144    	; 0xa98 <EEPROM_write>
 b28:	08 95       	ret

00000b2a <Mreset>:
}
void Mreset(uint8_t i){
    if(i<1){
 b2a:	81 11       	cpse	r24, r1
 b2c:	17 c0       	rjmp	.+46     	; 0xb5c <Mreset+0x32>
    {HEURE,&M0main}//return
}};

void MsetMode(uint8_t i){
   if(i<4){
        TCCR1B|=(1<<CS12)|(1<<CS10);
 b2e:	8e b5       	in	r24, 0x2e	; 46
 b30:	85 60       	ori	r24, 0x05	; 5
 b32:	8e bd       	out	0x2e, r24	; 46
        if(i==2)TCCR1B&=~(1<<CS10);
        mode=i;
 b34:	81 e0       	ldi	r24, 0x01	; 1
 b36:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
        EEPROM_write(EE_MODE,i);
 b3a:	61 e0       	ldi	r22, 0x01	; 1
 b3c:	84 e0       	ldi	r24, 0x04	; 4
 b3e:	ac df       	rcall	.-168    	; 0xa98 <EEPROM_write>
    if(i<2)EEPROM_write(EE_EVENT,1-i);//1 for active
}
void Mreset(uint8_t i){
    if(i<1){
        MsetMode(1);
        MsetColorMode(0);
 b40:	80 e0       	ldi	r24, 0x00	; 0
 b42:	c4 df       	rcall	.-120    	; 0xacc <MsetColorMode>
        EEPROM_write(EE_NIGHTMODE,1);
 b44:	61 e0       	ldi	r22, 0x01	; 1
 b46:	81 e0       	ldi	r24, 0x01	; 1
 b48:	a7 df       	rcall	.-178    	; 0xa98 <EEPROM_write>
        EEPROM_write(EE_OFFHOUR,12+10);
 b4a:	66 e1       	ldi	r22, 0x16	; 22
 b4c:	83 e0       	ldi	r24, 0x03	; 3
 b4e:	a4 df       	rcall	.-184    	; 0xa98 <EEPROM_write>
        EEPROM_write(EE_ONHOUR,1+8);
 b50:	69 e0       	ldi	r22, 0x09	; 9
 b52:	82 e0       	ldi	r24, 0x02	; 2
 b54:	a1 df       	rcall	.-190    	; 0xa98 <EEPROM_write>
        TCCR1B|=(1<<CS12)|(1<<CS10);
 b56:	8e b5       	in	r24, 0x2e	; 46
 b58:	85 60       	ori	r24, 0x05	; 5
 b5a:	8e bd       	out	0x2e, r24	; 46
 b5c:	08 95       	ret

00000b5e <EEPROM_read>:
    EEDR = data;
    EECR |= (1<<EEMPE);
    EECR |= (1<<EEPE);
}
uint8_t EEPROM_read(uint8_t addr){
    while(EECR & (1<<EEPE));
 b5e:	e1 99       	sbic	0x1c, 1	; 28
 b60:	fe cf       	rjmp	.-4      	; 0xb5e <EEPROM_read>
    EEAR = addr;
 b62:	90 e0       	ldi	r25, 0x00	; 0
 b64:	9f bb       	out	0x1f, r25	; 31
 b66:	8e bb       	out	0x1e, r24	; 30
    EECR |= (1<<EERE);
 b68:	e0 9a       	sbi	0x1c, 0	; 28
    return EEDR;
 b6a:	8d b3       	in	r24, 0x1d	; 29
}
 b6c:	08 95       	ret

00000b6e <Minit>:

void Minit(void){
    colorMode=EEPROM_read(EE_COLOR);
 b6e:	80 e0       	ldi	r24, 0x00	; 0
 b70:	f6 df       	rcall	.-20     	; 0xb5e <EEPROM_read>
 b72:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <colorMode>
    mode=EEPROM_read(EE_MODE);
 b76:	84 e0       	ldi	r24, 0x04	; 4
 b78:	f2 df       	rcall	.-28     	; 0xb5e <EEPROM_read>
 b7a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
    MsetMode(EEPROM_read(EE_MODE));
 b7e:	84 e0       	ldi	r24, 0x04	; 4
 b80:	ee df       	rcall	.-36     	; 0xb5e <EEPROM_read>
 b82:	94 cf       	rjmp	.-216    	; 0xaac <MsetMode>

00000b84 <getMode>:
        mode=i;
        EEPROM_write(EE_MODE,i);
    }
}
uint8_t getMode(void){
    if(mode==2){
 b84:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 b88:	82 30       	cpi	r24, 0x02	; 2
 b8a:	11 f4       	brne	.+4      	; 0xb90 <getMode+0xc>
        mode=1;
 b8c:	81 e0       	ldi	r24, 0x01	; 1
 b8e:	03 c0       	rjmp	.+6      	; 0xb96 <getMode+0x12>
    }else if(mode==1){
 b90:	81 30       	cpi	r24, 0x01	; 1
 b92:	19 f4       	brne	.+6      	; 0xb9a <getMode+0x16>
        mode=2;
 b94:	82 e0       	ldi	r24, 0x02	; 2
 b96:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
    }
    return mode;
}
 b9a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 b9e:	08 95       	ret

00000ba0 <getColor>:
        colorMode=WHITE+64;
        EEPROM_write(EE_COLOR,64);
    }
}
uint8_t getColor(void){
    if(colorMode>127){//cycle single
 ba0:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <colorMode>
 ba4:	87 ff       	sbrs	r24, 7
 ba6:	0f c0       	rjmp	.+30     	; 0xbc6 <getColor+0x26>
        if(colorMode>134)colorMode=128;
 ba8:	87 38       	cpi	r24, 0x87	; 135
 baa:	18 f0       	brcs	.+6      	; 0xbb2 <getColor+0x12>
 bac:	80 e8       	ldi	r24, 0x80	; 128
 bae:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <colorMode>
        colorMode++;
 bb2:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <colorMode>
 bb6:	ef 5f       	subi	r30, 0xFF	; 255
 bb8:	e0 93 ce 01 	sts	0x01CE, r30	; 0x8001ce <colorMode>
        return colorArray[colorMode-129];
 bbc:	f0 e0       	ldi	r31, 0x00	; 0
 bbe:	e1 5c       	subi	r30, 0xC1	; 193
 bc0:	fe 4f       	sbci	r31, 0xFE	; 254
 bc2:	80 81       	ld	r24, Z
 bc4:	08 95       	ret
    }else if(colorMode>63){//cycle all
 bc6:	80 34       	cpi	r24, 0x40	; 64
 bc8:	08 f0       	brcs	.+2      	; 0xbcc <getColor+0x2c>
        return RED;
 bca:	84 e0       	ldi	r24, 0x04	; 4
    }else{//fixed
        return colorMode;
    }
}
 bcc:	08 95       	ret

00000bce <isInAllowedTime>:
void MsetNightMode(uint8_t i){
    if(i<3)EEPROM_write(EE_NIGHTMODE,i);
}
uint8_t isInAllowedTime(uint8_t h){
 bce:	cf 93       	push	r28
 bd0:	c8 2f       	mov	r28, r24
    if(EEPROM_read(EE_NIGHTMODE))return (h>=EEPROM_read(EE_ONHOUR) && h<=EEPROM_read(EE_OFFHOUR));
 bd2:	81 e0       	ldi	r24, 0x01	; 1
 bd4:	c4 df       	rcall	.-120    	; 0xb5e <EEPROM_read>
 bd6:	88 23       	and	r24, r24
 bd8:	71 f0       	breq	.+28     	; 0xbf6 <isInAllowedTime+0x28>
 bda:	82 e0       	ldi	r24, 0x02	; 2
 bdc:	c0 df       	rcall	.-128    	; 0xb5e <EEPROM_read>
 bde:	c8 17       	cp	r28, r24
 be0:	40 f0       	brcs	.+16     	; 0xbf2 <isInAllowedTime+0x24>
 be2:	83 e0       	ldi	r24, 0x03	; 3
 be4:	bc df       	rcall	.-136    	; 0xb5e <EEPROM_read>
 be6:	91 e0       	ldi	r25, 0x01	; 1
 be8:	8c 17       	cp	r24, r28
 bea:	08 f4       	brcc	.+2      	; 0xbee <isInAllowedTime+0x20>
 bec:	90 e0       	ldi	r25, 0x00	; 0
 bee:	89 2f       	mov	r24, r25
 bf0:	03 c0       	rjmp	.+6      	; 0xbf8 <isInAllowedTime+0x2a>
 bf2:	80 e0       	ldi	r24, 0x00	; 0
 bf4:	01 c0       	rjmp	.+2      	; 0xbf8 <isInAllowedTime+0x2a>
    return 1;
 bf6:	81 e0       	ldi	r24, 0x01	; 1
}
 bf8:	cf 91       	pop	r28
 bfa:	08 95       	ret

00000bfc <main>:
const Menu* Mcurrent=0;
uint8_t Mindex=0;
Led leds[NBLEDS];

int main(void){    
    ledInit(leds);
 bfc:	8f ec       	ldi	r24, 0xCF	; 207
 bfe:	91 e0       	ldi	r25, 0x01	; 1
 c00:	f8 db       	rcall	.-2064   	; 0x3f2 <ledInit>
    DDRA&=~(BTNINTERNAL|BTNOK);
 c02:	8a b3       	in	r24, 0x1a	; 26
 c04:	8f 75       	andi	r24, 0x5F	; 95
 c06:	8a bb       	out	0x1a, r24	; 26
    DDRB&=~BTNSELECT;
 c08:	ba 98       	cbi	0x17, 2	; 23
    PORTA|=(BTNINTERNAL|BTNOK);
 c0a:	8b b3       	in	r24, 0x1b	; 27
 c0c:	80 6a       	ori	r24, 0xA0	; 160
 c0e:	8b bb       	out	0x1b, r24	; 27
    PORTB|=BTNSELECT;
 c10:	c2 9a       	sbi	0x18, 2	; 24
    TIMSK1|=(1<<TOIE1);//|(1<<OCIE1B);
 c12:	60 9a       	sbi	0x0c, 0	; 12
    // OCR1B=32768;
    TIMSK0|=(1<<TOIE0);
 c14:	89 b7       	in	r24, 0x39	; 57
 c16:	81 60       	ori	r24, 0x01	; 1
 c18:	89 bf       	out	0x39, r24	; 57
    
    sendData(0b11111100001111111111);//white
 c1a:	6f ef       	ldi	r22, 0xFF	; 255
 c1c:	73 ec       	ldi	r23, 0xC3	; 195
 c1e:	8f e0       	ldi	r24, 0x0F	; 15
 c20:	90 e0       	ldi	r25, 0x00	; 0
 c22:	1b da       	rcall	.-3018   	; 0x5a <sendData>
 c24:	2f ef       	ldi	r18, 0xFF	; 255
 c26:	89 e6       	ldi	r24, 0x69	; 105
 c28:	98 e1       	ldi	r25, 0x18	; 24
 c2a:	21 50       	subi	r18, 0x01	; 1
 c2c:	80 40       	sbci	r24, 0x00	; 0
 c2e:	90 40       	sbci	r25, 0x00	; 0
 c30:	e1 f7       	brne	.-8      	; 0xc2a <main+0x2e>
 c32:	00 c0       	rjmp	.+0      	; 0xc34 <main+0x38>
 c34:	00 00       	nop
    _delay_ms(500);
    sendData(0b11000000001111111111);//green
 c36:	6f ef       	ldi	r22, 0xFF	; 255
 c38:	73 e0       	ldi	r23, 0x03	; 3
 c3a:	8c e0       	ldi	r24, 0x0C	; 12
 c3c:	90 e0       	ldi	r25, 0x00	; 0
 c3e:	0d da       	rcall	.-3046   	; 0x5a <sendData>
 c40:	2f ef       	ldi	r18, 0xFF	; 255
 c42:	89 e6       	ldi	r24, 0x69	; 105
 c44:	98 e1       	ldi	r25, 0x18	; 24
 c46:	21 50       	subi	r18, 0x01	; 1
 c48:	80 40       	sbci	r24, 0x00	; 0
 c4a:	90 40       	sbci	r25, 0x00	; 0
 c4c:	e1 f7       	brne	.-8      	; 0xc46 <main+0x4a>
 c4e:	00 c0       	rjmp	.+0      	; 0xc50 <main+0x54>
 c50:	00 00       	nop
    _delay_ms(500);
    sendData(0b00001100001111111111);//red
 c52:	6f ef       	ldi	r22, 0xFF	; 255
 c54:	73 ec       	ldi	r23, 0xC3	; 195
 c56:	80 e0       	ldi	r24, 0x00	; 0
 c58:	90 e0       	ldi	r25, 0x00	; 0
 c5a:	ff d9       	rcall	.-3074   	; 0x5a <sendData>
 c5c:	2f ef       	ldi	r18, 0xFF	; 255
 c5e:	89 e6       	ldi	r24, 0x69	; 105
 c60:	98 e1       	ldi	r25, 0x18	; 24
 c62:	21 50       	subi	r18, 0x01	; 1
 c64:	80 40       	sbci	r24, 0x00	; 0
 c66:	90 40       	sbci	r25, 0x00	; 0
 c68:	e1 f7       	brne	.-8      	; 0xc62 <main+0x66>
 c6a:	00 c0       	rjmp	.+0      	; 0xc6c <main+0x70>
 c6c:	00 00       	nop
    _delay_ms(500);
    sendData(0b00110000001111111111);//blue
 c6e:	6f ef       	ldi	r22, 0xFF	; 255
 c70:	73 e0       	ldi	r23, 0x03	; 3
 c72:	83 e0       	ldi	r24, 0x03	; 3
 c74:	90 e0       	ldi	r25, 0x00	; 0
 c76:	f1 d9       	rcall	.-3102   	; 0x5a <sendData>
 c78:	2f ef       	ldi	r18, 0xFF	; 255
 c7a:	89 e6       	ldi	r24, 0x69	; 105
 c7c:	98 e1       	ldi	r25, 0x18	; 24
 c7e:	21 50       	subi	r18, 0x01	; 1
 c80:	80 40       	sbci	r24, 0x00	; 0
 c82:	90 40       	sbci	r25, 0x00	; 0
 c84:	e1 f7       	brne	.-8      	; 0xc7e <main+0x82>
 c86:	00 c0       	rjmp	.+0      	; 0xc88 <main+0x8c>
 c88:	00 00       	nop
    _delay_ms(500);
    sendData(0b11110000001111111111);//cyan
 c8a:	6f ef       	ldi	r22, 0xFF	; 255
 c8c:	73 e0       	ldi	r23, 0x03	; 3
 c8e:	8f e0       	ldi	r24, 0x0F	; 15
 c90:	90 e0       	ldi	r25, 0x00	; 0
 c92:	e3 d9       	rcall	.-3130   	; 0x5a <sendData>
 c94:	2f ef       	ldi	r18, 0xFF	; 255
 c96:	89 e6       	ldi	r24, 0x69	; 105
 c98:	98 e1       	ldi	r25, 0x18	; 24
 c9a:	21 50       	subi	r18, 0x01	; 1
 c9c:	80 40       	sbci	r24, 0x00	; 0
 c9e:	90 40       	sbci	r25, 0x00	; 0
 ca0:	e1 f7       	brne	.-8      	; 0xc9a <main+0x9e>
 ca2:	00 c0       	rjmp	.+0      	; 0xca4 <main+0xa8>
 ca4:	00 00       	nop
    _delay_ms(500);
    sendData(0b00111100001111111111);//magenta
 ca6:	6f ef       	ldi	r22, 0xFF	; 255
 ca8:	73 ec       	ldi	r23, 0xC3	; 195
 caa:	83 e0       	ldi	r24, 0x03	; 3
 cac:	90 e0       	ldi	r25, 0x00	; 0
 cae:	d5 d9       	rcall	.-3158   	; 0x5a <sendData>
 cb0:	2f ef       	ldi	r18, 0xFF	; 255
 cb2:	89 e6       	ldi	r24, 0x69	; 105
 cb4:	98 e1       	ldi	r25, 0x18	; 24
 cb6:	21 50       	subi	r18, 0x01	; 1
 cb8:	80 40       	sbci	r24, 0x00	; 0
 cba:	90 40       	sbci	r25, 0x00	; 0
 cbc:	e1 f7       	brne	.-8      	; 0xcb6 <main+0xba>
 cbe:	00 c0       	rjmp	.+0      	; 0xcc0 <main+0xc4>
 cc0:	00 00       	nop
    _delay_ms(500);
    sendData(0b11001100001111111111);//yellow
 cc2:	6f ef       	ldi	r22, 0xFF	; 255
 cc4:	73 ec       	ldi	r23, 0xC3	; 195
 cc6:	8c e0       	ldi	r24, 0x0C	; 12
 cc8:	90 e0       	ldi	r25, 0x00	; 0
 cca:	c7 d9       	rcall	.-3186   	; 0x5a <sendData>
 ccc:	2f ef       	ldi	r18, 0xFF	; 255
 cce:	89 e6       	ldi	r24, 0x69	; 105
 cd0:	98 e1       	ldi	r25, 0x18	; 24
 cd2:	21 50       	subi	r18, 0x01	; 1
 cd4:	80 40       	sbci	r24, 0x00	; 0
 cd6:	90 40       	sbci	r25, 0x00	; 0
 cd8:	e1 f7       	brne	.-8      	; 0xcd2 <main+0xd6>
 cda:	00 c0       	rjmp	.+0      	; 0xcdc <main+0xe0>
 cdc:	00 00       	nop
    _delay_ms(500);
    
    //no sooner to let inputs debounce
    GIMSK|=(1<<PCIE1)|(1<<PCIE0);
 cde:	8b b7       	in	r24, 0x3b	; 59
 ce0:	80 63       	ori	r24, 0x30	; 48
 ce2:	8b bf       	out	0x3b, r24	; 59
    PCMSK0|=(1<<PCINT7)|(1<<PCINT5);
 ce4:	82 b3       	in	r24, 0x12	; 18
 ce6:	80 6a       	ori	r24, 0xA0	; 160
 ce8:	82 bb       	out	0x12, r24	; 18
    PCMSK1|=(1<<PCINT10);
 cea:	80 b5       	in	r24, 0x20	; 32
 cec:	84 60       	ori	r24, 0x04	; 4
 cee:	80 bd       	out	0x20, r24	; 32
    sei();
 cf0:	78 94       	sei
    
    //update time & UI timer
    #ifdef DELLONG
    TCCR1B|=(1<<CS12)|(1<<CS10);
 cf2:	8e b5       	in	r24, 0x2e	; 46
 cf4:	85 60       	ori	r24, 0x05	; 5
 cf6:	8e bd       	out	0x2e, r24	; 46
    #else
    TCCR1B|=(1<<CS12);//|(1<<CS10);
    #endif
    
    //led mux timer
    TCCR0B|=(1<<CS01)|(1<<CS00);
 cf8:	83 b7       	in	r24, 0x33	; 51
 cfa:	83 60       	ori	r24, 0x03	; 3
 cfc:	83 bf       	out	0x33, r24	; 51
    
    Minit();
 cfe:	37 df       	rcall	.-402    	; 0xb6e <Minit>
    // //RTC_setTime(currentTime,6,18);
    RTC_readTime(&currentTime);
 d00:	89 e0       	ldi	r24, 0x09	; 9
 d02:	92 e0       	ldi	r25, 0x02	; 2
 d04:	f5 dd       	rcall	.-1046   	; 0x8f0 <RTC_readTime>
 d06:	ff cf       	rjmp	.-2      	; 0xd06 <main+0x10a>

00000d08 <__mulqi3>:
 d08:	00 24       	eor	r0, r0

00000d0a <__mulqi3_loop>:
 d0a:	80 fd       	sbrc	r24, 0
 d0c:	06 0e       	add	r0, r22
 d0e:	66 0f       	add	r22, r22
 d10:	11 f0       	breq	.+4      	; 0xd16 <__mulqi3_exit>
 d12:	86 95       	lsr	r24
 d14:	d1 f7       	brne	.-12     	; 0xd0a <__mulqi3_loop>

00000d16 <__mulqi3_exit>:
 d16:	80 2d       	mov	r24, r0
 d18:	08 95       	ret

00000d1a <__mulhi3>:
 d1a:	00 24       	eor	r0, r0
 d1c:	55 27       	eor	r21, r21
 d1e:	04 c0       	rjmp	.+8      	; 0xd28 <__mulhi3+0xe>
 d20:	08 0e       	add	r0, r24
 d22:	59 1f       	adc	r21, r25
 d24:	88 0f       	add	r24, r24
 d26:	99 1f       	adc	r25, r25
 d28:	00 97       	sbiw	r24, 0x00	; 0
 d2a:	29 f0       	breq	.+10     	; 0xd36 <__mulhi3+0x1c>
 d2c:	76 95       	lsr	r23
 d2e:	67 95       	ror	r22
 d30:	b8 f3       	brcs	.-18     	; 0xd20 <__mulhi3+0x6>
 d32:	71 05       	cpc	r23, r1
 d34:	b9 f7       	brne	.-18     	; 0xd24 <__mulhi3+0xa>
 d36:	80 2d       	mov	r24, r0
 d38:	95 2f       	mov	r25, r21
 d3a:	08 95       	ret

00000d3c <__udivmodqi4>:
 d3c:	99 1b       	sub	r25, r25
 d3e:	79 e0       	ldi	r23, 0x09	; 9
 d40:	04 c0       	rjmp	.+8      	; 0xd4a <__udivmodqi4_ep>

00000d42 <__udivmodqi4_loop>:
 d42:	99 1f       	adc	r25, r25
 d44:	96 17       	cp	r25, r22
 d46:	08 f0       	brcs	.+2      	; 0xd4a <__udivmodqi4_ep>
 d48:	96 1b       	sub	r25, r22

00000d4a <__udivmodqi4_ep>:
 d4a:	88 1f       	adc	r24, r24
 d4c:	7a 95       	dec	r23
 d4e:	c9 f7       	brne	.-14     	; 0xd42 <__udivmodqi4_loop>
 d50:	80 95       	com	r24
 d52:	08 95       	ret

00000d54 <_exit>:
 d54:	f8 94       	cli

00000d56 <__stop_program>:
 d56:	ff cf       	rjmp	.-2      	; 0xd56 <__stop_program>
