
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000a40  00000ad4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006b  0080006c  0080006c  00000ae0  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000ae0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000af4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c9e  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ae3  00000000  00000000  00002836  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000968  00000000  00000000  00003319  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000474  00000000  00000000  00003c84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000511  00000000  00000000  000040f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013bc  00000000  00000000  00004609  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000059c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	4f c0       	rjmp	.+158    	; 0xb0 <__vector_8>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	a9 c0       	rjmp	.+338    	; 0x16a <__vector_11>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e0 e4       	ldi	r30, 0x40	; 64
  36:	fa e0       	ldi	r31, 0x0A	; 10
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	ac 36       	cpi	r26, 0x6C	; 108
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	ac e6       	ldi	r26, 0x6C	; 108
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a7 3d       	cpi	r26, 0xD7	; 215
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	4e d4       	rcall	.+2204   	; 0x8f2 <main>
  56:	f2 c4       	rjmp	.+2532   	; 0xa3c <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <sendRawData>:
#include <util/delay.h>
#include "defines.h"
#include "Led.h"
#include "RTC.h"

void sendRawData(uint32_t data){
  5a:	0f 93       	push	r16
  5c:	1f 93       	push	r17
    PORTA &=~(STROBE|CLK);
  5e:	2b b3       	in	r18, 0x1b	; 27
  60:	23 7f       	andi	r18, 0xF3	; 243
  62:	2b bb       	out	0x1b, r18	; 27
  64:	40 e0       	ldi	r20, 0x00	; 0
  66:	50 e0       	ldi	r21, 0x00	; 0
    for(uint8_t i=0;i<20;i++){
        if((data>>i) & 0x00000001){
  68:	8b 01       	movw	r16, r22
  6a:	9c 01       	movw	r18, r24
  6c:	04 2e       	mov	r0, r20
  6e:	04 c0       	rjmp	.+8      	; 0x78 <sendRawData+0x1e>
  70:	36 95       	lsr	r19
  72:	27 95       	ror	r18
  74:	17 95       	ror	r17
  76:	07 95       	ror	r16
  78:	0a 94       	dec	r0
  7a:	d2 f7       	brpl	.-12     	; 0x70 <sendRawData+0x16>
  7c:	00 ff       	sbrs	r16, 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <sendRawData+0x2a>
            PORTA|=DATA;
  80:	d9 9a       	sbi	0x1b, 1	; 27
  82:	01 c0       	rjmp	.+2      	; 0x86 <sendRawData+0x2c>
        }else{
            PORTA&=~DATA;
  84:	d9 98       	cbi	0x1b, 1	; 27
        }
        PORTA|=CLK;
  86:	db 9a       	sbi	0x1b, 3	; 27
        PORTA&=~CLK;
  88:	db 98       	cbi	0x1b, 3	; 27
  8a:	4f 5f       	subi	r20, 0xFF	; 255
  8c:	5f 4f       	sbci	r21, 0xFF	; 255
#include "Led.h"
#include "RTC.h"

void sendRawData(uint32_t data){
    PORTA &=~(STROBE|CLK);
    for(uint8_t i=0;i<20;i++){
  8e:	44 31       	cpi	r20, 0x14	; 20
  90:	51 05       	cpc	r21, r1
  92:	51 f7       	brne	.-44     	; 0x68 <sendRawData+0xe>
            PORTA&=~DATA;
        }
        PORTA|=CLK;
        PORTA&=~CLK;
    }
    PORTA|=STROBE;
  94:	da 9a       	sbi	0x1b, 2	; 27
    PORTA&=~STROBE;
  96:	da 98       	cbi	0x1b, 2	; 27
}
  98:	1f 91       	pop	r17
  9a:	0f 91       	pop	r16
  9c:	08 95       	ret

0000009e <sendData>:
uint8_t ledr=0;
uint8_t ledb=0;
void sendData(uint32_t data){
    if(ledr)data|=LEDR;
  9e:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <ledr>
  a2:	21 11       	cpse	r18, r1
  a4:	78 60       	ori	r23, 0x08	; 8
    if(ledb)data|=LEDB;
  a6:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <ledb>
  aa:	21 11       	cpse	r18, r1
  ac:	74 60       	ori	r23, 0x04	; 4
    sendRawData(data);
  ae:	d5 cf       	rjmp	.-86     	; 0x5a <sendRawData>

000000b0 <__vector_8>:
        
    }
    return(0);
    
}
ISR( TIM1_OVF_vect ){
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	cf 92       	push	r12
  bc:	df 92       	push	r13
  be:	ef 92       	push	r14
  c0:	ff 92       	push	r15
  c2:	0f 93       	push	r16
  c4:	2f 93       	push	r18
  c6:	3f 93       	push	r19
  c8:	4f 93       	push	r20
  ca:	5f 93       	push	r21
  cc:	6f 93       	push	r22
  ce:	7f 93       	push	r23
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
  d4:	af 93       	push	r26
  d6:	bf 93       	push	r27
  d8:	ef 93       	push	r30
  da:	ff 93       	push	r31
    ledb=1-ledb;
  dc:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <ledb>
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	89 1b       	sub	r24, r25
  e4:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <ledb>
    ledr=!ledb;
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	81 11       	cpse	r24, r1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <ledr>
    if(ledb){
  f2:	88 23       	and	r24, r24
  f4:	c1 f0       	breq	.+48     	; 0x126 <__vector_8+0x76>
        RTC_readTime(&currentTime);
  f6:	8f ec       	ldi	r24, 0xCF	; 207
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	c4 d3       	rcall	.+1928   	; 0x884 <RTC_readTime>
        setLeds(currentTime,leds,tcolorV(YELLOW));
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	7f ef       	ldi	r23, 0xFF	; 255
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	ae d0       	rcall	.+348    	; 0x262 <tcolorV>
 106:	7b 01       	movw	r14, r22
 108:	08 2f       	mov	r16, r24
 10a:	2f e6       	ldi	r18, 0x6F	; 111
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	40 91 cf 00 	lds	r20, 0x00CF	; 0x8000cf <currentTime>
 112:	50 91 d0 00 	lds	r21, 0x00D0	; 0x8000d0 <currentTime+0x1>
 116:	60 91 d1 00 	lds	r22, 0x00D1	; 0x8000d1 <currentTime+0x2>
 11a:	70 91 d2 00 	lds	r23, 0x00D2	; 0x8000d2 <currentTime+0x3>
 11e:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <currentTime+0x4>
 122:	7e d1       	rcall	.+764    	; 0x420 <setLeds>
 124:	0c c0       	rjmp	.+24     	; 0x13e <__vector_8+0x8e>
    }else{
        setLedsNb(RTC_readTemp(),leds,tcolorV(MAGENTA));
 126:	6f ef       	ldi	r22, 0xFF	; 255
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	cb 01       	movw	r24, r22
 12c:	9a d0       	rcall	.+308    	; 0x262 <tcolorV>
 12e:	6b 01       	movw	r12, r22
 130:	e8 2e       	mov	r14, r24
 132:	92 d3       	rcall	.+1828   	; 0x858 <RTC_readTemp>
 134:	4e 2d       	mov	r20, r14
 136:	96 01       	movw	r18, r12
 138:	6f e6       	ldi	r22, 0x6F	; 111
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	f4 d1       	rcall	.+1000   	; 0x526 <setLedsNb>
    }
    
}
 13e:	ff 91       	pop	r31
 140:	ef 91       	pop	r30
 142:	bf 91       	pop	r27
 144:	af 91       	pop	r26
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	7f 91       	pop	r23
 14c:	6f 91       	pop	r22
 14e:	5f 91       	pop	r21
 150:	4f 91       	pop	r20
 152:	3f 91       	pop	r19
 154:	2f 91       	pop	r18
 156:	0f 91       	pop	r16
 158:	ff 90       	pop	r15
 15a:	ef 90       	pop	r14
 15c:	df 90       	pop	r13
 15e:	cf 90       	pop	r12
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <__vector_11>:
ISR( TIM0_OVF_vect ){
 16a:	1f 92       	push	r1
 16c:	0f 92       	push	r0
 16e:	0f b6       	in	r0, 0x3f	; 63
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	2f 93       	push	r18
 176:	3f 93       	push	r19
 178:	4f 93       	push	r20
 17a:	5f 93       	push	r21
 17c:	6f 93       	push	r22
 17e:	7f 93       	push	r23
 180:	8f 93       	push	r24
 182:	9f 93       	push	r25
 184:	af 93       	push	r26
 186:	bf 93       	push	r27
 188:	ef 93       	push	r30
 18a:	ff 93       	push	r31
    switch(state){
 18c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 190:	82 30       	cpi	r24, 0x02	; 2
 192:	49 f1       	breq	.+82     	; 0x1e6 <__vector_11+0x7c>
 194:	78 f4       	brcc	.+30     	; 0x1b4 <__vector_11+0x4a>
 196:	88 23       	and	r24, r24
 198:	e1 f0       	breq	.+56     	; 0x1d2 <__vector_11+0x68>
 19a:	81 30       	cpi	r24, 0x01	; 1
 19c:	09 f0       	breq	.+2      	; 0x1a0 <__vector_11+0x36>
 19e:	41 c0       	rjmp	.+130    	; 0x222 <__vector_11+0xb8>
        case 0:
            sendData(R2 | getDataByColor(tcolor(1,0,0),0,leds));
            break;
        case 1:
            sendData(R1 | getDataByColor(tcolor(1,0,0),1,leds));
 1a0:	40 e0       	ldi	r20, 0x00	; 0
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	59 d0       	rcall	.+178    	; 0x25a <tcolor>
 1a8:	2f e6       	ldi	r18, 0x6F	; 111
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	41 e0       	ldi	r20, 0x01	; 1
 1ae:	ae d0       	rcall	.+348    	; 0x30c <getDataByColor>
 1b0:	70 68       	ori	r23, 0x80	; 128
 1b2:	36 c0       	rjmp	.+108    	; 0x220 <__vector_11+0xb6>
        setLedsNb(RTC_readTemp(),leds,tcolorV(MAGENTA));
    }
    
}
ISR( TIM0_OVF_vect ){
    switch(state){
 1b4:	84 30       	cpi	r24, 0x04	; 4
 1b6:	59 f1       	breq	.+86     	; 0x20e <__vector_11+0xa4>
 1b8:	00 f1       	brcs	.+64     	; 0x1fa <__vector_11+0x90>
 1ba:	85 30       	cpi	r24, 0x05	; 5
 1bc:	91 f5       	brne	.+100    	; 0x222 <__vector_11+0xb8>
            break;
        case 4:
            sendData(B2 | getDataByColor(tcolor(0,0,1),0,leds));
            break;
        case 5:
            sendData(B1 | getDataByColor(tcolor(0,0,1),1,leds));
 1be:	41 e0       	ldi	r20, 0x01	; 1
 1c0:	60 e0       	ldi	r22, 0x00	; 0
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	4a d0       	rcall	.+148    	; 0x25a <tcolor>
 1c6:	2f e6       	ldi	r18, 0x6F	; 111
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	41 e0       	ldi	r20, 0x01	; 1
 1cc:	9f d0       	rcall	.+318    	; 0x30c <getDataByColor>
 1ce:	82 60       	ori	r24, 0x02	; 2
 1d0:	27 c0       	rjmp	.+78     	; 0x220 <__vector_11+0xb6>
    
}
ISR( TIM0_OVF_vect ){
    switch(state){
        case 0:
            sendData(R2 | getDataByColor(tcolor(1,0,0),0,leds));
 1d2:	40 e0       	ldi	r20, 0x00	; 0
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	40 d0       	rcall	.+128    	; 0x25a <tcolor>
 1da:	2f e6       	ldi	r18, 0x6F	; 111
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	40 e0       	ldi	r20, 0x00	; 0
 1e0:	95 d0       	rcall	.+298    	; 0x30c <getDataByColor>
 1e2:	70 64       	ori	r23, 0x40	; 64
 1e4:	1d c0       	rjmp	.+58     	; 0x220 <__vector_11+0xb6>
            break;
        case 1:
            sendData(R1 | getDataByColor(tcolor(1,0,0),1,leds));
            break;
        case 2:
            sendData(G2 | getDataByColor(tcolor(0,1,0),0,leds));
 1e6:	40 e0       	ldi	r20, 0x00	; 0
 1e8:	61 e0       	ldi	r22, 0x01	; 1
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	36 d0       	rcall	.+108    	; 0x25a <tcolor>
 1ee:	2f e6       	ldi	r18, 0x6F	; 111
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	40 e0       	ldi	r20, 0x00	; 0
 1f4:	8b d0       	rcall	.+278    	; 0x30c <getDataByColor>
 1f6:	84 60       	ori	r24, 0x04	; 4
 1f8:	13 c0       	rjmp	.+38     	; 0x220 <__vector_11+0xb6>
            break;
        case 3:
            sendData(G1 | getDataByColor(tcolor(0,1,0),1,leds));
 1fa:	40 e0       	ldi	r20, 0x00	; 0
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	2c d0       	rcall	.+88     	; 0x25a <tcolor>
 202:	2f e6       	ldi	r18, 0x6F	; 111
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	41 e0       	ldi	r20, 0x01	; 1
 208:	81 d0       	rcall	.+258    	; 0x30c <getDataByColor>
 20a:	88 60       	ori	r24, 0x08	; 8
 20c:	09 c0       	rjmp	.+18     	; 0x220 <__vector_11+0xb6>
            break;
        case 4:
            sendData(B2 | getDataByColor(tcolor(0,0,1),0,leds));
 20e:	41 e0       	ldi	r20, 0x01	; 1
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	22 d0       	rcall	.+68     	; 0x25a <tcolor>
 216:	2f e6       	ldi	r18, 0x6F	; 111
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	40 e0       	ldi	r20, 0x00	; 0
 21c:	77 d0       	rcall	.+238    	; 0x30c <getDataByColor>
 21e:	81 60       	ori	r24, 0x01	; 1
            break;
        case 5:
            sendData(B1 | getDataByColor(tcolor(0,0,1),1,leds));
 220:	3e df       	rcall	.-388    	; 0x9e <sendData>
            break;
    }
    state++;
 222:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 226:	8f 5f       	subi	r24, 0xFF	; 255
 228:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
    if(state>5)state=0;
 22c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 230:	86 30       	cpi	r24, 0x06	; 6
 232:	10 f0       	brcs	.+4      	; 0x238 <__vector_11+0xce>
 234:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
}
 238:	ff 91       	pop	r31
 23a:	ef 91       	pop	r30
 23c:	bf 91       	pop	r27
 23e:	af 91       	pop	r26
 240:	9f 91       	pop	r25
 242:	8f 91       	pop	r24
 244:	7f 91       	pop	r23
 246:	6f 91       	pop	r22
 248:	5f 91       	pop	r21
 24a:	4f 91       	pop	r20
 24c:	3f 91       	pop	r19
 24e:	2f 91       	pop	r18
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <tcolor>:
#include "Led.h" 

static const uint8_t ledMap[11]={7,8,10,14,0,4,17,2,12,6,16};

Tcolor tcolor(uint8_t r,uint8_t g,uint8_t b){
 25a:	76 2f       	mov	r23, r22
    Tcolor c={r,g,b};
    return c;
}
 25c:	68 2f       	mov	r22, r24
 25e:	84 2f       	mov	r24, r20
 260:	08 95       	ret

00000262 <tcolorV>:

Tcolor tcolorV(uint32_t v){
 262:	0f 93       	push	r16
 264:	1f 93       	push	r17
 266:	dc 01       	movw	r26, r24
 268:	cb 01       	movw	r24, r22
    Tcolor c={(v>>16)&0xFF,(v>>8)&0xFF,v&0xFF};
    return c;
 26a:	ad 01       	movw	r20, r26
 26c:	66 27       	eor	r22, r22
 26e:	77 27       	eor	r23, r23
 270:	09 2f       	mov	r16, r25
 272:	1a 2f       	mov	r17, r26
 274:	2b 2f       	mov	r18, r27
 276:	33 27       	eor	r19, r19
}
 278:	64 2f       	mov	r22, r20
 27a:	70 2f       	mov	r23, r16
 27c:	1f 91       	pop	r17
 27e:	0f 91       	pop	r16
 280:	08 95       	ret

00000282 <ledInit>:

void ledInit(Led* leds){
 282:	fc 01       	movw	r30, r24
    for(uint8_t i=0;i<NBLEDS;i++){
 284:	80 e0       	ldi	r24, 0x00	; 0
        leds[i].row=i%2;//leds[0]=0, leds[1]=1
 286:	98 2f       	mov	r25, r24
 288:	91 70       	andi	r25, 0x01	; 1
 28a:	91 83       	std	Z+1, r25	; 0x01
        if(i<10){
 28c:	8a 30       	cpi	r24, 0x0A	; 10
 28e:	10 f4       	brcc	.+4      	; 0x294 <ledInit+0x12>
            leds[i].col=i;//0-9
 290:	80 83       	st	Z, r24
 292:	03 c0       	rjmp	.+6      	; 0x29a <ledInit+0x18>
        }else{
            leds[i].col=i-9;//1-9
 294:	97 ef       	ldi	r25, 0xF7	; 247
 296:	98 0f       	add	r25, r24
 298:	90 83       	st	Z, r25
        }
        leds[i].c.r=0;
 29a:	12 82       	std	Z+2, r1	; 0x02
        leds[i].c.g=0;
 29c:	13 82       	std	Z+3, r1	; 0x03
        leds[i].c.b=0;
 29e:	14 82       	std	Z+4, r1	; 0x04
    Tcolor c={(v>>16)&0xFF,(v>>8)&0xFF,v&0xFF};
    return c;
}

void ledInit(Led* leds){
    for(uint8_t i=0;i<NBLEDS;i++){
 2a0:	8f 5f       	subi	r24, 0xFF	; 255
 2a2:	35 96       	adiw	r30, 0x05	; 5
 2a4:	83 31       	cpi	r24, 0x13	; 19
 2a6:	79 f7       	brne	.-34     	; 0x286 <ledInit+0x4>
        }
        leds[i].c.r=0;
        leds[i].c.g=0;
        leds[i].c.b=0;
    }
}
 2a8:	08 95       	ret

000002aa <getColorByLed>:
uint32_t getColorByLed(Led l){
 2aa:	cf 93       	push	r28
 2ac:	df 93       	push	r29
 2ae:	00 d0       	rcall	.+0      	; 0x2b0 <getColorByLed+0x6>
 2b0:	00 d0       	rcall	.+0      	; 0x2b2 <getColorByLed+0x8>
 2b2:	1f 92       	push	r1
 2b4:	cd b7       	in	r28, 0x3d	; 61
 2b6:	de b7       	in	r29, 0x3e	; 62
 2b8:	27 2f       	mov	r18, r23
 2ba:	38 2f       	mov	r19, r24
    uint32_t d=0;
    if(l.row){
 2bc:	55 23       	and	r21, r21
 2be:	81 f0       	breq	.+32     	; 0x2e0 <getColorByLed+0x36>
        if(l.c.r)d|=R2;
 2c0:	66 23       	and	r22, r22
 2c2:	29 f0       	breq	.+10     	; 0x2ce <getColorByLed+0x24>
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	70 e4       	ldi	r23, 0x40	; 64
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	03 c0       	rjmp	.+6      	; 0x2d4 <getColorByLed+0x2a>
        leds[i].c.g=0;
        leds[i].c.b=0;
    }
}
uint32_t getColorByLed(Led l){
    uint32_t d=0;
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	70 e0       	ldi	r23, 0x00	; 0
 2d2:	cb 01       	movw	r24, r22
    if(l.row){
        if(l.c.r)d|=R2;
        if(l.c.g)d|=G2;
 2d4:	21 11       	cpse	r18, r1
 2d6:	84 60       	ori	r24, 0x04	; 4
        if(l.c.b)d|=B2;
 2d8:	33 23       	and	r19, r19
 2da:	81 f0       	breq	.+32     	; 0x2fc <getColorByLed+0x52>
 2dc:	81 60       	ori	r24, 0x01	; 1
 2de:	0e c0       	rjmp	.+28     	; 0x2fc <getColorByLed+0x52>
    }else{
        if(l.c.r)d|=R1;
 2e0:	66 23       	and	r22, r22
 2e2:	29 f0       	breq	.+10     	; 0x2ee <getColorByLed+0x44>
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	70 e8       	ldi	r23, 0x80	; 128
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	03 c0       	rjmp	.+6      	; 0x2f4 <getColorByLed+0x4a>
        leds[i].c.g=0;
        leds[i].c.b=0;
    }
}
uint32_t getColorByLed(Led l){
    uint32_t d=0;
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	cb 01       	movw	r24, r22
        if(l.c.r)d|=R2;
        if(l.c.g)d|=G2;
        if(l.c.b)d|=B2;
    }else{
        if(l.c.r)d|=R1;
        if(l.c.g)d|=G1;
 2f4:	21 11       	cpse	r18, r1
 2f6:	88 60       	ori	r24, 0x08	; 8
        if(l.c.b)d|=B1;
 2f8:	31 11       	cpse	r19, r1
 2fa:	82 60       	ori	r24, 0x02	; 2
    }
    return d;
}
 2fc:	0f 90       	pop	r0
 2fe:	0f 90       	pop	r0
 300:	0f 90       	pop	r0
 302:	0f 90       	pop	r0
 304:	0f 90       	pop	r0
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	08 95       	ret

0000030c <getDataByColor>:

uint32_t getDataByColor(Tcolor c, uint8_t mode, Led* leds){
 30c:	ef 92       	push	r14
 30e:	ff 92       	push	r15
 310:	0f 93       	push	r16
 312:	1f 93       	push	r17
 314:	cf 93       	push	r28
 316:	df 93       	push	r29
 318:	56 2f       	mov	r21, r22
 31a:	f7 2e       	mov	r15, r23
 31c:	e8 2e       	mov	r14, r24
 31e:	f9 01       	movw	r30, r18
 320:	d9 01       	movw	r26, r18
 322:	a1 5a       	subi	r26, 0xA1	; 161
 324:	bf 4f       	sbci	r27, 0xFF	; 255
    uint32_t data=0;
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	70 e0       	ldi	r23, 0x00	; 0
 32a:	cb 01       	movw	r24, r22
    for(uint8_t i=0;i<NBLEDS;i++){
        if(leds[i].row==mode){
            if((leds[i].c.r && c.r) || (leds[i].c.g && c.g) || (leds[i].c.b && c.b)){
                data|=(1<<leds[i].col);
 32c:	c1 e0       	ldi	r28, 0x01	; 1
 32e:	d0 e0       	ldi	r29, 0x00	; 0
}

uint32_t getDataByColor(Tcolor c, uint8_t mode, Led* leds){
    uint32_t data=0;
    for(uint8_t i=0;i<NBLEDS;i++){
        if(leds[i].row==mode){
 330:	21 81       	ldd	r18, Z+1	; 0x01
 332:	24 13       	cpse	r18, r20
 334:	1e c0       	rjmp	.+60     	; 0x372 <getDataByColor+0x66>
            if((leds[i].c.r && c.r) || (leds[i].c.g && c.g) || (leds[i].c.b && c.b)){
 336:	22 81       	ldd	r18, Z+2	; 0x02
 338:	22 23       	and	r18, r18
 33a:	11 f0       	breq	.+4      	; 0x340 <getDataByColor+0x34>
 33c:	51 11       	cpse	r21, r1
 33e:	0a c0       	rjmp	.+20     	; 0x354 <getDataByColor+0x48>
 340:	23 81       	ldd	r18, Z+3	; 0x03
 342:	22 23       	and	r18, r18
 344:	11 f0       	breq	.+4      	; 0x34a <getDataByColor+0x3e>
 346:	f1 10       	cpse	r15, r1
 348:	05 c0       	rjmp	.+10     	; 0x354 <getDataByColor+0x48>
 34a:	24 81       	ldd	r18, Z+4	; 0x04
 34c:	22 23       	and	r18, r18
 34e:	89 f0       	breq	.+34     	; 0x372 <getDataByColor+0x66>
 350:	ee 20       	and	r14, r14
 352:	79 f0       	breq	.+30     	; 0x372 <getDataByColor+0x66>
                data|=(1<<leds[i].col);
 354:	8e 01       	movw	r16, r28
 356:	00 80       	ld	r0, Z
 358:	02 c0       	rjmp	.+4      	; 0x35e <getDataByColor+0x52>
 35a:	00 0f       	add	r16, r16
 35c:	11 1f       	adc	r17, r17
 35e:	0a 94       	dec	r0
 360:	e2 f7       	brpl	.-8      	; 0x35a <getDataByColor+0x4e>
 362:	01 2e       	mov	r0, r17
 364:	00 0c       	add	r0, r0
 366:	22 0b       	sbc	r18, r18
 368:	33 0b       	sbc	r19, r19
 36a:	60 2b       	or	r22, r16
 36c:	71 2b       	or	r23, r17
 36e:	82 2b       	or	r24, r18
 370:	93 2b       	or	r25, r19
 372:	35 96       	adiw	r30, 0x05	; 5
    return d;
}

uint32_t getDataByColor(Tcolor c, uint8_t mode, Led* leds){
    uint32_t data=0;
    for(uint8_t i=0;i<NBLEDS;i++){
 374:	ea 17       	cp	r30, r26
 376:	fb 07       	cpc	r31, r27
 378:	d9 f6       	brne	.-74     	; 0x330 <getDataByColor+0x24>
                data|=(1<<leds[i].col);
            }
        }
    }
    return data;
}
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	1f 91       	pop	r17
 380:	0f 91       	pop	r16
 382:	ff 90       	pop	r15
 384:	ef 90       	pop	r14
 386:	08 95       	ret

00000388 <ledOff>:

void ledOff(Led* l){
 388:	fc 01       	movw	r30, r24
    l->c.r=0;
 38a:	12 82       	std	Z+2, r1	; 0x02
    l->c.g=0;
 38c:	13 82       	std	Z+3, r1	; 0x03
    l->c.b=0;
 38e:	14 82       	std	Z+4, r1	; 0x04
 390:	08 95       	ret

00000392 <ledOn>:
}
void ledOn(Led* l){
 392:	fc 01       	movw	r30, r24
    l->c.r=255;
 394:	8f ef       	ldi	r24, 0xFF	; 255
 396:	82 83       	std	Z+2, r24	; 0x02
    l->c.g=255;
 398:	83 83       	std	Z+3, r24	; 0x03
    l->c.b=255;
 39a:	84 83       	std	Z+4, r24	; 0x04
 39c:	08 95       	ret

0000039e <ledOnC>:
}

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 39e:	fc 01       	movw	r30, r24
 3a0:	42 83       	std	Z+2, r20	; 0x02
 3a2:	53 83       	std	Z+3, r21	; 0x03
 3a4:	64 83       	std	Z+4, r22	; 0x04
 3a6:	08 95       	ret

000003a8 <ledOnV>:
}

void ledOnV(Led* l,uint32_t v){
 3a8:	fc 01       	movw	r30, r24
    l->c=tcolorV(v);
 3aa:	62 83       	std	Z+2, r22	; 0x02
 3ac:	53 83       	std	Z+3, r21	; 0x03
 3ae:	44 83       	std	Z+4, r20	; 0x04
 3b0:	08 95       	ret

000003b2 <ledIsOff>:
}

uint8_t ledIsOff(Led l){
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
 3b6:	00 d0       	rcall	.+0      	; 0x3b8 <ledIsOff+0x6>
 3b8:	00 d0       	rcall	.+0      	; 0x3ba <ledIsOff+0x8>
 3ba:	1f 92       	push	r1
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
    return !ledIsOn(l);
}
uint8_t ledIsOn(Led l){
    return l.c.r || l.c.g || l.c.b;
 3c0:	61 11       	cpse	r22, r1
 3c2:	08 c0       	rjmp	.+16     	; 0x3d4 <ledIsOff+0x22>
 3c4:	71 11       	cpse	r23, r1
 3c6:	06 c0       	rjmp	.+12     	; 0x3d4 <ledIsOff+0x22>
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	81 11       	cpse	r24, r1
 3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <ledIsOff+0x1e>
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	89 2f       	mov	r24, r25
 3d2:	01 c0       	rjmp	.+2      	; 0x3d6 <ledIsOff+0x24>
 3d4:	81 e0       	ldi	r24, 0x01	; 1
    l->c=tcolorV(v);
}

uint8_t ledIsOff(Led l){
    return !ledIsOn(l);
}
 3d6:	91 e0       	ldi	r25, 0x01	; 1
 3d8:	89 27       	eor	r24, r25
 3da:	0f 90       	pop	r0
 3dc:	0f 90       	pop	r0
 3de:	0f 90       	pop	r0
 3e0:	0f 90       	pop	r0
 3e2:	0f 90       	pop	r0
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	08 95       	ret

000003ea <ledIsOn>:
uint8_t ledIsOn(Led l){
 3ea:	cf 93       	push	r28
 3ec:	df 93       	push	r29
 3ee:	00 d0       	rcall	.+0      	; 0x3f0 <ledIsOn+0x6>
 3f0:	00 d0       	rcall	.+0      	; 0x3f2 <ledIsOn+0x8>
 3f2:	1f 92       	push	r1
 3f4:	cd b7       	in	r28, 0x3d	; 61
 3f6:	de b7       	in	r29, 0x3e	; 62
 3f8:	8d 83       	std	Y+5, r24	; 0x05
    return l.c.r || l.c.g || l.c.b;
 3fa:	61 11       	cpse	r22, r1
 3fc:	08 c0       	rjmp	.+16     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3fe:	71 11       	cpse	r23, r1
 400:	06 c0       	rjmp	.+12     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	9d 81       	ldd	r25, Y+5	; 0x05
 406:	91 11       	cpse	r25, r1
 408:	03 c0       	rjmp	.+6      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	01 c0       	rjmp	.+2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40e:	81 e0       	ldi	r24, 0x01	; 1
}
 410:	0f 90       	pop	r0
 412:	0f 90       	pop	r0
 414:	0f 90       	pop	r0
 416:	0f 90       	pop	r0
 418:	0f 90       	pop	r0
 41a:	df 91       	pop	r29
 41c:	cf 91       	pop	r28
 41e:	08 95       	ret

00000420 <setLeds>:
void setLeds(Ttime t,Led* l,Tcolor c){
 420:	6f 92       	push	r6
 422:	7f 92       	push	r7
 424:	8f 92       	push	r8
 426:	cf 92       	push	r12
 428:	df 92       	push	r13
 42a:	ef 92       	push	r14
 42c:	ff 92       	push	r15
 42e:	0f 93       	push	r16
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	00 d0       	rcall	.+0      	; 0x436 <setLeds+0x16>
 436:	00 d0       	rcall	.+0      	; 0x438 <setLeds+0x18>
 438:	1f 92       	push	r1
 43a:	cd b7       	in	r28, 0x3d	; 61
 43c:	de b7       	in	r29, 0x3e	; 62
 43e:	69 01       	movw	r12, r18
 440:	37 01       	movw	r6, r14
 442:	80 2e       	mov	r8, r16
 444:	f9 01       	movw	r30, r18
 446:	c9 01       	movw	r24, r18
 448:	81 5a       	subi	r24, 0xA1	; 161
 44a:	9f 4f       	sbci	r25, 0xFF	; 255
    }
    return data;
}

void ledOff(Led* l){
    l->c.r=0;
 44c:	12 82       	std	Z+2, r1	; 0x02
    l->c.g=0;
 44e:	13 82       	std	Z+3, r1	; 0x03
    l->c.b=0;
 450:	14 82       	std	Z+4, r1	; 0x04
 452:	35 96       	adiw	r30, 0x05	; 5
uint8_t ledIsOn(Led l){
    return l.c.r || l.c.g || l.c.b;
}
void setLeds(Ttime t,Led* l,Tcolor c){
    uint8_t i=0;
    for(;i<NBLEDS;i++){
 454:	e8 17       	cp	r30, r24
 456:	f9 07       	cpc	r31, r25
 458:	c9 f7       	brne	.-14     	; 0x44c <setLeds+0x2c>
    l->c.g=255;
    l->c.b=255;
}

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 45a:	f6 01       	movw	r30, r12
 45c:	e6 5a       	subi	r30, 0xA6	; 166
 45e:	ff 4f       	sbci	r31, 0xFF	; 255
 460:	62 82       	std	Z+2, r6	; 0x02
 462:	73 82       	std	Z+3, r7	; 0x03
 464:	84 82       	std	Z+4, r8	; 0x04
    for(;i<NBLEDS;i++){
        ledOff(&l[i]);
    }
    ledOnC(&l[ILEST],c);
    
    switch(currentTime.hour){
 466:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <currentTime>
 46a:	88 23       	and	r24, r24
 46c:	31 f0       	breq	.+12     	; 0x47a <setLeds+0x5a>
 46e:	8c 30       	cpi	r24, 0x0C	; 12
 470:	49 f4       	brne	.+18     	; 0x484 <setLeds+0x64>
    l->c.g=255;
    l->c.b=255;
}

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 472:	f6 01       	movw	r30, r12
 474:	ef 5b       	subi	r30, 0xBF	; 191
 476:	ff 4f       	sbci	r31, 0xFF	; 255
 478:	23 c0       	rjmp	.+70     	; 0x4c0 <setLeds+0xa0>
 47a:	f6 01       	movw	r30, r12
 47c:	61 8a       	std	Z+17, r6	; 0x11
 47e:	72 8a       	std	Z+18, r7	; 0x12
 480:	83 8a       	std	Z+19, r8	; 0x13
 482:	21 c0       	rjmp	.+66     	; 0x4c6 <setLeds+0xa6>
            break;
        case 12 :
            ledOnC(&l[MIDI],c);
            break;
        default :
            if(currentTime.min>35){
 484:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <currentTime+0x1>
                ledOnC(&l[ledMap[(currentTime.hour%12)]],c);
 488:	6c e0       	ldi	r22, 0x0C	; 12
            break;
        case 12 :
            ledOnC(&l[MIDI],c);
            break;
        default :
            if(currentTime.min>35){
 48a:	94 32       	cpi	r25, 0x24	; 36
 48c:	30 f0       	brcs	.+12     	; 0x49a <setLeds+0x7a>
                ledOnC(&l[ledMap[(currentTime.hour%12)]],c);
 48e:	ca d2       	rcall	.+1428   	; 0xa24 <__udivmodqi4>
 490:	e9 2f       	mov	r30, r25
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	e0 5a       	subi	r30, 0xA0	; 160
 496:	ff 4f       	sbci	r31, 0xFF	; 255
 498:	05 c0       	rjmp	.+10     	; 0x4a4 <setLeds+0x84>
            }else{
                ledOnC(&l[ledMap[(currentTime.hour%12)-1]],c);
 49a:	c4 d2       	rcall	.+1416   	; 0xa24 <__udivmodqi4>
 49c:	e9 2f       	mov	r30, r25
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	e1 5a       	subi	r30, 0xA1	; 161
 4a2:	ff 4f       	sbci	r31, 0xFF	; 255
 4a4:	80 81       	ld	r24, Z
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	65 e0       	ldi	r22, 0x05	; 5
 4aa:	70 e0       	ldi	r23, 0x00	; 0
 4ac:	aa d2       	rcall	.+1364   	; 0xa02 <__mulhi3>
 4ae:	8c 0d       	add	r24, r12
 4b0:	9d 1d       	adc	r25, r13
    l->c.g=255;
    l->c.b=255;
}

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 4b2:	fc 01       	movw	r30, r24
 4b4:	62 82       	std	Z+2, r6	; 0x02
 4b6:	73 82       	std	Z+3, r7	; 0x03
 4b8:	84 82       	std	Z+4, r8	; 0x04
 4ba:	f6 01       	movw	r30, r12
 4bc:	e5 5b       	subi	r30, 0xB5	; 181
 4be:	ff 4f       	sbci	r31, 0xFF	; 255
 4c0:	62 82       	std	Z+2, r6	; 0x02
 4c2:	73 82       	std	Z+3, r7	; 0x03
 4c4:	84 82       	std	Z+4, r8	; 0x04
                ledOnC(&l[ledMap[(currentTime.hour%12)-1]],c);
            }
            ledOnC(&l[HEURE],c);
            break;
    }
    uint8_t mins = minquad(currentTime.min); 
 4c6:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <currentTime+0x1>
 4ca:	7c d0       	rcall	.+248    	; 0x5c4 <minquad>
    if(mins > 30){
 4cc:	8f 31       	cpi	r24, 0x1F	; 31
 4ce:	38 f0       	brcs	.+14     	; 0x4de <setLeds+0xbe>
    l->c.g=255;
    l->c.b=255;
}

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 4d0:	f6 01       	movw	r30, r12
 4d2:	67 a6       	std	Z+47, r6	; 0x2f
 4d4:	70 aa       	std	Z+48, r7	; 0x30
 4d6:	81 aa       	std	Z+49, r8	; 0x31
            break;
    }
    uint8_t mins = minquad(currentTime.min); 
    if(mins > 30){
        ledOnC(&l[MOINS],c);
        mins=60-mins;
 4d8:	9c e3       	ldi	r25, 0x3C	; 60
 4da:	98 1b       	sub	r25, r24
 4dc:	89 2f       	mov	r24, r25
    }
    switch(mins){
 4de:	84 31       	cpi	r24, 0x14	; 20
 4e0:	49 f0       	breq	.+18     	; 0x4f4 <setLeds+0xd4>
 4e2:	8e 31       	cpi	r24, 0x1E	; 30
 4e4:	61 f0       	breq	.+24     	; 0x4fe <setLeds+0xde>
 4e6:	8a 30       	cpi	r24, 0x0A	; 10
 4e8:	71 f4       	brne	.+28     	; 0x506 <setLeds+0xe6>
    l->c.g=255;
    l->c.b=255;
}

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 4ea:	f6 01       	movw	r30, r12
 4ec:	63 8e       	std	Z+27, r6	; 0x1b
 4ee:	74 8e       	std	Z+28, r7	; 0x1c
 4f0:	85 8e       	std	Z+29, r8	; 0x1d
 4f2:	09 c0       	rjmp	.+18     	; 0x506 <setLeds+0xe6>
 4f4:	f6 01       	movw	r30, r12
 4f6:	61 ae       	std	Z+57, r6	; 0x39
 4f8:	72 ae       	std	Z+58, r7	; 0x3a
 4fa:	83 ae       	std	Z+59, r8	; 0x3b
 4fc:	04 c0       	rjmp	.+8      	; 0x506 <setLeds+0xe6>
 4fe:	f6 01       	movw	r30, r12
 500:	67 82       	std	Z+7, r6	; 0x07
 502:	70 86       	std	Z+8, r7	; 0x08
 504:	81 86       	std	Z+9, r8	; 0x09
            break;
        case 30 :
            ledOnC(&l[ETDEMIE],c);
            break;
    }
}
 506:	0f 90       	pop	r0
 508:	0f 90       	pop	r0
 50a:	0f 90       	pop	r0
 50c:	0f 90       	pop	r0
 50e:	0f 90       	pop	r0
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	0f 91       	pop	r16
 516:	ff 90       	pop	r15
 518:	ef 90       	pop	r14
 51a:	df 90       	pop	r13
 51c:	cf 90       	pop	r12
 51e:	8f 90       	pop	r8
 520:	7f 90       	pop	r7
 522:	6f 90       	pop	r6
 524:	08 95       	ret

00000526 <setLedsNb>:

void setLedsNb(int8_t nb, Led* l, Tcolor c){
 526:	cf 93       	push	r28
 528:	df 93       	push	r29
 52a:	e8 2f       	mov	r30, r24
 52c:	db 01       	movw	r26, r22
 52e:	eb 01       	movw	r28, r22
 530:	cb 01       	movw	r24, r22
 532:	81 5a       	subi	r24, 0xA1	; 161
 534:	9f 4f       	sbci	r25, 0xFF	; 255
    }
    return data;
}

void ledOff(Led* l){
    l->c.r=0;
 536:	1a 82       	std	Y+2, r1	; 0x02
    l->c.g=0;
 538:	1b 82       	std	Y+3, r1	; 0x03
    l->c.b=0;
 53a:	1c 82       	std	Y+4, r1	; 0x04
 53c:	25 96       	adiw	r28, 0x05	; 5
    }
}

void setLedsNb(int8_t nb, Led* l, Tcolor c){
    uint8_t i=0;
    for(;i<NBLEDS;i++){
 53e:	8c 17       	cp	r24, r28
 540:	9d 07       	cpc	r25, r29
 542:	c9 f7       	brne	.-14     	; 0x536 <setLedsNb+0x10>
        ledOff(&l[i]);
    }
    if(nb < 0){
 544:	e7 ff       	sbrs	r30, 7
 546:	06 c0       	rjmp	.+12     	; 0x554 <setLedsNb+0x2e>
    l->c.g=255;
    l->c.b=255;
}

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 548:	9f 96       	adiw	r26, 0x2f	; 47
 54a:	2d 93       	st	X+, r18
 54c:	3d 93       	st	X+, r19
 54e:	4c 93       	st	X, r20
 550:	d1 97       	sbiw	r26, 0x31	; 49
    for(;i<NBLEDS;i++){
        ledOff(&l[i]);
    }
    if(nb < 0){
        ledOnC(&l[MOINS],c);
        nb=-nb;
 552:	e1 95       	neg	r30
    }
    if(nb>30){
 554:	ef 31       	cpi	r30, 0x1F	; 31
 556:	64 f0       	brlt	.+24     	; 0x570 <setLedsNb+0x4a>
    l->c.g=255;
    l->c.b=255;
}

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 558:	d9 96       	adiw	r26, 0x39	; 57
 55a:	2d 93       	st	X+, r18
 55c:	3d 93       	st	X+, r19
 55e:	4c 93       	st	X, r20
 560:	db 97       	sbiw	r26, 0x3b	; 59
 562:	5b 96       	adiw	r26, 0x1b	; 27
 564:	2d 93       	st	X+, r18
 566:	3d 93       	st	X+, r19
 568:	4c 93       	st	X, r20
 56a:	5d 97       	sbiw	r26, 0x1d	; 29
        nb=-nb;
    }
    if(nb>30){
        ledOnC(&l[VINGT],c);
        ledOnC(&l[DIX],c);
        nb=nb-30;
 56c:	ee 51       	subi	r30, 0x1E	; 30
 56e:	10 c0       	rjmp	.+32     	; 0x590 <setLedsNb+0x6a>
    }else if(nb>20){
 570:	e5 31       	cpi	r30, 0x15	; 21
 572:	34 f0       	brlt	.+12     	; 0x580 <setLedsNb+0x5a>
    l->c.g=255;
    l->c.b=255;
}

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 574:	d9 96       	adiw	r26, 0x39	; 57
 576:	2d 93       	st	X+, r18
 578:	3d 93       	st	X+, r19
 57a:	4c 93       	st	X, r20
 57c:	db 97       	sbiw	r26, 0x3b	; 59
 57e:	07 c0       	rjmp	.+14     	; 0x58e <setLedsNb+0x68>
        ledOnC(&l[DIX],c);
        nb=nb-30;
    }else if(nb>20){
        ledOnC(&l[VINGT],c);
        nb=nb-10;
    }else if(nb>11){
 580:	ec 30       	cpi	r30, 0x0C	; 12
 582:	34 f0       	brlt	.+12     	; 0x590 <setLedsNb+0x6a>
    l->c.g=255;
    l->c.b=255;
}

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 584:	5b 96       	adiw	r26, 0x1b	; 27
 586:	2d 93       	st	X+, r18
 588:	3d 93       	st	X+, r19
 58a:	4c 93       	st	X, r20
 58c:	5d 97       	sbiw	r26, 0x1d	; 29
    }else if(nb>20){
        ledOnC(&l[VINGT],c);
        nb=nb-10;
    }else if(nb>11){
        ledOnC(&l[DIX],c);
        nb=nb-10;
 58e:	ea 50       	subi	r30, 0x0A	; 10
    }
    ledOnC(&l[ledMap[nb-1]],c);
 590:	0e 2e       	mov	r0, r30
 592:	00 0c       	add	r0, r0
 594:	ff 0b       	sbc	r31, r31
 596:	e1 5a       	subi	r30, 0xA1	; 161
 598:	ff 4f       	sbci	r31, 0xFF	; 255
 59a:	80 81       	ld	r24, Z
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	65 e0       	ldi	r22, 0x05	; 5
 5a0:	70 e0       	ldi	r23, 0x00	; 0
 5a2:	2f d2       	rcall	.+1118   	; 0xa02 <__mulhi3>
 5a4:	a8 0f       	add	r26, r24
 5a6:	b9 1f       	adc	r27, r25
    l->c.g=255;
    l->c.b=255;
}

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 5a8:	12 96       	adiw	r26, 0x02	; 2
 5aa:	2d 93       	st	X+, r18
 5ac:	3d 93       	st	X+, r19
 5ae:	4c 93       	st	X, r20
    }else if(nb>11){
        ledOnC(&l[DIX],c);
        nb=nb-10;
    }
    ledOnC(&l[ledMap[nb-1]],c);
}
 5b0:	df 91       	pop	r29
 5b2:	cf 91       	pop	r28
 5b4:	08 95       	ret

000005b6 <setCurrentTime>:
#include "RTC.h" 

void setCurrentTime(uint8_t hour,uint8_t min,uint8_t monthDay,uint8_t month){
	currentTime.hour=hour;
 5b6:	ef ec       	ldi	r30, 0xCF	; 207
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	80 83       	st	Z, r24
	currentTime.min=min;
 5bc:	61 83       	std	Z+1, r22	; 0x01
	currentTime.monthDay=monthDay;
 5be:	42 83       	std	Z+2, r20	; 0x02
	currentTime.month=month;
 5c0:	23 83       	std	Z+3, r18	; 0x03
 5c2:	08 95       	ret

000005c4 <minquad>:
}

uint8_t minquad(uint8_t min){
	if(min > 5){
 5c4:	86 30       	cpi	r24, 0x06	; 6
 5c6:	a0 f0       	brcs	.+40     	; 0x5f0 <minquad+0x2c>
		if(min > 15){
 5c8:	80 31       	cpi	r24, 0x10	; 16
 5ca:	50 f0       	brcs	.+20     	; 0x5e0 <minquad+0x1c>
			if(min > 25){
 5cc:	8a 31       	cpi	r24, 0x1A	; 26
 5ce:	50 f0       	brcs	.+20     	; 0x5e4 <minquad+0x20>
				if(min > 35){
 5d0:	84 32       	cpi	r24, 0x24	; 36
 5d2:	50 f0       	brcs	.+20     	; 0x5e8 <minquad+0x24>
					if(min > 45){
 5d4:	8e 32       	cpi	r24, 0x2E	; 46
 5d6:	50 f0       	brcs	.+20     	; 0x5ec <minquad+0x28>
						if(min > 55){
 5d8:	88 33       	cpi	r24, 0x38	; 56
 5da:	50 f4       	brcc	.+20     	; 0x5f0 <minquad+0x2c>
							return 0;
						}else{return 50;}
 5dc:	82 e3       	ldi	r24, 0x32	; 50
 5de:	08 95       	ret
					}else{return 40;}
				}else{return 30;}
			}else{return 20;}
		}else{return 10;}
 5e0:	8a e0       	ldi	r24, 0x0A	; 10
 5e2:	08 95       	ret
						if(min > 55){
							return 0;
						}else{return 50;}
					}else{return 40;}
				}else{return 30;}
			}else{return 20;}
 5e4:	84 e1       	ldi	r24, 0x14	; 20
 5e6:	08 95       	ret
					if(min > 45){
						if(min > 55){
							return 0;
						}else{return 50;}
					}else{return 40;}
				}else{return 30;}
 5e8:	8e e1       	ldi	r24, 0x1E	; 30
 5ea:	08 95       	ret
				if(min > 35){
					if(min > 45){
						if(min > 55){
							return 0;
						}else{return 50;}
					}else{return 40;}
 5ec:	88 e2       	ldi	r24, 0x28	; 40
 5ee:	08 95       	ret
				}else{return 30;}
			}else{return 20;}
		}else{return 10;}
	}else{return 0;}
 5f0:	80 e0       	ldi	r24, 0x00	; 0
}
 5f2:	08 95       	ret

000005f4 <bcdToDec>:
    }else{
        return 0;
    }
    
}
uint8_t bcdToDec(uint8_t val){
 5f4:	98 2f       	mov	r25, r24
  return ((val/16*10) + (val%16));
 5f6:	82 95       	swap	r24
 5f8:	8f 70       	andi	r24, 0x0F	; 15
 5fa:	6a e0       	ldi	r22, 0x0A	; 10
 5fc:	f9 d1       	rcall	.+1010   	; 0x9f0 <__mulqi3>
 5fe:	9f 70       	andi	r25, 0x0F	; 15
}
 600:	89 0f       	add	r24, r25
 602:	08 95       	ret

00000604 <decToBcd>:
uint8_t decToBcd(uint8_t val){
  return( (val/10*16) + (val%10) );
 604:	6a e0       	ldi	r22, 0x0A	; 10
 606:	0e d2       	rcall	.+1052   	; 0xa24 <__udivmodqi4>
 608:	82 95       	swap	r24
 60a:	80 7f       	andi	r24, 0xF0	; 240
}
 60c:	89 0f       	add	r24, r25
 60e:	08 95       	ret

00000610 <i2c_in_transfer>:
		return 0;
	}
}

uint8_t i2c_in_transfer(uint8_t USISR_temp){
	USISR = USISR_temp;								//Set USISR as requested by calling function
 610:	8e b9       	out	0x0e, r24	; 14
	do{
		_delay_us(I2C_TLOW);
		USICR = 0b00101011;								//SCL Positive Edge
 612:	8b e2       	ldi	r24, 0x2B	; 43
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 614:	95 e0       	ldi	r25, 0x05	; 5
 616:	9a 95       	dec	r25
 618:	f1 f7       	brne	.-4      	; 0x616 <i2c_in_transfer+0x6>
 61a:	00 00       	nop
 61c:	8d b9       	out	0x0d, r24	; 13
		while (!(PIN_USI&(1<<PIN_USI_SCL)));		//Wait for SCL to go high
 61e:	cc 9b       	sbis	0x19, 4	; 25
 620:	fe cf       	rjmp	.-4      	; 0x61e <i2c_in_transfer+0xe>
 622:	94 e0       	ldi	r25, 0x04	; 4
 624:	9a 95       	dec	r25
 626:	f1 f7       	brne	.-4      	; 0x624 <i2c_in_transfer+0x14>
		_delay_us(I2C_THIGH);
		USICR = 0b00101011;								//SCL Negative Edge
 628:	8d b9       	out	0x0d, r24	; 13
	}while (!(USISR&(1<<USIOIF)));					//Do until transfer is complete
 62a:	76 9b       	sbis	0x0e, 6	; 14
 62c:	f3 cf       	rjmp	.-26     	; 0x614 <i2c_in_transfer+0x4>
 62e:	85 e0       	ldi	r24, 0x05	; 5
 630:	8a 95       	dec	r24
 632:	f1 f7       	brne	.-4      	; 0x630 <i2c_in_transfer+0x20>
 634:	00 00       	nop
	_delay_us(I2C_TLOW);
	return USIDR;
 636:	8f b1       	in	r24, 0x0f	; 15
}
 638:	08 95       	ret

0000063a <i2c_in_transmit>:
uint8_t i2c_in_transmit(uint8_t *msg, uint8_t msg_size){
 63a:	ef 92       	push	r14
 63c:	ff 92       	push	r15
 63e:	0f 93       	push	r16
 640:	1f 93       	push	r17
 642:	cf 93       	push	r28
 644:	df 93       	push	r29
 646:	ec 01       	movw	r28, r24
 648:	16 2f       	mov	r17, r22
	USI_I2C_Master_State = USI_ADDRESS;
 64a:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <USI_I2C_Master_State>

	//   Start Condition
	PORT_USI |=  (1 << PORT_USI_SCL); 						//Setting input makes line pull high
 64e:	dc 9a       	sbi	0x1b, 4	; 27
	while (!(PIN_USI & (1<<PIN_USI_SCL)));		//Wait for SCL to go high
 650:	cc 9b       	sbis	0x19, 4	; 25
 652:	fe cf       	rjmp	.-4      	; 0x650 <i2c_in_transmit+0x16>
 654:	84 e0       	ldi	r24, 0x04	; 4
 656:	8a 95       	dec	r24
 658:	f1 f7       	brne	.-4      	; 0x656 <i2c_in_transmit+0x1c>
	#ifdef I2C_FAST_MODE
		_delay_us(I2C_THIGH);
	#else
		_delay_us(I2C_TLOW);
	#endif
	DDR_USI |=  (1 << PORT_USI_SDA);
 65a:	d6 9a       	sbi	0x1a, 6	; 26
	DDR_USI |=  (1 << PORT_USI_SCL);
 65c:	d4 9a       	sbi	0x1a, 4	; 26
	PORT_USI &= ~(1 << PORT_USI_SDA);
 65e:	de 98       	cbi	0x1b, 6	; 27
 660:	84 e0       	ldi	r24, 0x04	; 4
 662:	8a 95       	dec	r24
 664:	f1 f7       	brne	.-4      	; 0x662 <i2c_in_transmit+0x28>
	_delay_us(I2C_THIGH);;
	PORT_USI &= ~(1 << PORT_USI_SCL);
 666:	dc 98       	cbi	0x1b, 4	; 27
 668:	85 e0       	ldi	r24, 0x05	; 5
 66a:	8a 95       	dec	r24
 66c:	f1 f7       	brne	.-4      	; 0x66a <i2c_in_transmit+0x30>
 66e:	00 00       	nop
	_delay_us(I2C_TLOW);
	PORT_USI |=  (1 << PORT_USI_SDA);
 670:	de 9a       	sbi	0x1b, 6	; 27
		switch(USI_I2C_Master_State){
			case USI_ADDRESS:
				if(!(*msg & 0x01)){
					USI_I2C_Master_State = USI_WRITE;
				}else{
					USI_I2C_Master_State = USI_READ;
 672:	02 e0       	ldi	r16, 0x02	; 2
	
	do{
		switch(USI_I2C_Master_State){
			case USI_ADDRESS:
				if(!(*msg & 0x01)){
					USI_I2C_Master_State = USI_WRITE;
 674:	ff 24       	eor	r15, r15
 676:	f3 94       	inc	r15
				DDR_USI &= ~(1 << PORT_USI_SDA);
				(*msg) = i2c_in_transfer(0b11110000 | (0x00<<USICNT0));			
				msg++;
				DDR_USI |=  (1 << PORT_USI_SDA);				
				if(msg_size == 1){
					USIDR = 0xFF;			//Load NACK to end transmission
 678:	ee 24       	eor	r14, r14
 67a:	ea 94       	dec	r14
	PORT_USI &= ~(1 << PORT_USI_SCL);
	_delay_us(I2C_TLOW);
	PORT_USI |=  (1 << PORT_USI_SDA);
	
	do{
		switch(USI_I2C_Master_State){
 67c:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <USI_I2C_Master_State>
 680:	81 30       	cpi	r24, 0x01	; 1
 682:	61 f0       	breq	.+24     	; 0x69c <i2c_in_transmit+0x62>
 684:	18 f0       	brcs	.+6      	; 0x68c <i2c_in_transmit+0x52>
 686:	82 30       	cpi	r24, 0x02	; 2
 688:	c9 f0       	breq	.+50     	; 0x6bc <i2c_in_transmit+0x82>
 68a:	24 c0       	rjmp	.+72     	; 0x6d4 <i2c_in_transmit+0x9a>
			case USI_ADDRESS:
				if(!(*msg & 0x01)){
 68c:	88 81       	ld	r24, Y
 68e:	80 fd       	sbrc	r24, 0
 690:	03 c0       	rjmp	.+6      	; 0x698 <i2c_in_transmit+0x5e>
					USI_I2C_Master_State = USI_WRITE;
 692:	f0 92 ce 00 	sts	0x00CE, r15	; 0x8000ce <USI_I2C_Master_State>
 696:	02 c0       	rjmp	.+4      	; 0x69c <i2c_in_transmit+0x62>
				}else{
					USI_I2C_Master_State = USI_READ;
 698:	00 93 ce 00 	sts	0x00CE, r16	; 0x8000ce <USI_I2C_Master_State>
				}//no break so goes to Write
				
			case USI_WRITE:
				PORT_USI &= ~(1 << PORT_USI_SCL);
 69c:	dc 98       	cbi	0x1b, 4	; 27
				USIDR = *(msg);				//Load data			
 69e:	89 91       	ld	r24, Y+
 6a0:	8f b9       	out	0x0f, r24	; 15
				msg++;						//Increment buffer pointer
				i2c_in_transfer(0b11110000 | (0x00<<USICNT0));
 6a2:	80 ef       	ldi	r24, 0xF0	; 240
 6a4:	b5 df       	rcall	.-150    	; 0x610 <i2c_in_transfer>
				DDR_USI &= ~(1 << PORT_USI_SDA);
 6a6:	d6 98       	cbi	0x1a, 6	; 26
				if(i2c_in_transfer(0b11110000 | (0x0E<<USICNT0)) & 0x01){
 6a8:	8e ef       	ldi	r24, 0xFE	; 254
 6aa:	b2 df       	rcall	.-156    	; 0x610 <i2c_in_transfer>
 6ac:	80 ff       	sbrs	r24, 0
 6ae:	04 c0       	rjmp	.+8      	; 0x6b8 <i2c_in_transmit+0x7e>
					PORT_USI |=  (1 << PORT_USI_SCL);
 6b0:	dc 9a       	sbi	0x1b, 4	; 27
					PORT_USI |=  (1 << PORT_USI_SDA);
 6b2:	de 9a       	sbi	0x1b, 6	; 27
					return 0;
 6b4:	80 e0       	ldi	r24, 0x00	; 0
 6b6:	1f c0       	rjmp	.+62     	; 0x6f6 <i2c_in_transmit+0xbc>
				}
				DDR_USI |=  (1 << PORT_USI_SDA);
 6b8:	d6 9a       	sbi	0x1a, 6	; 26
				break;
 6ba:	0c c0       	rjmp	.+24     	; 0x6d4 <i2c_in_transmit+0x9a>

			case USI_READ:
				DDR_USI &= ~(1 << PORT_USI_SDA);
 6bc:	d6 98       	cbi	0x1a, 6	; 26
				(*msg) = i2c_in_transfer(0b11110000 | (0x00<<USICNT0));			
 6be:	80 ef       	ldi	r24, 0xF0	; 240
 6c0:	a7 df       	rcall	.-178    	; 0x610 <i2c_in_transfer>
 6c2:	89 93       	st	Y+, r24
				msg++;
				DDR_USI |=  (1 << PORT_USI_SDA);				
 6c4:	d6 9a       	sbi	0x1a, 6	; 26
				if(msg_size == 1){
 6c6:	11 30       	cpi	r17, 0x01	; 1
 6c8:	11 f4       	brne	.+4      	; 0x6ce <i2c_in_transmit+0x94>
					USIDR = 0xFF;			//Load NACK to end transmission
 6ca:	ef b8       	out	0x0f, r14	; 15
 6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <i2c_in_transmit+0x96>
				}else{
					USIDR = 0x00;			//Load ACK
 6ce:	1f b8       	out	0x0f, r1	; 15
				}
				i2c_in_transfer(0b11110000 | (0x0E<<USICNT0));
 6d0:	8e ef       	ldi	r24, 0xFE	; 254
 6d2:	9e df       	rcall	.-196    	; 0x610 <i2c_in_transfer>
				break;
		}
	}while(--msg_size);
 6d4:	11 50       	subi	r17, 0x01	; 1
 6d6:	91 f6       	brne	.-92     	; 0x67c <i2c_in_transmit+0x42>
	
	//Stop Condition
	PORT_USI &= ~(1 << PORT_USI_SDA);           				// Pull SDA low.
 6d8:	de 98       	cbi	0x1b, 6	; 27
 6da:	85 e0       	ldi	r24, 0x05	; 5
 6dc:	8a 95       	dec	r24
 6de:	f1 f7       	brne	.-4      	; 0x6dc <i2c_in_transmit+0xa2>
 6e0:	00 00       	nop
	_delay_us(I2C_TLOW);
	DDR_USI &= ~(1 << PORT_USI_SCL);            				// Release SCL.
 6e2:	d4 98       	cbi	0x1a, 4	; 26
	while( !(PIN_USI & (1<<PIN_USI_SCL)) );  	// Wait for SCL to go high.  
 6e4:	cc 9b       	sbis	0x19, 4	; 25
 6e6:	fe cf       	rjmp	.-4      	; 0x6e4 <i2c_in_transmit+0xaa>
 6e8:	84 e0       	ldi	r24, 0x04	; 4
 6ea:	8a 95       	dec	r24
 6ec:	f1 f7       	brne	.-4      	; 0x6ea <i2c_in_transmit+0xb0>
	_delay_us(I2C_THIGH);
	DDR_USI &= ~(1 << PORT_USI_SDA);            				// Release SDA.
 6ee:	d6 98       	cbi	0x1a, 6	; 26
	while( !(PIN_USI & (1<<PIN_USI_SDA)) );  	// Wait for SDA to go high. 
 6f0:	ce 9b       	sbis	0x19, 6	; 25
 6f2:	fe cf       	rjmp	.-4      	; 0x6f0 <i2c_in_transmit+0xb6>
	return 1;
 6f4:	81 e0       	ldi	r24, 0x01	; 1
}
 6f6:	df 91       	pop	r29
 6f8:	cf 91       	pop	r28
 6fa:	1f 91       	pop	r17
 6fc:	0f 91       	pop	r16
 6fe:	ff 90       	pop	r15
 700:	ef 90       	pop	r14
 702:	08 95       	ret

00000704 <i2c_write>:
    i2c_write(RTC_addr,3,decToBcd(day));
    i2c_write(RTC_addr,4,decToBcd(t.monthDay));
    i2c_write(RTC_addr,5,decToBcd(t.month));
    i2c_write(RTC_addr,6,decToBcd(year));
}
uint8_t i2c_write(uint8_t addr, uint8_t adrs, uint8_t val){ // only supports 1 byte write
 704:	cf 93       	push	r28
 706:	df 93       	push	r29
 708:	00 d0       	rcall	.+0      	; 0x70a <i2c_write+0x6>
 70a:	1f 92       	push	r1
 70c:	cd b7       	in	r28, 0x3d	; 61
 70e:	de b7       	in	r29, 0x3e	; 62
	uint8_t i2c_buffer[3];
	uint8_t i2c_buffer_len = 3;
	i2c_buffer[0] = (addr << 1) | I2CWRITE ;
 710:	88 0f       	add	r24, r24
 712:	89 83       	std	Y+1, r24	; 0x01
	i2c_buffer[1] = adrs;
 714:	6a 83       	std	Y+2, r22	; 0x02
	i2c_buffer[2] = val;
 716:	4b 83       	std	Y+3, r20	; 0x03
	return i2c_in_transmit(i2c_buffer, i2c_buffer_len);
 718:	63 e0       	ldi	r22, 0x03	; 3
 71a:	ce 01       	movw	r24, r28
 71c:	01 96       	adiw	r24, 0x01	; 1
 71e:	8d df       	rcall	.-230    	; 0x63a <i2c_in_transmit>
}
 720:	0f 90       	pop	r0
 722:	0f 90       	pop	r0
 724:	0f 90       	pop	r0
 726:	df 91       	pop	r29
 728:	cf 91       	pop	r28
 72a:	08 95       	ret

0000072c <RTC_setTime>:
		return 1;
	}else{
		return 0;
	}
}
void RTC_setTime(struct Ttime t,uint8_t day, uint8_t year){
 72c:	0f 93       	push	r16
 72e:	1f 93       	push	r17
 730:	cf 93       	push	r28
 732:	df 93       	push	r29
 734:	00 d0       	rcall	.+0      	; 0x736 <RTC_setTime+0xa>
 736:	00 d0       	rcall	.+0      	; 0x738 <RTC_setTime+0xc>
 738:	1f 92       	push	r1
 73a:	cd b7       	in	r28, 0x3d	; 61
 73c:	de b7       	in	r29, 0x3e	; 62
 73e:	49 83       	std	Y+1, r20	; 0x01
 740:	85 2f       	mov	r24, r21
 742:	6b 83       	std	Y+3, r22	; 0x03
 744:	7c 83       	std	Y+4, r23	; 0x04
 746:	12 2f       	mov	r17, r18
    i2c_write(RTC_addr,1,decToBcd(t.min));
 748:	5d df       	rcall	.-326    	; 0x604 <decToBcd>
 74a:	48 2f       	mov	r20, r24
 74c:	61 e0       	ldi	r22, 0x01	; 1
 74e:	88 e6       	ldi	r24, 0x68	; 104
 750:	d9 df       	rcall	.-78     	; 0x704 <i2c_write>
    i2c_write(RTC_addr,2,decToBcd(t.hour));
 752:	89 81       	ldd	r24, Y+1	; 0x01
 754:	57 df       	rcall	.-338    	; 0x604 <decToBcd>
 756:	48 2f       	mov	r20, r24
 758:	62 e0       	ldi	r22, 0x02	; 2
 75a:	88 e6       	ldi	r24, 0x68	; 104
 75c:	d3 df       	rcall	.-90     	; 0x704 <i2c_write>
    i2c_write(RTC_addr,3,decToBcd(day));
 75e:	81 2f       	mov	r24, r17
 760:	51 df       	rcall	.-350    	; 0x604 <decToBcd>
 762:	48 2f       	mov	r20, r24
 764:	63 e0       	ldi	r22, 0x03	; 3
 766:	88 e6       	ldi	r24, 0x68	; 104
 768:	cd df       	rcall	.-102    	; 0x704 <i2c_write>
    i2c_write(RTC_addr,4,decToBcd(t.monthDay));
 76a:	8b 81       	ldd	r24, Y+3	; 0x03
 76c:	4b df       	rcall	.-362    	; 0x604 <decToBcd>
 76e:	48 2f       	mov	r20, r24
 770:	64 e0       	ldi	r22, 0x04	; 4
 772:	88 e6       	ldi	r24, 0x68	; 104
 774:	c7 df       	rcall	.-114    	; 0x704 <i2c_write>
    i2c_write(RTC_addr,5,decToBcd(t.month));
 776:	8c 81       	ldd	r24, Y+4	; 0x04
 778:	45 df       	rcall	.-374    	; 0x604 <decToBcd>
 77a:	48 2f       	mov	r20, r24
 77c:	65 e0       	ldi	r22, 0x05	; 5
 77e:	88 e6       	ldi	r24, 0x68	; 104
 780:	c1 df       	rcall	.-126    	; 0x704 <i2c_write>
    i2c_write(RTC_addr,6,decToBcd(year));
 782:	80 2f       	mov	r24, r16
 784:	3f df       	rcall	.-386    	; 0x604 <decToBcd>
 786:	48 2f       	mov	r20, r24
 788:	66 e0       	ldi	r22, 0x06	; 6
 78a:	88 e6       	ldi	r24, 0x68	; 104
}
 78c:	0f 90       	pop	r0
 78e:	0f 90       	pop	r0
 790:	0f 90       	pop	r0
 792:	0f 90       	pop	r0
 794:	0f 90       	pop	r0
 796:	df 91       	pop	r29
 798:	cf 91       	pop	r28
 79a:	1f 91       	pop	r17
 79c:	0f 91       	pop	r16
    i2c_write(RTC_addr,1,decToBcd(t.min));
    i2c_write(RTC_addr,2,decToBcd(t.hour));
    i2c_write(RTC_addr,3,decToBcd(day));
    i2c_write(RTC_addr,4,decToBcd(t.monthDay));
    i2c_write(RTC_addr,5,decToBcd(t.month));
    i2c_write(RTC_addr,6,decToBcd(year));
 79e:	b2 cf       	rjmp	.-156    	; 0x704 <i2c_write>

000007a0 <i2c_read>:
	i2c_buffer[0] = (addr << 1) | I2CWRITE ;
	i2c_buffer[1] = adrs;
	i2c_buffer[2] = val;
	return i2c_in_transmit(i2c_buffer, i2c_buffer_len);
}
uint8_t i2c_read(uint8_t addr, uint8_t len, uint8_t adrs, uint8_t *buf){
 7a0:	8f 92       	push	r8
 7a2:	9f 92       	push	r9
 7a4:	af 92       	push	r10
 7a6:	bf 92       	push	r11
 7a8:	cf 92       	push	r12
 7aa:	df 92       	push	r13
 7ac:	ef 92       	push	r14
 7ae:	ff 92       	push	r15
 7b0:	0f 93       	push	r16
 7b2:	1f 93       	push	r17
 7b4:	cf 93       	push	r28
 7b6:	df 93       	push	r29
 7b8:	cd b7       	in	r28, 0x3d	; 61
 7ba:	de b7       	in	r29, 0x3e	; 62
 7bc:	18 2f       	mov	r17, r24
 7be:	06 2f       	mov	r16, r22
 7c0:	49 01       	movw	r8, r18
		}
		return 1; // provide success check
	}else{
		return 0;
	}
}
 7c2:	ad b6       	in	r10, 0x3d	; 61
 7c4:	be b6       	in	r11, 0x3e	; 62
	i2c_buffer[2] = val;
	return i2c_in_transmit(i2c_buffer, i2c_buffer_len);
}
uint8_t i2c_read(uint8_t addr, uint8_t len, uint8_t adrs, uint8_t *buf){
	//set register pointer to adrs
	uint8_t i2c_buffer[len+1];
 7c6:	c6 2e       	mov	r12, r22
 7c8:	d1 2c       	mov	r13, r1
 7ca:	c6 01       	movw	r24, r12
 7cc:	01 96       	adiw	r24, 0x01	; 1
 7ce:	2d b7       	in	r18, 0x3d	; 61
 7d0:	3e b7       	in	r19, 0x3e	; 62
 7d2:	28 1b       	sub	r18, r24
 7d4:	39 0b       	sbc	r19, r25
 7d6:	0f b6       	in	r0, 0x3f	; 63
 7d8:	f8 94       	cli
 7da:	3e bf       	out	0x3e, r19	; 62
 7dc:	0f be       	out	0x3f, r0	; 63
 7de:	2d bf       	out	0x3d, r18	; 61
 7e0:	8d b7       	in	r24, 0x3d	; 61
 7e2:	9e b7       	in	r25, 0x3e	; 62
 7e4:	01 96       	adiw	r24, 0x01	; 1
 7e6:	7c 01       	movw	r14, r24
	uint8_t i2c_buffer_len = 2;
	i2c_buffer[0] = (addr << 1) | I2CWRITE;
 7e8:	81 2f       	mov	r24, r17
 7ea:	88 0f       	add	r24, r24
 7ec:	ed b7       	in	r30, 0x3d	; 61
 7ee:	fe b7       	in	r31, 0x3e	; 62
 7f0:	81 83       	std	Z+1, r24	; 0x01
	i2c_buffer[1] = adrs;
 7f2:	f7 01       	movw	r30, r14
 7f4:	41 83       	std	Z+1, r20	; 0x01
	i2c_in_transmit(i2c_buffer, i2c_buffer_len);
 7f6:	62 e0       	ldi	r22, 0x02	; 2
 7f8:	c7 01       	movw	r24, r14
 7fa:	1f df       	rcall	.-450    	; 0x63a <i2c_in_transmit>
	//read actual data
	i2c_buffer_len = len+1;
	i2c_buffer[0] = (addr << 1) | I2CREAD;
 7fc:	11 0f       	add	r17, r17
 7fe:	11 60       	ori	r17, 0x01	; 1
 800:	f7 01       	movw	r30, r14
 802:	10 83       	st	Z, r17
	if(i2c_in_transmit(i2c_buffer, i2c_buffer_len)){
 804:	61 e0       	ldi	r22, 0x01	; 1
 806:	60 0f       	add	r22, r16
 808:	c7 01       	movw	r24, r14
 80a:	17 df       	rcall	.-466    	; 0x63a <i2c_in_transmit>
 80c:	88 23       	and	r24, r24
 80e:	91 f0       	breq	.+36     	; 0x834 <i2c_read+0x94>
 810:	21 e0       	ldi	r18, 0x01	; 1
		uint8_t i;
		for(i=1;i<len+1;i++){ // fetch in buffer
 812:	82 2f       	mov	r24, r18
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	c8 16       	cp	r12, r24
 818:	d9 06       	cpc	r13, r25
 81a:	5c f0       	brlt	.+22     	; 0x832 <i2c_read+0x92>
			buf[i-1]=i2c_buffer[i];
 81c:	f4 01       	movw	r30, r8
 81e:	e8 0f       	add	r30, r24
 820:	f9 1f       	adc	r31, r25
 822:	31 97       	sbiw	r30, 0x01	; 1
 824:	d7 01       	movw	r26, r14
 826:	a8 0f       	add	r26, r24
 828:	b9 1f       	adc	r27, r25
 82a:	8c 91       	ld	r24, X
 82c:	80 83       	st	Z, r24
	//read actual data
	i2c_buffer_len = len+1;
	i2c_buffer[0] = (addr << 1) | I2CREAD;
	if(i2c_in_transmit(i2c_buffer, i2c_buffer_len)){
		uint8_t i;
		for(i=1;i<len+1;i++){ // fetch in buffer
 82e:	2f 5f       	subi	r18, 0xFF	; 255
 830:	f0 cf       	rjmp	.-32     	; 0x812 <i2c_read+0x72>
			buf[i-1]=i2c_buffer[i];
		}
		return 1; // provide success check
 832:	81 e0       	ldi	r24, 0x01	; 1
	}else{
		return 0;
	}
}
 834:	0f b6       	in	r0, 0x3f	; 63
 836:	f8 94       	cli
 838:	be be       	out	0x3e, r11	; 62
 83a:	0f be       	out	0x3f, r0	; 63
 83c:	ad be       	out	0x3d, r10	; 61
 83e:	df 91       	pop	r29
 840:	cf 91       	pop	r28
 842:	1f 91       	pop	r17
 844:	0f 91       	pop	r16
 846:	ff 90       	pop	r15
 848:	ef 90       	pop	r14
 84a:	df 90       	pop	r13
 84c:	cf 90       	pop	r12
 84e:	bf 90       	pop	r11
 850:	af 90       	pop	r10
 852:	9f 90       	pop	r9
 854:	8f 90       	pop	r8
 856:	08 95       	ret

00000858 <RTC_readTemp>:
			}else{return 20;}
		}else{return 10;}
	}else{return 0;}
}

int8_t RTC_readTemp(void){
 858:	cf 93       	push	r28
 85a:	df 93       	push	r29
 85c:	1f 92       	push	r1
 85e:	cd b7       	in	r28, 0x3d	; 61
 860:	de b7       	in	r29, 0x3e	; 62
	int8_t data=0;
 862:	19 82       	std	Y+1, r1	; 0x01
	if(i2c_read(RTC_addr,1,0x11,&data)){
 864:	9e 01       	movw	r18, r28
 866:	2f 5f       	subi	r18, 0xFF	; 255
 868:	3f 4f       	sbci	r19, 0xFF	; 255
 86a:	41 e1       	ldi	r20, 0x11	; 17
 86c:	61 e0       	ldi	r22, 0x01	; 1
 86e:	88 e6       	ldi	r24, 0x68	; 104
 870:	97 df       	rcall	.-210    	; 0x7a0 <i2c_read>
 872:	88 23       	and	r24, r24
 874:	11 f0       	breq	.+4      	; 0x87a <RTC_readTemp+0x22>
       // if(data&0x80){
      //      return -(data&0x7F);
       // }else{
            return (data);
 876:	89 81       	ldd	r24, Y+1	; 0x01
 878:	01 c0       	rjmp	.+2      	; 0x87c <RTC_readTemp+0x24>
      //  }
    }else{
        return 0;
 87a:	80 e0       	ldi	r24, 0x00	; 0
    }
    
}
 87c:	0f 90       	pop	r0
 87e:	df 91       	pop	r29
 880:	cf 91       	pop	r28
 882:	08 95       	ret

00000884 <RTC_readTime>:
  return ((val/16*10) + (val%16));
}
uint8_t decToBcd(uint8_t val){
  return( (val/10*16) + (val%10) );
}
uint8_t RTC_readTime(struct Ttime *t){
 884:	0f 93       	push	r16
 886:	1f 93       	push	r17
 888:	cf 93       	push	r28
 88a:	df 93       	push	r29
 88c:	cd b7       	in	r28, 0x3d	; 61
 88e:	de b7       	in	r29, 0x3e	; 62
 890:	27 97       	sbiw	r28, 0x07	; 7
 892:	0f b6       	in	r0, 0x3f	; 63
 894:	f8 94       	cli
 896:	de bf       	out	0x3e, r29	; 62
 898:	0f be       	out	0x3f, r0	; 63
 89a:	cd bf       	out	0x3d, r28	; 61
 89c:	8c 01       	movw	r16, r24
	uint8_t data[7] = {0};
 89e:	9e 01       	movw	r18, r28
 8a0:	2f 5f       	subi	r18, 0xFF	; 255
 8a2:	3f 4f       	sbci	r19, 0xFF	; 255
 8a4:	87 e0       	ldi	r24, 0x07	; 7
 8a6:	f9 01       	movw	r30, r18
 8a8:	11 92       	st	Z+, r1
 8aa:	8a 95       	dec	r24
 8ac:	e9 f7       	brne	.-6      	; 0x8a8 <RTC_readTime+0x24>
	if(i2c_read(RTC_addr,7,0x00,data)){
 8ae:	40 e0       	ldi	r20, 0x00	; 0
 8b0:	67 e0       	ldi	r22, 0x07	; 7
 8b2:	88 e6       	ldi	r24, 0x68	; 104
 8b4:	75 df       	rcall	.-278    	; 0x7a0 <i2c_read>
 8b6:	88 23       	and	r24, r24
 8b8:	89 f0       	breq	.+34     	; 0x8dc <RTC_readTime+0x58>
		t->hour = bcdToDec(data[2]);
 8ba:	8b 81       	ldd	r24, Y+3	; 0x03
 8bc:	9b de       	rcall	.-714    	; 0x5f4 <bcdToDec>
 8be:	f8 01       	movw	r30, r16
 8c0:	80 83       	st	Z, r24
		t->min = bcdToDec(data[1]);
 8c2:	8a 81       	ldd	r24, Y+2	; 0x02
 8c4:	97 de       	rcall	.-722    	; 0x5f4 <bcdToDec>
 8c6:	f8 01       	movw	r30, r16
 8c8:	81 83       	std	Z+1, r24	; 0x01
		t->monthDay = bcdToDec(data[4]);
 8ca:	8d 81       	ldd	r24, Y+5	; 0x05
 8cc:	93 de       	rcall	.-730    	; 0x5f4 <bcdToDec>
 8ce:	f8 01       	movw	r30, r16
 8d0:	82 83       	std	Z+2, r24	; 0x02
		t->month = bcdToDec(data[5]);
 8d2:	8e 81       	ldd	r24, Y+6	; 0x06
 8d4:	8f de       	rcall	.-738    	; 0x5f4 <bcdToDec>
 8d6:	f8 01       	movw	r30, r16
 8d8:	83 83       	std	Z+3, r24	; 0x03
		return 1;
 8da:	81 e0       	ldi	r24, 0x01	; 1
	}else{
		return 0;
	}
}
 8dc:	27 96       	adiw	r28, 0x07	; 7
 8de:	0f b6       	in	r0, 0x3f	; 63
 8e0:	f8 94       	cli
 8e2:	de bf       	out	0x3e, r29	; 62
 8e4:	0f be       	out	0x3f, r0	; 63
 8e6:	cd bf       	out	0x3d, r28	; 61
 8e8:	df 91       	pop	r29
 8ea:	cf 91       	pop	r28
 8ec:	1f 91       	pop	r17
 8ee:	0f 91       	pop	r16
 8f0:	08 95       	ret

000008f2 <main>:
}
volatile uint8_t state=0;
Led leds[NBLEDS];

int main(void){    
    DDRA |= CLK|DATA|STROBE|LED;
 8f2:	8a b3       	in	r24, 0x1a	; 26
 8f4:	8f 60       	ori	r24, 0x0F	; 15
 8f6:	8a bb       	out	0x1a, r24	; 26
    PORTA &= ~(CLK|DATA|STROBE|LED);
 8f8:	8b b3       	in	r24, 0x1b	; 27
 8fa:	80 7f       	andi	r24, 0xF0	; 240
 8fc:	8b bb       	out	0x1b, r24	; 27
    ledInit(leds);
 8fe:	8f e6       	ldi	r24, 0x6F	; 111
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	bf dc       	rcall	.-1666   	; 0x282 <ledInit>
    
    TIMSK1|=(1<<TOIE1);
 904:	60 9a       	sbi	0x0c, 0	; 12
    TIMSK0|=(1<<TOIE0);
 906:	89 b7       	in	r24, 0x39	; 57
 908:	81 60       	ori	r24, 0x01	; 1
 90a:	89 bf       	out	0x39, r24	; 57
    sei();
 90c:	78 94       	sei
    
    sendData(0b11111100001111111111 | LEDB);
 90e:	6f ef       	ldi	r22, 0xFF	; 255
 910:	77 ec       	ldi	r23, 0xC7	; 199
 912:	8f e0       	ldi	r24, 0x0F	; 15
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	c3 db       	rcall	.-2170   	; 0x9e <sendData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 918:	2f ef       	ldi	r18, 0xFF	; 255
 91a:	84 e3       	ldi	r24, 0x34	; 52
 91c:	9c e0       	ldi	r25, 0x0C	; 12
 91e:	21 50       	subi	r18, 0x01	; 1
 920:	80 40       	sbci	r24, 0x00	; 0
 922:	90 40       	sbci	r25, 0x00	; 0
 924:	e1 f7       	brne	.-8      	; 0x91e <main+0x2c>
 926:	00 c0       	rjmp	.+0      	; 0x928 <main+0x36>
 928:	00 00       	nop
    _delay_ms(250);
    sendData(0b11000000001111111111);
 92a:	6f ef       	ldi	r22, 0xFF	; 255
 92c:	73 e0       	ldi	r23, 0x03	; 3
 92e:	8c e0       	ldi	r24, 0x0C	; 12
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	b5 db       	rcall	.-2198   	; 0x9e <sendData>
 934:	2f ef       	ldi	r18, 0xFF	; 255
 936:	84 e3       	ldi	r24, 0x34	; 52
 938:	9c e0       	ldi	r25, 0x0C	; 12
 93a:	21 50       	subi	r18, 0x01	; 1
 93c:	80 40       	sbci	r24, 0x00	; 0
 93e:	90 40       	sbci	r25, 0x00	; 0
 940:	e1 f7       	brne	.-8      	; 0x93a <main+0x48>
 942:	00 c0       	rjmp	.+0      	; 0x944 <main+0x52>
 944:	00 00       	nop
    _delay_ms(250);
    sendData(0b00001100001111111111 | LEDR);
 946:	6f ef       	ldi	r22, 0xFF	; 255
 948:	7b ec       	ldi	r23, 0xCB	; 203
 94a:	80 e0       	ldi	r24, 0x00	; 0
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	a7 db       	rcall	.-2226   	; 0x9e <sendData>
 950:	2f ef       	ldi	r18, 0xFF	; 255
 952:	84 e3       	ldi	r24, 0x34	; 52
 954:	9c e0       	ldi	r25, 0x0C	; 12
 956:	21 50       	subi	r18, 0x01	; 1
 958:	80 40       	sbci	r24, 0x00	; 0
 95a:	90 40       	sbci	r25, 0x00	; 0
 95c:	e1 f7       	brne	.-8      	; 0x956 <main+0x64>
 95e:	00 c0       	rjmp	.+0      	; 0x960 <main+0x6e>
 960:	00 00       	nop
    _delay_ms(250);
    sendData(0b00110000001111111111);
 962:	6f ef       	ldi	r22, 0xFF	; 255
 964:	73 e0       	ldi	r23, 0x03	; 3
 966:	83 e0       	ldi	r24, 0x03	; 3
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	99 db       	rcall	.-2254   	; 0x9e <sendData>
 96c:	2f ef       	ldi	r18, 0xFF	; 255
 96e:	84 e3       	ldi	r24, 0x34	; 52
 970:	9c e0       	ldi	r25, 0x0C	; 12
 972:	21 50       	subi	r18, 0x01	; 1
 974:	80 40       	sbci	r24, 0x00	; 0
 976:	90 40       	sbci	r25, 0x00	; 0
 978:	e1 f7       	brne	.-8      	; 0x972 <main+0x80>
 97a:	00 c0       	rjmp	.+0      	; 0x97c <main+0x8a>
 97c:	00 00       	nop
    _delay_ms(250);
    sendData(0b00000100000000000001 | LEDB);
 97e:	61 e0       	ldi	r22, 0x01	; 1
 980:	74 e4       	ldi	r23, 0x44	; 68
 982:	80 e0       	ldi	r24, 0x00	; 0
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	8b db       	rcall	.-2282   	; 0x9e <sendData>
    
    #ifdef DELLONG
    TCCR1B|=(1<<CS12)|(1<<CS10);
 988:	8e b5       	in	r24, 0x2e	; 46
 98a:	85 60       	ori	r24, 0x05	; 5
 98c:	8e bd       	out	0x2e, r24	; 46
    #else
    TCCR1B|=(1<<CS12);//|(1<<CS10);
    #endif
    
    TCCR0B|=(1<<CS01)|(1<<CS00);
 98e:	83 b7       	in	r24, 0x33	; 51
 990:	83 60       	ori	r24, 0x03	; 3
 992:	83 bf       	out	0x33, r24	; 51
    
    currentColor=tcolorV(WHITE);
 994:	6f ef       	ldi	r22, 0xFF	; 255
 996:	7f ef       	ldi	r23, 0xFF	; 255
 998:	8f ef       	ldi	r24, 0xFF	; 255
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	62 dc       	rcall	.-1852   	; 0x262 <tcolorV>
 99e:	60 93 d4 00 	sts	0x00D4, r22	; 0x8000d4 <currentColor>
 9a2:	70 93 d5 00 	sts	0x00D5, r23	; 0x8000d5 <currentColor+0x1>
 9a6:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <currentColor+0x2>
    //setCurrentTime(0,10,7,12);
    //RTC_setTime(currentTime,6,18);
    RTC_readTime(&currentTime);
 9aa:	8f ec       	ldi	r24, 0xCF	; 207
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	6a df       	rcall	.-300    	; 0x884 <RTC_readTime>
    currentTime.temp=2;
 9b0:	82 e0       	ldi	r24, 0x02	; 2
 9b2:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <currentTime+0x4>
    setLeds(currentTime,leds,currentColor);
 9b6:	e0 90 d4 00 	lds	r14, 0x00D4	; 0x8000d4 <currentColor>
 9ba:	f0 90 d5 00 	lds	r15, 0x00D5	; 0x8000d5 <currentColor+0x1>
 9be:	00 91 d6 00 	lds	r16, 0x00D6	; 0x8000d6 <currentColor+0x2>
 9c2:	2f e6       	ldi	r18, 0x6F	; 111
 9c4:	30 e0       	ldi	r19, 0x00	; 0
 9c6:	40 91 cf 00 	lds	r20, 0x00CF	; 0x8000cf <currentTime>
 9ca:	50 91 d0 00 	lds	r21, 0x00D0	; 0x8000d0 <currentTime+0x1>
 9ce:	60 91 d1 00 	lds	r22, 0x00D1	; 0x8000d1 <currentTime+0x2>
 9d2:	70 91 d2 00 	lds	r23, 0x00D2	; 0x8000d2 <currentTime+0x3>
 9d6:	24 dd       	rcall	.-1464   	; 0x420 <setLeds>
    setLedsNb(currentTime.temp,leds,currentColor);
 9d8:	20 91 d4 00 	lds	r18, 0x00D4	; 0x8000d4 <currentColor>
 9dc:	30 91 d5 00 	lds	r19, 0x00D5	; 0x8000d5 <currentColor+0x1>
 9e0:	40 91 d6 00 	lds	r20, 0x00D6	; 0x8000d6 <currentColor+0x2>
 9e4:	6f e6       	ldi	r22, 0x6F	; 111
 9e6:	70 e0       	ldi	r23, 0x00	; 0
 9e8:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <currentTime+0x4>
 9ec:	9c dd       	rcall	.-1224   	; 0x526 <setLedsNb>
 9ee:	ff cf       	rjmp	.-2      	; 0x9ee <main+0xfc>

000009f0 <__mulqi3>:
 9f0:	00 24       	eor	r0, r0

000009f2 <__mulqi3_loop>:
 9f2:	80 fd       	sbrc	r24, 0
 9f4:	06 0e       	add	r0, r22
 9f6:	66 0f       	add	r22, r22
 9f8:	11 f0       	breq	.+4      	; 0x9fe <__mulqi3_exit>
 9fa:	86 95       	lsr	r24
 9fc:	d1 f7       	brne	.-12     	; 0x9f2 <__mulqi3_loop>

000009fe <__mulqi3_exit>:
 9fe:	80 2d       	mov	r24, r0
 a00:	08 95       	ret

00000a02 <__mulhi3>:
 a02:	00 24       	eor	r0, r0
 a04:	55 27       	eor	r21, r21
 a06:	04 c0       	rjmp	.+8      	; 0xa10 <__mulhi3+0xe>
 a08:	08 0e       	add	r0, r24
 a0a:	59 1f       	adc	r21, r25
 a0c:	88 0f       	add	r24, r24
 a0e:	99 1f       	adc	r25, r25
 a10:	00 97       	sbiw	r24, 0x00	; 0
 a12:	29 f0       	breq	.+10     	; 0xa1e <__mulhi3+0x1c>
 a14:	76 95       	lsr	r23
 a16:	67 95       	ror	r22
 a18:	b8 f3       	brcs	.-18     	; 0xa08 <__mulhi3+0x6>
 a1a:	71 05       	cpc	r23, r1
 a1c:	b9 f7       	brne	.-18     	; 0xa0c <__mulhi3+0xa>
 a1e:	80 2d       	mov	r24, r0
 a20:	95 2f       	mov	r25, r21
 a22:	08 95       	ret

00000a24 <__udivmodqi4>:
 a24:	99 1b       	sub	r25, r25
 a26:	79 e0       	ldi	r23, 0x09	; 9
 a28:	04 c0       	rjmp	.+8      	; 0xa32 <__udivmodqi4_ep>

00000a2a <__udivmodqi4_loop>:
 a2a:	99 1f       	adc	r25, r25
 a2c:	96 17       	cp	r25, r22
 a2e:	08 f0       	brcs	.+2      	; 0xa32 <__udivmodqi4_ep>
 a30:	96 1b       	sub	r25, r22

00000a32 <__udivmodqi4_ep>:
 a32:	88 1f       	adc	r24, r24
 a34:	7a 95       	dec	r23
 a36:	c9 f7       	brne	.-14     	; 0xa2a <__udivmodqi4_loop>
 a38:	80 95       	com	r24
 a3a:	08 95       	ret

00000a3c <_exit>:
 a3c:	f8 94       	cli

00000a3e <__stop_program>:
 a3e:	ff cf       	rjmp	.-2      	; 0xa3e <__stop_program>
