
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000008f6  0000098a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000069  0080006c  0080006c  00000996  2**0
                  ALLOC
  3 .comment      00000041  00000000  00000000  00000996  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  00000a18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ae5  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b75  00000000  00000000  00002625  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a12  00000000  00000000  0000319a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e8  00000000  00000000  00004bac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000054b  00000000  00000000  00004f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012a6  00000000  00000000  000054df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00006785  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	46 c0       	rjmp	.+140    	; 0x9e <__vector_8>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	85 c0       	rjmp	.+266    	; 0x122 <__vector_11>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e6 ef       	ldi	r30, 0xF6	; 246
  36:	f8 e0       	ldi	r31, 0x08	; 8
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	ac 36       	cpi	r26, 0x6C	; 108
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	ac e6       	ldi	r26, 0x6C	; 108
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a5 3d       	cpi	r26, 0xD5	; 213
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	b9 d3       	rcall	.+1906   	; 0x7c8 <main>
  56:	4d c4       	rjmp	.+2202   	; 0x8f2 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <sendData>:
#include <util/delay.h>
#include "defines.h"
#include "Led.h"
#include "RTC.h"

void sendData(uint32_t data){
  5a:	0f 93       	push	r16
  5c:	1f 93       	push	r17
    PORTA &=~(STROBE|CLK);
  5e:	2b b3       	in	r18, 0x1b	; 27
  60:	23 7f       	andi	r18, 0xF3	; 243
  62:	2b bb       	out	0x1b, r18	; 27
  64:	50 e0       	ldi	r21, 0x00	; 0
  66:	40 e0       	ldi	r20, 0x00	; 0
    for(uint8_t i=0;i<20;i++){
        if((data>>i) & 0x00000001){
  68:	8b 01       	movw	r16, r22
  6a:	9c 01       	movw	r18, r24
  6c:	04 2e       	mov	r0, r20
  6e:	04 c0       	rjmp	.+8      	; 0x78 <sendData+0x1e>
  70:	36 95       	lsr	r19
  72:	27 95       	ror	r18
  74:	17 95       	ror	r17
  76:	07 95       	ror	r16
  78:	0a 94       	dec	r0
  7a:	d2 f7       	brpl	.-12     	; 0x70 <sendData+0x16>
  7c:	00 ff       	sbrs	r16, 0
  7e:	0d c0       	rjmp	.+26     	; 0x9a <sendData+0x40>
            PORTA|=DATA;
  80:	d9 9a       	sbi	0x1b, 1	; 27
        }else{
            PORTA&=~DATA;
        }
        PORTA|=CLK;
  82:	db 9a       	sbi	0x1b, 3	; 27
        PORTA&=~CLK;
  84:	db 98       	cbi	0x1b, 3	; 27
  86:	4f 5f       	subi	r20, 0xFF	; 255
  88:	5f 4f       	sbci	r21, 0xFF	; 255
    for(uint8_t i=0;i<20;i++){
  8a:	44 31       	cpi	r20, 0x14	; 20
  8c:	51 05       	cpc	r21, r1
  8e:	61 f7       	brne	.-40     	; 0x68 <sendData+0xe>
    }
    PORTA|=STROBE;
  90:	da 9a       	sbi	0x1b, 2	; 27
    PORTA&=~STROBE;
  92:	da 98       	cbi	0x1b, 2	; 27
}
  94:	1f 91       	pop	r17
  96:	0f 91       	pop	r16
  98:	08 95       	ret
            PORTA&=~DATA;
  9a:	d9 98       	cbi	0x1b, 1	; 27
  9c:	f2 cf       	rjmp	.-28     	; 0x82 <sendData+0x28>

0000009e <__vector_8>:
       
    }
    return(0);
    
}
ISR( TIM1_OVF_vect ){
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	ef 92       	push	r14
  aa:	ff 92       	push	r15
  ac:	0f 93       	push	r16
  ae:	2f 93       	push	r18
  b0:	3f 93       	push	r19
  b2:	4f 93       	push	r20
  b4:	5f 93       	push	r21
  b6:	6f 93       	push	r22
  b8:	7f 93       	push	r23
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
  be:	af 93       	push	r26
  c0:	bf 93       	push	r27
  c2:	ef 93       	push	r30
  c4:	ff 93       	push	r31
    PORTA^=LED;
  c6:	8b b3       	in	r24, 0x1b	; 27
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	89 27       	eor	r24, r25
  cc:	8b bb       	out	0x1b, r24	; 27
    RTC_readTime(&currentTime);
  ce:	8d ec       	ldi	r24, 0xCD	; 205
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	45 d3       	rcall	.+1674   	; 0x75e <RTC_readTime>
    setLeds(currentTime,leds,currentColor);
  d4:	e0 90 d2 00 	lds	r14, 0x00D2	; 0x8000d2 <currentColor>
  d8:	f0 90 d3 00 	lds	r15, 0x00D3	; 0x8000d3 <currentColor+0x1>
  dc:	00 91 d4 00 	lds	r16, 0x00D4	; 0x8000d4 <currentColor+0x2>
  e0:	2d e6       	ldi	r18, 0x6D	; 109
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	40 91 cd 00 	lds	r20, 0x00CD	; 0x8000cd <currentTime>
  e8:	50 91 ce 00 	lds	r21, 0x00CE	; 0x8000ce <currentTime+0x1>
  ec:	60 91 cf 00 	lds	r22, 0x00CF	; 0x8000cf <currentTime+0x2>
  f0:	70 91 d0 00 	lds	r23, 0x00D0	; 0x8000d0 <currentTime+0x3>
  f4:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <currentTime+0x4>
  f8:	5f d1       	rcall	.+702    	; 0x3b8 <setLeds>
}
  fa:	ff 91       	pop	r31
  fc:	ef 91       	pop	r30
  fe:	bf 91       	pop	r27
 100:	af 91       	pop	r26
 102:	9f 91       	pop	r25
 104:	8f 91       	pop	r24
 106:	7f 91       	pop	r23
 108:	6f 91       	pop	r22
 10a:	5f 91       	pop	r21
 10c:	4f 91       	pop	r20
 10e:	3f 91       	pop	r19
 110:	2f 91       	pop	r18
 112:	0f 91       	pop	r16
 114:	ff 90       	pop	r15
 116:	ef 90       	pop	r14
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <__vector_11>:
ISR( TIM0_OVF_vect ){
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
 12c:	2f 93       	push	r18
 12e:	3f 93       	push	r19
 130:	4f 93       	push	r20
 132:	5f 93       	push	r21
 134:	6f 93       	push	r22
 136:	7f 93       	push	r23
 138:	8f 93       	push	r24
 13a:	9f 93       	push	r25
 13c:	af 93       	push	r26
 13e:	bf 93       	push	r27
 140:	ef 93       	push	r30
 142:	ff 93       	push	r31
    switch(state){
 144:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 148:	82 30       	cpi	r24, 0x02	; 2
 14a:	09 f4       	brne	.+2      	; 0x14e <__vector_11+0x2c>
 14c:	45 c0       	rjmp	.+138    	; 0x1d8 <__vector_11+0xb6>
 14e:	00 f5       	brcc	.+64     	; 0x190 <__vector_11+0x6e>
 150:	88 23       	and	r24, r24
 152:	69 f1       	breq	.+90     	; 0x1ae <__vector_11+0x8c>
 154:	81 30       	cpi	r24, 0x01	; 1
 156:	b1 f1       	breq	.+108    	; 0x1c4 <__vector_11+0xa2>
            break;
        case 5:
            sendData(B1 | getDataByColor(tcolor(0,0,1),1,leds));
            break;
    }
    state++;
 158:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 15c:	8f 5f       	subi	r24, 0xFF	; 255
 15e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
    if(state>5)state=0;
 162:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 166:	86 30       	cpi	r24, 0x06	; 6
 168:	10 f0       	brcs	.+4      	; 0x16e <__vector_11+0x4c>
 16a:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
}
 16e:	ff 91       	pop	r31
 170:	ef 91       	pop	r30
 172:	bf 91       	pop	r27
 174:	af 91       	pop	r26
 176:	9f 91       	pop	r25
 178:	8f 91       	pop	r24
 17a:	7f 91       	pop	r23
 17c:	6f 91       	pop	r22
 17e:	5f 91       	pop	r21
 180:	4f 91       	pop	r20
 182:	3f 91       	pop	r19
 184:	2f 91       	pop	r18
 186:	0f 90       	pop	r0
 188:	0f be       	out	0x3f, r0	; 63
 18a:	0f 90       	pop	r0
 18c:	1f 90       	pop	r1
 18e:	18 95       	reti
 190:	84 30       	cpi	r24, 0x04	; 4
 192:	b1 f1       	breq	.+108    	; 0x200 <__vector_11+0xde>
 194:	58 f1       	brcs	.+86     	; 0x1ec <__vector_11+0xca>
 196:	85 30       	cpi	r24, 0x05	; 5
 198:	f9 f6       	brne	.-66     	; 0x158 <__vector_11+0x36>
            sendData(B1 | getDataByColor(tcolor(0,0,1),1,leds));
 19a:	41 e0       	ldi	r20, 0x01	; 1
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	39 d0       	rcall	.+114    	; 0x214 <tcolor>
 1a2:	2d e6       	ldi	r18, 0x6D	; 109
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	41 e0       	ldi	r20, 0x01	; 1
 1a8:	89 d0       	rcall	.+274    	; 0x2bc <getDataByColor>
 1aa:	81 60       	ori	r24, 0x01	; 1
 1ac:	09 c0       	rjmp	.+18     	; 0x1c0 <__vector_11+0x9e>
            sendData(R2 | getDataByColor(tcolor(1,0,0),0,leds));
 1ae:	40 e0       	ldi	r20, 0x00	; 0
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	2f d0       	rcall	.+94     	; 0x214 <tcolor>
 1b6:	2d e6       	ldi	r18, 0x6D	; 109
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	40 e0       	ldi	r20, 0x00	; 0
 1bc:	7f d0       	rcall	.+254    	; 0x2bc <getDataByColor>
 1be:	70 64       	ori	r23, 0x40	; 64
            sendData(B1 | getDataByColor(tcolor(0,0,1),1,leds));
 1c0:	4c df       	rcall	.-360    	; 0x5a <sendData>
            break;
 1c2:	ca cf       	rjmp	.-108    	; 0x158 <__vector_11+0x36>
            sendData(R1 | getDataByColor(tcolor(1,0,0),1,leds));
 1c4:	40 e0       	ldi	r20, 0x00	; 0
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	24 d0       	rcall	.+72     	; 0x214 <tcolor>
 1cc:	2d e6       	ldi	r18, 0x6D	; 109
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	41 e0       	ldi	r20, 0x01	; 1
 1d2:	74 d0       	rcall	.+232    	; 0x2bc <getDataByColor>
 1d4:	70 68       	ori	r23, 0x80	; 128
 1d6:	f4 cf       	rjmp	.-24     	; 0x1c0 <__vector_11+0x9e>
            sendData(G2 | getDataByColor(tcolor(0,1,0),0,leds));
 1d8:	40 e0       	ldi	r20, 0x00	; 0
 1da:	61 e0       	ldi	r22, 0x01	; 1
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	1a d0       	rcall	.+52     	; 0x214 <tcolor>
 1e0:	2d e6       	ldi	r18, 0x6D	; 109
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	40 e0       	ldi	r20, 0x00	; 0
 1e6:	6a d0       	rcall	.+212    	; 0x2bc <getDataByColor>
 1e8:	84 60       	ori	r24, 0x04	; 4
 1ea:	ea cf       	rjmp	.-44     	; 0x1c0 <__vector_11+0x9e>
            sendData(G1 | getDataByColor(tcolor(0,1,0),1,leds));
 1ec:	40 e0       	ldi	r20, 0x00	; 0
 1ee:	61 e0       	ldi	r22, 0x01	; 1
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	10 d0       	rcall	.+32     	; 0x214 <tcolor>
 1f4:	2d e6       	ldi	r18, 0x6D	; 109
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	41 e0       	ldi	r20, 0x01	; 1
 1fa:	60 d0       	rcall	.+192    	; 0x2bc <getDataByColor>
 1fc:	88 60       	ori	r24, 0x08	; 8
 1fe:	e0 cf       	rjmp	.-64     	; 0x1c0 <__vector_11+0x9e>
            sendData(B2 | getDataByColor(tcolor(0,0,1),0,leds));
 200:	41 e0       	ldi	r20, 0x01	; 1
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	06 d0       	rcall	.+12     	; 0x214 <tcolor>
 208:	2d e6       	ldi	r18, 0x6D	; 109
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	40 e0       	ldi	r20, 0x00	; 0
 20e:	56 d0       	rcall	.+172    	; 0x2bc <getDataByColor>
 210:	82 60       	ori	r24, 0x02	; 2
 212:	d6 cf       	rjmp	.-84     	; 0x1c0 <__vector_11+0x9e>

00000214 <tcolor>:
#include "Led.h" 

static const uint8_t ledMap[11]={7,8,10,14,0,4,17,2,12,6,16};

Tcolor tcolor(uint8_t r,uint8_t g,uint8_t b){
 214:	76 2f       	mov	r23, r22
    Tcolor c={r,g,b};
    return c;
}
 216:	68 2f       	mov	r22, r24
 218:	84 2f       	mov	r24, r20
 21a:	08 95       	ret

0000021c <tcolorV>:

Tcolor tcolorV(uint32_t v){
 21c:	0f 93       	push	r16
 21e:	1f 93       	push	r17
    Tcolor c={(v>>16)&0xFF,(v>>8)&0xFF,v&0xFF};
 220:	8c 01       	movw	r16, r24
 222:	22 27       	eor	r18, r18
 224:	33 27       	eor	r19, r19
    return c;
 226:	96 2f       	mov	r25, r22
}
 228:	60 2f       	mov	r22, r16
 22a:	89 2f       	mov	r24, r25
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	08 95       	ret

00000232 <ledInit>:

void ledInit(Led* leds){
 232:	fc 01       	movw	r30, r24
    for(uint8_t i=0;i<NBLEDS;i++){
 234:	80 e0       	ldi	r24, 0x00	; 0
        leds[i].row=i%2;//leds[0]=0, leds[1]=1
 236:	98 2f       	mov	r25, r24
 238:	91 70       	andi	r25, 0x01	; 1
 23a:	91 83       	std	Z+1, r25	; 0x01
        if(i<10){
 23c:	8a 30       	cpi	r24, 0x0A	; 10
 23e:	48 f4       	brcc	.+18     	; 0x252 <ledInit+0x20>
            leds[i].col=i;//0-9
 240:	80 83       	st	Z, r24
        }else{
            leds[i].col=i-9;//1-9
        }
        leds[i].c.r=0;
 242:	12 82       	std	Z+2, r1	; 0x02
        leds[i].c.g=0;
 244:	13 82       	std	Z+3, r1	; 0x03
        leds[i].c.b=0;
 246:	14 82       	std	Z+4, r1	; 0x04
    for(uint8_t i=0;i<NBLEDS;i++){
 248:	8f 5f       	subi	r24, 0xFF	; 255
 24a:	35 96       	adiw	r30, 0x05	; 5
 24c:	83 31       	cpi	r24, 0x13	; 19
 24e:	99 f7       	brne	.-26     	; 0x236 <ledInit+0x4>
    }
}
 250:	08 95       	ret
            leds[i].col=i-9;//1-9
 252:	97 ef       	ldi	r25, 0xF7	; 247
 254:	98 0f       	add	r25, r24
 256:	90 83       	st	Z, r25
 258:	f4 cf       	rjmp	.-24     	; 0x242 <ledInit+0x10>

0000025a <getColorByLed>:
uint32_t getColorByLed(Led l){
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
 25e:	00 d0       	rcall	.+0      	; 0x260 <__stack+0x1>
 260:	00 d0       	rcall	.+0      	; 0x262 <__stack+0x3>
 262:	0f 92       	push	r0
 264:	cd b7       	in	r28, 0x3d	; 61
 266:	de b7       	in	r29, 0x3e	; 62
 268:	27 2f       	mov	r18, r23
 26a:	38 2f       	mov	r19, r24
    uint32_t d=0;
    if(l.row){
 26c:	55 23       	and	r21, r21
 26e:	b1 f0       	breq	.+44     	; 0x29c <__stack+0x3d>
        if(l.c.r)d|=R2;
 270:	66 23       	and	r22, r22
 272:	81 f0       	breq	.+32     	; 0x294 <__stack+0x35>
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	70 e4       	ldi	r23, 0x40	; 64
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	90 e0       	ldi	r25, 0x00	; 0
        if(l.c.g)d|=G2;
 27c:	21 11       	cpse	r18, r1
 27e:	84 60       	ori	r24, 0x04	; 4
        if(l.c.b)d|=B2;
 280:	31 11       	cpse	r19, r1
 282:	82 60       	ori	r24, 0x02	; 2
        if(l.c.r)d|=R1;
        if(l.c.g)d|=G1;
        if(l.c.b)d|=B1;
    }
    return d;
}
 284:	0f 90       	pop	r0
 286:	0f 90       	pop	r0
 288:	0f 90       	pop	r0
 28a:	0f 90       	pop	r0
 28c:	0f 90       	pop	r0
 28e:	df 91       	pop	r29
 290:	cf 91       	pop	r28
 292:	08 95       	ret
    uint32_t d=0;
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	cb 01       	movw	r24, r22
 29a:	f0 cf       	rjmp	.-32     	; 0x27c <__stack+0x1d>
        if(l.c.r)d|=R1;
 29c:	66 23       	and	r22, r22
 29e:	51 f0       	breq	.+20     	; 0x2b4 <__stack+0x55>
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	70 e8       	ldi	r23, 0x80	; 128
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	90 e0       	ldi	r25, 0x00	; 0
        if(l.c.g)d|=G1;
 2a8:	21 11       	cpse	r18, r1
 2aa:	88 60       	ori	r24, 0x08	; 8
        if(l.c.b)d|=B1;
 2ac:	33 23       	and	r19, r19
 2ae:	51 f3       	breq	.-44     	; 0x284 <__stack+0x25>
 2b0:	81 60       	ori	r24, 0x01	; 1
    return d;
 2b2:	e8 cf       	rjmp	.-48     	; 0x284 <__stack+0x25>
    uint32_t d=0;
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	cb 01       	movw	r24, r22
 2ba:	f6 cf       	rjmp	.-20     	; 0x2a8 <__stack+0x49>

000002bc <getDataByColor>:

uint32_t getDataByColor(Tcolor c, uint8_t mode, Led* leds){
 2bc:	ef 92       	push	r14
 2be:	ff 92       	push	r15
 2c0:	0f 93       	push	r16
 2c2:	1f 93       	push	r17
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	56 2f       	mov	r21, r22
 2ca:	f7 2e       	mov	r15, r23
 2cc:	e8 2e       	mov	r14, r24
 2ce:	f9 01       	movw	r30, r18
    uint32_t data=0;
    for(uint8_t i=0;i<NBLEDS;i++){
 2d0:	d9 01       	movw	r26, r18
 2d2:	a1 5a       	subi	r26, 0xA1	; 161
 2d4:	bf 4f       	sbci	r27, 0xFF	; 255
    uint32_t data=0;
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	70 e0       	ldi	r23, 0x00	; 0
 2da:	cb 01       	movw	r24, r22
        if(leds[i].row==mode){
            if((leds[i].c.r && c.r) || (leds[i].c.g && c.g) || (leds[i].c.b && c.b)){
                data|=(1<<leds[i].col);
 2dc:	c1 e0       	ldi	r28, 0x01	; 1
 2de:	d0 e0       	ldi	r29, 0x00	; 0
        if(leds[i].row==mode){
 2e0:	21 81       	ldd	r18, Z+1	; 0x01
 2e2:	24 13       	cpse	r18, r20
 2e4:	1e c0       	rjmp	.+60     	; 0x322 <getDataByColor+0x66>
            if((leds[i].c.r && c.r) || (leds[i].c.g && c.g) || (leds[i].c.b && c.b)){
 2e6:	22 81       	ldd	r18, Z+2	; 0x02
 2e8:	22 23       	and	r18, r18
 2ea:	11 f0       	breq	.+4      	; 0x2f0 <getDataByColor+0x34>
 2ec:	51 11       	cpse	r21, r1
 2ee:	0a c0       	rjmp	.+20     	; 0x304 <getDataByColor+0x48>
 2f0:	23 81       	ldd	r18, Z+3	; 0x03
 2f2:	22 23       	and	r18, r18
 2f4:	11 f0       	breq	.+4      	; 0x2fa <getDataByColor+0x3e>
 2f6:	f1 10       	cpse	r15, r1
 2f8:	05 c0       	rjmp	.+10     	; 0x304 <getDataByColor+0x48>
 2fa:	24 81       	ldd	r18, Z+4	; 0x04
 2fc:	22 23       	and	r18, r18
 2fe:	89 f0       	breq	.+34     	; 0x322 <getDataByColor+0x66>
 300:	ee 20       	and	r14, r14
 302:	79 f0       	breq	.+30     	; 0x322 <getDataByColor+0x66>
                data|=(1<<leds[i].col);
 304:	20 81       	ld	r18, Z
 306:	8e 01       	movw	r16, r28
 308:	02 c0       	rjmp	.+4      	; 0x30e <getDataByColor+0x52>
 30a:	00 0f       	add	r16, r16
 30c:	11 1f       	adc	r17, r17
 30e:	2a 95       	dec	r18
 310:	e2 f7       	brpl	.-8      	; 0x30a <getDataByColor+0x4e>
 312:	01 2e       	mov	r0, r17
 314:	00 0c       	add	r0, r0
 316:	22 0b       	sbc	r18, r18
 318:	33 0b       	sbc	r19, r19
 31a:	60 2b       	or	r22, r16
 31c:	71 2b       	or	r23, r17
 31e:	82 2b       	or	r24, r18
 320:	93 2b       	or	r25, r19
 322:	35 96       	adiw	r30, 0x05	; 5
    for(uint8_t i=0;i<NBLEDS;i++){
 324:	ea 17       	cp	r30, r26
 326:	fb 07       	cpc	r31, r27
 328:	d9 f6       	brne	.-74     	; 0x2e0 <getDataByColor+0x24>
            }
        }
    }
    return data;
}
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	1f 91       	pop	r17
 330:	0f 91       	pop	r16
 332:	ff 90       	pop	r15
 334:	ef 90       	pop	r14
 336:	08 95       	ret

00000338 <ledOff>:

void ledOff(Led* l){
 338:	fc 01       	movw	r30, r24
    l->c.r=0;
 33a:	12 82       	std	Z+2, r1	; 0x02
    l->c.g=0;
 33c:	13 82       	std	Z+3, r1	; 0x03
    l->c.b=0;
 33e:	14 82       	std	Z+4, r1	; 0x04
}
 340:	08 95       	ret

00000342 <ledOn>:
void ledOn(Led* l){
 342:	fc 01       	movw	r30, r24
    l->c.r=255;
 344:	8f ef       	ldi	r24, 0xFF	; 255
 346:	82 83       	std	Z+2, r24	; 0x02
    l->c.g=255;
 348:	83 83       	std	Z+3, r24	; 0x03
    l->c.b=255;
 34a:	84 83       	std	Z+4, r24	; 0x04
}
 34c:	08 95       	ret

0000034e <ledOnC>:

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 34e:	fc 01       	movw	r30, r24
 350:	42 83       	std	Z+2, r20	; 0x02
 352:	53 83       	std	Z+3, r21	; 0x03
 354:	64 83       	std	Z+4, r22	; 0x04
}
 356:	08 95       	ret

00000358 <ledOnV>:
    Tcolor c={(v>>16)&0xFF,(v>>8)&0xFF,v&0xFF};
 358:	fc 01       	movw	r30, r24
 35a:	62 83       	std	Z+2, r22	; 0x02

void ledOnV(Led* l,uint32_t v){
    l->c=tcolorV(v);
 35c:	54 27       	eor	r21, r20
 35e:	45 27       	eor	r20, r21
 360:	54 27       	eor	r21, r20
 362:	54 83       	std	Z+4, r21	; 0x04
 364:	43 83       	std	Z+3, r20	; 0x03
}
 366:	08 95       	ret

00000368 <ledIsOff>:

uint8_t ledIsOff(Led l){
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
 36c:	00 d0       	rcall	.+0      	; 0x36e <ledIsOff+0x6>
 36e:	00 d0       	rcall	.+0      	; 0x370 <ledIsOff+0x8>
 370:	0f 92       	push	r0
 372:	cd b7       	in	r28, 0x3d	; 61
 374:	de b7       	in	r29, 0x3e	; 62
    return !ledIsOn(l);
 376:	67 2b       	or	r22, r23
 378:	68 2b       	or	r22, r24
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	09 f0       	breq	.+2      	; 0x380 <ledIsOff+0x18>
 37e:	80 e0       	ldi	r24, 0x00	; 0
}
 380:	0f 90       	pop	r0
 382:	0f 90       	pop	r0
 384:	0f 90       	pop	r0
 386:	0f 90       	pop	r0
 388:	0f 90       	pop	r0
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
 38e:	08 95       	ret

00000390 <ledIsOn>:
uint8_t ledIsOn(Led l){
 390:	cf 93       	push	r28
 392:	df 93       	push	r29
 394:	00 d0       	rcall	.+0      	; 0x396 <ledIsOn+0x6>
 396:	00 d0       	rcall	.+0      	; 0x398 <ledIsOn+0x8>
 398:	0f 92       	push	r0
 39a:	cd b7       	in	r28, 0x3d	; 61
 39c:	de b7       	in	r29, 0x3e	; 62
    return l.c.r || l.c.g || l.c.b;
 39e:	67 2b       	or	r22, r23
 3a0:	68 2b       	or	r22, r24
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	09 f4       	brne	.+2      	; 0x3a8 <ledIsOn+0x18>
 3a6:	80 e0       	ldi	r24, 0x00	; 0
}
 3a8:	0f 90       	pop	r0
 3aa:	0f 90       	pop	r0
 3ac:	0f 90       	pop	r0
 3ae:	0f 90       	pop	r0
 3b0:	0f 90       	pop	r0
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret

000003b8 <setLeds>:
void setLeds(Ttime t,Led* l,Tcolor c){
 3b8:	6f 92       	push	r6
 3ba:	7f 92       	push	r7
 3bc:	8f 92       	push	r8
 3be:	cf 92       	push	r12
 3c0:	df 92       	push	r13
 3c2:	ef 92       	push	r14
 3c4:	ff 92       	push	r15
 3c6:	0f 93       	push	r16
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
 3cc:	00 d0       	rcall	.+0      	; 0x3ce <setLeds+0x16>
 3ce:	00 d0       	rcall	.+0      	; 0x3d0 <setLeds+0x18>
 3d0:	0f 92       	push	r0
 3d2:	cd b7       	in	r28, 0x3d	; 61
 3d4:	de b7       	in	r29, 0x3e	; 62
 3d6:	69 01       	movw	r12, r18
 3d8:	37 01       	movw	r6, r14
 3da:	80 2e       	mov	r8, r16
    uint8_t i=0;
    for(;i<NBLEDS;i++){
 3dc:	f9 01       	movw	r30, r18
 3de:	c9 01       	movw	r24, r18
 3e0:	81 5a       	subi	r24, 0xA1	; 161
 3e2:	9f 4f       	sbci	r25, 0xFF	; 255
    l->c.r=0;
 3e4:	12 82       	std	Z+2, r1	; 0x02
    l->c.g=0;
 3e6:	13 82       	std	Z+3, r1	; 0x03
    l->c.b=0;
 3e8:	14 82       	std	Z+4, r1	; 0x04
 3ea:	35 96       	adiw	r30, 0x05	; 5
    for(;i<NBLEDS;i++){
 3ec:	e8 17       	cp	r30, r24
 3ee:	f9 07       	cpc	r31, r25
 3f0:	c9 f7       	brne	.-14     	; 0x3e4 <setLeds+0x2c>
    l->c=c;   
 3f2:	f6 01       	movw	r30, r12
 3f4:	e6 5a       	subi	r30, 0xA6	; 166
 3f6:	ff 4f       	sbci	r31, 0xFF	; 255
 3f8:	62 82       	std	Z+2, r6	; 0x02
 3fa:	73 82       	std	Z+3, r7	; 0x03
 3fc:	84 82       	std	Z+4, r8	; 0x04
        ledOff(&l[i]);
    }
    ledOnC(&l[ILEST],c);
    
    switch(currentTime.hour){
 3fe:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <currentTime>
 402:	20 91 ce 00 	lds	r18, 0x00CE	; 0x8000ce <currentTime+0x1>
 406:	88 23       	and	r24, r24
 408:	f9 f0       	breq	.+62     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
    l->c=c;   
 40a:	f6 01       	movw	r30, r12
 40c:	ef 5b       	subi	r30, 0xBF	; 191
 40e:	ff 4f       	sbci	r31, 0xFF	; 255
 410:	8c 30       	cpi	r24, 0x0C	; 12
 412:	b1 f0       	breq	.+44     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
            break;
        case 12 :
            ledOnC(&l[MIDI],c);
            break;
        default :
            if(currentTime.min>35){
 414:	6c e0       	ldi	r22, 0x0C	; 12
 416:	61 d2       	rcall	.+1218   	; 0x8da <__udivmodqi4>
 418:	e9 2f       	mov	r30, r25
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	e0 5a       	subi	r30, 0xA0	; 160
 41e:	ff 4f       	sbci	r31, 0xFF	; 255
 420:	24 32       	cpi	r18, 0x24	; 36
 422:	d8 f1       	brcs	.+118    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
                ledOnC(&l[ledMap[(currentTime.hour%12)]],c);
            }else{
                ledOnC(&l[ledMap[(currentTime.hour%12)-1]],c);
 424:	80 81       	ld	r24, Z
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	65 e0       	ldi	r22, 0x05	; 5
 42a:	70 e0       	ldi	r23, 0x00	; 0
 42c:	45 d2       	rcall	.+1162   	; 0x8b8 <__mulhi3>
 42e:	8c 0d       	add	r24, r12
 430:	9d 1d       	adc	r25, r13
    l->c=c;   
 432:	fc 01       	movw	r30, r24
 434:	62 82       	std	Z+2, r6	; 0x02
 436:	73 82       	std	Z+3, r7	; 0x03
 438:	84 82       	std	Z+4, r8	; 0x04
 43a:	f6 01       	movw	r30, r12
 43c:	e5 5b       	subi	r30, 0xB5	; 181
 43e:	ff 4f       	sbci	r31, 0xFF	; 255
 440:	62 82       	std	Z+2, r6	; 0x02
 442:	73 82       	std	Z+3, r7	; 0x03
 444:	84 82       	std	Z+4, r8	; 0x04
            }
            ledOnC(&l[HEURE],c);
            break;
 446:	04 c0       	rjmp	.+8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
    l->c=c;   
 448:	f6 01       	movw	r30, r12
 44a:	61 8a       	std	Z+17, r6	; 0x11
 44c:	72 8a       	std	Z+18, r7	; 0x12
 44e:	83 8a       	std	Z+19, r8	; 0x13
    }
    uint8_t mins = minquad(currentTime.min); 
 450:	82 2f       	mov	r24, r18
 452:	7e d0       	rcall	.+252    	; 0x550 <minquad>
    if(mins > 30){
 454:	8f 31       	cpi	r24, 0x1F	; 31
 456:	38 f0       	brcs	.+14     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
    l->c=c;   
 458:	f6 01       	movw	r30, r12
 45a:	67 a6       	std	Z+47, r6	; 0x2f
 45c:	70 aa       	std	Z+48, r7	; 0x30
 45e:	81 aa       	std	Z+49, r8	; 0x31
        ledOnC(&l[MOINS],c);
        mins=60-mins;
 460:	9c e3       	ldi	r25, 0x3C	; 60
 462:	98 1b       	sub	r25, r24
 464:	89 2f       	mov	r24, r25
    }
    switch(mins){
 466:	84 31       	cpi	r24, 0x14	; 20
 468:	d1 f0       	breq	.+52     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 46a:	8e 31       	cpi	r24, 0x1E	; 30
 46c:	e9 f0       	breq	.+58     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 46e:	8a 30       	cpi	r24, 0x0A	; 10
 470:	21 f4       	brne	.+8      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
    l->c=c;   
 472:	f6 01       	movw	r30, r12
 474:	63 8e       	std	Z+27, r6	; 0x1b
 476:	74 8e       	std	Z+28, r7	; 0x1c
 478:	85 8e       	std	Z+29, r8	; 0x1d
            break;
        case 30 :
            ledOnC(&l[ETDEMIE],c);
            break;
    }
}
 47a:	0f 90       	pop	r0
 47c:	0f 90       	pop	r0
 47e:	0f 90       	pop	r0
 480:	0f 90       	pop	r0
 482:	0f 90       	pop	r0
 484:	df 91       	pop	r29
 486:	cf 91       	pop	r28
 488:	0f 91       	pop	r16
 48a:	ff 90       	pop	r15
 48c:	ef 90       	pop	r14
 48e:	df 90       	pop	r13
 490:	cf 90       	pop	r12
 492:	8f 90       	pop	r8
 494:	7f 90       	pop	r7
 496:	6f 90       	pop	r6
 498:	08 95       	ret
                ledOnC(&l[ledMap[(currentTime.hour%12)-1]],c);
 49a:	31 97       	sbiw	r30, 0x01	; 1
 49c:	c3 cf       	rjmp	.-122    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
    l->c=c;   
 49e:	f6 01       	movw	r30, r12
 4a0:	61 ae       	std	Z+57, r6	; 0x39
 4a2:	72 ae       	std	Z+58, r7	; 0x3a
 4a4:	83 ae       	std	Z+59, r8	; 0x3b
            break;
 4a6:	e9 cf       	rjmp	.-46     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
    l->c=c;   
 4a8:	f6 01       	movw	r30, r12
 4aa:	67 82       	std	Z+7, r6	; 0x07
 4ac:	70 86       	std	Z+8, r7	; 0x08
 4ae:	81 86       	std	Z+9, r8	; 0x09
}
 4b0:	e4 cf       	rjmp	.-56     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>

000004b2 <setLedsNb>:

void setLedsNb(int8_t nb, Led* l, Tcolor c){
 4b2:	cf 93       	push	r28
 4b4:	df 93       	push	r29
 4b6:	e8 2f       	mov	r30, r24
 4b8:	db 01       	movw	r26, r22
    uint8_t i=0;
    for(;i<NBLEDS;i++){
 4ba:	eb 01       	movw	r28, r22
 4bc:	cb 01       	movw	r24, r22
 4be:	81 5a       	subi	r24, 0xA1	; 161
 4c0:	9f 4f       	sbci	r25, 0xFF	; 255
    l->c.r=0;
 4c2:	1a 82       	std	Y+2, r1	; 0x02
    l->c.g=0;
 4c4:	1b 82       	std	Y+3, r1	; 0x03
    l->c.b=0;
 4c6:	1c 82       	std	Y+4, r1	; 0x04
 4c8:	25 96       	adiw	r28, 0x05	; 5
    for(;i<NBLEDS;i++){
 4ca:	8c 17       	cp	r24, r28
 4cc:	9d 07       	cpc	r25, r29
 4ce:	c9 f7       	brne	.-14     	; 0x4c2 <setLedsNb+0x10>
        ledOff(&l[i]);
    }
    if(nb < 0){
 4d0:	e7 ff       	sbrs	r30, 7
 4d2:	06 c0       	rjmp	.+12     	; 0x4e0 <setLedsNb+0x2e>
    l->c=c;   
 4d4:	9f 96       	adiw	r26, 0x2f	; 47
 4d6:	2d 93       	st	X+, r18
 4d8:	3d 93       	st	X+, r19
 4da:	4c 93       	st	X, r20
 4dc:	d1 97       	sbiw	r26, 0x31	; 49
        ledOnC(&l[MOINS],c);
        nb=-nb;
 4de:	e1 95       	neg	r30
    }
    if(nb>30){
 4e0:	ef 31       	cpi	r30, 0x1F	; 31
 4e2:	f4 f0       	brlt	.+60     	; 0x520 <setLedsNb+0x6e>
    l->c=c;   
 4e4:	d9 96       	adiw	r26, 0x39	; 57
 4e6:	2d 93       	st	X+, r18
 4e8:	3d 93       	st	X+, r19
 4ea:	4c 93       	st	X, r20
 4ec:	db 97       	sbiw	r26, 0x3b	; 59
 4ee:	5b 96       	adiw	r26, 0x1b	; 27
 4f0:	2d 93       	st	X+, r18
 4f2:	3d 93       	st	X+, r19
 4f4:	4c 93       	st	X, r20
 4f6:	5d 97       	sbiw	r26, 0x1d	; 29
        ledOnC(&l[VINGT],c);
        ledOnC(&l[DIX],c);
        nb=nb-30;
 4f8:	ee 51       	subi	r30, 0x1E	; 30
        nb=nb-10;
    }else if(nb>11){
        ledOnC(&l[DIX],c);
        nb=nb-10;
    }
    ledOnC(&l[ledMap[nb-1]],c);
 4fa:	0e 2e       	mov	r0, r30
 4fc:	00 0c       	add	r0, r0
 4fe:	ff 0b       	sbc	r31, r31
 500:	e1 5a       	subi	r30, 0xA1	; 161
 502:	ff 4f       	sbci	r31, 0xFF	; 255
 504:	80 81       	ld	r24, Z
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	65 e0       	ldi	r22, 0x05	; 5
 50a:	70 e0       	ldi	r23, 0x00	; 0
 50c:	d5 d1       	rcall	.+938    	; 0x8b8 <__mulhi3>
 50e:	a8 0f       	add	r26, r24
 510:	b9 1f       	adc	r27, r25
    l->c=c;   
 512:	12 96       	adiw	r26, 0x02	; 2
 514:	2d 93       	st	X+, r18
 516:	3d 93       	st	X+, r19
 518:	4c 93       	st	X, r20
}
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	08 95       	ret
    }else if(nb>20){
 520:	e5 31       	cpi	r30, 0x15	; 21
 522:	3c f0       	brlt	.+14     	; 0x532 <setLedsNb+0x80>
    l->c=c;   
 524:	d9 96       	adiw	r26, 0x39	; 57
 526:	2d 93       	st	X+, r18
 528:	3d 93       	st	X+, r19
 52a:	4c 93       	st	X, r20
 52c:	db 97       	sbiw	r26, 0x3b	; 59
        nb=nb-10;
 52e:	ea 50       	subi	r30, 0x0A	; 10
 530:	e4 cf       	rjmp	.-56     	; 0x4fa <setLedsNb+0x48>
    }else if(nb>11){
 532:	ec 30       	cpi	r30, 0x0C	; 12
 534:	14 f3       	brlt	.-60     	; 0x4fa <setLedsNb+0x48>
    l->c=c;   
 536:	5b 96       	adiw	r26, 0x1b	; 27
 538:	2d 93       	st	X+, r18
 53a:	3d 93       	st	X+, r19
 53c:	4c 93       	st	X, r20
 53e:	5d 97       	sbiw	r26, 0x1d	; 29
 540:	f6 cf       	rjmp	.-20     	; 0x52e <setLedsNb+0x7c>

00000542 <setCurrentTime>:
#include "RTC.h" 

void setCurrentTime(uint8_t hour,uint8_t min,uint8_t monthDay,uint8_t month){
	currentTime.hour=hour;
 542:	ed ec       	ldi	r30, 0xCD	; 205
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	80 83       	st	Z, r24
	currentTime.min=min;
 548:	61 83       	std	Z+1, r22	; 0x01
	currentTime.monthDay=monthDay;
 54a:	42 83       	std	Z+2, r20	; 0x02
	currentTime.month=month;
 54c:	23 83       	std	Z+3, r18	; 0x03
}
 54e:	08 95       	ret

00000550 <minquad>:

uint8_t minquad(uint8_t min){
	if(min > 5){
 550:	86 30       	cpi	r24, 0x06	; 6
 552:	a0 f0       	brcs	.+40     	; 0x57c <minquad+0x2c>
		if(min > 15){
 554:	80 31       	cpi	r24, 0x10	; 16
 556:	50 f0       	brcs	.+20     	; 0x56c <minquad+0x1c>
			if(min > 25){
 558:	8a 31       	cpi	r24, 0x1A	; 26
 55a:	50 f0       	brcs	.+20     	; 0x570 <minquad+0x20>
				if(min > 35){
 55c:	84 32       	cpi	r24, 0x24	; 36
 55e:	50 f0       	brcs	.+20     	; 0x574 <minquad+0x24>
					if(min > 45){
 560:	8e 32       	cpi	r24, 0x2E	; 46
 562:	50 f0       	brcs	.+20     	; 0x578 <minquad+0x28>
						if(min > 55){
 564:	88 33       	cpi	r24, 0x38	; 56
 566:	50 f4       	brcc	.+20     	; 0x57c <minquad+0x2c>
							return 0;
						}else{return 50;}
 568:	82 e3       	ldi	r24, 0x32	; 50
 56a:	08 95       	ret
					}else{return 40;}
				}else{return 30;}
			}else{return 20;}
		}else{return 10;}
 56c:	8a e0       	ldi	r24, 0x0A	; 10
 56e:	08 95       	ret
			}else{return 20;}
 570:	84 e1       	ldi	r24, 0x14	; 20
 572:	08 95       	ret
				}else{return 30;}
 574:	8e e1       	ldi	r24, 0x1E	; 30
 576:	08 95       	ret
					}else{return 40;}
 578:	88 e2       	ldi	r24, 0x28	; 40
 57a:	08 95       	ret
	}else{return 0;}
 57c:	80 e0       	ldi	r24, 0x00	; 0
}
 57e:	08 95       	ret

00000580 <bcdToDec>:

uint8_t bcdToDec(uint8_t val){
 580:	98 2f       	mov	r25, r24
  return ((val/16*10) + (val%16));
 582:	82 95       	swap	r24
 584:	8f 70       	andi	r24, 0x0F	; 15
 586:	6a e0       	ldi	r22, 0x0A	; 10
 588:	8e d1       	rcall	.+796    	; 0x8a6 <__mulqi3>
 58a:	9f 70       	andi	r25, 0x0F	; 15
}
 58c:	89 0f       	add	r24, r25
 58e:	08 95       	ret

00000590 <i2c_in_transfer>:
		return 0;
	}
}

uint8_t i2c_in_transfer(uint8_t USISR_temp){
	USISR = USISR_temp;								//Set USISR as requested by calling function
 590:	8e b9       	out	0x0e, r24	; 14
	do{
		_delay_us(I2C_TLOW);
		USICR = 0b00101011;								//SCL Positive Edge
 592:	8b e2       	ldi	r24, 0x2B	; 43
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 594:	95 e0       	ldi	r25, 0x05	; 5
 596:	9a 95       	dec	r25
 598:	f1 f7       	brne	.-4      	; 0x596 <i2c_in_transfer+0x6>
 59a:	00 00       	nop
 59c:	8d b9       	out	0x0d, r24	; 13
		while (!(PIN_USI&(1<<PIN_USI_SCL)));		//Wait for SCL to go high
 59e:	cc 9b       	sbis	0x19, 4	; 25
 5a0:	fe cf       	rjmp	.-4      	; 0x59e <i2c_in_transfer+0xe>
 5a2:	94 e0       	ldi	r25, 0x04	; 4
 5a4:	9a 95       	dec	r25
 5a6:	f1 f7       	brne	.-4      	; 0x5a4 <i2c_in_transfer+0x14>
		_delay_us(I2C_THIGH);
		USICR = 0b00101011;								//SCL Negative Edge
 5a8:	8d b9       	out	0x0d, r24	; 13
	}while (!(USISR&(1<<USIOIF)));					//Do until transfer is complete
 5aa:	76 9b       	sbis	0x0e, 6	; 14
 5ac:	f3 cf       	rjmp	.-26     	; 0x594 <i2c_in_transfer+0x4>
 5ae:	85 e0       	ldi	r24, 0x05	; 5
 5b0:	8a 95       	dec	r24
 5b2:	f1 f7       	brne	.-4      	; 0x5b0 <i2c_in_transfer+0x20>
 5b4:	00 00       	nop
	_delay_us(I2C_TLOW);
	return USIDR;
 5b6:	8f b1       	in	r24, 0x0f	; 15
}
 5b8:	08 95       	ret

000005ba <i2c_in_transmit>:
uint8_t i2c_in_transmit(uint8_t *msg, uint8_t msg_size){
 5ba:	ef 92       	push	r14
 5bc:	ff 92       	push	r15
 5be:	0f 93       	push	r16
 5c0:	1f 93       	push	r17
 5c2:	cf 93       	push	r28
 5c4:	df 93       	push	r29
 5c6:	ec 01       	movw	r28, r24
 5c8:	16 2f       	mov	r17, r22
	USI_I2C_Master_State = USI_ADDRESS;
 5ca:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <USI_I2C_Master_State>

	//   Start Condition
	PORT_USI |=  (1 << PORT_USI_SCL); 						//Setting input makes line pull high
 5ce:	dc 9a       	sbi	0x1b, 4	; 27
	while (!(PIN_USI & (1<<PIN_USI_SCL)));		//Wait for SCL to go high
 5d0:	cc 9b       	sbis	0x19, 4	; 25
 5d2:	fe cf       	rjmp	.-4      	; 0x5d0 <i2c_in_transmit+0x16>
 5d4:	84 e0       	ldi	r24, 0x04	; 4
 5d6:	8a 95       	dec	r24
 5d8:	f1 f7       	brne	.-4      	; 0x5d6 <i2c_in_transmit+0x1c>
	#ifdef I2C_FAST_MODE
		_delay_us(I2C_THIGH);
	#else
		_delay_us(I2C_TLOW);
	#endif
	DDR_USI |=  (1 << PORT_USI_SDA);
 5da:	d6 9a       	sbi	0x1a, 6	; 26
	DDR_USI |=  (1 << PORT_USI_SCL);
 5dc:	d4 9a       	sbi	0x1a, 4	; 26
	PORT_USI &= ~(1 << PORT_USI_SDA);
 5de:	de 98       	cbi	0x1b, 6	; 27
 5e0:	84 e0       	ldi	r24, 0x04	; 4
 5e2:	8a 95       	dec	r24
 5e4:	f1 f7       	brne	.-4      	; 0x5e2 <i2c_in_transmit+0x28>
	_delay_us(I2C_THIGH);;
	PORT_USI &= ~(1 << PORT_USI_SCL);
 5e6:	dc 98       	cbi	0x1b, 4	; 27
 5e8:	85 e0       	ldi	r24, 0x05	; 5
 5ea:	8a 95       	dec	r24
 5ec:	f1 f7       	brne	.-4      	; 0x5ea <i2c_in_transmit+0x30>
 5ee:	00 00       	nop
	_delay_us(I2C_TLOW);
	PORT_USI |=  (1 << PORT_USI_SDA);
 5f0:	de 9a       	sbi	0x1b, 6	; 27
		switch(USI_I2C_Master_State){
			case USI_ADDRESS:
				if(!(*msg & 0x01)){
					USI_I2C_Master_State = USI_WRITE;
				}else{
					USI_I2C_Master_State = USI_READ;
 5f2:	02 e0       	ldi	r16, 0x02	; 2
					USI_I2C_Master_State = USI_WRITE;
 5f4:	ff 24       	eor	r15, r15
 5f6:	f3 94       	inc	r15
				DDR_USI &= ~(1 << PORT_USI_SDA);
				(*msg) = i2c_in_transfer(0b11110000 | (0x00<<USICNT0));			
				msg++;
				DDR_USI |=  (1 << PORT_USI_SDA);				
				if(msg_size == 1){
					USIDR = 0xFF;			//Load NACK to end transmission
 5f8:	ee 24       	eor	r14, r14
 5fa:	ea 94       	dec	r14
		switch(USI_I2C_Master_State){
 5fc:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <USI_I2C_Master_State>
 600:	81 30       	cpi	r24, 0x01	; 1
 602:	d9 f0       	breq	.+54     	; 0x63a <i2c_in_transmit+0x80>
 604:	88 23       	and	r24, r24
 606:	a1 f0       	breq	.+40     	; 0x630 <i2c_in_transmit+0x76>
 608:	82 30       	cpi	r24, 0x02	; 2
 60a:	81 f1       	breq	.+96     	; 0x66c <i2c_in_transmit+0xb2>
					USIDR = 0x00;			//Load ACK
				}
				i2c_in_transfer(0b11110000 | (0x0E<<USICNT0));
				break;
		}
	}while(--msg_size);
 60c:	11 50       	subi	r17, 0x01	; 1
 60e:	b1 f7       	brne	.-20     	; 0x5fc <i2c_in_transmit+0x42>
	
	//Stop Condition
	PORT_USI &= ~(1 << PORT_USI_SDA);           				// Pull SDA low.
 610:	de 98       	cbi	0x1b, 6	; 27
 612:	85 e0       	ldi	r24, 0x05	; 5
 614:	8a 95       	dec	r24
 616:	f1 f7       	brne	.-4      	; 0x614 <i2c_in_transmit+0x5a>
 618:	00 00       	nop
	_delay_us(I2C_TLOW);
	DDR_USI &= ~(1 << PORT_USI_SCL);            				// Release SCL.
 61a:	d4 98       	cbi	0x1a, 4	; 26
	while( !(PIN_USI & (1<<PIN_USI_SCL)) );  	// Wait for SCL to go high.  
 61c:	cc 9b       	sbis	0x19, 4	; 25
 61e:	fe cf       	rjmp	.-4      	; 0x61c <i2c_in_transmit+0x62>
 620:	84 e0       	ldi	r24, 0x04	; 4
 622:	8a 95       	dec	r24
 624:	f1 f7       	brne	.-4      	; 0x622 <i2c_in_transmit+0x68>
	_delay_us(I2C_THIGH);
	DDR_USI &= ~(1 << PORT_USI_SDA);            				// Release SDA.
 626:	d6 98       	cbi	0x1a, 6	; 26
	while( !(PIN_USI & (1<<PIN_USI_SDA)) );  	// Wait for SDA to go high. 
 628:	ce 9b       	sbis	0x19, 6	; 25
 62a:	fe cf       	rjmp	.-4      	; 0x628 <i2c_in_transmit+0x6e>
	return 1;
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	12 c0       	rjmp	.+36     	; 0x654 <i2c_in_transmit+0x9a>
				if(!(*msg & 0x01)){
 630:	88 81       	ld	r24, Y
 632:	80 fd       	sbrc	r24, 0
 634:	16 c0       	rjmp	.+44     	; 0x662 <i2c_in_transmit+0xa8>
					USI_I2C_Master_State = USI_WRITE;
 636:	f0 92 cc 00 	sts	0x00CC, r15	; 0x8000cc <USI_I2C_Master_State>
				PORT_USI &= ~(1 << PORT_USI_SCL);
 63a:	dc 98       	cbi	0x1b, 4	; 27
				USIDR = *(msg);				//Load data			
 63c:	89 91       	ld	r24, Y+
 63e:	8f b9       	out	0x0f, r24	; 15
				i2c_in_transfer(0b11110000 | (0x00<<USICNT0));
 640:	80 ef       	ldi	r24, 0xF0	; 240
 642:	a6 df       	rcall	.-180    	; 0x590 <i2c_in_transfer>
				DDR_USI &= ~(1 << PORT_USI_SDA);
 644:	d6 98       	cbi	0x1a, 6	; 26
				if(i2c_in_transfer(0b11110000 | (0x0E<<USICNT0)) & 0x01){
 646:	8e ef       	ldi	r24, 0xFE	; 254
 648:	a3 df       	rcall	.-186    	; 0x590 <i2c_in_transfer>
 64a:	80 ff       	sbrs	r24, 0
 64c:	0d c0       	rjmp	.+26     	; 0x668 <i2c_in_transmit+0xae>
					PORT_USI |=  (1 << PORT_USI_SCL);
 64e:	dc 9a       	sbi	0x1b, 4	; 27
					PORT_USI |=  (1 << PORT_USI_SDA);
 650:	de 9a       	sbi	0x1b, 6	; 27
					return 0;
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	df 91       	pop	r29
 656:	cf 91       	pop	r28
 658:	1f 91       	pop	r17
 65a:	0f 91       	pop	r16
 65c:	ff 90       	pop	r15
 65e:	ef 90       	pop	r14
 660:	08 95       	ret
					USI_I2C_Master_State = USI_READ;
 662:	00 93 cc 00 	sts	0x00CC, r16	; 0x8000cc <USI_I2C_Master_State>
 666:	e9 cf       	rjmp	.-46     	; 0x63a <i2c_in_transmit+0x80>
				DDR_USI |=  (1 << PORT_USI_SDA);
 668:	d6 9a       	sbi	0x1a, 6	; 26
				break;
 66a:	d0 cf       	rjmp	.-96     	; 0x60c <i2c_in_transmit+0x52>
				DDR_USI &= ~(1 << PORT_USI_SDA);
 66c:	d6 98       	cbi	0x1a, 6	; 26
				(*msg) = i2c_in_transfer(0b11110000 | (0x00<<USICNT0));			
 66e:	80 ef       	ldi	r24, 0xF0	; 240
 670:	8f df       	rcall	.-226    	; 0x590 <i2c_in_transfer>
 672:	89 93       	st	Y+, r24
				DDR_USI |=  (1 << PORT_USI_SDA);				
 674:	d6 9a       	sbi	0x1a, 6	; 26
				if(msg_size == 1){
 676:	11 30       	cpi	r17, 0x01	; 1
 678:	21 f4       	brne	.+8      	; 0x682 <i2c_in_transmit+0xc8>
					USIDR = 0xFF;			//Load NACK to end transmission
 67a:	ef b8       	out	0x0f, r14	; 15
				i2c_in_transfer(0b11110000 | (0x0E<<USICNT0));
 67c:	8e ef       	ldi	r24, 0xFE	; 254
 67e:	88 df       	rcall	.-240    	; 0x590 <i2c_in_transfer>
				break;
 680:	c5 cf       	rjmp	.-118    	; 0x60c <i2c_in_transmit+0x52>
					USIDR = 0x00;			//Load ACK
 682:	1f b8       	out	0x0f, r1	; 15
 684:	fb cf       	rjmp	.-10     	; 0x67c <i2c_in_transmit+0xc2>

00000686 <i2c_write>:
uint8_t i2c_write(uint8_t addr, uint8_t adrs, uint8_t val){ // only supports 1 byte write
 686:	cf 93       	push	r28
 688:	df 93       	push	r29
 68a:	00 d0       	rcall	.+0      	; 0x68c <i2c_write+0x6>
 68c:	0f 92       	push	r0
 68e:	cd b7       	in	r28, 0x3d	; 61
 690:	de b7       	in	r29, 0x3e	; 62
	i2c_buffer[0] = (addr << 1) | I2CWRITE ;
 692:	88 0f       	add	r24, r24
 694:	89 83       	std	Y+1, r24	; 0x01
	i2c_buffer[1] = adrs;
 696:	6a 83       	std	Y+2, r22	; 0x02
	i2c_buffer[2] = val;
 698:	4b 83       	std	Y+3, r20	; 0x03
	return i2c_in_transmit(i2c_buffer, i2c_buffer_len);
 69a:	63 e0       	ldi	r22, 0x03	; 3
 69c:	ce 01       	movw	r24, r28
 69e:	01 96       	adiw	r24, 0x01	; 1
 6a0:	8c df       	rcall	.-232    	; 0x5ba <i2c_in_transmit>
}
 6a2:	0f 90       	pop	r0
 6a4:	0f 90       	pop	r0
 6a6:	0f 90       	pop	r0
 6a8:	df 91       	pop	r29
 6aa:	cf 91       	pop	r28
 6ac:	08 95       	ret

000006ae <i2c_read>:
uint8_t i2c_read(uint8_t addr, uint8_t len, uint8_t adrs, uint8_t *buf){
 6ae:	af 92       	push	r10
 6b0:	bf 92       	push	r11
 6b2:	cf 92       	push	r12
 6b4:	df 92       	push	r13
 6b6:	ef 92       	push	r14
 6b8:	ff 92       	push	r15
 6ba:	0f 93       	push	r16
 6bc:	1f 93       	push	r17
 6be:	cf 93       	push	r28
 6c0:	df 93       	push	r29
 6c2:	cd b7       	in	r28, 0x3d	; 61
 6c4:	de b7       	in	r29, 0x3e	; 62
 6c6:	18 2f       	mov	r17, r24
 6c8:	06 2f       	mov	r16, r22
 6ca:	59 01       	movw	r10, r18
}
 6cc:	cd b6       	in	r12, 0x3d	; 61
 6ce:	de b6       	in	r13, 0x3e	; 62
	uint8_t i2c_buffer[len+1];
 6d0:	86 2f       	mov	r24, r22
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	01 96       	adiw	r24, 0x01	; 1
 6d6:	2d b7       	in	r18, 0x3d	; 61
 6d8:	3e b7       	in	r19, 0x3e	; 62
 6da:	28 1b       	sub	r18, r24
 6dc:	39 0b       	sbc	r19, r25
 6de:	0f b6       	in	r0, 0x3f	; 63
 6e0:	f8 94       	cli
 6e2:	3e bf       	out	0x3e, r19	; 62
 6e4:	0f be       	out	0x3f, r0	; 63
 6e6:	2d bf       	out	0x3d, r18	; 61
 6e8:	8d b7       	in	r24, 0x3d	; 61
 6ea:	9e b7       	in	r25, 0x3e	; 62
 6ec:	01 96       	adiw	r24, 0x01	; 1
 6ee:	7c 01       	movw	r14, r24
	i2c_buffer[0] = (addr << 1) | I2CWRITE;
 6f0:	81 2f       	mov	r24, r17
 6f2:	88 0f       	add	r24, r24
 6f4:	ad b7       	in	r26, 0x3d	; 61
 6f6:	be b7       	in	r27, 0x3e	; 62
 6f8:	11 96       	adiw	r26, 0x01	; 1
 6fa:	8c 93       	st	X, r24
	i2c_buffer[1] = adrs;
 6fc:	f7 01       	movw	r30, r14
 6fe:	41 83       	std	Z+1, r20	; 0x01
	i2c_in_transmit(i2c_buffer, i2c_buffer_len);
 700:	62 e0       	ldi	r22, 0x02	; 2
 702:	c7 01       	movw	r24, r14
 704:	5a df       	rcall	.-332    	; 0x5ba <i2c_in_transmit>
	i2c_buffer[0] = (addr << 1) | I2CREAD;
 706:	11 0f       	add	r17, r17
 708:	11 60       	ori	r17, 0x01	; 1
 70a:	d7 01       	movw	r26, r14
 70c:	1c 93       	st	X, r17
	i2c_buffer_len = len+1;
 70e:	61 e0       	ldi	r22, 0x01	; 1
 710:	60 0f       	add	r22, r16
	if(i2c_in_transmit(i2c_buffer, i2c_buffer_len)){
 712:	c7 01       	movw	r24, r14
 714:	52 df       	rcall	.-348    	; 0x5ba <i2c_in_transmit>
 716:	81 11       	cpse	r24, r1
 718:	20 c0       	rjmp	.+64     	; 0x75a <i2c_read+0xac>
}
 71a:	0f b6       	in	r0, 0x3f	; 63
 71c:	f8 94       	cli
 71e:	de be       	out	0x3e, r13	; 62
 720:	0f be       	out	0x3f, r0	; 63
 722:	cd be       	out	0x3d, r12	; 61
 724:	df 91       	pop	r29
 726:	cf 91       	pop	r28
 728:	1f 91       	pop	r17
 72a:	0f 91       	pop	r16
 72c:	ff 90       	pop	r15
 72e:	ef 90       	pop	r14
 730:	df 90       	pop	r13
 732:	cf 90       	pop	r12
 734:	bf 90       	pop	r11
 736:	af 90       	pop	r10
 738:	08 95       	ret
			buf[i-1]=i2c_buffer[i];
 73a:	28 2f       	mov	r18, r24
 73c:	30 e0       	ldi	r19, 0x00	; 0
 73e:	f5 01       	movw	r30, r10
 740:	e2 0f       	add	r30, r18
 742:	f3 1f       	adc	r31, r19
 744:	31 97       	sbiw	r30, 0x01	; 1
 746:	2e 0d       	add	r18, r14
 748:	3f 1d       	adc	r19, r15
 74a:	d9 01       	movw	r26, r18
 74c:	9c 91       	ld	r25, X
 74e:	90 83       	st	Z, r25
		for(i=1;i<len+1;i++){ // fetch in buffer
 750:	8f 5f       	subi	r24, 0xFF	; 255
 752:	08 17       	cp	r16, r24
 754:	90 f7       	brcc	.-28     	; 0x73a <i2c_read+0x8c>
		return 1; // provide success check
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	e0 cf       	rjmp	.-64     	; 0x71a <i2c_read+0x6c>
		for(i=1;i<len+1;i++){ // fetch in buffer
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	fa cf       	rjmp	.-12     	; 0x752 <i2c_read+0xa4>

0000075e <RTC_readTime>:
uint8_t RTC_readTime(struct Ttime *t){
 75e:	0f 93       	push	r16
 760:	1f 93       	push	r17
 762:	cf 93       	push	r28
 764:	df 93       	push	r29
 766:	00 d0       	rcall	.+0      	; 0x768 <RTC_readTime+0xa>
 768:	00 d0       	rcall	.+0      	; 0x76a <RTC_readTime+0xc>
 76a:	00 d0       	rcall	.+0      	; 0x76c <RTC_readTime+0xe>
 76c:	0f 92       	push	r0
 76e:	cd b7       	in	r28, 0x3d	; 61
 770:	de b7       	in	r29, 0x3e	; 62
 772:	8c 01       	movw	r16, r24
	uint8_t data[7] = {0};
 774:	9e 01       	movw	r18, r28
 776:	2f 5f       	subi	r18, 0xFF	; 255
 778:	3f 4f       	sbci	r19, 0xFF	; 255
 77a:	87 e0       	ldi	r24, 0x07	; 7
 77c:	f9 01       	movw	r30, r18
 77e:	11 92       	st	Z+, r1
 780:	8a 95       	dec	r24
 782:	e9 f7       	brne	.-6      	; 0x77e <RTC_readTime+0x20>
	if(i2c_read(RTC_addr,7,0x00,data)){
 784:	40 e0       	ldi	r20, 0x00	; 0
 786:	67 e0       	ldi	r22, 0x07	; 7
 788:	88 e6       	ldi	r24, 0x68	; 104
 78a:	91 df       	rcall	.-222    	; 0x6ae <i2c_read>
 78c:	88 23       	and	r24, r24
 78e:	89 f0       	breq	.+34     	; 0x7b2 <RTC_readTime+0x54>
		t->hour = bcdToDec(data[2]);
 790:	8b 81       	ldd	r24, Y+3	; 0x03
 792:	f6 de       	rcall	.-532    	; 0x580 <bcdToDec>
 794:	f8 01       	movw	r30, r16
 796:	80 83       	st	Z, r24
		t->min = bcdToDec(data[1]);
 798:	8a 81       	ldd	r24, Y+2	; 0x02
 79a:	f2 de       	rcall	.-540    	; 0x580 <bcdToDec>
 79c:	f8 01       	movw	r30, r16
 79e:	81 83       	std	Z+1, r24	; 0x01
		t->monthDay = bcdToDec(data[4]);
 7a0:	8d 81       	ldd	r24, Y+5	; 0x05
 7a2:	ee de       	rcall	.-548    	; 0x580 <bcdToDec>
 7a4:	f8 01       	movw	r30, r16
 7a6:	82 83       	std	Z+2, r24	; 0x02
		t->month = bcdToDec(data[5]);
 7a8:	8e 81       	ldd	r24, Y+6	; 0x06
 7aa:	ea de       	rcall	.-556    	; 0x580 <bcdToDec>
 7ac:	f8 01       	movw	r30, r16
 7ae:	83 83       	std	Z+3, r24	; 0x03
		return 1;
 7b0:	81 e0       	ldi	r24, 0x01	; 1
}
 7b2:	27 96       	adiw	r28, 0x07	; 7
 7b4:	0f b6       	in	r0, 0x3f	; 63
 7b6:	f8 94       	cli
 7b8:	de bf       	out	0x3e, r29	; 62
 7ba:	0f be       	out	0x3f, r0	; 63
 7bc:	cd bf       	out	0x3d, r28	; 61
 7be:	df 91       	pop	r29
 7c0:	cf 91       	pop	r28
 7c2:	1f 91       	pop	r17
 7c4:	0f 91       	pop	r16
 7c6:	08 95       	ret

000007c8 <main>:
    DDRA |= CLK|DATA|STROBE|LED;
 7c8:	8a b3       	in	r24, 0x1a	; 26
 7ca:	8f 60       	ori	r24, 0x0F	; 15
 7cc:	8a bb       	out	0x1a, r24	; 26
    PORTA &= ~(CLK|DATA|STROBE|LED);
 7ce:	8b b3       	in	r24, 0x1b	; 27
 7d0:	80 7f       	andi	r24, 0xF0	; 240
 7d2:	8b bb       	out	0x1b, r24	; 27
    ledInit(leds);
 7d4:	8d e6       	ldi	r24, 0x6D	; 109
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	2c dd       	rcall	.-1448   	; 0x232 <ledInit>
    TIMSK1|=(1<<TOIE1);
 7da:	60 9a       	sbi	0x0c, 0	; 12
    TIMSK0|=(1<<TOIE0);
 7dc:	89 b7       	in	r24, 0x39	; 57
 7de:	81 60       	ori	r24, 0x01	; 1
 7e0:	89 bf       	out	0x39, r24	; 57
    sei();
 7e2:	78 94       	sei
    sendData(0b11111100001111111111);
 7e4:	6f ef       	ldi	r22, 0xFF	; 255
 7e6:	73 ec       	ldi	r23, 0xC3	; 195
 7e8:	8f e0       	ldi	r24, 0x0F	; 15
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	36 dc       	rcall	.-1940   	; 0x5a <sendData>
	__builtin_avr_delay_cycles(__ticks_dc);
 7ee:	2f ef       	ldi	r18, 0xFF	; 255
 7f0:	84 e3       	ldi	r24, 0x34	; 52
 7f2:	9c e0       	ldi	r25, 0x0C	; 12
 7f4:	21 50       	subi	r18, 0x01	; 1
 7f6:	80 40       	sbci	r24, 0x00	; 0
 7f8:	90 40       	sbci	r25, 0x00	; 0
 7fa:	e1 f7       	brne	.-8      	; 0x7f4 <main+0x2c>
 7fc:	00 c0       	rjmp	.+0      	; 0x7fe <main+0x36>
 7fe:	00 00       	nop
    sendData(0b11000000001111111111);
 800:	6f ef       	ldi	r22, 0xFF	; 255
 802:	73 e0       	ldi	r23, 0x03	; 3
 804:	8c e0       	ldi	r24, 0x0C	; 12
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	28 dc       	rcall	.-1968   	; 0x5a <sendData>
 80a:	2f ef       	ldi	r18, 0xFF	; 255
 80c:	84 e3       	ldi	r24, 0x34	; 52
 80e:	9c e0       	ldi	r25, 0x0C	; 12
 810:	21 50       	subi	r18, 0x01	; 1
 812:	80 40       	sbci	r24, 0x00	; 0
 814:	90 40       	sbci	r25, 0x00	; 0
 816:	e1 f7       	brne	.-8      	; 0x810 <main+0x48>
 818:	00 c0       	rjmp	.+0      	; 0x81a <main+0x52>
 81a:	00 00       	nop
    sendData(0b00001100001111111111);
 81c:	6f ef       	ldi	r22, 0xFF	; 255
 81e:	73 ec       	ldi	r23, 0xC3	; 195
 820:	80 e0       	ldi	r24, 0x00	; 0
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	1a dc       	rcall	.-1996   	; 0x5a <sendData>
 826:	2f ef       	ldi	r18, 0xFF	; 255
 828:	84 e3       	ldi	r24, 0x34	; 52
 82a:	9c e0       	ldi	r25, 0x0C	; 12
 82c:	21 50       	subi	r18, 0x01	; 1
 82e:	80 40       	sbci	r24, 0x00	; 0
 830:	90 40       	sbci	r25, 0x00	; 0
 832:	e1 f7       	brne	.-8      	; 0x82c <main+0x64>
 834:	00 c0       	rjmp	.+0      	; 0x836 <main+0x6e>
 836:	00 00       	nop
    sendData(0b00110000001111111111);
 838:	6f ef       	ldi	r22, 0xFF	; 255
 83a:	73 e0       	ldi	r23, 0x03	; 3
 83c:	83 e0       	ldi	r24, 0x03	; 3
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	0c dc       	rcall	.-2024   	; 0x5a <sendData>
 842:	2f ef       	ldi	r18, 0xFF	; 255
 844:	84 e3       	ldi	r24, 0x34	; 52
 846:	9c e0       	ldi	r25, 0x0C	; 12
 848:	21 50       	subi	r18, 0x01	; 1
 84a:	80 40       	sbci	r24, 0x00	; 0
 84c:	90 40       	sbci	r25, 0x00	; 0
 84e:	e1 f7       	brne	.-8      	; 0x848 <main+0x80>
 850:	00 c0       	rjmp	.+0      	; 0x852 <main+0x8a>
 852:	00 00       	nop
    TCCR1B|=(1<<CS12);//|(1<<CS10);
 854:	8e b5       	in	r24, 0x2e	; 46
 856:	84 60       	ori	r24, 0x04	; 4
 858:	8e bd       	out	0x2e, r24	; 46
    TCCR0B|=(1<<CS01)|(1<<CS00);
 85a:	83 b7       	in	r24, 0x33	; 51
 85c:	83 60       	ori	r24, 0x03	; 3
 85e:	83 bf       	out	0x33, r24	; 51
    currentColor=tcolorV(RED);
 860:	60 e0       	ldi	r22, 0x00	; 0
 862:	70 e0       	ldi	r23, 0x00	; 0
 864:	8f ef       	ldi	r24, 0xFF	; 255
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	d9 dc       	rcall	.-1614   	; 0x21c <tcolorV>
 86a:	60 93 d2 00 	sts	0x00D2, r22	; 0x8000d2 <currentColor>
 86e:	70 93 d3 00 	sts	0x00D3, r23	; 0x8000d3 <currentColor+0x1>
 872:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <currentColor+0x2>
	RTC_readTime(&currentTime);
 876:	8d ec       	ldi	r24, 0xCD	; 205
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	71 df       	rcall	.-286    	; 0x75e <RTC_readTime>
    currentTime.temp=11;
 87c:	8b e0       	ldi	r24, 0x0B	; 11
 87e:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <currentTime+0x4>
    setLeds(currentTime,leds,currentColor);
 882:	e0 90 d2 00 	lds	r14, 0x00D2	; 0x8000d2 <currentColor>
 886:	f0 90 d3 00 	lds	r15, 0x00D3	; 0x8000d3 <currentColor+0x1>
 88a:	00 91 d4 00 	lds	r16, 0x00D4	; 0x8000d4 <currentColor+0x2>
 88e:	2d e6       	ldi	r18, 0x6D	; 109
 890:	30 e0       	ldi	r19, 0x00	; 0
 892:	40 91 cd 00 	lds	r20, 0x00CD	; 0x8000cd <currentTime>
 896:	50 91 ce 00 	lds	r21, 0x00CE	; 0x8000ce <currentTime+0x1>
 89a:	60 91 cf 00 	lds	r22, 0x00CF	; 0x8000cf <currentTime+0x2>
 89e:	70 91 d0 00 	lds	r23, 0x00D0	; 0x8000d0 <currentTime+0x3>
 8a2:	8a dd       	rcall	.-1260   	; 0x3b8 <setLeds>
    }
 8a4:	ff cf       	rjmp	.-2      	; 0x8a4 <main+0xdc>

000008a6 <__mulqi3>:
 8a6:	00 24       	eor	r0, r0

000008a8 <__mulqi3_loop>:
 8a8:	80 fd       	sbrc	r24, 0
 8aa:	06 0e       	add	r0, r22
 8ac:	66 0f       	add	r22, r22
 8ae:	11 f0       	breq	.+4      	; 0x8b4 <__mulqi3_exit>
 8b0:	86 95       	lsr	r24
 8b2:	d1 f7       	brne	.-12     	; 0x8a8 <__mulqi3_loop>

000008b4 <__mulqi3_exit>:
 8b4:	80 2d       	mov	r24, r0
 8b6:	08 95       	ret

000008b8 <__mulhi3>:
 8b8:	00 24       	eor	r0, r0
 8ba:	55 27       	eor	r21, r21
 8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__mulhi3+0xe>
 8be:	08 0e       	add	r0, r24
 8c0:	59 1f       	adc	r21, r25
 8c2:	88 0f       	add	r24, r24
 8c4:	99 1f       	adc	r25, r25
 8c6:	00 97       	sbiw	r24, 0x00	; 0
 8c8:	29 f0       	breq	.+10     	; 0x8d4 <__mulhi3+0x1c>
 8ca:	76 95       	lsr	r23
 8cc:	67 95       	ror	r22
 8ce:	b8 f3       	brcs	.-18     	; 0x8be <__mulhi3+0x6>
 8d0:	71 05       	cpc	r23, r1
 8d2:	b9 f7       	brne	.-18     	; 0x8c2 <__mulhi3+0xa>
 8d4:	80 2d       	mov	r24, r0
 8d6:	95 2f       	mov	r25, r21
 8d8:	08 95       	ret

000008da <__udivmodqi4>:
 8da:	99 1b       	sub	r25, r25
 8dc:	79 e0       	ldi	r23, 0x09	; 9
 8de:	04 c0       	rjmp	.+8      	; 0x8e8 <__udivmodqi4_ep>

000008e0 <__udivmodqi4_loop>:
 8e0:	99 1f       	adc	r25, r25
 8e2:	96 17       	cp	r25, r22
 8e4:	08 f0       	brcs	.+2      	; 0x8e8 <__udivmodqi4_ep>
 8e6:	96 1b       	sub	r25, r22

000008e8 <__udivmodqi4_ep>:
 8e8:	88 1f       	adc	r24, r24
 8ea:	7a 95       	dec	r23
 8ec:	c9 f7       	brne	.-14     	; 0x8e0 <__udivmodqi4_loop>
 8ee:	80 95       	com	r24
 8f0:	08 95       	ret

000008f2 <_exit>:
 8f2:	f8 94       	cli

000008f4 <__stop_program>:
 8f4:	ff cf       	rjmp	.-2      	; 0x8f4 <__stop_program>
