
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000008fa  0000098e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006b  0080006c  0080006c  0000099a  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000099a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000009e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001996  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa7  00000000  00000000  000023e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008d0  00000000  00000000  00002e8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b4  00000000  00000000  00003760  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b8  00000000  00000000  00003b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011e1  00000000  00000000  00003fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000051ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	4f c0       	rjmp	.+158    	; 0xb0 <__vector_8>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	65 c0       	rjmp	.+202    	; 0xe2 <__vector_11>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	ea ef       	ldi	r30, 0xFA	; 250
  36:	f8 e0       	ldi	r31, 0x08	; 8
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	ac 36       	cpi	r26, 0x6C	; 108
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	ac e6       	ldi	r26, 0x6C	; 108
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a7 3d       	cpi	r26, 0xD7	; 215
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	b4 d3       	rcall	.+1896   	; 0x7be <main>
  56:	4f c4       	rjmp	.+2206   	; 0x8f6 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <sendRawData>:
#include <util/delay.h>
#include "defines.h"
#include "Led.h"
#include "RTC.h"

void sendRawData(uint32_t data){
  5a:	0f 93       	push	r16
  5c:	1f 93       	push	r17
    PORTA &=~(STROBE|CLK);
  5e:	2b b3       	in	r18, 0x1b	; 27
  60:	23 7f       	andi	r18, 0xF3	; 243
  62:	2b bb       	out	0x1b, r18	; 27
  64:	40 e0       	ldi	r20, 0x00	; 0
  66:	50 e0       	ldi	r21, 0x00	; 0
    for(uint8_t i=0;i<20;i++){
        if((data>>i) & 0x00000001){
  68:	8b 01       	movw	r16, r22
  6a:	9c 01       	movw	r18, r24
  6c:	04 2e       	mov	r0, r20
  6e:	04 c0       	rjmp	.+8      	; 0x78 <sendRawData+0x1e>
  70:	36 95       	lsr	r19
  72:	27 95       	ror	r18
  74:	17 95       	ror	r17
  76:	07 95       	ror	r16
  78:	0a 94       	dec	r0
  7a:	d2 f7       	brpl	.-12     	; 0x70 <sendRawData+0x16>
  7c:	00 ff       	sbrs	r16, 0
  7e:	02 c0       	rjmp	.+4      	; 0x84 <sendRawData+0x2a>
            PORTA|=DATA;
  80:	d9 9a       	sbi	0x1b, 1	; 27
  82:	01 c0       	rjmp	.+2      	; 0x86 <sendRawData+0x2c>
        }else{
            PORTA&=~DATA;
  84:	d9 98       	cbi	0x1b, 1	; 27
        }
        PORTA|=CLK;
  86:	db 9a       	sbi	0x1b, 3	; 27
        PORTA&=~CLK;
  88:	db 98       	cbi	0x1b, 3	; 27
  8a:	4f 5f       	subi	r20, 0xFF	; 255
  8c:	5f 4f       	sbci	r21, 0xFF	; 255
#include "Led.h"
#include "RTC.h"

void sendRawData(uint32_t data){
    PORTA &=~(STROBE|CLK);
    for(uint8_t i=0;i<20;i++){
  8e:	44 31       	cpi	r20, 0x14	; 20
  90:	51 05       	cpc	r21, r1
  92:	51 f7       	brne	.-44     	; 0x68 <sendRawData+0xe>
            PORTA&=~DATA;
        }
        PORTA|=CLK;
        PORTA&=~CLK;
    }
    PORTA|=STROBE;
  94:	da 9a       	sbi	0x1b, 2	; 27
    PORTA&=~STROBE;
  96:	da 98       	cbi	0x1b, 2	; 27
}
  98:	1f 91       	pop	r17
  9a:	0f 91       	pop	r16
  9c:	08 95       	ret

0000009e <sendData>:
uint8_t ledr=0;
uint8_t ledb=0;
void sendData(uint32_t data){
    if(ledr)data|=LEDR;
  9e:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <ledr>
  a2:	21 11       	cpse	r18, r1
  a4:	78 60       	ori	r23, 0x08	; 8
    if(ledb)data|=LEDB;
  a6:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <ledb>
  aa:	21 11       	cpse	r18, r1
  ac:	74 60       	ori	r23, 0x04	; 4
    sendRawData(data);
  ae:	d5 cf       	rjmp	.-86     	; 0x5a <sendRawData>

000000b0 <__vector_8>:
       
    }
    return(0);
    
}
ISR( TIM1_OVF_vect ){
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
    ledb=1-ledb;
  be:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <ledb>
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	89 1b       	sub	r24, r25
  c6:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <ledb>
    ledr=!ledb;
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	81 11       	cpse	r24, r1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <ledr>
    //RTC_readTime(&currentTime);
    //setLeds(currentTime,leds,currentColor);
}
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <__vector_11>:
ISR( TIM0_OVF_vect ){
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	2f 93       	push	r18
  ee:	3f 93       	push	r19
  f0:	4f 93       	push	r20
  f2:	5f 93       	push	r21
  f4:	6f 93       	push	r22
  f6:	7f 93       	push	r23
  f8:	8f 93       	push	r24
  fa:	9f 93       	push	r25
  fc:	af 93       	push	r26
  fe:	bf 93       	push	r27
 100:	ef 93       	push	r30
 102:	ff 93       	push	r31
    switch(state){
 104:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 108:	82 30       	cpi	r24, 0x02	; 2
 10a:	49 f1       	breq	.+82     	; 0x15e <__vector_11+0x7c>
 10c:	78 f4       	brcc	.+30     	; 0x12c <__vector_11+0x4a>
 10e:	88 23       	and	r24, r24
 110:	e1 f0       	breq	.+56     	; 0x14a <__vector_11+0x68>
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	09 f0       	breq	.+2      	; 0x118 <__vector_11+0x36>
 116:	41 c0       	rjmp	.+130    	; 0x19a <__vector_11+0xb8>
        case 0:
            sendData(R2 | getDataByColor(tcolor(1,0,0),0,leds));
            break;
        case 1:
            sendData(R1 | getDataByColor(tcolor(1,0,0),1,leds));
 118:	40 e0       	ldi	r20, 0x00	; 0
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	59 d0       	rcall	.+178    	; 0x1d2 <tcolor>
 120:	2f e6       	ldi	r18, 0x6F	; 111
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	41 e0       	ldi	r20, 0x01	; 1
 126:	ae d0       	rcall	.+348    	; 0x284 <getDataByColor>
 128:	70 68       	ori	r23, 0x80	; 128
 12a:	36 c0       	rjmp	.+108    	; 0x198 <__vector_11+0xb6>
    ledr=!ledb;
    //RTC_readTime(&currentTime);
    //setLeds(currentTime,leds,currentColor);
}
ISR( TIM0_OVF_vect ){
    switch(state){
 12c:	84 30       	cpi	r24, 0x04	; 4
 12e:	59 f1       	breq	.+86     	; 0x186 <__vector_11+0xa4>
 130:	00 f1       	brcs	.+64     	; 0x172 <__vector_11+0x90>
 132:	85 30       	cpi	r24, 0x05	; 5
 134:	91 f5       	brne	.+100    	; 0x19a <__vector_11+0xb8>
            break;
        case 4:
            sendData(B2 | getDataByColor(tcolor(0,0,1),0,leds));
            break;
        case 5:
            sendData(B1 | getDataByColor(tcolor(0,0,1),1,leds));
 136:	41 e0       	ldi	r20, 0x01	; 1
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	4a d0       	rcall	.+148    	; 0x1d2 <tcolor>
 13e:	2f e6       	ldi	r18, 0x6F	; 111
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	41 e0       	ldi	r20, 0x01	; 1
 144:	9f d0       	rcall	.+318    	; 0x284 <getDataByColor>
 146:	81 60       	ori	r24, 0x01	; 1
 148:	27 c0       	rjmp	.+78     	; 0x198 <__vector_11+0xb6>
    //setLeds(currentTime,leds,currentColor);
}
ISR( TIM0_OVF_vect ){
    switch(state){
        case 0:
            sendData(R2 | getDataByColor(tcolor(1,0,0),0,leds));
 14a:	40 e0       	ldi	r20, 0x00	; 0
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	40 d0       	rcall	.+128    	; 0x1d2 <tcolor>
 152:	2f e6       	ldi	r18, 0x6F	; 111
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	40 e0       	ldi	r20, 0x00	; 0
 158:	95 d0       	rcall	.+298    	; 0x284 <getDataByColor>
 15a:	70 64       	ori	r23, 0x40	; 64
 15c:	1d c0       	rjmp	.+58     	; 0x198 <__vector_11+0xb6>
            break;
        case 1:
            sendData(R1 | getDataByColor(tcolor(1,0,0),1,leds));
            break;
        case 2:
            sendData(G2 | getDataByColor(tcolor(0,1,0),0,leds));
 15e:	40 e0       	ldi	r20, 0x00	; 0
 160:	61 e0       	ldi	r22, 0x01	; 1
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	36 d0       	rcall	.+108    	; 0x1d2 <tcolor>
 166:	2f e6       	ldi	r18, 0x6F	; 111
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	40 e0       	ldi	r20, 0x00	; 0
 16c:	8b d0       	rcall	.+278    	; 0x284 <getDataByColor>
 16e:	84 60       	ori	r24, 0x04	; 4
 170:	13 c0       	rjmp	.+38     	; 0x198 <__vector_11+0xb6>
            break;
        case 3:
            sendData(G1 | getDataByColor(tcolor(0,1,0),1,leds));
 172:	40 e0       	ldi	r20, 0x00	; 0
 174:	61 e0       	ldi	r22, 0x01	; 1
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	2c d0       	rcall	.+88     	; 0x1d2 <tcolor>
 17a:	2f e6       	ldi	r18, 0x6F	; 111
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	41 e0       	ldi	r20, 0x01	; 1
 180:	81 d0       	rcall	.+258    	; 0x284 <getDataByColor>
 182:	88 60       	ori	r24, 0x08	; 8
 184:	09 c0       	rjmp	.+18     	; 0x198 <__vector_11+0xb6>
            break;
        case 4:
            sendData(B2 | getDataByColor(tcolor(0,0,1),0,leds));
 186:	41 e0       	ldi	r20, 0x01	; 1
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	22 d0       	rcall	.+68     	; 0x1d2 <tcolor>
 18e:	2f e6       	ldi	r18, 0x6F	; 111
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	40 e0       	ldi	r20, 0x00	; 0
 194:	77 d0       	rcall	.+238    	; 0x284 <getDataByColor>
 196:	82 60       	ori	r24, 0x02	; 2
            break;
        case 5:
            sendData(B1 | getDataByColor(tcolor(0,0,1),1,leds));
 198:	82 df       	rcall	.-252    	; 0x9e <sendData>
            break;
    }
    state++;
 19a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 19e:	8f 5f       	subi	r24, 0xFF	; 255
 1a0:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
    if(state>5)state=0;
 1a4:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 1a8:	86 30       	cpi	r24, 0x06	; 6
 1aa:	10 f0       	brcs	.+4      	; 0x1b0 <__vector_11+0xce>
 1ac:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
}
 1b0:	ff 91       	pop	r31
 1b2:	ef 91       	pop	r30
 1b4:	bf 91       	pop	r27
 1b6:	af 91       	pop	r26
 1b8:	9f 91       	pop	r25
 1ba:	8f 91       	pop	r24
 1bc:	7f 91       	pop	r23
 1be:	6f 91       	pop	r22
 1c0:	5f 91       	pop	r21
 1c2:	4f 91       	pop	r20
 1c4:	3f 91       	pop	r19
 1c6:	2f 91       	pop	r18
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <tcolor>:
#include "Led.h" 

static const uint8_t ledMap[11]={7,8,10,14,0,4,17,2,12,6,16};

Tcolor tcolor(uint8_t r,uint8_t g,uint8_t b){
 1d2:	76 2f       	mov	r23, r22
    Tcolor c={r,g,b};
    return c;
}
 1d4:	68 2f       	mov	r22, r24
 1d6:	84 2f       	mov	r24, r20
 1d8:	08 95       	ret

000001da <tcolorV>:

Tcolor tcolorV(uint32_t v){
 1da:	0f 93       	push	r16
 1dc:	1f 93       	push	r17
 1de:	dc 01       	movw	r26, r24
 1e0:	cb 01       	movw	r24, r22
    Tcolor c={(v>>16)&0xFF,(v>>8)&0xFF,v&0xFF};
    return c;
 1e2:	ad 01       	movw	r20, r26
 1e4:	66 27       	eor	r22, r22
 1e6:	77 27       	eor	r23, r23
 1e8:	09 2f       	mov	r16, r25
 1ea:	1a 2f       	mov	r17, r26
 1ec:	2b 2f       	mov	r18, r27
 1ee:	33 27       	eor	r19, r19
}
 1f0:	64 2f       	mov	r22, r20
 1f2:	70 2f       	mov	r23, r16
 1f4:	1f 91       	pop	r17
 1f6:	0f 91       	pop	r16
 1f8:	08 95       	ret

000001fa <ledInit>:

void ledInit(Led* leds){
 1fa:	fc 01       	movw	r30, r24
    for(uint8_t i=0;i<NBLEDS;i++){
 1fc:	80 e0       	ldi	r24, 0x00	; 0
        leds[i].row=i%2;//leds[0]=0, leds[1]=1
 1fe:	98 2f       	mov	r25, r24
 200:	91 70       	andi	r25, 0x01	; 1
 202:	91 83       	std	Z+1, r25	; 0x01
        if(i<10){
 204:	8a 30       	cpi	r24, 0x0A	; 10
 206:	10 f4       	brcc	.+4      	; 0x20c <ledInit+0x12>
            leds[i].col=i;//0-9
 208:	80 83       	st	Z, r24
 20a:	03 c0       	rjmp	.+6      	; 0x212 <ledInit+0x18>
        }else{
            leds[i].col=i-9;//1-9
 20c:	97 ef       	ldi	r25, 0xF7	; 247
 20e:	98 0f       	add	r25, r24
 210:	90 83       	st	Z, r25
        }
        leds[i].c.r=0;
 212:	12 82       	std	Z+2, r1	; 0x02
        leds[i].c.g=0;
 214:	13 82       	std	Z+3, r1	; 0x03
        leds[i].c.b=0;
 216:	14 82       	std	Z+4, r1	; 0x04
    Tcolor c={(v>>16)&0xFF,(v>>8)&0xFF,v&0xFF};
    return c;
}

void ledInit(Led* leds){
    for(uint8_t i=0;i<NBLEDS;i++){
 218:	8f 5f       	subi	r24, 0xFF	; 255
 21a:	35 96       	adiw	r30, 0x05	; 5
 21c:	83 31       	cpi	r24, 0x13	; 19
 21e:	79 f7       	brne	.-34     	; 0x1fe <ledInit+0x4>
        }
        leds[i].c.r=0;
        leds[i].c.g=0;
        leds[i].c.b=0;
    }
}
 220:	08 95       	ret

00000222 <getColorByLed>:
uint32_t getColorByLed(Led l){
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	00 d0       	rcall	.+0      	; 0x228 <getColorByLed+0x6>
 228:	00 d0       	rcall	.+0      	; 0x22a <getColorByLed+0x8>
 22a:	1f 92       	push	r1
 22c:	cd b7       	in	r28, 0x3d	; 61
 22e:	de b7       	in	r29, 0x3e	; 62
 230:	27 2f       	mov	r18, r23
 232:	38 2f       	mov	r19, r24
    uint32_t d=0;
    if(l.row){
 234:	55 23       	and	r21, r21
 236:	81 f0       	breq	.+32     	; 0x258 <getColorByLed+0x36>
        if(l.c.r)d|=R2;
 238:	66 23       	and	r22, r22
 23a:	29 f0       	breq	.+10     	; 0x246 <getColorByLed+0x24>
 23c:	60 e0       	ldi	r22, 0x00	; 0
 23e:	70 e4       	ldi	r23, 0x40	; 64
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	03 c0       	rjmp	.+6      	; 0x24c <getColorByLed+0x2a>
        leds[i].c.g=0;
        leds[i].c.b=0;
    }
}
uint32_t getColorByLed(Led l){
    uint32_t d=0;
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	cb 01       	movw	r24, r22
    if(l.row){
        if(l.c.r)d|=R2;
        if(l.c.g)d|=G2;
 24c:	21 11       	cpse	r18, r1
 24e:	84 60       	ori	r24, 0x04	; 4
        if(l.c.b)d|=B2;
 250:	33 23       	and	r19, r19
 252:	81 f0       	breq	.+32     	; 0x274 <__stack+0x15>
 254:	82 60       	ori	r24, 0x02	; 2
 256:	0e c0       	rjmp	.+28     	; 0x274 <__stack+0x15>
    }else{
        if(l.c.r)d|=R1;
 258:	66 23       	and	r22, r22
 25a:	29 f0       	breq	.+10     	; 0x266 <__stack+0x7>
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	70 e8       	ldi	r23, 0x80	; 128
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	03 c0       	rjmp	.+6      	; 0x26c <__stack+0xd>
        leds[i].c.g=0;
        leds[i].c.b=0;
    }
}
uint32_t getColorByLed(Led l){
    uint32_t d=0;
 266:	60 e0       	ldi	r22, 0x00	; 0
 268:	70 e0       	ldi	r23, 0x00	; 0
 26a:	cb 01       	movw	r24, r22
        if(l.c.r)d|=R2;
        if(l.c.g)d|=G2;
        if(l.c.b)d|=B2;
    }else{
        if(l.c.r)d|=R1;
        if(l.c.g)d|=G1;
 26c:	21 11       	cpse	r18, r1
 26e:	88 60       	ori	r24, 0x08	; 8
        if(l.c.b)d|=B1;
 270:	31 11       	cpse	r19, r1
 272:	81 60       	ori	r24, 0x01	; 1
    }
    return d;
}
 274:	0f 90       	pop	r0
 276:	0f 90       	pop	r0
 278:	0f 90       	pop	r0
 27a:	0f 90       	pop	r0
 27c:	0f 90       	pop	r0
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <getDataByColor>:

uint32_t getDataByColor(Tcolor c, uint8_t mode, Led* leds){
 284:	ef 92       	push	r14
 286:	ff 92       	push	r15
 288:	0f 93       	push	r16
 28a:	1f 93       	push	r17
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	56 2f       	mov	r21, r22
 292:	f7 2e       	mov	r15, r23
 294:	e8 2e       	mov	r14, r24
 296:	f9 01       	movw	r30, r18
 298:	d9 01       	movw	r26, r18
 29a:	a1 5a       	subi	r26, 0xA1	; 161
 29c:	bf 4f       	sbci	r27, 0xFF	; 255
    uint32_t data=0;
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	cb 01       	movw	r24, r22
    for(uint8_t i=0;i<NBLEDS;i++){
        if(leds[i].row==mode){
            if((leds[i].c.r && c.r) || (leds[i].c.g && c.g) || (leds[i].c.b && c.b)){
                data|=(1<<leds[i].col);
 2a4:	c1 e0       	ldi	r28, 0x01	; 1
 2a6:	d0 e0       	ldi	r29, 0x00	; 0
}

uint32_t getDataByColor(Tcolor c, uint8_t mode, Led* leds){
    uint32_t data=0;
    for(uint8_t i=0;i<NBLEDS;i++){
        if(leds[i].row==mode){
 2a8:	21 81       	ldd	r18, Z+1	; 0x01
 2aa:	24 13       	cpse	r18, r20
 2ac:	1e c0       	rjmp	.+60     	; 0x2ea <getDataByColor+0x66>
            if((leds[i].c.r && c.r) || (leds[i].c.g && c.g) || (leds[i].c.b && c.b)){
 2ae:	22 81       	ldd	r18, Z+2	; 0x02
 2b0:	22 23       	and	r18, r18
 2b2:	11 f0       	breq	.+4      	; 0x2b8 <getDataByColor+0x34>
 2b4:	51 11       	cpse	r21, r1
 2b6:	0a c0       	rjmp	.+20     	; 0x2cc <getDataByColor+0x48>
 2b8:	23 81       	ldd	r18, Z+3	; 0x03
 2ba:	22 23       	and	r18, r18
 2bc:	11 f0       	breq	.+4      	; 0x2c2 <getDataByColor+0x3e>
 2be:	f1 10       	cpse	r15, r1
 2c0:	05 c0       	rjmp	.+10     	; 0x2cc <getDataByColor+0x48>
 2c2:	24 81       	ldd	r18, Z+4	; 0x04
 2c4:	22 23       	and	r18, r18
 2c6:	89 f0       	breq	.+34     	; 0x2ea <getDataByColor+0x66>
 2c8:	ee 20       	and	r14, r14
 2ca:	79 f0       	breq	.+30     	; 0x2ea <getDataByColor+0x66>
                data|=(1<<leds[i].col);
 2cc:	8e 01       	movw	r16, r28
 2ce:	00 80       	ld	r0, Z
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <getDataByColor+0x52>
 2d2:	00 0f       	add	r16, r16
 2d4:	11 1f       	adc	r17, r17
 2d6:	0a 94       	dec	r0
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <getDataByColor+0x4e>
 2da:	01 2e       	mov	r0, r17
 2dc:	00 0c       	add	r0, r0
 2de:	22 0b       	sbc	r18, r18
 2e0:	33 0b       	sbc	r19, r19
 2e2:	60 2b       	or	r22, r16
 2e4:	71 2b       	or	r23, r17
 2e6:	82 2b       	or	r24, r18
 2e8:	93 2b       	or	r25, r19
 2ea:	35 96       	adiw	r30, 0x05	; 5
    return d;
}

uint32_t getDataByColor(Tcolor c, uint8_t mode, Led* leds){
    uint32_t data=0;
    for(uint8_t i=0;i<NBLEDS;i++){
 2ec:	ea 17       	cp	r30, r26
 2ee:	fb 07       	cpc	r31, r27
 2f0:	d9 f6       	brne	.-74     	; 0x2a8 <getDataByColor+0x24>
                data|=(1<<leds[i].col);
            }
        }
    }
    return data;
}
 2f2:	df 91       	pop	r29
 2f4:	cf 91       	pop	r28
 2f6:	1f 91       	pop	r17
 2f8:	0f 91       	pop	r16
 2fa:	ff 90       	pop	r15
 2fc:	ef 90       	pop	r14
 2fe:	08 95       	ret

00000300 <ledOff>:

void ledOff(Led* l){
 300:	fc 01       	movw	r30, r24
    l->c.r=0;
 302:	12 82       	std	Z+2, r1	; 0x02
    l->c.g=0;
 304:	13 82       	std	Z+3, r1	; 0x03
    l->c.b=0;
 306:	14 82       	std	Z+4, r1	; 0x04
 308:	08 95       	ret

0000030a <ledOn>:
}
void ledOn(Led* l){
 30a:	fc 01       	movw	r30, r24
    l->c.r=255;
 30c:	8f ef       	ldi	r24, 0xFF	; 255
 30e:	82 83       	std	Z+2, r24	; 0x02
    l->c.g=255;
 310:	83 83       	std	Z+3, r24	; 0x03
    l->c.b=255;
 312:	84 83       	std	Z+4, r24	; 0x04
 314:	08 95       	ret

00000316 <ledOnC>:
}

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 316:	fc 01       	movw	r30, r24
 318:	42 83       	std	Z+2, r20	; 0x02
 31a:	53 83       	std	Z+3, r21	; 0x03
 31c:	64 83       	std	Z+4, r22	; 0x04
 31e:	08 95       	ret

00000320 <ledOnV>:
}

void ledOnV(Led* l,uint32_t v){
 320:	fc 01       	movw	r30, r24
    l->c=tcolorV(v);
 322:	62 83       	std	Z+2, r22	; 0x02
 324:	53 83       	std	Z+3, r21	; 0x03
 326:	44 83       	std	Z+4, r20	; 0x04
 328:	08 95       	ret

0000032a <ledIsOff>:
}

uint8_t ledIsOff(Led l){
 32a:	cf 93       	push	r28
 32c:	df 93       	push	r29
 32e:	00 d0       	rcall	.+0      	; 0x330 <ledIsOff+0x6>
 330:	00 d0       	rcall	.+0      	; 0x332 <ledIsOff+0x8>
 332:	1f 92       	push	r1
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
    return !ledIsOn(l);
}
uint8_t ledIsOn(Led l){
    return l.c.r || l.c.g || l.c.b;
 338:	61 11       	cpse	r22, r1
 33a:	08 c0       	rjmp	.+16     	; 0x34c <ledIsOff+0x22>
 33c:	71 11       	cpse	r23, r1
 33e:	06 c0       	rjmp	.+12     	; 0x34c <ledIsOff+0x22>
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	81 11       	cpse	r24, r1
 344:	01 c0       	rjmp	.+2      	; 0x348 <ledIsOff+0x1e>
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	89 2f       	mov	r24, r25
 34a:	01 c0       	rjmp	.+2      	; 0x34e <ledIsOff+0x24>
 34c:	81 e0       	ldi	r24, 0x01	; 1
    l->c=tcolorV(v);
}

uint8_t ledIsOff(Led l){
    return !ledIsOn(l);
}
 34e:	91 e0       	ldi	r25, 0x01	; 1
 350:	89 27       	eor	r24, r25
 352:	0f 90       	pop	r0
 354:	0f 90       	pop	r0
 356:	0f 90       	pop	r0
 358:	0f 90       	pop	r0
 35a:	0f 90       	pop	r0
 35c:	df 91       	pop	r29
 35e:	cf 91       	pop	r28
 360:	08 95       	ret

00000362 <ledIsOn>:
uint8_t ledIsOn(Led l){
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
 366:	00 d0       	rcall	.+0      	; 0x368 <ledIsOn+0x6>
 368:	00 d0       	rcall	.+0      	; 0x36a <ledIsOn+0x8>
 36a:	1f 92       	push	r1
 36c:	cd b7       	in	r28, 0x3d	; 61
 36e:	de b7       	in	r29, 0x3e	; 62
 370:	8d 83       	std	Y+5, r24	; 0x05
    return l.c.r || l.c.g || l.c.b;
 372:	61 11       	cpse	r22, r1
 374:	08 c0       	rjmp	.+16     	; 0x386 <ledIsOn+0x24>
 376:	71 11       	cpse	r23, r1
 378:	06 c0       	rjmp	.+12     	; 0x386 <ledIsOn+0x24>
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	9d 81       	ldd	r25, Y+5	; 0x05
 37e:	91 11       	cpse	r25, r1
 380:	03 c0       	rjmp	.+6      	; 0x388 <ledIsOn+0x26>
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	01 c0       	rjmp	.+2      	; 0x388 <ledIsOn+0x26>
 386:	81 e0       	ldi	r24, 0x01	; 1
}
 388:	0f 90       	pop	r0
 38a:	0f 90       	pop	r0
 38c:	0f 90       	pop	r0
 38e:	0f 90       	pop	r0
 390:	0f 90       	pop	r0
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	08 95       	ret

00000398 <setLeds>:
void setLeds(Ttime t,Led* l,Tcolor c){
 398:	6f 92       	push	r6
 39a:	7f 92       	push	r7
 39c:	8f 92       	push	r8
 39e:	cf 92       	push	r12
 3a0:	df 92       	push	r13
 3a2:	ef 92       	push	r14
 3a4:	ff 92       	push	r15
 3a6:	0f 93       	push	r16
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
 3ac:	00 d0       	rcall	.+0      	; 0x3ae <setLeds+0x16>
 3ae:	00 d0       	rcall	.+0      	; 0x3b0 <setLeds+0x18>
 3b0:	1f 92       	push	r1
 3b2:	cd b7       	in	r28, 0x3d	; 61
 3b4:	de b7       	in	r29, 0x3e	; 62
 3b6:	69 01       	movw	r12, r18
 3b8:	37 01       	movw	r6, r14
 3ba:	80 2e       	mov	r8, r16
 3bc:	f9 01       	movw	r30, r18
 3be:	c9 01       	movw	r24, r18
 3c0:	81 5a       	subi	r24, 0xA1	; 161
 3c2:	9f 4f       	sbci	r25, 0xFF	; 255
    }
    return data;
}

void ledOff(Led* l){
    l->c.r=0;
 3c4:	12 82       	std	Z+2, r1	; 0x02
    l->c.g=0;
 3c6:	13 82       	std	Z+3, r1	; 0x03
    l->c.b=0;
 3c8:	14 82       	std	Z+4, r1	; 0x04
 3ca:	35 96       	adiw	r30, 0x05	; 5
uint8_t ledIsOn(Led l){
    return l.c.r || l.c.g || l.c.b;
}
void setLeds(Ttime t,Led* l,Tcolor c){
    uint8_t i=0;
    for(;i<NBLEDS;i++){
 3cc:	e8 17       	cp	r30, r24
 3ce:	f9 07       	cpc	r31, r25
 3d0:	c9 f7       	brne	.-14     	; 0x3c4 <setLeds+0x2c>
    l->c.g=255;
    l->c.b=255;
}

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 3d2:	f6 01       	movw	r30, r12
 3d4:	e6 5a       	subi	r30, 0xA6	; 166
 3d6:	ff 4f       	sbci	r31, 0xFF	; 255
 3d8:	62 82       	std	Z+2, r6	; 0x02
 3da:	73 82       	std	Z+3, r7	; 0x03
 3dc:	84 82       	std	Z+4, r8	; 0x04
    for(;i<NBLEDS;i++){
        ledOff(&l[i]);
    }
    ledOnC(&l[ILEST],c);
    
    switch(currentTime.hour){
 3de:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <currentTime>
 3e2:	88 23       	and	r24, r24
 3e4:	31 f0       	breq	.+12     	; 0x3f2 <setLeds+0x5a>
 3e6:	8c 30       	cpi	r24, 0x0C	; 12
 3e8:	49 f4       	brne	.+18     	; 0x3fc <setLeds+0x64>
    l->c.g=255;
    l->c.b=255;
}

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 3ea:	f6 01       	movw	r30, r12
 3ec:	ef 5b       	subi	r30, 0xBF	; 191
 3ee:	ff 4f       	sbci	r31, 0xFF	; 255
 3f0:	23 c0       	rjmp	.+70     	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 3f2:	f6 01       	movw	r30, r12
 3f4:	61 8a       	std	Z+17, r6	; 0x11
 3f6:	72 8a       	std	Z+18, r7	; 0x12
 3f8:	83 8a       	std	Z+19, r8	; 0x13
 3fa:	21 c0       	rjmp	.+66     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
            break;
        case 12 :
            ledOnC(&l[MIDI],c);
            break;
        default :
            if(currentTime.min>35){
 3fc:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <currentTime+0x1>
                ledOnC(&l[ledMap[(currentTime.hour%12)]],c);
 400:	6c e0       	ldi	r22, 0x0C	; 12
            break;
        case 12 :
            ledOnC(&l[MIDI],c);
            break;
        default :
            if(currentTime.min>35){
 402:	94 32       	cpi	r25, 0x24	; 36
 404:	30 f0       	brcs	.+12     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
                ledOnC(&l[ledMap[(currentTime.hour%12)]],c);
 406:	6b d2       	rcall	.+1238   	; 0x8de <__udivmodqi4>
 408:	e9 2f       	mov	r30, r25
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	e0 5a       	subi	r30, 0xA0	; 160
 40e:	ff 4f       	sbci	r31, 0xFF	; 255
 410:	05 c0       	rjmp	.+10     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
            }else{
                ledOnC(&l[ledMap[(currentTime.hour%12)-1]],c);
 412:	65 d2       	rcall	.+1226   	; 0x8de <__udivmodqi4>
 414:	e9 2f       	mov	r30, r25
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	e1 5a       	subi	r30, 0xA1	; 161
 41a:	ff 4f       	sbci	r31, 0xFF	; 255
 41c:	80 81       	ld	r24, Z
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	65 e0       	ldi	r22, 0x05	; 5
 422:	70 e0       	ldi	r23, 0x00	; 0
 424:	4b d2       	rcall	.+1174   	; 0x8bc <__mulhi3>
 426:	8c 0d       	add	r24, r12
 428:	9d 1d       	adc	r25, r13
    l->c.g=255;
    l->c.b=255;
}

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 42a:	fc 01       	movw	r30, r24
 42c:	62 82       	std	Z+2, r6	; 0x02
 42e:	73 82       	std	Z+3, r7	; 0x03
 430:	84 82       	std	Z+4, r8	; 0x04
 432:	f6 01       	movw	r30, r12
 434:	e5 5b       	subi	r30, 0xB5	; 181
 436:	ff 4f       	sbci	r31, 0xFF	; 255
 438:	62 82       	std	Z+2, r6	; 0x02
 43a:	73 82       	std	Z+3, r7	; 0x03
 43c:	84 82       	std	Z+4, r8	; 0x04
                ledOnC(&l[ledMap[(currentTime.hour%12)-1]],c);
            }
            ledOnC(&l[HEURE],c);
            break;
    }
    uint8_t mins = minquad(currentTime.min); 
 43e:	80 91 d0 00 	lds	r24, 0x00D0	; 0x8000d0 <currentTime+0x1>
 442:	7c d0       	rcall	.+248    	; 0x53c <minquad>
    if(mins > 30){
 444:	8f 31       	cpi	r24, 0x1F	; 31
 446:	38 f0       	brcs	.+14     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
    l->c.g=255;
    l->c.b=255;
}

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 448:	f6 01       	movw	r30, r12
 44a:	67 a6       	std	Z+47, r6	; 0x2f
 44c:	70 aa       	std	Z+48, r7	; 0x30
 44e:	81 aa       	std	Z+49, r8	; 0x31
            break;
    }
    uint8_t mins = minquad(currentTime.min); 
    if(mins > 30){
        ledOnC(&l[MOINS],c);
        mins=60-mins;
 450:	9c e3       	ldi	r25, 0x3C	; 60
 452:	98 1b       	sub	r25, r24
 454:	89 2f       	mov	r24, r25
    }
    switch(mins){
 456:	84 31       	cpi	r24, 0x14	; 20
 458:	49 f0       	breq	.+18     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 45a:	8e 31       	cpi	r24, 0x1E	; 30
 45c:	61 f0       	breq	.+24     	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
 45e:	8a 30       	cpi	r24, 0x0A	; 10
 460:	71 f4       	brne	.+28     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
    l->c.g=255;
    l->c.b=255;
}

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 462:	f6 01       	movw	r30, r12
 464:	63 8e       	std	Z+27, r6	; 0x1b
 466:	74 8e       	std	Z+28, r7	; 0x1c
 468:	85 8e       	std	Z+29, r8	; 0x1d
 46a:	09 c0       	rjmp	.+18     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 46c:	f6 01       	movw	r30, r12
 46e:	61 ae       	std	Z+57, r6	; 0x39
 470:	72 ae       	std	Z+58, r7	; 0x3a
 472:	83 ae       	std	Z+59, r8	; 0x3b
 474:	04 c0       	rjmp	.+8      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 476:	f6 01       	movw	r30, r12
 478:	67 82       	std	Z+7, r6	; 0x07
 47a:	70 86       	std	Z+8, r7	; 0x08
 47c:	81 86       	std	Z+9, r8	; 0x09
            break;
        case 30 :
            ledOnC(&l[ETDEMIE],c);
            break;
    }
}
 47e:	0f 90       	pop	r0
 480:	0f 90       	pop	r0
 482:	0f 90       	pop	r0
 484:	0f 90       	pop	r0
 486:	0f 90       	pop	r0
 488:	df 91       	pop	r29
 48a:	cf 91       	pop	r28
 48c:	0f 91       	pop	r16
 48e:	ff 90       	pop	r15
 490:	ef 90       	pop	r14
 492:	df 90       	pop	r13
 494:	cf 90       	pop	r12
 496:	8f 90       	pop	r8
 498:	7f 90       	pop	r7
 49a:	6f 90       	pop	r6
 49c:	08 95       	ret

0000049e <setLedsNb>:

void setLedsNb(int8_t nb, Led* l, Tcolor c){
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	e8 2f       	mov	r30, r24
 4a4:	db 01       	movw	r26, r22
 4a6:	eb 01       	movw	r28, r22
 4a8:	cb 01       	movw	r24, r22
 4aa:	81 5a       	subi	r24, 0xA1	; 161
 4ac:	9f 4f       	sbci	r25, 0xFF	; 255
    }
    return data;
}

void ledOff(Led* l){
    l->c.r=0;
 4ae:	1a 82       	std	Y+2, r1	; 0x02
    l->c.g=0;
 4b0:	1b 82       	std	Y+3, r1	; 0x03
    l->c.b=0;
 4b2:	1c 82       	std	Y+4, r1	; 0x04
 4b4:	25 96       	adiw	r28, 0x05	; 5
    }
}

void setLedsNb(int8_t nb, Led* l, Tcolor c){
    uint8_t i=0;
    for(;i<NBLEDS;i++){
 4b6:	8c 17       	cp	r24, r28
 4b8:	9d 07       	cpc	r25, r29
 4ba:	c9 f7       	brne	.-14     	; 0x4ae <setLedsNb+0x10>
        ledOff(&l[i]);
    }
    if(nb < 0){
 4bc:	e7 ff       	sbrs	r30, 7
 4be:	06 c0       	rjmp	.+12     	; 0x4cc <setLedsNb+0x2e>
    l->c.g=255;
    l->c.b=255;
}

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 4c0:	9f 96       	adiw	r26, 0x2f	; 47
 4c2:	2d 93       	st	X+, r18
 4c4:	3d 93       	st	X+, r19
 4c6:	4c 93       	st	X, r20
 4c8:	d1 97       	sbiw	r26, 0x31	; 49
    for(;i<NBLEDS;i++){
        ledOff(&l[i]);
    }
    if(nb < 0){
        ledOnC(&l[MOINS],c);
        nb=-nb;
 4ca:	e1 95       	neg	r30
    }
    if(nb>30){
 4cc:	ef 31       	cpi	r30, 0x1F	; 31
 4ce:	64 f0       	brlt	.+24     	; 0x4e8 <setLedsNb+0x4a>
    l->c.g=255;
    l->c.b=255;
}

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 4d0:	d9 96       	adiw	r26, 0x39	; 57
 4d2:	2d 93       	st	X+, r18
 4d4:	3d 93       	st	X+, r19
 4d6:	4c 93       	st	X, r20
 4d8:	db 97       	sbiw	r26, 0x3b	; 59
 4da:	5b 96       	adiw	r26, 0x1b	; 27
 4dc:	2d 93       	st	X+, r18
 4de:	3d 93       	st	X+, r19
 4e0:	4c 93       	st	X, r20
 4e2:	5d 97       	sbiw	r26, 0x1d	; 29
        nb=-nb;
    }
    if(nb>30){
        ledOnC(&l[VINGT],c);
        ledOnC(&l[DIX],c);
        nb=nb-30;
 4e4:	ee 51       	subi	r30, 0x1E	; 30
 4e6:	10 c0       	rjmp	.+32     	; 0x508 <setLedsNb+0x6a>
    }else if(nb>20){
 4e8:	e5 31       	cpi	r30, 0x15	; 21
 4ea:	34 f0       	brlt	.+12     	; 0x4f8 <setLedsNb+0x5a>
    l->c.g=255;
    l->c.b=255;
}

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 4ec:	d9 96       	adiw	r26, 0x39	; 57
 4ee:	2d 93       	st	X+, r18
 4f0:	3d 93       	st	X+, r19
 4f2:	4c 93       	st	X, r20
 4f4:	db 97       	sbiw	r26, 0x3b	; 59
 4f6:	07 c0       	rjmp	.+14     	; 0x506 <setLedsNb+0x68>
        ledOnC(&l[DIX],c);
        nb=nb-30;
    }else if(nb>20){
        ledOnC(&l[VINGT],c);
        nb=nb-10;
    }else if(nb>11){
 4f8:	ec 30       	cpi	r30, 0x0C	; 12
 4fa:	34 f0       	brlt	.+12     	; 0x508 <setLedsNb+0x6a>
    l->c.g=255;
    l->c.b=255;
}

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 4fc:	5b 96       	adiw	r26, 0x1b	; 27
 4fe:	2d 93       	st	X+, r18
 500:	3d 93       	st	X+, r19
 502:	4c 93       	st	X, r20
 504:	5d 97       	sbiw	r26, 0x1d	; 29
    }else if(nb>20){
        ledOnC(&l[VINGT],c);
        nb=nb-10;
    }else if(nb>11){
        ledOnC(&l[DIX],c);
        nb=nb-10;
 506:	ea 50       	subi	r30, 0x0A	; 10
    }
    ledOnC(&l[ledMap[nb-1]],c);
 508:	0e 2e       	mov	r0, r30
 50a:	00 0c       	add	r0, r0
 50c:	ff 0b       	sbc	r31, r31
 50e:	e1 5a       	subi	r30, 0xA1	; 161
 510:	ff 4f       	sbci	r31, 0xFF	; 255
 512:	80 81       	ld	r24, Z
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	65 e0       	ldi	r22, 0x05	; 5
 518:	70 e0       	ldi	r23, 0x00	; 0
 51a:	d0 d1       	rcall	.+928    	; 0x8bc <__mulhi3>
 51c:	a8 0f       	add	r26, r24
 51e:	b9 1f       	adc	r27, r25
    l->c.g=255;
    l->c.b=255;
}

void ledOnC(Led* l,Tcolor c){
    l->c=c;   
 520:	12 96       	adiw	r26, 0x02	; 2
 522:	2d 93       	st	X+, r18
 524:	3d 93       	st	X+, r19
 526:	4c 93       	st	X, r20
    }else if(nb>11){
        ledOnC(&l[DIX],c);
        nb=nb-10;
    }
    ledOnC(&l[ledMap[nb-1]],c);
}
 528:	df 91       	pop	r29
 52a:	cf 91       	pop	r28
 52c:	08 95       	ret

0000052e <setCurrentTime>:
#include "RTC.h" 

void setCurrentTime(uint8_t hour,uint8_t min,uint8_t monthDay,uint8_t month){
	currentTime.hour=hour;
 52e:	ef ec       	ldi	r30, 0xCF	; 207
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	80 83       	st	Z, r24
	currentTime.min=min;
 534:	61 83       	std	Z+1, r22	; 0x01
	currentTime.monthDay=monthDay;
 536:	42 83       	std	Z+2, r20	; 0x02
	currentTime.month=month;
 538:	23 83       	std	Z+3, r18	; 0x03
 53a:	08 95       	ret

0000053c <minquad>:
}

uint8_t minquad(uint8_t min){
	if(min > 5){
 53c:	86 30       	cpi	r24, 0x06	; 6
 53e:	a0 f0       	brcs	.+40     	; 0x568 <minquad+0x2c>
		if(min > 15){
 540:	80 31       	cpi	r24, 0x10	; 16
 542:	50 f0       	brcs	.+20     	; 0x558 <minquad+0x1c>
			if(min > 25){
 544:	8a 31       	cpi	r24, 0x1A	; 26
 546:	50 f0       	brcs	.+20     	; 0x55c <minquad+0x20>
				if(min > 35){
 548:	84 32       	cpi	r24, 0x24	; 36
 54a:	50 f0       	brcs	.+20     	; 0x560 <minquad+0x24>
					if(min > 45){
 54c:	8e 32       	cpi	r24, 0x2E	; 46
 54e:	50 f0       	brcs	.+20     	; 0x564 <minquad+0x28>
						if(min > 55){
 550:	88 33       	cpi	r24, 0x38	; 56
 552:	50 f4       	brcc	.+20     	; 0x568 <minquad+0x2c>
							return 0;
						}else{return 50;}
 554:	82 e3       	ldi	r24, 0x32	; 50
 556:	08 95       	ret
					}else{return 40;}
				}else{return 30;}
			}else{return 20;}
		}else{return 10;}
 558:	8a e0       	ldi	r24, 0x0A	; 10
 55a:	08 95       	ret
						if(min > 55){
							return 0;
						}else{return 50;}
					}else{return 40;}
				}else{return 30;}
			}else{return 20;}
 55c:	84 e1       	ldi	r24, 0x14	; 20
 55e:	08 95       	ret
					if(min > 45){
						if(min > 55){
							return 0;
						}else{return 50;}
					}else{return 40;}
				}else{return 30;}
 560:	8e e1       	ldi	r24, 0x1E	; 30
 562:	08 95       	ret
				if(min > 35){
					if(min > 45){
						if(min > 55){
							return 0;
						}else{return 50;}
					}else{return 40;}
 564:	88 e2       	ldi	r24, 0x28	; 40
 566:	08 95       	ret
				}else{return 30;}
			}else{return 20;}
		}else{return 10;}
	}else{return 0;}
 568:	80 e0       	ldi	r24, 0x00	; 0
}
 56a:	08 95       	ret

0000056c <bcdToDec>:

uint8_t bcdToDec(uint8_t val){
 56c:	98 2f       	mov	r25, r24
  return ((val/16*10) + (val%16));
 56e:	82 95       	swap	r24
 570:	8f 70       	andi	r24, 0x0F	; 15
 572:	6a e0       	ldi	r22, 0x0A	; 10
 574:	9a d1       	rcall	.+820    	; 0x8aa <__mulqi3>
 576:	9f 70       	andi	r25, 0x0F	; 15
}
 578:	89 0f       	add	r24, r25
 57a:	08 95       	ret

0000057c <i2c_in_transfer>:
		return 0;
	}
}

uint8_t i2c_in_transfer(uint8_t USISR_temp){
	USISR = USISR_temp;								//Set USISR as requested by calling function
 57c:	8e b9       	out	0x0e, r24	; 14
	do{
		_delay_us(I2C_TLOW);
		USICR = 0b00101011;								//SCL Positive Edge
 57e:	8b e2       	ldi	r24, 0x2B	; 43
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 580:	95 e0       	ldi	r25, 0x05	; 5
 582:	9a 95       	dec	r25
 584:	f1 f7       	brne	.-4      	; 0x582 <i2c_in_transfer+0x6>
 586:	00 00       	nop
 588:	8d b9       	out	0x0d, r24	; 13
		while (!(PIN_USI&(1<<PIN_USI_SCL)));		//Wait for SCL to go high
 58a:	cc 9b       	sbis	0x19, 4	; 25
 58c:	fe cf       	rjmp	.-4      	; 0x58a <i2c_in_transfer+0xe>
 58e:	94 e0       	ldi	r25, 0x04	; 4
 590:	9a 95       	dec	r25
 592:	f1 f7       	brne	.-4      	; 0x590 <i2c_in_transfer+0x14>
		_delay_us(I2C_THIGH);
		USICR = 0b00101011;								//SCL Negative Edge
 594:	8d b9       	out	0x0d, r24	; 13
	}while (!(USISR&(1<<USIOIF)));					//Do until transfer is complete
 596:	76 9b       	sbis	0x0e, 6	; 14
 598:	f3 cf       	rjmp	.-26     	; 0x580 <i2c_in_transfer+0x4>
 59a:	85 e0       	ldi	r24, 0x05	; 5
 59c:	8a 95       	dec	r24
 59e:	f1 f7       	brne	.-4      	; 0x59c <i2c_in_transfer+0x20>
 5a0:	00 00       	nop
	_delay_us(I2C_TLOW);
	return USIDR;
 5a2:	8f b1       	in	r24, 0x0f	; 15
}
 5a4:	08 95       	ret

000005a6 <i2c_in_transmit>:
uint8_t i2c_in_transmit(uint8_t *msg, uint8_t msg_size){
 5a6:	ef 92       	push	r14
 5a8:	ff 92       	push	r15
 5aa:	0f 93       	push	r16
 5ac:	1f 93       	push	r17
 5ae:	cf 93       	push	r28
 5b0:	df 93       	push	r29
 5b2:	ec 01       	movw	r28, r24
 5b4:	16 2f       	mov	r17, r22
	USI_I2C_Master_State = USI_ADDRESS;
 5b6:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <USI_I2C_Master_State>

	//   Start Condition
	PORT_USI |=  (1 << PORT_USI_SCL); 						//Setting input makes line pull high
 5ba:	dc 9a       	sbi	0x1b, 4	; 27
	while (!(PIN_USI & (1<<PIN_USI_SCL)));		//Wait for SCL to go high
 5bc:	cc 9b       	sbis	0x19, 4	; 25
 5be:	fe cf       	rjmp	.-4      	; 0x5bc <i2c_in_transmit+0x16>
 5c0:	84 e0       	ldi	r24, 0x04	; 4
 5c2:	8a 95       	dec	r24
 5c4:	f1 f7       	brne	.-4      	; 0x5c2 <i2c_in_transmit+0x1c>
	#ifdef I2C_FAST_MODE
		_delay_us(I2C_THIGH);
	#else
		_delay_us(I2C_TLOW);
	#endif
	DDR_USI |=  (1 << PORT_USI_SDA);
 5c6:	d6 9a       	sbi	0x1a, 6	; 26
	DDR_USI |=  (1 << PORT_USI_SCL);
 5c8:	d4 9a       	sbi	0x1a, 4	; 26
	PORT_USI &= ~(1 << PORT_USI_SDA);
 5ca:	de 98       	cbi	0x1b, 6	; 27
 5cc:	84 e0       	ldi	r24, 0x04	; 4
 5ce:	8a 95       	dec	r24
 5d0:	f1 f7       	brne	.-4      	; 0x5ce <i2c_in_transmit+0x28>
	_delay_us(I2C_THIGH);;
	PORT_USI &= ~(1 << PORT_USI_SCL);
 5d2:	dc 98       	cbi	0x1b, 4	; 27
 5d4:	85 e0       	ldi	r24, 0x05	; 5
 5d6:	8a 95       	dec	r24
 5d8:	f1 f7       	brne	.-4      	; 0x5d6 <i2c_in_transmit+0x30>
 5da:	00 00       	nop
	_delay_us(I2C_TLOW);
	PORT_USI |=  (1 << PORT_USI_SDA);
 5dc:	de 9a       	sbi	0x1b, 6	; 27
		switch(USI_I2C_Master_State){
			case USI_ADDRESS:
				if(!(*msg & 0x01)){
					USI_I2C_Master_State = USI_WRITE;
				}else{
					USI_I2C_Master_State = USI_READ;
 5de:	02 e0       	ldi	r16, 0x02	; 2
	
	do{
		switch(USI_I2C_Master_State){
			case USI_ADDRESS:
				if(!(*msg & 0x01)){
					USI_I2C_Master_State = USI_WRITE;
 5e0:	ff 24       	eor	r15, r15
 5e2:	f3 94       	inc	r15
				DDR_USI &= ~(1 << PORT_USI_SDA);
				(*msg) = i2c_in_transfer(0b11110000 | (0x00<<USICNT0));			
				msg++;
				DDR_USI |=  (1 << PORT_USI_SDA);				
				if(msg_size == 1){
					USIDR = 0xFF;			//Load NACK to end transmission
 5e4:	ee 24       	eor	r14, r14
 5e6:	ea 94       	dec	r14
	PORT_USI &= ~(1 << PORT_USI_SCL);
	_delay_us(I2C_TLOW);
	PORT_USI |=  (1 << PORT_USI_SDA);
	
	do{
		switch(USI_I2C_Master_State){
 5e8:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <USI_I2C_Master_State>
 5ec:	81 30       	cpi	r24, 0x01	; 1
 5ee:	61 f0       	breq	.+24     	; 0x608 <i2c_in_transmit+0x62>
 5f0:	18 f0       	brcs	.+6      	; 0x5f8 <i2c_in_transmit+0x52>
 5f2:	82 30       	cpi	r24, 0x02	; 2
 5f4:	c9 f0       	breq	.+50     	; 0x628 <i2c_in_transmit+0x82>
 5f6:	24 c0       	rjmp	.+72     	; 0x640 <i2c_in_transmit+0x9a>
			case USI_ADDRESS:
				if(!(*msg & 0x01)){
 5f8:	88 81       	ld	r24, Y
 5fa:	80 fd       	sbrc	r24, 0
 5fc:	03 c0       	rjmp	.+6      	; 0x604 <i2c_in_transmit+0x5e>
					USI_I2C_Master_State = USI_WRITE;
 5fe:	f0 92 ce 00 	sts	0x00CE, r15	; 0x8000ce <USI_I2C_Master_State>
 602:	02 c0       	rjmp	.+4      	; 0x608 <i2c_in_transmit+0x62>
				}else{
					USI_I2C_Master_State = USI_READ;
 604:	00 93 ce 00 	sts	0x00CE, r16	; 0x8000ce <USI_I2C_Master_State>
				}//no break so goes to Write
				
			case USI_WRITE:
				PORT_USI &= ~(1 << PORT_USI_SCL);
 608:	dc 98       	cbi	0x1b, 4	; 27
				USIDR = *(msg);				//Load data			
 60a:	89 91       	ld	r24, Y+
 60c:	8f b9       	out	0x0f, r24	; 15
				msg++;						//Increment buffer pointer
				i2c_in_transfer(0b11110000 | (0x00<<USICNT0));
 60e:	80 ef       	ldi	r24, 0xF0	; 240
 610:	b5 df       	rcall	.-150    	; 0x57c <i2c_in_transfer>
				DDR_USI &= ~(1 << PORT_USI_SDA);
 612:	d6 98       	cbi	0x1a, 6	; 26
				if(i2c_in_transfer(0b11110000 | (0x0E<<USICNT0)) & 0x01){
 614:	8e ef       	ldi	r24, 0xFE	; 254
 616:	b2 df       	rcall	.-156    	; 0x57c <i2c_in_transfer>
 618:	80 ff       	sbrs	r24, 0
 61a:	04 c0       	rjmp	.+8      	; 0x624 <i2c_in_transmit+0x7e>
					PORT_USI |=  (1 << PORT_USI_SCL);
 61c:	dc 9a       	sbi	0x1b, 4	; 27
					PORT_USI |=  (1 << PORT_USI_SDA);
 61e:	de 9a       	sbi	0x1b, 6	; 27
					return 0;
 620:	80 e0       	ldi	r24, 0x00	; 0
 622:	1f c0       	rjmp	.+62     	; 0x662 <i2c_in_transmit+0xbc>
				}
				DDR_USI |=  (1 << PORT_USI_SDA);
 624:	d6 9a       	sbi	0x1a, 6	; 26
				break;
 626:	0c c0       	rjmp	.+24     	; 0x640 <i2c_in_transmit+0x9a>

			case USI_READ:
				DDR_USI &= ~(1 << PORT_USI_SDA);
 628:	d6 98       	cbi	0x1a, 6	; 26
				(*msg) = i2c_in_transfer(0b11110000 | (0x00<<USICNT0));			
 62a:	80 ef       	ldi	r24, 0xF0	; 240
 62c:	a7 df       	rcall	.-178    	; 0x57c <i2c_in_transfer>
 62e:	89 93       	st	Y+, r24
				msg++;
				DDR_USI |=  (1 << PORT_USI_SDA);				
 630:	d6 9a       	sbi	0x1a, 6	; 26
				if(msg_size == 1){
 632:	11 30       	cpi	r17, 0x01	; 1
 634:	11 f4       	brne	.+4      	; 0x63a <i2c_in_transmit+0x94>
					USIDR = 0xFF;			//Load NACK to end transmission
 636:	ef b8       	out	0x0f, r14	; 15
 638:	01 c0       	rjmp	.+2      	; 0x63c <i2c_in_transmit+0x96>
				}else{
					USIDR = 0x00;			//Load ACK
 63a:	1f b8       	out	0x0f, r1	; 15
				}
				i2c_in_transfer(0b11110000 | (0x0E<<USICNT0));
 63c:	8e ef       	ldi	r24, 0xFE	; 254
 63e:	9e df       	rcall	.-196    	; 0x57c <i2c_in_transfer>
				break;
		}
	}while(--msg_size);
 640:	11 50       	subi	r17, 0x01	; 1
 642:	91 f6       	brne	.-92     	; 0x5e8 <i2c_in_transmit+0x42>
	
	//Stop Condition
	PORT_USI &= ~(1 << PORT_USI_SDA);           				// Pull SDA low.
 644:	de 98       	cbi	0x1b, 6	; 27
 646:	85 e0       	ldi	r24, 0x05	; 5
 648:	8a 95       	dec	r24
 64a:	f1 f7       	brne	.-4      	; 0x648 <i2c_in_transmit+0xa2>
 64c:	00 00       	nop
	_delay_us(I2C_TLOW);
	DDR_USI &= ~(1 << PORT_USI_SCL);            				// Release SCL.
 64e:	d4 98       	cbi	0x1a, 4	; 26
	while( !(PIN_USI & (1<<PIN_USI_SCL)) );  	// Wait for SCL to go high.  
 650:	cc 9b       	sbis	0x19, 4	; 25
 652:	fe cf       	rjmp	.-4      	; 0x650 <i2c_in_transmit+0xaa>
 654:	84 e0       	ldi	r24, 0x04	; 4
 656:	8a 95       	dec	r24
 658:	f1 f7       	brne	.-4      	; 0x656 <i2c_in_transmit+0xb0>
	_delay_us(I2C_THIGH);
	DDR_USI &= ~(1 << PORT_USI_SDA);            				// Release SDA.
 65a:	d6 98       	cbi	0x1a, 6	; 26
	while( !(PIN_USI & (1<<PIN_USI_SDA)) );  	// Wait for SDA to go high. 
 65c:	ce 9b       	sbis	0x19, 6	; 25
 65e:	fe cf       	rjmp	.-4      	; 0x65c <i2c_in_transmit+0xb6>
	return 1;
 660:	81 e0       	ldi	r24, 0x01	; 1
 662:	df 91       	pop	r29
 664:	cf 91       	pop	r28
 666:	1f 91       	pop	r17
 668:	0f 91       	pop	r16
 66a:	ff 90       	pop	r15
 66c:	ef 90       	pop	r14
 66e:	08 95       	ret

00000670 <i2c_write>:
		return 1;
	}else{
		return 0;
	}
}
uint8_t i2c_write(uint8_t addr, uint8_t adrs, uint8_t val){ // only supports 1 byte write
 670:	cf 93       	push	r28
 672:	df 93       	push	r29
 674:	00 d0       	rcall	.+0      	; 0x676 <i2c_write+0x6>
 676:	1f 92       	push	r1
 678:	cd b7       	in	r28, 0x3d	; 61
 67a:	de b7       	in	r29, 0x3e	; 62
	uint8_t i2c_buffer[3];
	uint8_t i2c_buffer_len = 3;
	i2c_buffer[0] = (addr << 1) | I2CWRITE ;
 67c:	88 0f       	add	r24, r24
 67e:	89 83       	std	Y+1, r24	; 0x01
	i2c_buffer[1] = adrs;
 680:	6a 83       	std	Y+2, r22	; 0x02
	i2c_buffer[2] = val;
 682:	4b 83       	std	Y+3, r20	; 0x03
	return i2c_in_transmit(i2c_buffer, i2c_buffer_len);
 684:	63 e0       	ldi	r22, 0x03	; 3
 686:	ce 01       	movw	r24, r28
 688:	01 96       	adiw	r24, 0x01	; 1
 68a:	8d df       	rcall	.-230    	; 0x5a6 <i2c_in_transmit>
}
 68c:	0f 90       	pop	r0
 68e:	0f 90       	pop	r0
 690:	0f 90       	pop	r0
 692:	df 91       	pop	r29
 694:	cf 91       	pop	r28
 696:	08 95       	ret

00000698 <i2c_read>:
uint8_t i2c_read(uint8_t addr, uint8_t len, uint8_t adrs, uint8_t *buf){
 698:	8f 92       	push	r8
 69a:	9f 92       	push	r9
 69c:	af 92       	push	r10
 69e:	bf 92       	push	r11
 6a0:	cf 92       	push	r12
 6a2:	df 92       	push	r13
 6a4:	ef 92       	push	r14
 6a6:	ff 92       	push	r15
 6a8:	0f 93       	push	r16
 6aa:	1f 93       	push	r17
 6ac:	cf 93       	push	r28
 6ae:	df 93       	push	r29
 6b0:	cd b7       	in	r28, 0x3d	; 61
 6b2:	de b7       	in	r29, 0x3e	; 62
 6b4:	18 2f       	mov	r17, r24
 6b6:	06 2f       	mov	r16, r22
 6b8:	49 01       	movw	r8, r18
		}
		return 1; // provide success check
	}else{
		return 0;
	}
}
 6ba:	ad b6       	in	r10, 0x3d	; 61
 6bc:	be b6       	in	r11, 0x3e	; 62
	i2c_buffer[2] = val;
	return i2c_in_transmit(i2c_buffer, i2c_buffer_len);
}
uint8_t i2c_read(uint8_t addr, uint8_t len, uint8_t adrs, uint8_t *buf){
	//set register pointer to adrs
	uint8_t i2c_buffer[len+1];
 6be:	c6 2e       	mov	r12, r22
 6c0:	d1 2c       	mov	r13, r1
 6c2:	c6 01       	movw	r24, r12
 6c4:	01 96       	adiw	r24, 0x01	; 1
 6c6:	2d b7       	in	r18, 0x3d	; 61
 6c8:	3e b7       	in	r19, 0x3e	; 62
 6ca:	28 1b       	sub	r18, r24
 6cc:	39 0b       	sbc	r19, r25
 6ce:	0f b6       	in	r0, 0x3f	; 63
 6d0:	f8 94       	cli
 6d2:	3e bf       	out	0x3e, r19	; 62
 6d4:	0f be       	out	0x3f, r0	; 63
 6d6:	2d bf       	out	0x3d, r18	; 61
 6d8:	8d b7       	in	r24, 0x3d	; 61
 6da:	9e b7       	in	r25, 0x3e	; 62
 6dc:	01 96       	adiw	r24, 0x01	; 1
 6de:	7c 01       	movw	r14, r24
	uint8_t i2c_buffer_len = 2;
	i2c_buffer[0] = (addr << 1) | I2CWRITE;
 6e0:	81 2f       	mov	r24, r17
 6e2:	88 0f       	add	r24, r24
 6e4:	ed b7       	in	r30, 0x3d	; 61
 6e6:	fe b7       	in	r31, 0x3e	; 62
 6e8:	81 83       	std	Z+1, r24	; 0x01
	i2c_buffer[1] = adrs;
 6ea:	f7 01       	movw	r30, r14
 6ec:	41 83       	std	Z+1, r20	; 0x01
	i2c_in_transmit(i2c_buffer, i2c_buffer_len);
 6ee:	62 e0       	ldi	r22, 0x02	; 2
 6f0:	c7 01       	movw	r24, r14
 6f2:	59 df       	rcall	.-334    	; 0x5a6 <i2c_in_transmit>
	//read actual data
	i2c_buffer_len = len+1;
	i2c_buffer[0] = (addr << 1) | I2CREAD;
 6f4:	11 0f       	add	r17, r17
 6f6:	11 60       	ori	r17, 0x01	; 1
 6f8:	f7 01       	movw	r30, r14
 6fa:	10 83       	st	Z, r17
	if(i2c_in_transmit(i2c_buffer, i2c_buffer_len)){
 6fc:	61 e0       	ldi	r22, 0x01	; 1
 6fe:	60 0f       	add	r22, r16
 700:	c7 01       	movw	r24, r14
 702:	51 df       	rcall	.-350    	; 0x5a6 <i2c_in_transmit>
 704:	88 23       	and	r24, r24
 706:	91 f0       	breq	.+36     	; 0x72c <i2c_read+0x94>
 708:	21 e0       	ldi	r18, 0x01	; 1
		uint8_t i;
		for(i=1;i<len+1;i++){ // fetch in buffer
 70a:	82 2f       	mov	r24, r18
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	c8 16       	cp	r12, r24
 710:	d9 06       	cpc	r13, r25
 712:	5c f0       	brlt	.+22     	; 0x72a <i2c_read+0x92>
			buf[i-1]=i2c_buffer[i];
 714:	f4 01       	movw	r30, r8
 716:	e8 0f       	add	r30, r24
 718:	f9 1f       	adc	r31, r25
 71a:	31 97       	sbiw	r30, 0x01	; 1
 71c:	d7 01       	movw	r26, r14
 71e:	a8 0f       	add	r26, r24
 720:	b9 1f       	adc	r27, r25
 722:	8c 91       	ld	r24, X
 724:	80 83       	st	Z, r24
	//read actual data
	i2c_buffer_len = len+1;
	i2c_buffer[0] = (addr << 1) | I2CREAD;
	if(i2c_in_transmit(i2c_buffer, i2c_buffer_len)){
		uint8_t i;
		for(i=1;i<len+1;i++){ // fetch in buffer
 726:	2f 5f       	subi	r18, 0xFF	; 255
 728:	f0 cf       	rjmp	.-32     	; 0x70a <i2c_read+0x72>
			buf[i-1]=i2c_buffer[i];
		}
		return 1; // provide success check
 72a:	81 e0       	ldi	r24, 0x01	; 1
	}else{
		return 0;
	}
}
 72c:	0f b6       	in	r0, 0x3f	; 63
 72e:	f8 94       	cli
 730:	be be       	out	0x3e, r11	; 62
 732:	0f be       	out	0x3f, r0	; 63
 734:	ad be       	out	0x3d, r10	; 61
 736:	df 91       	pop	r29
 738:	cf 91       	pop	r28
 73a:	1f 91       	pop	r17
 73c:	0f 91       	pop	r16
 73e:	ff 90       	pop	r15
 740:	ef 90       	pop	r14
 742:	df 90       	pop	r13
 744:	cf 90       	pop	r12
 746:	bf 90       	pop	r11
 748:	af 90       	pop	r10
 74a:	9f 90       	pop	r9
 74c:	8f 90       	pop	r8
 74e:	08 95       	ret

00000750 <RTC_readTime>:

uint8_t bcdToDec(uint8_t val){
  return ((val/16*10) + (val%16));
}

uint8_t RTC_readTime(struct Ttime *t){
 750:	0f 93       	push	r16
 752:	1f 93       	push	r17
 754:	cf 93       	push	r28
 756:	df 93       	push	r29
 758:	cd b7       	in	r28, 0x3d	; 61
 75a:	de b7       	in	r29, 0x3e	; 62
 75c:	27 97       	sbiw	r28, 0x07	; 7
 75e:	0f b6       	in	r0, 0x3f	; 63
 760:	f8 94       	cli
 762:	de bf       	out	0x3e, r29	; 62
 764:	0f be       	out	0x3f, r0	; 63
 766:	cd bf       	out	0x3d, r28	; 61
 768:	8c 01       	movw	r16, r24
	uint8_t data[7] = {0};
 76a:	9e 01       	movw	r18, r28
 76c:	2f 5f       	subi	r18, 0xFF	; 255
 76e:	3f 4f       	sbci	r19, 0xFF	; 255
 770:	87 e0       	ldi	r24, 0x07	; 7
 772:	f9 01       	movw	r30, r18
 774:	11 92       	st	Z+, r1
 776:	8a 95       	dec	r24
 778:	e9 f7       	brne	.-6      	; 0x774 <RTC_readTime+0x24>
	if(i2c_read(RTC_addr,7,0x00,data)){
 77a:	40 e0       	ldi	r20, 0x00	; 0
 77c:	67 e0       	ldi	r22, 0x07	; 7
 77e:	88 e6       	ldi	r24, 0x68	; 104
 780:	8b df       	rcall	.-234    	; 0x698 <i2c_read>
 782:	88 23       	and	r24, r24
 784:	89 f0       	breq	.+34     	; 0x7a8 <RTC_readTime+0x58>
		t->hour = bcdToDec(data[2]);
 786:	8b 81       	ldd	r24, Y+3	; 0x03
 788:	f1 de       	rcall	.-542    	; 0x56c <bcdToDec>
 78a:	f8 01       	movw	r30, r16
 78c:	80 83       	st	Z, r24
		t->min = bcdToDec(data[1]);
 78e:	8a 81       	ldd	r24, Y+2	; 0x02
 790:	ed de       	rcall	.-550    	; 0x56c <bcdToDec>
 792:	f8 01       	movw	r30, r16
 794:	81 83       	std	Z+1, r24	; 0x01
		t->monthDay = bcdToDec(data[4]);
 796:	8d 81       	ldd	r24, Y+5	; 0x05
 798:	e9 de       	rcall	.-558    	; 0x56c <bcdToDec>
 79a:	f8 01       	movw	r30, r16
 79c:	82 83       	std	Z+2, r24	; 0x02
		t->month = bcdToDec(data[5]);
 79e:	8e 81       	ldd	r24, Y+6	; 0x06
 7a0:	e5 de       	rcall	.-566    	; 0x56c <bcdToDec>
 7a2:	f8 01       	movw	r30, r16
 7a4:	83 83       	std	Z+3, r24	; 0x03
		return 1;
 7a6:	81 e0       	ldi	r24, 0x01	; 1
	}else{
		return 0;
	}
}
 7a8:	27 96       	adiw	r28, 0x07	; 7
 7aa:	0f b6       	in	r0, 0x3f	; 63
 7ac:	f8 94       	cli
 7ae:	de bf       	out	0x3e, r29	; 62
 7b0:	0f be       	out	0x3f, r0	; 63
 7b2:	cd bf       	out	0x3d, r28	; 61
 7b4:	df 91       	pop	r29
 7b6:	cf 91       	pop	r28
 7b8:	1f 91       	pop	r17
 7ba:	0f 91       	pop	r16
 7bc:	08 95       	ret

000007be <main>:
}
volatile uint8_t state=0;
Led leds[NBLEDS];

int main(void){    
    DDRA |= CLK|DATA|STROBE|LED;
 7be:	8a b3       	in	r24, 0x1a	; 26
 7c0:	8f 60       	ori	r24, 0x0F	; 15
 7c2:	8a bb       	out	0x1a, r24	; 26
    PORTA &= ~(CLK|DATA|STROBE|LED);
 7c4:	8b b3       	in	r24, 0x1b	; 27
 7c6:	80 7f       	andi	r24, 0xF0	; 240
 7c8:	8b bb       	out	0x1b, r24	; 27
    ledInit(leds);
 7ca:	8f e6       	ldi	r24, 0x6F	; 111
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	15 dd       	rcall	.-1494   	; 0x1fa <ledInit>
    
    TIMSK1|=(1<<TOIE1);
 7d0:	60 9a       	sbi	0x0c, 0	; 12
    TIMSK0|=(1<<TOIE0);
 7d2:	89 b7       	in	r24, 0x39	; 57
 7d4:	81 60       	ori	r24, 0x01	; 1
 7d6:	89 bf       	out	0x39, r24	; 57
    sei();
 7d8:	78 94       	sei
    
    sendData(0b11111100001111111111 | LEDB);
 7da:	6f ef       	ldi	r22, 0xFF	; 255
 7dc:	77 ec       	ldi	r23, 0xC7	; 199
 7de:	8f e0       	ldi	r24, 0x0F	; 15
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	5d dc       	rcall	.-1862   	; 0x9e <sendData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7e4:	2f ef       	ldi	r18, 0xFF	; 255
 7e6:	84 e3       	ldi	r24, 0x34	; 52
 7e8:	9c e0       	ldi	r25, 0x0C	; 12
 7ea:	21 50       	subi	r18, 0x01	; 1
 7ec:	80 40       	sbci	r24, 0x00	; 0
 7ee:	90 40       	sbci	r25, 0x00	; 0
 7f0:	e1 f7       	brne	.-8      	; 0x7ea <main+0x2c>
 7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <main+0x36>
 7f4:	00 00       	nop
    _delay_ms(250);
    sendData(0b11000000001111111111);
 7f6:	6f ef       	ldi	r22, 0xFF	; 255
 7f8:	73 e0       	ldi	r23, 0x03	; 3
 7fa:	8c e0       	ldi	r24, 0x0C	; 12
 7fc:	90 e0       	ldi	r25, 0x00	; 0
 7fe:	4f dc       	rcall	.-1890   	; 0x9e <sendData>
 800:	2f ef       	ldi	r18, 0xFF	; 255
 802:	84 e3       	ldi	r24, 0x34	; 52
 804:	9c e0       	ldi	r25, 0x0C	; 12
 806:	21 50       	subi	r18, 0x01	; 1
 808:	80 40       	sbci	r24, 0x00	; 0
 80a:	90 40       	sbci	r25, 0x00	; 0
 80c:	e1 f7       	brne	.-8      	; 0x806 <main+0x48>
 80e:	00 c0       	rjmp	.+0      	; 0x810 <main+0x52>
 810:	00 00       	nop
    _delay_ms(250);
    sendData(0b00001100001111111111 | LEDR);
 812:	6f ef       	ldi	r22, 0xFF	; 255
 814:	7b ec       	ldi	r23, 0xCB	; 203
 816:	80 e0       	ldi	r24, 0x00	; 0
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	41 dc       	rcall	.-1918   	; 0x9e <sendData>
 81c:	2f ef       	ldi	r18, 0xFF	; 255
 81e:	84 e3       	ldi	r24, 0x34	; 52
 820:	9c e0       	ldi	r25, 0x0C	; 12
 822:	21 50       	subi	r18, 0x01	; 1
 824:	80 40       	sbci	r24, 0x00	; 0
 826:	90 40       	sbci	r25, 0x00	; 0
 828:	e1 f7       	brne	.-8      	; 0x822 <main+0x64>
 82a:	00 c0       	rjmp	.+0      	; 0x82c <main+0x6e>
 82c:	00 00       	nop
    _delay_ms(250);
    sendData(0b00110000001111111111);
 82e:	6f ef       	ldi	r22, 0xFF	; 255
 830:	73 e0       	ldi	r23, 0x03	; 3
 832:	83 e0       	ldi	r24, 0x03	; 3
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	33 dc       	rcall	.-1946   	; 0x9e <sendData>
 838:	2f ef       	ldi	r18, 0xFF	; 255
 83a:	84 e3       	ldi	r24, 0x34	; 52
 83c:	9c e0       	ldi	r25, 0x0C	; 12
 83e:	21 50       	subi	r18, 0x01	; 1
 840:	80 40       	sbci	r24, 0x00	; 0
 842:	90 40       	sbci	r25, 0x00	; 0
 844:	e1 f7       	brne	.-8      	; 0x83e <main+0x80>
 846:	00 c0       	rjmp	.+0      	; 0x848 <main+0x8a>
 848:	00 00       	nop
    _delay_ms(250);
    sendData(0b00000100000000000001 | LEDB);
 84a:	61 e0       	ldi	r22, 0x01	; 1
 84c:	74 e4       	ldi	r23, 0x44	; 68
 84e:	80 e0       	ldi	r24, 0x00	; 0
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	25 dc       	rcall	.-1974   	; 0x9e <sendData>
    #ifdef DELLONG
		TCCR1B|=(1<<CS12)|(1<<CS10);
 854:	8e b5       	in	r24, 0x2e	; 46
 856:	85 60       	ori	r24, 0x05	; 5
 858:	8e bd       	out	0x2e, r24	; 46
	#else
		TCCR1B|=(1<<CS12);//|(1<<CS10);
	#endif
	
	TCCR0B|=(1<<CS01)|(1<<CS00);
 85a:	83 b7       	in	r24, 0x33	; 51
 85c:	83 60       	ori	r24, 0x03	; 3
 85e:	83 bf       	out	0x33, r24	; 51
    
    currentColor=tcolorV(RED);
 860:	60 e0       	ldi	r22, 0x00	; 0
 862:	70 e0       	ldi	r23, 0x00	; 0
 864:	8f ef       	ldi	r24, 0xFF	; 255
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	b8 dc       	rcall	.-1680   	; 0x1da <tcolorV>
 86a:	60 93 d4 00 	sts	0x00D4, r22	; 0x8000d4 <currentColor>
 86e:	70 93 d5 00 	sts	0x00D5, r23	; 0x8000d5 <currentColor+0x1>
 872:	80 93 d6 00 	sts	0x00D6, r24	; 0x8000d6 <currentColor+0x2>
    setCurrentTime(15,45,7,11);
 876:	2b e0       	ldi	r18, 0x0B	; 11
 878:	47 e0       	ldi	r20, 0x07	; 7
 87a:	6d e2       	ldi	r22, 0x2D	; 45
 87c:	8f e0       	ldi	r24, 0x0F	; 15
 87e:	57 de       	rcall	.-850    	; 0x52e <setCurrentTime>
	//RTC_readTime(&currentTime);
    currentTime.temp=11;
 880:	8b e0       	ldi	r24, 0x0B	; 11
 882:	80 93 d3 00 	sts	0x00D3, r24	; 0x8000d3 <currentTime+0x4>
    setLeds(currentTime,leds,currentColor);
 886:	e0 90 d4 00 	lds	r14, 0x00D4	; 0x8000d4 <currentColor>
 88a:	f0 90 d5 00 	lds	r15, 0x00D5	; 0x8000d5 <currentColor+0x1>
 88e:	00 91 d6 00 	lds	r16, 0x00D6	; 0x8000d6 <currentColor+0x2>
 892:	2f e6       	ldi	r18, 0x6F	; 111
 894:	30 e0       	ldi	r19, 0x00	; 0
 896:	40 91 cf 00 	lds	r20, 0x00CF	; 0x8000cf <currentTime>
 89a:	50 91 d0 00 	lds	r21, 0x00D0	; 0x8000d0 <currentTime+0x1>
 89e:	60 91 d1 00 	lds	r22, 0x00D1	; 0x8000d1 <currentTime+0x2>
 8a2:	70 91 d2 00 	lds	r23, 0x00D2	; 0x8000d2 <currentTime+0x3>
 8a6:	78 dd       	rcall	.-1296   	; 0x398 <setLeds>
 8a8:	ff cf       	rjmp	.-2      	; 0x8a8 <main+0xea>

000008aa <__mulqi3>:
 8aa:	00 24       	eor	r0, r0

000008ac <__mulqi3_loop>:
 8ac:	80 fd       	sbrc	r24, 0
 8ae:	06 0e       	add	r0, r22
 8b0:	66 0f       	add	r22, r22
 8b2:	11 f0       	breq	.+4      	; 0x8b8 <__mulqi3_exit>
 8b4:	86 95       	lsr	r24
 8b6:	d1 f7       	brne	.-12     	; 0x8ac <__mulqi3_loop>

000008b8 <__mulqi3_exit>:
 8b8:	80 2d       	mov	r24, r0
 8ba:	08 95       	ret

000008bc <__mulhi3>:
 8bc:	00 24       	eor	r0, r0
 8be:	55 27       	eor	r21, r21
 8c0:	04 c0       	rjmp	.+8      	; 0x8ca <__mulhi3+0xe>
 8c2:	08 0e       	add	r0, r24
 8c4:	59 1f       	adc	r21, r25
 8c6:	88 0f       	add	r24, r24
 8c8:	99 1f       	adc	r25, r25
 8ca:	00 97       	sbiw	r24, 0x00	; 0
 8cc:	29 f0       	breq	.+10     	; 0x8d8 <__mulhi3+0x1c>
 8ce:	76 95       	lsr	r23
 8d0:	67 95       	ror	r22
 8d2:	b8 f3       	brcs	.-18     	; 0x8c2 <__mulhi3+0x6>
 8d4:	71 05       	cpc	r23, r1
 8d6:	b9 f7       	brne	.-18     	; 0x8c6 <__mulhi3+0xa>
 8d8:	80 2d       	mov	r24, r0
 8da:	95 2f       	mov	r25, r21
 8dc:	08 95       	ret

000008de <__udivmodqi4>:
 8de:	99 1b       	sub	r25, r25
 8e0:	79 e0       	ldi	r23, 0x09	; 9
 8e2:	04 c0       	rjmp	.+8      	; 0x8ec <__udivmodqi4_ep>

000008e4 <__udivmodqi4_loop>:
 8e4:	99 1f       	adc	r25, r25
 8e6:	96 17       	cp	r25, r22
 8e8:	08 f0       	brcs	.+2      	; 0x8ec <__udivmodqi4_ep>
 8ea:	96 1b       	sub	r25, r22

000008ec <__udivmodqi4_ep>:
 8ec:	88 1f       	adc	r24, r24
 8ee:	7a 95       	dec	r23
 8f0:	c9 f7       	brne	.-14     	; 0x8e4 <__udivmodqi4_loop>
 8f2:	80 95       	com	r24
 8f4:	08 95       	ret

000008f6 <_exit>:
 8f6:	f8 94       	cli

000008f8 <__stop_program>:
 8f8:	ff cf       	rjmp	.-2      	; 0x8f8 <__stop_program>
