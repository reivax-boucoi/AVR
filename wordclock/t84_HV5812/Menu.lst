   1               		.file	"Menu.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	MsetRainbow
  12               	MsetRainbow:
  13               	.LFB25:
  14               		.file 1 "Menu.c"
   1:Menu.c        **** #include "Menu.h"
   2:Menu.c        **** 
   3:Menu.c        **** uint8_t mode=1;//0: hour only, 1-2: hour+temp, 3: temp only
   4:Menu.c        **** uint8_t colorMode=0;
   5:Menu.c        **** uint8_t findNextEntry(Menu* m,uint8_t index){
   6:Menu.c        ****     if((index+2)>(m->nb_optn%16))return 0;
   7:Menu.c        ****     return index+1;
   8:Menu.c        **** }
   9:Menu.c        **** 
  10:Menu.c        **** Menu* getSubMenu(Menu* m,uint8_t index){
  11:Menu.c        ****     if(m->sub[index].submenu==0)return 0;//if executed NULL, return blank menu (==exit setup)
  12:Menu.c        ****     return m->sub[index].submenu;
  13:Menu.c        **** }
  14:Menu.c        **** void EEPROM_write(uint8_t addr, uint8_t data){
  15:Menu.c        ****     while(EECR & (1<<EEPE));
  16:Menu.c        ****     EECR = (0<<EEPM1)|(0<<EEPM0);
  17:Menu.c        ****     EEAR = addr;
  18:Menu.c        ****     EEDR = data;
  19:Menu.c        ****     EECR |= (1<<EEMPE);
  20:Menu.c        ****     EECR |= (1<<EEPE);
  21:Menu.c        **** }
  22:Menu.c        **** uint8_t EEPROM_read(uint8_t addr){
  23:Menu.c        ****     while(EECR & (1<<EEPE));
  24:Menu.c        ****     EEAR = addr;
  25:Menu.c        ****     EECR |= (1<<EERE);
  26:Menu.c        ****     return EEDR;
  27:Menu.c        **** }
  28:Menu.c        **** 
  29:Menu.c        **** void Minit(void){
  30:Menu.c        ****     colorMode=EEPROM_read(EE_COLOR);
  31:Menu.c        ****     MsetMode(EEPROM_read(EE_MODE));
  32:Menu.c        **** }
  33:Menu.c        **** const Menu M0main={8,0,{//WHITE
  34:Menu.c        ****     {7,&M1mode},
  35:Menu.c        ****     {8,&M1cmode},
  36:Menu.c        ****     {10,&M1nightmode},
  37:Menu.c        ****     {14,&M1setTime},
  38:Menu.c        ****     {0,&M1eventMode},
  39:Menu.c        ****     {4,&M1reset},
  40:Menu.c        ****     {17,&M1rainbow},
  41:Menu.c        ****     {HEURE,0}//exit      
  42:Menu.c        **** }};
  43:Menu.c        **** const Menu M1mode={5+16,MsetMode,{//CYAN
  44:Menu.c        ****     {7,0},//Hour only
  45:Menu.c        ****     {8,0},//Hour + temp (slow)
  46:Menu.c        ****     {10,0},//Hour + temp (fast)
  47:Menu.c        ****     {14,0},//temp only
  48:Menu.c        ****     {HEURE,&M0main}//return    
  49:Menu.c        **** }};
  50:Menu.c        **** const Menu M1cmode={10+32,MsetColorMode,{//BLUE
  51:Menu.c        ****     {7,0},//fixed WHITE 1
  52:Menu.c        ****     {8,0},//fixed CYAN 2
  53:Menu.c        ****     {10,0},//fixed BLUE 3
  54:Menu.c        ****     {14,0},//fixed MAGENTA 4
  55:Menu.c        ****     {0,0},//fixed RED 5
  56:Menu.c        ****     {4,0},//fixed YELLOW 6
  57:Menu.c        ****     {17,0},//fixed GREEN 7
  58:Menu.c        ****     {2,0},// cycle single 8
  59:Menu.c        ****     {12,0},// cycle all 9
  60:Menu.c        ****     {HEURE,&M0main}//return    
  61:Menu.c        **** }};
  62:Menu.c        **** const Menu M1nightmode={4+48,MsetNightMode,{//MAGENTA
  63:Menu.c        ****     {7,0},//none
  64:Menu.c        ****     {8,&M2offhour},//Half brightness
  65:Menu.c        ****     {10,&M2offhour},//Off completely
  66:Menu.c        ****     {HEURE,&M0main}//return
  67:Menu.c        **** }};
  68:Menu.c        **** const Menu M2offhour={12+64,MsetNightOff,{//RED
  69:Menu.c        ****     {7,&M3onhour},//heures
  70:Menu.c        ****     {8,&M3onhour},
  71:Menu.c        ****     {10,&M3onhour},
  72:Menu.c        ****     {14,&M3onhour},
  73:Menu.c        ****     {0,&M3onhour},
  74:Menu.c        ****     {4,&M3onhour},
  75:Menu.c        ****     {17,&M3onhour},
  76:Menu.c        ****     {2,&M3onhour},
  77:Menu.c        ****     {12,&M3onhour},
  78:Menu.c        ****     {6,&M3onhour},
  79:Menu.c        ****     {16,&M3onhour},
  80:Menu.c        ****     {HEURE,&M1nightmode}//return
  81:Menu.c        **** }};
  82:Menu.c        **** const Menu M3onhour={12+80,MsetNightOn,{//YELLOW
  83:Menu.c        ****     {7,0},//heures
  84:Menu.c        ****     {8,0},
  85:Menu.c        ****     {10,0},
  86:Menu.c        ****     {14,0},
  87:Menu.c        ****     {0,0},
  88:Menu.c        ****     {4,0},
  89:Menu.c        ****     {17,0},
  90:Menu.c        ****     {2,0},
  91:Menu.c        ****     {12,0},
  92:Menu.c        ****     {6,0},
  93:Menu.c        ****     {16,0},
  94:Menu.c        ****     {HEURE,&M1nightmode}//return
  95:Menu.c        **** }};
  96:Menu.c        **** const Menu M1setTime={5,0,{
  97:Menu.c        ****     {7,&M2sethouram},//hour am
  98:Menu.c        ****     {8,&M2sethourpm},//hour pm
  99:Menu.c        ****     {10,&M2setminam},//min am
 100:Menu.c        ****     {14,&M2setminpm},//min pm
 101:Menu.c        ****     {HEURE,&M0main}//return
 102:Menu.c        **** }};
 103:Menu.c        **** const Menu M2sethouram={13,MsetHouram,{
 104:Menu.c        ****     {7,0},//heure
 105:Menu.c        ****     {8,0},
 106:Menu.c        ****     {10,0},
 107:Menu.c        ****     {14,0},
 108:Menu.c        ****     {0,0},
 109:Menu.c        ****     {4,0},
 110:Menu.c        ****     {17,0},
 111:Menu.c        ****     {2,0},
 112:Menu.c        ****     {12,0},
 113:Menu.c        ****     {6,0},
 114:Menu.c        ****     {16,0},
 115:Menu.c        ****     {MIDI,0},//midi
 116:Menu.c        ****     {HEURE,&M1setTime}//return
 117:Menu.c        **** }};
 118:Menu.c        **** const Menu M2sethourpm={13,MsetHourpm,{
 119:Menu.c        ****     {7,0},//heure
 120:Menu.c        ****     {8,0},
 121:Menu.c        ****     {10,0},
 122:Menu.c        ****     {14,0},
 123:Menu.c        ****     {0,0},
 124:Menu.c        ****     {4,0},
 125:Menu.c        ****     {17,0},
 126:Menu.c        ****     {2,0},
 127:Menu.c        ****     {12,0},
 128:Menu.c        ****     {6,0},
 129:Menu.c        ****     {16,0},
 130:Menu.c        ****     {MINUIT,0},//minuit
 131:Menu.c        ****     {HEURE,&M1setTime}//return
 132:Menu.c        **** }};
 133:Menu.c        **** const Menu M2setminam={4,MsetMinam,{
 134:Menu.c        ****     {DIX,0},//dix
 135:Menu.c        ****     {VINGT,0},//vingt
 136:Menu.c        ****     {ETDEMIE,0},//1/2
 137:Menu.c        ****     {HEURE,&M1setTime}//return
 138:Menu.c        **** }};
 139:Menu.c        **** const Menu M2setminpm={4,MsetMinpm,{
 140:Menu.c        ****     {DIX,0},//dix
 141:Menu.c        ****     {VINGT,0},//vingt
 142:Menu.c        ****     {ETDEMIE,0},//1/2
 143:Menu.c        ****     {HEURE,&M1setTime}//return
 144:Menu.c        **** }};
 145:Menu.c        **** const Menu M1eventMode={3,MsetEventMode,{
 146:Menu.c        ****     {7,0},//Event on
 147:Menu.c        ****     {8,0},//Event off
 148:Menu.c        ****     {HEURE,&M0main}//return
 149:Menu.c        **** }};
 150:Menu.c        **** const Menu M1reset={2,Mreset,{
 151:Menu.c        ****     {18,0},//yes
 152:Menu.c        ****     {HEURE,&M0main}//return
 153:Menu.c        **** }};
 154:Menu.c        **** const Menu M1rainbow={3,MsetRainbow,{
 155:Menu.c        ****     {7,0},//Rainbow on
 156:Menu.c        ****     {8,0},//Rainbow off
 157:Menu.c        ****     {HEURE,&M0main}//return
 158:Menu.c        **** }};
 159:Menu.c        **** 
 160:Menu.c        **** void MsetMode(uint8_t i){
 161:Menu.c        ****     if(i<4){
 162:Menu.c        ****         TCCR1B|=(1<<CS12)|(1<<CS10);
 163:Menu.c        ****         if(i==2)TCCR1B&=~(1<<CS10);
 164:Menu.c        ****         mode=i;
 165:Menu.c        ****         EEPROM_write(EE_MODE,i);
 166:Menu.c        ****     }
 167:Menu.c        **** }
 168:Menu.c        **** uint8_t getMode(void){
 169:Menu.c        ****     if(mode==2){
 170:Menu.c        ****         mode=1;
 171:Menu.c        ****     }else if(mode==1){
 172:Menu.c        ****         mode=2;
 173:Menu.c        ****     }
 174:Menu.c        ****     return mode;
 175:Menu.c        **** }
 176:Menu.c        **** void MsetColorMode(uint8_t i){
 177:Menu.c        ****     if(i<7){
 178:Menu.c        ****         colorMode=colorArray[i];//fixed
 179:Menu.c        ****         EEPROM_write(EE_COLOR,colorArray[i]);
 180:Menu.c        ****     }else if(i==7){//cycle single
 181:Menu.c        ****         colorMode=WHITE+128;
 182:Menu.c        ****         EEPROM_write(EE_COLOR,128);
 183:Menu.c        ****     }else if(i==8){//cycle all
 184:Menu.c        ****         colorMode=WHITE+64;
 185:Menu.c        ****         EEPROM_write(EE_COLOR,64);
 186:Menu.c        ****     }
 187:Menu.c        **** }
 188:Menu.c        **** uint8_t getColor(void){
 189:Menu.c        ****     if(colorMode>127){//cycle single
 190:Menu.c        ****         if(colorMode>134)colorMode=128;
 191:Menu.c        ****         colorMode++;
 192:Menu.c        ****         return colorArray[colorMode-128];
 193:Menu.c        ****     }else if(colorMode>63){//cycle all
 194:Menu.c        ****         return RED;
 195:Menu.c        ****     }else{//fixed
 196:Menu.c        ****         return colorMode;
 197:Menu.c        ****     }
 198:Menu.c        **** }
 199:Menu.c        **** void MsetNightMode(uint8_t i){
 200:Menu.c        ****     if(i<3)EEPROM_write(EE_NIGHTMODE,i);
 201:Menu.c        **** }
 202:Menu.c        **** uint8_t isInAllowedTime(uint8_t h){
 203:Menu.c        ****     if(EEPROM_read(EE_NIGHTMODE))return (h>=EEPROM_read(EE_ONHOUR) && h<=EEPROM_read(EE_OFFHOUR));
 204:Menu.c        ****     return 1;
 205:Menu.c        **** }
 206:Menu.c        **** void MsetNightOff(uint8_t i){
 207:Menu.c        ****     EEPROM_write(EE_OFFHOUR,12+i);
 208:Menu.c        **** }
 209:Menu.c        **** void MsetNightOn(uint8_t i){
 210:Menu.c        ****     EEPROM_write(EE_ONHOUR,1+i);
 211:Menu.c        **** }
 212:Menu.c        **** void MsetHouram(uint8_t i){
 213:Menu.c        **** }
 214:Menu.c        **** void MsetHourpm(uint8_t i){
 215:Menu.c        **** }
 216:Menu.c        **** void MsetMinam(uint8_t i){
 217:Menu.c        **** }
 218:Menu.c        **** void MsetMinpm(uint8_t i){
 219:Menu.c        **** }
 220:Menu.c        **** void MsetEventMode(uint8_t i){
 221:Menu.c        **** }
 222:Menu.c        **** void Mreset(uint8_t i){
 223:Menu.c        ****     if(i<1){
 224:Menu.c        ****         MsetMode(1);
 225:Menu.c        ****         MsetColorMode(0);
 226:Menu.c        ****         TCCR1B|=(1<<CS12)|(1<<CS10);
 227:Menu.c        ****     }
 228:Menu.c        **** }
 229:Menu.c        **** void MsetRainbow(uint8_t i){
  15               		.loc 1 229 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22 0000 0895      		ret
  23               		.cfi_endproc
  24               	.LFE25:
  26               	.global	MsetEventMode
  28               	MsetEventMode:
  29               	.LFB30:
  30               		.cfi_startproc
  31               	/* prologue: function */
  32               	/* frame size = 0 */
  33               	/* stack size = 0 */
  34               	.L__stack_usage = 0
  35 0002 0895      		ret
  36               		.cfi_endproc
  37               	.LFE30:
  39               	.global	MsetHouram
  41               	MsetHouram:
  42               	.LFB38:
  43               		.cfi_startproc
  44               	/* prologue: function */
  45               	/* frame size = 0 */
  46               	/* stack size = 0 */
  47               	.L__stack_usage = 0
  48 0004 0895      		ret
  49               		.cfi_endproc
  50               	.LFE38:
  52               	.global	MsetHourpm
  54               	MsetHourpm:
  55               	.LFB36:
  56               		.cfi_startproc
  57               	/* prologue: function */
  58               	/* frame size = 0 */
  59               	/* stack size = 0 */
  60               	.L__stack_usage = 0
  61 0006 0895      		ret
  62               		.cfi_endproc
  63               	.LFE36:
  65               	.global	MsetMinam
  67               	MsetMinam:
  68               	.LFB34:
  69               		.cfi_startproc
  70               	/* prologue: function */
  71               	/* frame size = 0 */
  72               	/* stack size = 0 */
  73               	.L__stack_usage = 0
  74 0008 0895      		ret
  75               		.cfi_endproc
  76               	.LFE34:
  78               	.global	MsetMinpm
  80               	MsetMinpm:
  81               	.LFB32:
  82               		.cfi_startproc
  83               	/* prologue: function */
  84               	/* frame size = 0 */
  85               	/* stack size = 0 */
  86               	.L__stack_usage = 0
  87 000a 0895      		ret
  88               		.cfi_endproc
  89               	.LFE32:
  91               	.global	findNextEntry
  93               	findNextEntry:
  94               	.LFB6:
   5:Menu.c        ****     if((index+2)>(m->nb_optn%16))return 0;
  95               		.loc 1 5 0
  96               		.cfi_startproc
  97               	.LVL1:
  98               	/* prologue: function */
  99               	/* frame size = 0 */
 100               	/* stack size = 0 */
 101               	.L__stack_usage = 0
   6:Menu.c        ****     return index+1;
 102               		.loc 1 6 0
 103 000c 262F      		mov r18,r22
 104 000e 30E0      		ldi r19,0
 105 0010 2F5F      		subi r18,-1
 106 0012 3F4F      		sbci r19,-1
 107 0014 FC01      		movw r30,r24
 108 0016 8081      		ld r24,Z
 109               	.LVL2:
 110 0018 8F70      		andi r24,lo8(15)
 111 001a 90E0      		ldi r25,0
 112 001c 2817      		cp r18,r24
 113 001e 3907      		cpc r19,r25
 114 0020 04F4      		brge .L9
   7:Menu.c        **** }
 115               		.loc 1 7 0
 116 0022 81E0      		ldi r24,lo8(1)
 117 0024 860F      		add r24,r22
 118 0026 0895      		ret
 119               	.L9:
   6:Menu.c        ****     return index+1;
 120               		.loc 1 6 0
 121 0028 80E0      		ldi r24,0
   8:Menu.c        **** 
 122               		.loc 1 8 0
 123 002a 0895      		ret
 124               		.cfi_endproc
 125               	.LFE6:
 127               	.global	getSubMenu
 129               	getSubMenu:
 130               	.LFB7:
  10:Menu.c        ****     if(m->sub[index].submenu==0)return 0;//if executed NULL, return blank menu (==exit setup)
 131               		.loc 1 10 0
 132               		.cfi_startproc
 133               	.LVL3:
 134               	/* prologue: function */
 135               	/* frame size = 0 */
 136               	/* stack size = 0 */
 137               	.L__stack_usage = 0
 138 002c 9C01      		movw r18,r24
  11:Menu.c        ****     return m->sub[index].submenu;
 139               		.loc 1 11 0
 140 002e 862F      		mov r24,r22
 141               	.LVL4:
 142 0030 90E0      		ldi r25,0
 143 0032 63E0      		ldi r22,lo8(3)
 144 0034 70E0      		ldi r23,0
 145               	.LVL5:
 146 0036 00D0      		rcall __mulhi3
 147               	.LVL6:
 148 0038 820F      		add r24,r18
 149 003a 931F      		adc r25,r19
  13:Menu.c        **** void EEPROM_write(uint8_t addr, uint8_t data){
 150               		.loc 1 13 0
 151 003c FC01      		movw r30,r24
 152 003e 8481      		ldd r24,Z+4
 153 0040 9581      		ldd r25,Z+5
 154 0042 0895      		ret
 155               		.cfi_endproc
 156               	.LFE7:
 158               	.global	EEPROM_write
 160               	EEPROM_write:
 161               	.LFB8:
  14:Menu.c        ****     while(EECR & (1<<EEPE));
 162               		.loc 1 14 0
 163               		.cfi_startproc
 164               	/* prologue: function */
 165               	/* frame size = 0 */
 166               	/* stack size = 0 */
 167               	.L__stack_usage = 0
 168               	.LVL7:
 169               	.L13:
  15:Menu.c        ****     EECR = (0<<EEPM1)|(0<<EEPM0);
 170               		.loc 1 15 0 discriminator 1
 171 0044 E199      		sbic 0x1c,1
 172 0046 00C0      		rjmp .L13
  16:Menu.c        ****     EEAR = addr;
 173               		.loc 1 16 0
 174 0048 1CBA      		out 0x1c,__zero_reg__
  17:Menu.c        ****     EEDR = data;
 175               		.loc 1 17 0
 176 004a 90E0      		ldi r25,0
 177 004c 9FBB      		out 0x1e+1,r25
 178 004e 8EBB      		out 0x1e,r24
  18:Menu.c        ****     EECR |= (1<<EEMPE);
 179               		.loc 1 18 0
 180 0050 6DBB      		out 0x1d,r22
  19:Menu.c        ****     EECR |= (1<<EEPE);
 181               		.loc 1 19 0
 182 0052 E29A      		sbi 0x1c,2
  20:Menu.c        **** }
 183               		.loc 1 20 0
 184 0054 E19A      		sbi 0x1c,1
 185 0056 0895      		ret
 186               		.cfi_endproc
 187               	.LFE8:
 189               	.global	MsetMode
 191               	MsetMode:
 192               	.LFB11:
 160:Menu.c        ****     if(i<4){
 193               		.loc 1 160 0
 194               		.cfi_startproc
 195               	.LVL8:
 196               	/* prologue: function */
 197               	/* frame size = 0 */
 198               	/* stack size = 0 */
 199               	.L__stack_usage = 0
 161:Menu.c        ****         TCCR1B|=(1<<CS12)|(1<<CS10);
 200               		.loc 1 161 0
 201 0058 8430      		cpi r24,lo8(4)
 202 005a 00F4      		brsh .L15
 203               	.LVL9:
 204               	.LBB8:
 205               	.LBB9:
 162:Menu.c        ****         if(i==2)TCCR1B&=~(1<<CS10);
 206               		.loc 1 162 0
 207 005c 9EB5      		in r25,0x2e
 208 005e 9560      		ori r25,lo8(5)
 209 0060 9EBD      		out 0x2e,r25
 163:Menu.c        ****         mode=i;
 210               		.loc 1 163 0
 211 0062 8230      		cpi r24,lo8(2)
 212 0064 01F4      		brne .L17
 213 0066 9EB5      		in r25,0x2e
 214 0068 9E7F      		andi r25,lo8(-2)
 215 006a 9EBD      		out 0x2e,r25
 216               	.L17:
 164:Menu.c        ****         EEPROM_write(EE_MODE,i);
 217               		.loc 1 164 0
 218 006c 8093 0000 		sts mode,r24
 165:Menu.c        ****     }
 219               		.loc 1 165 0
 220 0070 682F      		mov r22,r24
 221 0072 84E0      		ldi r24,lo8(4)
 222               	.LVL10:
 223 0074 00C0      		rjmp EEPROM_write
 224               	.LVL11:
 225               	.L15:
 226 0076 0895      		ret
 227               	.LBE9:
 228               	.LBE8:
 229               		.cfi_endproc
 230               	.LFE11:
 232               	.global	MsetColorMode
 234               	MsetColorMode:
 235               	.LFB13:
 176:Menu.c        ****     if(i<7){
 236               		.loc 1 176 0
 237               		.cfi_startproc
 238               	.LVL12:
 239               	/* prologue: function */
 240               	/* frame size = 0 */
 241               	/* stack size = 0 */
 242               	.L__stack_usage = 0
 177:Menu.c        ****         colorMode=colorArray[i];//fixed
 243               		.loc 1 177 0
 244 0078 8730      		cpi r24,lo8(7)
 245 007a 00F4      		brsh .L19
 178:Menu.c        ****         EEPROM_write(EE_COLOR,colorArray[i]);
 246               		.loc 1 178 0
 247 007c E82F      		mov r30,r24
 248 007e F0E0      		ldi r31,0
 249 0080 E050      		subi r30,lo8(-(colorArray))
 250 0082 F040      		sbci r31,hi8(-(colorArray))
 251 0084 6081      		ld r22,Z
 252 0086 6093 0000 		sts colorMode,r22
 253 008a 00C0      		rjmp .L22
 254               	.L19:
 180:Menu.c        ****         colorMode=WHITE+128;
 255               		.loc 1 180 0
 256 008c 8730      		cpi r24,lo8(7)
 257 008e 01F4      		brne .L20
 258               	.LVL13:
 259               	.LBB12:
 260               	.LBB13:
 181:Menu.c        ****         EEPROM_write(EE_COLOR,128);
 261               		.loc 1 181 0
 262 0090 87E8      		ldi r24,lo8(-121)
 263               	.LVL14:
 264 0092 8093 0000 		sts colorMode,r24
 182:Menu.c        ****     }else if(i==8){//cycle all
 265               		.loc 1 182 0
 266 0096 60E8      		ldi r22,lo8(-128)
 267 0098 00C0      		rjmp .L22
 268               	.LVL15:
 269               	.L20:
 270               	.LBE13:
 271               	.LBE12:
 183:Menu.c        ****         colorMode=WHITE+64;
 272               		.loc 1 183 0
 273 009a 8830      		cpi r24,lo8(8)
 274 009c 01F4      		brne .L18
 184:Menu.c        ****         EEPROM_write(EE_COLOR,64);
 275               		.loc 1 184 0
 276 009e 87E4      		ldi r24,lo8(71)
 277               	.LVL16:
 278 00a0 8093 0000 		sts colorMode,r24
 185:Menu.c        ****     }
 279               		.loc 1 185 0
 280 00a4 60E4      		ldi r22,lo8(64)
 281               	.L22:
 282 00a6 80E0      		ldi r24,0
 283 00a8 00C0      		rjmp EEPROM_write
 284               	.LVL17:
 285               	.L18:
 286 00aa 0895      		ret
 287               		.cfi_endproc
 288               	.LFE13:
 290               	.global	MsetNightMode
 292               	MsetNightMode:
 293               	.LFB15:
 199:Menu.c        ****     if(i<3)EEPROM_write(EE_NIGHTMODE,i);
 294               		.loc 1 199 0
 295               		.cfi_startproc
 296               	.LVL18:
 297               	/* prologue: function */
 298               	/* frame size = 0 */
 299               	/* stack size = 0 */
 300               	.L__stack_usage = 0
 200:Menu.c        **** }
 301               		.loc 1 200 0
 302 00ac 8330      		cpi r24,lo8(3)
 303 00ae 00F4      		brsh .L23
 200:Menu.c        **** }
 304               		.loc 1 200 0 is_stmt 0 discriminator 1
 305 00b0 682F      		mov r22,r24
 306 00b2 81E0      		ldi r24,lo8(1)
 307               	.LVL19:
 308 00b4 00C0      		rjmp EEPROM_write
 309               	.LVL20:
 310               	.L23:
 311 00b6 0895      		ret
 312               		.cfi_endproc
 313               	.LFE15:
 315               	.global	MsetNightOff
 317               	MsetNightOff:
 318               	.LFB17:
 206:Menu.c        ****     EEPROM_write(EE_OFFHOUR,12+i);
 319               		.loc 1 206 0 is_stmt 1
 320               		.cfi_startproc
 321               	.LVL21:
 322               	/* prologue: function */
 323               	/* frame size = 0 */
 324               	/* stack size = 0 */
 325               	.L__stack_usage = 0
 207:Menu.c        **** }
 326               		.loc 1 207 0
 327 00b8 6CE0      		ldi r22,lo8(12)
 328 00ba 680F      		add r22,r24
 329 00bc 83E0      		ldi r24,lo8(3)
 330               	.LVL22:
 331 00be 00C0      		rjmp EEPROM_write
 332               	.LVL23:
 333               		.cfi_endproc
 334               	.LFE17:
 336               	.global	MsetNightOn
 338               	MsetNightOn:
 339               	.LFB18:
 209:Menu.c        ****     EEPROM_write(EE_ONHOUR,1+i);
 340               		.loc 1 209 0
 341               		.cfi_startproc
 342               	.LVL24:
 343               	/* prologue: function */
 344               	/* frame size = 0 */
 345               	/* stack size = 0 */
 346               	.L__stack_usage = 0
 210:Menu.c        **** }
 347               		.loc 1 210 0
 348 00c0 61E0      		ldi r22,lo8(1)
 349 00c2 680F      		add r22,r24
 350 00c4 82E0      		ldi r24,lo8(2)
 351               	.LVL25:
 352 00c6 00C0      		rjmp EEPROM_write
 353               	.LVL26:
 354               		.cfi_endproc
 355               	.LFE18:
 357               	.global	Mreset
 359               	Mreset:
 360               	.LFB24:
 222:Menu.c        ****     if(i<1){
 361               		.loc 1 222 0
 362               		.cfi_startproc
 363               	.LVL27:
 364               	/* prologue: function */
 365               	/* frame size = 0 */
 366               	/* stack size = 0 */
 367               	.L__stack_usage = 0
 223:Menu.c        ****         MsetMode(1);
 368               		.loc 1 223 0
 369 00c8 8111      		cpse r24,__zero_reg__
 370 00ca 00C0      		rjmp .L27
 371               	.LVL28:
 372               	.LBB20:
 373               	.LBB21:
 374               	.LBB22:
 375               	.LBB23:
 376               	.LBB24:
 162:Menu.c        ****         if(i==2)TCCR1B&=~(1<<CS10);
 377               		.loc 1 162 0
 378 00cc 8EB5      		in r24,0x2e
 379               	.LVL29:
 380 00ce 8560      		ori r24,lo8(5)
 381 00d0 8EBD      		out 0x2e,r24
 164:Menu.c        ****         EEPROM_write(EE_MODE,i);
 382               		.loc 1 164 0
 383 00d2 81E0      		ldi r24,lo8(1)
 384 00d4 8093 0000 		sts mode,r24
 165:Menu.c        ****     }
 385               		.loc 1 165 0
 386 00d8 61E0      		ldi r22,lo8(1)
 387 00da 84E0      		ldi r24,lo8(4)
 388 00dc 00D0      		rcall EEPROM_write
 389               	.LVL30:
 390               	.LBE24:
 391               	.LBE23:
 392               	.LBE22:
 225:Menu.c        ****         TCCR1B|=(1<<CS12)|(1<<CS10);
 393               		.loc 1 225 0
 394 00de 80E0      		ldi r24,0
 395 00e0 00D0      		rcall MsetColorMode
 396               	.LVL31:
 226:Menu.c        ****     }
 397               		.loc 1 226 0
 398 00e2 8EB5      		in r24,0x2e
 399 00e4 8560      		ori r24,lo8(5)
 400 00e6 8EBD      		out 0x2e,r24
 401               	.LVL32:
 402               	.L27:
 403 00e8 0895      		ret
 404               	.LBE21:
 405               	.LBE20:
 406               		.cfi_endproc
 407               	.LFE24:
 409               	.global	EEPROM_read
 411               	EEPROM_read:
 412               	.LFB9:
  22:Menu.c        ****     while(EECR & (1<<EEPE));
 413               		.loc 1 22 0
 414               		.cfi_startproc
 415               	/* prologue: function */
 416               	/* frame size = 0 */
 417               	/* stack size = 0 */
 418               	.L__stack_usage = 0
 419               	.LVL33:
 420               	.L30:
  23:Menu.c        ****     EEAR = addr;
 421               		.loc 1 23 0 discriminator 1
 422 00ea E199      		sbic 0x1c,1
 423 00ec 00C0      		rjmp .L30
  24:Menu.c        ****     EECR |= (1<<EERE);
 424               		.loc 1 24 0
 425 00ee 90E0      		ldi r25,0
 426 00f0 9FBB      		out 0x1e+1,r25
 427 00f2 8EBB      		out 0x1e,r24
  25:Menu.c        ****     return EEDR;
 428               		.loc 1 25 0
 429 00f4 E09A      		sbi 0x1c,0
  26:Menu.c        **** }
 430               		.loc 1 26 0
 431 00f6 8DB3      		in r24,0x1d
 432               	.LVL34:
  27:Menu.c        **** 
 433               		.loc 1 27 0
 434 00f8 0895      		ret
 435               		.cfi_endproc
 436               	.LFE9:
 438               	.global	Minit
 440               	Minit:
 441               	.LFB10:
  29:Menu.c        ****     colorMode=EEPROM_read(EE_COLOR);
 442               		.loc 1 29 0
 443               		.cfi_startproc
 444               	/* prologue: function */
 445               	/* frame size = 0 */
 446               	/* stack size = 0 */
 447               	.L__stack_usage = 0
  30:Menu.c        ****     MsetMode(EEPROM_read(EE_MODE));
 448               		.loc 1 30 0
 449 00fa 80E0      		ldi r24,0
 450 00fc 00D0      		rcall EEPROM_read
 451               	.LVL35:
 452 00fe 8093 0000 		sts colorMode,r24
  31:Menu.c        **** }
 453               		.loc 1 31 0
 454 0102 84E0      		ldi r24,lo8(4)
 455 0104 00D0      		rcall EEPROM_read
 456               	.LVL36:
 457 0106 00C0      		rjmp MsetMode
 458               	.LVL37:
 459               		.cfi_endproc
 460               	.LFE10:
 462               	.global	getMode
 464               	getMode:
 465               	.LFB12:
 168:Menu.c        ****     if(mode==2){
 466               		.loc 1 168 0
 467               		.cfi_startproc
 468               	/* prologue: function */
 469               	/* frame size = 0 */
 470               	/* stack size = 0 */
 471               	.L__stack_usage = 0
 169:Menu.c        ****         mode=1;
 472               		.loc 1 169 0
 473 0108 8091 0000 		lds r24,mode
 474 010c 8230      		cpi r24,lo8(2)
 475 010e 01F4      		brne .L34
 170:Menu.c        ****     }else if(mode==1){
 476               		.loc 1 170 0
 477 0110 81E0      		ldi r24,lo8(1)
 478 0112 00C0      		rjmp .L36
 479               	.L34:
 171:Menu.c        ****         mode=2;
 480               		.loc 1 171 0
 481 0114 8130      		cpi r24,lo8(1)
 482 0116 01F4      		brne .L35
 172:Menu.c        ****     }
 483               		.loc 1 172 0
 484 0118 82E0      		ldi r24,lo8(2)
 485               	.L36:
 486 011a 8093 0000 		sts mode,r24
 487               	.L35:
 175:Menu.c        **** void MsetColorMode(uint8_t i){
 488               		.loc 1 175 0
 489 011e 8091 0000 		lds r24,mode
 490 0122 0895      		ret
 491               		.cfi_endproc
 492               	.LFE12:
 494               	.global	getColor
 496               	getColor:
 497               	.LFB14:
 188:Menu.c        ****     if(colorMode>127){//cycle single
 498               		.loc 1 188 0
 499               		.cfi_startproc
 500               	/* prologue: function */
 501               	/* frame size = 0 */
 502               	/* stack size = 0 */
 503               	.L__stack_usage = 0
 189:Menu.c        ****         if(colorMode>134)colorMode=128;
 504               		.loc 1 189 0
 505 0124 8091 0000 		lds r24,colorMode
 506 0128 87FF      		sbrs r24,7
 507 012a 00C0      		rjmp .L38
 190:Menu.c        ****         colorMode++;
 508               		.loc 1 190 0
 509 012c 8738      		cpi r24,lo8(-121)
 510 012e 00F0      		brlo .L39
 190:Menu.c        ****         colorMode++;
 511               		.loc 1 190 0 is_stmt 0 discriminator 1
 512 0130 80E8      		ldi r24,lo8(-128)
 513 0132 8093 0000 		sts colorMode,r24
 514               	.L39:
 191:Menu.c        ****         return colorArray[colorMode-128];
 515               		.loc 1 191 0 is_stmt 1
 516 0136 E091 0000 		lds r30,colorMode
 517 013a EF5F      		subi r30,lo8(-(1))
 518 013c E093 0000 		sts colorMode,r30
 192:Menu.c        ****     }else if(colorMode>63){//cycle all
 519               		.loc 1 192 0
 520 0140 F0E0      		ldi r31,0
 521 0142 E050      		subi r30,lo8(-(colorArray-128))
 522 0144 F040      		sbci r31,hi8(-(colorArray-128))
 523 0146 8081      		ld r24,Z
 524 0148 0895      		ret
 525               	.L38:
 193:Menu.c        ****         return RED;
 526               		.loc 1 193 0
 527 014a 8034      		cpi r24,lo8(64)
 528 014c 00F0      		brlo .L40
 194:Menu.c        ****     }else{//fixed
 529               		.loc 1 194 0
 530 014e 84E0      		ldi r24,lo8(4)
 531               	.L40:
 198:Menu.c        **** void MsetNightMode(uint8_t i){
 532               		.loc 1 198 0
 533 0150 0895      		ret
 534               		.cfi_endproc
 535               	.LFE14:
 537               	.global	isInAllowedTime
 539               	isInAllowedTime:
 540               	.LFB16:
 202:Menu.c        ****     if(EEPROM_read(EE_NIGHTMODE))return (h>=EEPROM_read(EE_ONHOUR) && h<=EEPROM_read(EE_OFFHOUR));
 541               		.loc 1 202 0
 542               		.cfi_startproc
 543               	.LVL38:
 544 0152 CF93      		push r28
 545               	.LCFI0:
 546               		.cfi_def_cfa_offset 3
 547               		.cfi_offset 28, -2
 548               	/* prologue: function */
 549               	/* frame size = 0 */
 550               	/* stack size = 1 */
 551               	.L__stack_usage = 1
 552 0154 C82F      		mov r28,r24
 203:Menu.c        ****     return 1;
 553               		.loc 1 203 0
 554 0156 81E0      		ldi r24,lo8(1)
 555               	.LVL39:
 556 0158 00D0      		rcall EEPROM_read
 557               	.LVL40:
 558 015a 8823      		tst r24
 559 015c 01F0      		breq .L46
 203:Menu.c        ****     return 1;
 560               		.loc 1 203 0 is_stmt 0 discriminator 1
 561 015e 82E0      		ldi r24,lo8(2)
 562 0160 00D0      		rcall EEPROM_read
 563               	.LVL41:
 564 0162 C817      		cp r28,r24
 565 0164 00F0      		brlo .L47
 203:Menu.c        ****     return 1;
 566               		.loc 1 203 0 discriminator 2
 567 0166 83E0      		ldi r24,lo8(3)
 568 0168 00D0      		rcall EEPROM_read
 569               	.LVL42:
 570 016a 91E0      		ldi r25,lo8(1)
 571 016c 8C17      		cp r24,r28
 572 016e 00F4      		brsh .L45
 573 0170 90E0      		ldi r25,0
 574               	.L45:
 575 0172 892F      		mov r24,r25
 576 0174 00C0      		rjmp .L43
 577               	.L47:
 203:Menu.c        ****     return 1;
 578               		.loc 1 203 0
 579 0176 80E0      		ldi r24,0
 580 0178 00C0      		rjmp .L43
 581               	.L46:
 204:Menu.c        **** }
 582               		.loc 1 204 0 is_stmt 1
 583 017a 81E0      		ldi r24,lo8(1)
 584               	.L43:
 585               	/* epilogue start */
 205:Menu.c        **** void MsetNightOff(uint8_t i){
 586               		.loc 1 205 0
 587 017c CF91      		pop r28
 588               	.LVL43:
 589 017e 0895      		ret
 590               		.cfi_endproc
 591               	.LFE16:
 593               	.global	colorMode
 594               		.section .bss
 597               	colorMode:
 598 0000 00        		.zero	1
 599               	.global	mode
 600               		.data
 603               	mode:
 604 0000 01        		.byte	1
 605               	.global	M1rainbow
 606               		.section	.rodata
 609               	M1rainbow:
 610 0000 03        		.byte	3
 611 0001 0000      		.word	gs(MsetRainbow)
 612 0003 07        		.byte	7
 613 0004 0000      		.word	0
 614 0006 08        		.byte	8
 615 0007 0000      		.word	0
 616 0009 0F        		.byte	15
 617 000a 0000      		.word	M0main
 618               	.global	M1reset
 621               	M1reset:
 622 000c 02        		.byte	2
 623 000d 0000      		.word	gs(Mreset)
 624 000f 12        		.byte	18
 625 0010 0000      		.word	0
 626 0012 0F        		.byte	15
 627 0013 0000      		.word	M0main
 628               	.global	M1eventMode
 631               	M1eventMode:
 632 0015 03        		.byte	3
 633 0016 0000      		.word	gs(MsetEventMode)
 634 0018 07        		.byte	7
 635 0019 0000      		.word	0
 636 001b 08        		.byte	8
 637 001c 0000      		.word	0
 638 001e 0F        		.byte	15
 639 001f 0000      		.word	M0main
 640               	.global	M2setminpm
 643               	M2setminpm:
 644 0021 04        		.byte	4
 645 0022 0000      		.word	gs(MsetMinpm)
 646 0024 05        		.byte	5
 647 0025 0000      		.word	0
 648 0027 0B        		.byte	11
 649 0028 0000      		.word	0
 650 002a 01        		.byte	1
 651 002b 0000      		.word	0
 652 002d 0F        		.byte	15
 653 002e 0000      		.word	M1setTime
 654               	.global	M2setminam
 657               	M2setminam:
 658 0030 04        		.byte	4
 659 0031 0000      		.word	gs(MsetMinam)
 660 0033 05        		.byte	5
 661 0034 0000      		.word	0
 662 0036 0B        		.byte	11
 663 0037 0000      		.word	0
 664 0039 01        		.byte	1
 665 003a 0000      		.word	0
 666 003c 0F        		.byte	15
 667 003d 0000      		.word	M1setTime
 668               	.global	M2sethourpm
 671               	M2sethourpm:
 672 003f 0D        		.byte	13
 673 0040 0000      		.word	gs(MsetHourpm)
 674 0042 07        		.byte	7
 675 0043 0000      		.word	0
 676 0045 08        		.byte	8
 677 0046 0000      		.word	0
 678 0048 0A        		.byte	10
 679 0049 0000      		.word	0
 680 004b 0E        		.byte	14
 681 004c 0000      		.word	0
 682 004e 00        		.byte	0
 683 004f 0000      		.word	0
 684 0051 04        		.byte	4
 685 0052 0000      		.word	0
 686 0054 11        		.byte	17
 687 0055 0000      		.word	0
 688 0057 02        		.byte	2
 689 0058 0000      		.word	0
 690 005a 0C        		.byte	12
 691 005b 0000      		.word	0
 692 005d 06        		.byte	6
 693 005e 0000      		.word	0
 694 0060 10        		.byte	16
 695 0061 0000      		.word	0
 696 0063 03        		.byte	3
 697 0064 0000      		.word	0
 698 0066 0F        		.byte	15
 699 0067 0000      		.word	M1setTime
 700               	.global	M2sethouram
 703               	M2sethouram:
 704 0069 0D        		.byte	13
 705 006a 0000      		.word	gs(MsetHouram)
 706 006c 07        		.byte	7
 707 006d 0000      		.word	0
 708 006f 08        		.byte	8
 709 0070 0000      		.word	0
 710 0072 0A        		.byte	10
 711 0073 0000      		.word	0
 712 0075 0E        		.byte	14
 713 0076 0000      		.word	0
 714 0078 00        		.byte	0
 715 0079 0000      		.word	0
 716 007b 04        		.byte	4
 717 007c 0000      		.word	0
 718 007e 11        		.byte	17
 719 007f 0000      		.word	0
 720 0081 02        		.byte	2
 721 0082 0000      		.word	0
 722 0084 0C        		.byte	12
 723 0085 0000      		.word	0
 724 0087 06        		.byte	6
 725 0088 0000      		.word	0
 726 008a 10        		.byte	16
 727 008b 0000      		.word	0
 728 008d 0D        		.byte	13
 729 008e 0000      		.word	0
 730 0090 0F        		.byte	15
 731 0091 0000      		.word	M1setTime
 732               	.global	M1setTime
 735               	M1setTime:
 736 0093 05        		.byte	5
 737 0094 0000      		.word	0
 738 0096 07        		.byte	7
 739 0097 0000      		.word	M2sethouram
 740 0099 08        		.byte	8
 741 009a 0000      		.word	M2sethourpm
 742 009c 0A        		.byte	10
 743 009d 0000      		.word	M2setminam
 744 009f 0E        		.byte	14
 745 00a0 0000      		.word	M2setminpm
 746 00a2 0F        		.byte	15
 747 00a3 0000      		.word	M0main
 748               	.global	M3onhour
 751               	M3onhour:
 752 00a5 5C        		.byte	92
 753 00a6 0000      		.word	gs(MsetNightOn)
 754 00a8 07        		.byte	7
 755 00a9 0000      		.word	0
 756 00ab 08        		.byte	8
 757 00ac 0000      		.word	0
 758 00ae 0A        		.byte	10
 759 00af 0000      		.word	0
 760 00b1 0E        		.byte	14
 761 00b2 0000      		.word	0
 762 00b4 00        		.byte	0
 763 00b5 0000      		.word	0
 764 00b7 04        		.byte	4
 765 00b8 0000      		.word	0
 766 00ba 11        		.byte	17
 767 00bb 0000      		.word	0
 768 00bd 02        		.byte	2
 769 00be 0000      		.word	0
 770 00c0 0C        		.byte	12
 771 00c1 0000      		.word	0
 772 00c3 06        		.byte	6
 773 00c4 0000      		.word	0
 774 00c6 10        		.byte	16
 775 00c7 0000      		.word	0
 776 00c9 0F        		.byte	15
 777 00ca 0000      		.word	M1nightmode
 778               	.global	M2offhour
 781               	M2offhour:
 782 00cc 4C        		.byte	76
 783 00cd 0000      		.word	gs(MsetNightOff)
 784 00cf 07        		.byte	7
 785 00d0 0000      		.word	M3onhour
 786 00d2 08        		.byte	8
 787 00d3 0000      		.word	M3onhour
 788 00d5 0A        		.byte	10
 789 00d6 0000      		.word	M3onhour
 790 00d8 0E        		.byte	14
 791 00d9 0000      		.word	M3onhour
 792 00db 00        		.byte	0
 793 00dc 0000      		.word	M3onhour
 794 00de 04        		.byte	4
 795 00df 0000      		.word	M3onhour
 796 00e1 11        		.byte	17
 797 00e2 0000      		.word	M3onhour
 798 00e4 02        		.byte	2
 799 00e5 0000      		.word	M3onhour
 800 00e7 0C        		.byte	12
 801 00e8 0000      		.word	M3onhour
 802 00ea 06        		.byte	6
 803 00eb 0000      		.word	M3onhour
 804 00ed 10        		.byte	16
 805 00ee 0000      		.word	M3onhour
 806 00f0 0F        		.byte	15
 807 00f1 0000      		.word	M1nightmode
 808               	.global	M1nightmode
 811               	M1nightmode:
 812 00f3 34        		.byte	52
 813 00f4 0000      		.word	gs(MsetNightMode)
 814 00f6 07        		.byte	7
 815 00f7 0000      		.word	0
 816 00f9 08        		.byte	8
 817 00fa 0000      		.word	M2offhour
 818 00fc 0A        		.byte	10
 819 00fd 0000      		.word	M2offhour
 820 00ff 0F        		.byte	15
 821 0100 0000      		.word	M0main
 822               	.global	M1cmode
 825               	M1cmode:
 826 0102 2A        		.byte	42
 827 0103 0000      		.word	gs(MsetColorMode)
 828 0105 07        		.byte	7
 829 0106 0000      		.word	0
 830 0108 08        		.byte	8
 831 0109 0000      		.word	0
 832 010b 0A        		.byte	10
 833 010c 0000      		.word	0
 834 010e 0E        		.byte	14
 835 010f 0000      		.word	0
 836 0111 00        		.byte	0
 837 0112 0000      		.word	0
 838 0114 04        		.byte	4
 839 0115 0000      		.word	0
 840 0117 11        		.byte	17
 841 0118 0000      		.word	0
 842 011a 02        		.byte	2
 843 011b 0000      		.word	0
 844 011d 0C        		.byte	12
 845 011e 0000      		.word	0
 846 0120 0F        		.byte	15
 847 0121 0000      		.word	M0main
 848               	.global	M1mode
 851               	M1mode:
 852 0123 15        		.byte	21
 853 0124 0000      		.word	gs(MsetMode)
 854 0126 07        		.byte	7
 855 0127 0000      		.word	0
 856 0129 08        		.byte	8
 857 012a 0000      		.word	0
 858 012c 0A        		.byte	10
 859 012d 0000      		.word	0
 860 012f 0E        		.byte	14
 861 0130 0000      		.word	0
 862 0132 0F        		.byte	15
 863 0133 0000      		.word	M0main
 864               	.global	M0main
 867               	M0main:
 868 0135 08        		.byte	8
 869 0136 0000      		.word	0
 870 0138 07        		.byte	7
 871 0139 0000      		.word	M1mode
 872 013b 08        		.byte	8
 873 013c 0000      		.word	M1cmode
 874 013e 0A        		.byte	10
 875 013f 0000      		.word	M1nightmode
 876 0141 0E        		.byte	14
 877 0142 0000      		.word	M1setTime
 878 0144 00        		.byte	0
 879 0145 0000      		.word	M1eventMode
 880 0147 04        		.byte	4
 881 0148 0000      		.word	M1reset
 882 014a 11        		.byte	17
 883 014b 0000      		.word	M1rainbow
 884 014d 0F        		.byte	15
 885 014e 0000      		.word	0
 886               		.comm	USI_I2C_Master_State,1,1
 887               		.comm	currentTime,5,1
 890               	colorArray:
 891 0150 07        		.byte	7
 892 0151 03        		.byte	3
 893 0152 01        		.byte	1
 894 0153 05        		.byte	5
 895 0154 04        		.byte	4
 896 0155 06        		.byte	6
 897 0156 02        		.byte	2
 898               		.text
 899               	.Letext0:
 900               		.file 2 "/usr/lib/avr/include/stdint.h"
 901               		.file 3 "RTC.h"
 902               		.file 4 "Menu.h"
 903               		.file 5 "defines.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 Menu.c
     /tmp/ccZz77s8.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccZz77s8.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccZz77s8.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccZz77s8.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccZz77s8.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccZz77s8.s:12     .text:0000000000000000 MsetRainbow
     /tmp/ccZz77s8.s:28     .text:0000000000000002 MsetEventMode
     /tmp/ccZz77s8.s:41     .text:0000000000000004 MsetHouram
     /tmp/ccZz77s8.s:54     .text:0000000000000006 MsetHourpm
     /tmp/ccZz77s8.s:67     .text:0000000000000008 MsetMinam
     /tmp/ccZz77s8.s:80     .text:000000000000000a MsetMinpm
     /tmp/ccZz77s8.s:93     .text:000000000000000c findNextEntry
     /tmp/ccZz77s8.s:129    .text:000000000000002c getSubMenu
     /tmp/ccZz77s8.s:160    .text:0000000000000044 EEPROM_write
     /tmp/ccZz77s8.s:191    .text:0000000000000058 MsetMode
     /tmp/ccZz77s8.s:603    .data:0000000000000000 mode
     /tmp/ccZz77s8.s:234    .text:0000000000000078 MsetColorMode
     /tmp/ccZz77s8.s:890    .rodata:0000000000000150 colorArray
     /tmp/ccZz77s8.s:597    .bss:0000000000000000 colorMode
     /tmp/ccZz77s8.s:292    .text:00000000000000ac MsetNightMode
     /tmp/ccZz77s8.s:317    .text:00000000000000b8 MsetNightOff
     /tmp/ccZz77s8.s:338    .text:00000000000000c0 MsetNightOn
     /tmp/ccZz77s8.s:359    .text:00000000000000c8 Mreset
     /tmp/ccZz77s8.s:411    .text:00000000000000ea EEPROM_read
     /tmp/ccZz77s8.s:440    .text:00000000000000fa Minit
     /tmp/ccZz77s8.s:464    .text:0000000000000108 getMode
     /tmp/ccZz77s8.s:496    .text:0000000000000124 getColor
     /tmp/ccZz77s8.s:539    .text:0000000000000152 isInAllowedTime
     /tmp/ccZz77s8.s:609    .rodata:0000000000000000 M1rainbow
     /tmp/ccZz77s8.s:867    .rodata:0000000000000135 M0main
     /tmp/ccZz77s8.s:621    .rodata:000000000000000c M1reset
     /tmp/ccZz77s8.s:631    .rodata:0000000000000015 M1eventMode
     /tmp/ccZz77s8.s:643    .rodata:0000000000000021 M2setminpm
     /tmp/ccZz77s8.s:735    .rodata:0000000000000093 M1setTime
     /tmp/ccZz77s8.s:657    .rodata:0000000000000030 M2setminam
     /tmp/ccZz77s8.s:671    .rodata:000000000000003f M2sethourpm
     /tmp/ccZz77s8.s:703    .rodata:0000000000000069 M2sethouram
     /tmp/ccZz77s8.s:751    .rodata:00000000000000a5 M3onhour
     /tmp/ccZz77s8.s:811    .rodata:00000000000000f3 M1nightmode
     /tmp/ccZz77s8.s:781    .rodata:00000000000000cc M2offhour
     /tmp/ccZz77s8.s:825    .rodata:0000000000000102 M1cmode
     /tmp/ccZz77s8.s:851    .rodata:0000000000000123 M1mode
                            *COM*:0000000000000001 USI_I2C_Master_State
                            *COM*:0000000000000005 currentTime

UNDEFINED SYMBOLS
__mulhi3
__do_copy_data
__do_clear_bss
