
ar1000test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000037e  00800100  0000101a  000010ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000101a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080047e  0080047e  0000142c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000142c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001440  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00001480  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001782  00000000  00000000  000014a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a73  00000000  00000000  00002c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007d5  00000000  00000000  0000369d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000458  00000000  00000000  00003e74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065f  00000000  00000000  000042cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000126c  00000000  00000000  0000492b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00005b97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	14 e0       	ldi	r17, 0x04	; 4
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea e1       	ldi	r30, 0x1A	; 26
      a0:	f0 e1       	ldi	r31, 0x10	; 16
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 37       	cpi	r26, 0x7E	; 126
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	24 e0       	ldi	r18, 0x04	; 4
      b4:	ae e7       	ldi	r26, 0x7E	; 126
      b6:	b4 e0       	ldi	r27, 0x04	; 4
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a4 38       	cpi	r26, 0x84	; 132
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 26 04 	call	0x84c	; 0x84c <main>
      c6:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <uart_putchar>:
	
	ar1000_init(); //Initialize AR1000
}

static int uart_putchar(char c, FILE *stream)
{
      ce:	cf 93       	push	r28
      d0:	c8 2f       	mov	r28, r24
    if (c == '\n') uart_putchar('\r', stream);
      d2:	8a 30       	cpi	r24, 0x0A	; 10
      d4:	19 f4       	brne	.+6      	; 0xdc <uart_putchar+0xe>
      d6:	8d e0       	ldi	r24, 0x0D	; 13
      d8:	0e 94 67 00 	call	0xce	; 0xce <uart_putchar>
  
    loop_until_bit_is_set(UCSR0A, UDRE0);
      dc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
      e0:	85 ff       	sbrs	r24, 5
      e2:	fc cf       	rjmp	.-8      	; 0xdc <uart_putchar+0xe>
    UDR0 = c;
      e4:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    
    return 0;
}
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	90 e0       	ldi	r25, 0x00	; 0
      ec:	cf 91       	pop	r28
      ee:	08 95       	ret

000000f0 <print_array>:
    
    register_values[array_address] = array_value;
}

void print_array(void)
{
      f0:	ef 92       	push	r14
      f2:	ff 92       	push	r15
      f4:	0f 93       	push	r16
      f6:	1f 93       	push	r17
      f8:	cf 93       	push	r28
      fa:	df 93       	push	r29
	//prints the values of the array that is used to control the radio
	
	printf("\n\nArray position: value\n");
      fc:	88 e4       	ldi	r24, 0x48	; 72
      fe:	91 e0       	ldi	r25, 0x01	; 1
     100:	0e 94 21 05 	call	0xa42	; 0xa42 <puts>
     104:	06 e1       	ldi	r16, 0x16	; 22
     106:	11 e0       	ldi	r17, 0x01	; 1

	for(int i = 0 ; i < 18 ; i++)
     108:	c0 e0       	ldi	r28, 0x00	; 0
     10a:	d0 e0       	ldi	r29, 0x00	; 0
		printf("0x%.2X: 0x%.4X\n", i, register_values[i]);
     10c:	80 e6       	ldi	r24, 0x60	; 96
     10e:	e8 2e       	mov	r14, r24
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	f8 2e       	mov	r15, r24
     114:	f8 01       	movw	r30, r16
     116:	80 81       	ld	r24, Z
     118:	91 81       	ldd	r25, Z+1	; 0x01
     11a:	0e 5f       	subi	r16, 0xFE	; 254
     11c:	1f 4f       	sbci	r17, 0xFF	; 255
     11e:	9f 93       	push	r25
     120:	8f 93       	push	r24
     122:	df 93       	push	r29
     124:	cf 93       	push	r28
     126:	ff 92       	push	r15
     128:	ef 92       	push	r14
     12a:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>
{
	//prints the values of the array that is used to control the radio
	
	printf("\n\nArray position: value\n");

	for(int i = 0 ; i < 18 ; i++)
     12e:	21 96       	adiw	r28, 0x01	; 1
     130:	0f 90       	pop	r0
     132:	0f 90       	pop	r0
     134:	0f 90       	pop	r0
     136:	0f 90       	pop	r0
     138:	0f 90       	pop	r0
     13a:	0f 90       	pop	r0
     13c:	c2 31       	cpi	r28, 0x12	; 18
     13e:	d1 05       	cpc	r29, r1
     140:	49 f7       	brne	.-46     	; 0x114 <print_array+0x24>
		printf("0x%.2X: 0x%.4X\n", i, register_values[i]);
}
     142:	df 91       	pop	r29
     144:	cf 91       	pop	r28
     146:	1f 91       	pop	r17
     148:	0f 91       	pop	r16
     14a:	ff 90       	pop	r15
     14c:	ef 90       	pop	r14
     14e:	08 95       	ret

00000150 <uart_getchar>:
    return 0;
}

uint8_t uart_getchar(void)
{
    while( !(UCSR0A & (1<<RXC0)) );
     150:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     154:	87 ff       	sbrs	r24, 7
     156:	fc cf       	rjmp	.-8      	; 0x150 <uart_getchar>
    return(UDR0);
     158:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
     15c:	08 95       	ret

0000015e <uart_gethex>:

//Reads in ASCII characters, converts to decimal and returns decimal variable
//length_to_read is how many characters we want to read, "A33C" would be four characters long
int uart_gethex(uint8_t length_to_read)
{
     15e:	df 92       	push	r13
     160:	ef 92       	push	r14
     162:	ff 92       	push	r15
     164:	0f 93       	push	r16
     166:	1f 93       	push	r17
     168:	cf 93       	push	r28
     16a:	df 93       	push	r29
     16c:	d8 2e       	mov	r13, r24
	int decimal_value = 0;
	unsigned char input_character;

	for(uint8_t x = 0 ; x < length_to_read ; x++)
     16e:	e1 2c       	mov	r14, r1

//Reads in ASCII characters, converts to decimal and returns decimal variable
//length_to_read is how many characters we want to read, "A33C" would be four characters long
int uart_gethex(uint8_t length_to_read)
{
	int decimal_value = 0;
     170:	20 e0       	ldi	r18, 0x00	; 0
     172:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char input_character;

	for(uint8_t x = 0 ; x < length_to_read ; x++)
     174:	ed 14       	cp	r14, r13
     176:	09 f1       	breq	.+66     	; 0x1ba <uart_gethex+0x5c>
	{
		decimal_value <<= 4; //Every time we loop, make room for another 4-bit hex value to be masked into decimal_value
     178:	e9 01       	movw	r28, r18
     17a:	84 e0       	ldi	r24, 0x04	; 4
     17c:	cc 0f       	add	r28, r28
     17e:	dd 1f       	adc	r29, r29
     180:	8a 95       	dec	r24
     182:	e1 f7       	brne	.-8      	; 0x17c <uart_gethex+0x1e>
		
		input_character = uart_getchar();
     184:	0e 94 a8 00 	call	0x150	; 0x150 <uart_getchar>
     188:	f8 2e       	mov	r15, r24
		printf("%c", input_character);	
     18a:	08 2f       	mov	r16, r24
     18c:	10 e0       	ldi	r17, 0x00	; 0
     18e:	c8 01       	movw	r24, r16
     190:	0e 94 1b 05 	call	0xa36	; 0xa36 <putchar>

		//Check the character for validity
		if( (input_character >= '0') && (input_character <= '9') ) 
     194:	80 ed       	ldi	r24, 0xD0	; 208
     196:	8f 0d       	add	r24, r15
     198:	8a 30       	cpi	r24, 0x0A	; 10
     19a:	20 f4       	brcc	.+8      	; 0x1a4 <uart_gethex+0x46>
			decimal_value |= (input_character - '0');
     19c:	98 01       	movw	r18, r16
     19e:	20 53       	subi	r18, 0x30	; 48
     1a0:	31 09       	sbc	r19, r1
     1a2:	07 c0       	rjmp	.+14     	; 0x1b2 <uart_gethex+0x54>
		
		else if( (input_character >= 'a') && (input_character <= 'f') )
     1a4:	8f e9       	ldi	r24, 0x9F	; 159
     1a6:	8f 0d       	add	r24, r15
     1a8:	86 30       	cpi	r24, 0x06	; 6
     1aa:	48 f4       	brcc	.+18     	; 0x1be <uart_gethex+0x60>
			decimal_value |= (input_character - 'a');
     1ac:	98 01       	movw	r18, r16
     1ae:	21 56       	subi	r18, 0x61	; 97
     1b0:	31 09       	sbc	r19, r1
     1b2:	2c 2b       	or	r18, r28
     1b4:	3d 2b       	or	r19, r29
int uart_gethex(uint8_t length_to_read)
{
	int decimal_value = 0;
	unsigned char input_character;

	for(uint8_t x = 0 ; x < length_to_read ; x++)
     1b6:	e3 94       	inc	r14
     1b8:	dd cf       	rjmp	.-70     	; 0x174 <uart_gethex+0x16>
     1ba:	c9 01       	movw	r24, r18
     1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <uart_gethex+0x64>
			decimal_value |= (input_character - 'a');
		
		else
		{
			//We have a non-legal character. Handle the exception however you want
			return(0);
     1be:	80 e0       	ldi	r24, 0x00	; 0
     1c0:	90 e0       	ldi	r25, 0x00	; 0
		}
	}

	return(decimal_value);
}
     1c2:	df 91       	pop	r29
     1c4:	cf 91       	pop	r28
     1c6:	1f 91       	pop	r17
     1c8:	0f 91       	pop	r16
     1ca:	ff 90       	pop	r15
     1cc:	ef 90       	pop	r14
     1ce:	df 90       	pop	r13
     1d0:	08 95       	ret

000001d2 <set_array_value>:

//This function reads in an address and array value, and stores the value into the array address
//it does not change the values in the ar1000, you will need to use the "send array valus"
//function in order to send the new values to the ar1000	
void set_array_value(void)
{
     1d2:	0f 93       	push	r16
     1d4:	1f 93       	push	r17
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
	uint8_t array_address;
	uint16_t array_value;
	
	printf("\n\nArray Address (2 digit hex value): ");
     1da:	80 e7       	ldi	r24, 0x70	; 112
     1dc:	91 e0       	ldi	r25, 0x01	; 1
     1de:	9f 93       	push	r25
     1e0:	8f 93       	push	r24
     1e2:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>
	array_address = uart_gethex(2);
     1e6:	82 e0       	ldi	r24, 0x02	; 2
     1e8:	0e 94 af 00 	call	0x15e	; 0x15e <uart_gethex>
     1ec:	ec 01       	movw	r28, r24
     1ee:	dd 27       	eor	r29, r29
	printf("\nArray Address is: %x", array_address);
     1f0:	df 93       	push	r29
     1f2:	cf 93       	push	r28
     1f4:	86 e9       	ldi	r24, 0x96	; 150
     1f6:	91 e0       	ldi	r25, 0x01	; 1
     1f8:	9f 93       	push	r25
     1fa:	8f 93       	push	r24
     1fc:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>
    
   	printf("\n\nArray value (4 digit hex value): ");
     200:	8c ea       	ldi	r24, 0xAC	; 172
     202:	91 e0       	ldi	r25, 0x01	; 1
     204:	9f 93       	push	r25
     206:	8f 93       	push	r24
     208:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>
	array_value = uart_gethex(4);
     20c:	84 e0       	ldi	r24, 0x04	; 4
     20e:	0e 94 af 00 	call	0x15e	; 0x15e <uart_gethex>
     212:	8c 01       	movw	r16, r24
    printf("\nArray value is: %x", array_value);
     214:	1f 93       	push	r17
     216:	8f 93       	push	r24
     218:	80 ed       	ldi	r24, 0xD0	; 208
     21a:	91 e0       	ldi	r25, 0x01	; 1
     21c:	9f 93       	push	r25
     21e:	8f 93       	push	r24
     220:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>
    
    register_values[array_address] = array_value;
     224:	cc 0f       	add	r28, r28
     226:	dd 1f       	adc	r29, r29
     228:	ca 5e       	subi	r28, 0xEA	; 234
     22a:	de 4f       	sbci	r29, 0xFE	; 254
     22c:	08 83       	st	Y, r16
     22e:	19 83       	std	Y+1, r17	; 0x01
}
     230:	8d b7       	in	r24, 0x3d	; 61
     232:	9e b7       	in	r25, 0x3e	; 62
     234:	0c 96       	adiw	r24, 0x0c	; 12
     236:	0f b6       	in	r0, 0x3f	; 63
     238:	f8 94       	cli
     23a:	9e bf       	out	0x3e, r25	; 62
     23c:	0f be       	out	0x3f, r0	; 63
     23e:	8d bf       	out	0x3d, r24	; 61
     240:	df 91       	pop	r29
     242:	cf 91       	pop	r28
     244:	1f 91       	pop	r17
     246:	0f 91       	pop	r16
     248:	08 95       	ret

0000024a <delay_us>:
//Because we are using 16MHz and a prescalar of 8 on Timer0, we have to double x
void delay_us(uint16_t x)
{
	while(x > 256)
	{
		TIFR0 = (1<<TOV0); //Clear any interrupt flags on Timer0
     24a:	21 e0       	ldi	r18, 0x01	; 1
//general short delays
//Uses internal timer do a fairly accurate 1us
//Because we are using 16MHz and a prescalar of 8 on Timer0, we have to double x
void delay_us(uint16_t x)
{
	while(x > 256)
     24c:	81 30       	cpi	r24, 0x01	; 1
     24e:	31 e0       	ldi	r19, 0x01	; 1
     250:	93 07       	cpc	r25, r19
     252:	30 f0       	brcs	.+12     	; 0x260 <delay_us+0x16>
	{
		TIFR0 = (1<<TOV0); //Clear any interrupt flags on Timer0
     254:	25 bb       	out	0x15, r18	; 21
		TCNT0 = 0; //Preload Timer0 for 256 clicks. Should be 1us per click
     256:	16 bc       	out	0x26, r1	; 38
		while( (TIFR0 & (1<<TOV0)) == 0);
     258:	a8 9b       	sbis	0x15, 0	; 21
     25a:	fe cf       	rjmp	.-4      	; 0x258 <delay_us+0xe>
		
		x -= 256;
     25c:	9a 95       	dec	r25
     25e:	f6 cf       	rjmp	.-20     	; 0x24c <delay_us+0x2>
	}

	TIFR0 = (1<<TOV0); //Clear any interrupt flags on Timer0
     260:	91 e0       	ldi	r25, 0x01	; 1
     262:	95 bb       	out	0x15, r25	; 21
	TCNT0 = 256 - x; //256 - 125 = 131 : Preload Timer0 for x clicks. Should be 1us per click
     264:	81 95       	neg	r24
     266:	86 bd       	out	0x26, r24	; 38
	while( (TIFR0 & (1<<TOV0)) == 0);
     268:	a8 9b       	sbis	0x15, 0	; 21
     26a:	fe cf       	rjmp	.-4      	; 0x268 <delay_us+0x1e>
}
     26c:	08 95       	ret

0000026e <delay_ms>:

//General short delays
void delay_ms(uint16_t x)
{
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	ec 01       	movw	r28, r24
	for ( ; x > 0 ; x--)
     274:	20 97       	sbiw	r28, 0x00	; 0
     276:	31 f0       	breq	.+12     	; 0x284 <delay_ms+0x16>
		delay_us(1000);
     278:	88 ee       	ldi	r24, 0xE8	; 232
     27a:	93 e0       	ldi	r25, 0x03	; 3
     27c:	0e 94 25 01 	call	0x24a	; 0x24a <delay_us>
}

//General short delays
void delay_ms(uint16_t x)
{
	for ( ; x > 0 ; x--)
     280:	21 97       	sbiw	r28, 0x01	; 1
     282:	f8 cf       	rjmp	.-16     	; 0x274 <delay_ms+0x6>
		delay_us(1000);
}
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	08 95       	ret

0000028a <i2c_SendStop>:
}

void i2c_SendStop(void)
{
	// transmit stop condition
	TWCR = (1<<TWSTO);
     28a:	80 e1       	ldi	r24, 0x10	; 16
     28c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     290:	08 95       	ret

00000292 <i2c_WaitForComplete>:
}

void i2c_WaitForComplete(void)
{
	// wait for any previous i2c stuff to complete before sending new data
	while (!(TWCR & (1<<TWINT)));
     292:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     296:	87 ff       	sbrs	r24, 7
     298:	fc cf       	rjmp	.-8      	; 0x292 <i2c_WaitForComplete>
}
     29a:	08 95       	ret

0000029c <i2c_SendStart>:
//==========================

void i2c_SendStart(void)
{
	// send start condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     29c:	84 ea       	ldi	r24, 0xA4	; 164
     29e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	i2c_WaitForComplete();
     2a2:	0c 94 49 01 	jmp	0x292	; 0x292 <i2c_WaitForComplete>

000002a6 <i2c_SendByte>:
}

unsigned char i2c_SendByte(unsigned char data)
{
	// save data to the TWDR
	TWDR = data;
     2a6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	// begin send
	TWCR = (1<<TWINT)|(1<<TWEN);
     2aa:	84 e8       	ldi	r24, 0x84	; 132
     2ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     2b0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     2b4:	87 ff       	sbrs	r24, 7
     2b6:	fc cf       	rjmp	.-8      	; 0x2b0 <i2c_SendByte+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	uint8_t twst = TWSR & 0xF8;
     2b8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     2bc:	98 7f       	andi	r25, 0xF8	; 248
	
	#ifdef I2CDEBUG
		printf("twst: 0x%02X\n\n", twst);
	#endif
	
	if( twst == 0x18) return 1; //SKA+W was tranmitted, ACK received
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	98 31       	cpi	r25, 0x18	; 24
     2c2:	21 f0       	breq	.+8      	; 0x2cc <i2c_SendByte+0x26>
     2c4:	98 32       	cpi	r25, 0x28	; 40
     2c6:	11 f0       	breq	.+4      	; 0x2cc <i2c_SendByte+0x26>
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	08 95       	ret
	if( twst == 0x28) return 1; //Data was tranmitted, ACK received
	return 0;
}
     2cc:	08 95       	ret

000002ce <ar1000_write>:
	
	return(temp);
}

void ar1000_write(char reg_address, uint16_t reg_value)
{
     2ce:	ff 92       	push	r15
     2d0:	0f 93       	push	r16
     2d2:	1f 93       	push	r17
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	f8 2e       	mov	r15, r24
     2da:	16 2f       	mov	r17, r22
     2dc:	07 2f       	mov	r16, r23
}

void i2c_SendStop(void)
{
	// transmit stop condition
	TWCR = (1<<TWSTO);
     2de:	d0 e1       	ldi	r29, 0x10	; 16
	char ack;
	uint8_t value1 = (reg_value & 0xFF00) >> 8;
	uint8_t value2 = (reg_value & 0x00FF);

AGAIN:
	i2c_SendStart(); //Send start condition 
     2e0:	0e 94 4e 01 	call	0x29c	; 0x29c <i2c_SendStart>
	ack = i2c_SendByte(AR1000_W);	
     2e4:	80 e2       	ldi	r24, 0x20	; 32
     2e6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_SendByte>
     2ea:	c8 2f       	mov	r28, r24
	ack &= i2c_SendByte(reg_address); //Send address to write to
     2ec:	8f 2d       	mov	r24, r15
     2ee:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_SendByte>
     2f2:	c8 23       	and	r28, r24
	ack &= i2c_SendByte(value1); //Send the two data bytes to be stored
     2f4:	80 2f       	mov	r24, r16
     2f6:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_SendByte>
     2fa:	c8 23       	and	r28, r24
	ack &= i2c_SendByte(value2);
     2fc:	81 2f       	mov	r24, r17
     2fe:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_SendByte>
}

void i2c_SendStop(void)
{
	// transmit stop condition
	TWCR = (1<<TWSTO);
     302:	d0 93 bc 00 	sts	0x00BC, r29	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	ack &= i2c_SendByte(reg_address); //Send address to write to
	ack &= i2c_SendByte(value1); //Send the two data bytes to be stored
	ack &= i2c_SendByte(value2);
	i2c_SendStop();

	if(ack == 0)
     306:	8c 23       	and	r24, r28
     308:	59 f3       	breq	.-42     	; 0x2e0 <ar1000_write+0x12>
		#ifdef I2CDEBUG
			printf("!"); //No ACK!
		#endif
		goto AGAIN;
	}
}
     30a:	df 91       	pop	r29
     30c:	cf 91       	pop	r28
     30e:	1f 91       	pop	r17
     310:	0f 91       	pop	r16
     312:	ff 90       	pop	r15
     314:	08 95       	ret

00000316 <ar1000_write_array>:

void ar1000_write_array(void)
{
     316:	0f 93       	push	r16
     318:	1f 93       	push	r17
     31a:	cf 93       	push	r28
	//The example AR1000 code disables the analog and digital blocks
	// then write to the 0x01 to 0x11 registers
	// then enables the analog and digital blocks - so that's what we will do as well

	//Write the first register
	ar1000_write(0, register_values[0] & 0xFFFE); //<--- Notice we force the enable bit to zero
     31c:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <register_values>
     320:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <register_values+0x1>
     324:	6e 7f       	andi	r22, 0xFE	; 254
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	0e 94 67 01 	call	0x2ce	; 0x2ce <ar1000_write>
     32c:	08 e1       	ldi	r16, 0x18	; 24
     32e:	11 e0       	ldi	r17, 0x01	; 1
     330:	c1 e0       	ldi	r28, 0x01	; 1

	for(int i = 1 ; i < 18 ; i++)
		ar1000_write(i, register_values[i]); //Write registers 1 to 17 to AR1000
     332:	f8 01       	movw	r30, r16
     334:	61 91       	ld	r22, Z+
     336:	71 91       	ld	r23, Z+
     338:	8f 01       	movw	r16, r30
     33a:	8c 2f       	mov	r24, r28
     33c:	0e 94 67 01 	call	0x2ce	; 0x2ce <ar1000_write>
     340:	cf 5f       	subi	r28, 0xFF	; 255
	// then enables the analog and digital blocks - so that's what we will do as well

	//Write the first register
	ar1000_write(0, register_values[0] & 0xFFFE); //<--- Notice we force the enable bit to zero

	for(int i = 1 ; i < 18 ; i++)
     342:	c2 31       	cpi	r28, 0x12	; 18
     344:	b1 f7       	brne	.-20     	; 0x332 <ar1000_write_array+0x1c>
		ar1000_write(i, register_values[i]); //Write registers 1 to 17 to AR1000
	
	ar1000_write(0, register_values[0]); //Re-write the first register, this will set the enable bit
     346:	60 91 16 01 	lds	r22, 0x0116	; 0x800116 <register_values>
     34a:	70 91 17 01 	lds	r23, 0x0117	; 0x800117 <register_values+0x1>
     34e:	80 e0       	ldi	r24, 0x00	; 0
}
     350:	cf 91       	pop	r28
     352:	1f 91       	pop	r17
     354:	0f 91       	pop	r16
	ar1000_write(0, register_values[0] & 0xFFFE); //<--- Notice we force the enable bit to zero

	for(int i = 1 ; i < 18 ; i++)
		ar1000_write(i, register_values[i]); //Write registers 1 to 17 to AR1000
	
	ar1000_write(0, register_values[0]); //Re-write the first register, this will set the enable bit
     356:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <ar1000_write>

0000035a <i2c_ReceiveByte>:
}

unsigned char i2c_ReceiveByte(unsigned char ackFlag)
{
	// begin receive over i2c
	if( ackFlag )
     35a:	88 23       	and	r24, r24
     35c:	29 f0       	breq	.+10     	; 0x368 <i2c_ReceiveByte+0xe>
	{
		// ackFlag = TRUE: ACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT)|BV(TWEA));
     35e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     362:	8f 70       	andi	r24, 0x0F	; 15
     364:	80 6c       	ori	r24, 0xC0	; 192
     366:	04 c0       	rjmp	.+8      	; 0x370 <i2c_ReceiveByte+0x16>
	}
	else
	{
		// ackFlag = FALSE: NACK the recevied data
		outb(TWCR, (inb(TWCR)&TWCR_CMD_MASK)|BV(TWINT));
     368:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     36c:	8f 70       	andi	r24, 0x0F	; 15
     36e:	80 68       	ori	r24, 0x80	; 128
     370:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	}

	i2c_WaitForComplete();
     374:	0e 94 49 01 	call	0x292	; 0x292 <i2c_WaitForComplete>

	// retieve received data byte from i2c TWDR
	return( inb(TWDR) );
     378:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
}
     37c:	08 95       	ret

0000037e <ar1000_read>:
		printf("0x%.2X: 0x%.4X\n", i, register_values[i]);
}

//Reads a memory register from the AR1000
uint16_t ar1000_read(uint8_t address_to_read)
{
     37e:	cf 93       	push	r28
     380:	df 93       	push	r29
     382:	d8 2f       	mov	r29, r24
	char byte1 = 0, byte2 = 0;
	char ack;
	
AGAIN:
	i2c_SendStart(); //Send start condition 
     384:	0e 94 4e 01 	call	0x29c	; 0x29c <i2c_SendStart>
	ack = i2c_SendByte(AR1000_W);	 //Send slave device address with write
     388:	80 e2       	ldi	r24, 0x20	; 32
     38a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_SendByte>
     38e:	c8 2f       	mov	r28, r24
	ack &= i2c_SendByte(address_to_read);	//Send address to read
     390:	8d 2f       	mov	r24, r29
     392:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_SendByte>
	if(ack == 0)
     396:	8c 23       	and	r24, r28
     398:	a9 f3       	breq	.-22     	; 0x384 <ar1000_read+0x6>
		#endif
		goto AGAIN;
	}
	
	
	i2c_SendStart(); //Send start condition 
     39a:	0e 94 4e 01 	call	0x29c	; 0x29c <i2c_SendStart>
	i2c_SendByte(AR1000_R);	 //Ask device to read the value at the requested address
     39e:	81 e2       	ldi	r24, 0x21	; 33
     3a0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <i2c_SendByte>
	
	if(inb(TWSR) == TW_MR_SLA_ACK)
     3a4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     3a8:	80 34       	cpi	r24, 0x40	; 64
     3aa:	41 f4       	brne	.+16     	; 0x3bc <ar1000_read+0x3e>
	{
		byte1 = i2c_ReceiveByte(TRUE);
     3ac:	8f ef       	ldi	r24, 0xFF	; 255
     3ae:	0e 94 ad 01 	call	0x35a	; 0x35a <i2c_ReceiveByte>
     3b2:	c8 2f       	mov	r28, r24
		byte2 = i2c_ReceiveByte(TRUE);
     3b4:	8f ef       	ldi	r24, 0xFF	; 255
     3b6:	0e 94 ad 01 	call	0x35a	; 0x35a <i2c_ReceiveByte>
     3ba:	0a c0       	rjmp	.+20     	; 0x3d0 <ar1000_read+0x52>
	{
		// device did not ACK it's address,
		// data will not be transferred
		// return error
		//retval = I2C_ERROR_NODEV;
		printf("\n\tAck failed!");
     3bc:	84 ee       	ldi	r24, 0xE4	; 228
     3be:	91 e0       	ldi	r25, 0x01	; 1
     3c0:	9f 93       	push	r25
     3c2:	8f 93       	push	r24
     3c4:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>
     3c8:	0f 90       	pop	r0
     3ca:	0f 90       	pop	r0
}

//Reads a memory register from the AR1000
uint16_t ar1000_read(uint8_t address_to_read)
{
	char byte1 = 0, byte2 = 0;
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	c0 e0       	ldi	r28, 0x00	; 0
}

void i2c_SendStop(void)
{
	// transmit stop condition
	TWCR = (1<<TWSTO);
     3d0:	90 e1       	ldi	r25, 0x10	; 16
     3d2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	}

	i2c_SendStop();
	
	//Combine two bytes into one 16-bit word
	int16_t temp = byte1 << 8;	
     3d6:	90 e0       	ldi	r25, 0x00	; 0
	temp |= byte2;
	
	return(temp);
}
     3d8:	9c 2b       	or	r25, r28
     3da:	df 91       	pop	r29
     3dc:	cf 91       	pop	r28
     3de:	08 95       	ret

000003e0 <ar1000_rssi>:
#define MASK_RSSI 	0xFE00
#define SHIFT_RSSI  9

	uint16_t rssi;
	
	rssi = ar1000_read(ADDR_RSSI);
     3e0:	82 e1       	ldi	r24, 0x12	; 18
     3e2:	0e 94 bf 01 	call	0x37e	; 0x37e <ar1000_read>
	rssi &= MASK_RSSI;
     3e6:	88 27       	eor	r24, r24
     3e8:	9e 7f       	andi	r25, 0xFE	; 254
	rssi >>= 9;

	return(rssi);
}
     3ea:	89 2f       	mov	r24, r25
     3ec:	86 95       	lsr	r24
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	08 95       	ret

000003f2 <ar1000_setvolume>:
// There are two different fields about volume control in AR1000F
//  Volume : D7~D10 in register R3
//  Volume2 : D12~D15 in register R14
//  22 combinations of (volume2 + volume) are recommended.
void ar1000_setvolume(uint8_t volume_level)
{
     3f2:	0f 93       	push	r16
     3f4:	1f 93       	push	r17
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	c8 2f       	mov	r28, r24
	uint16_t reg3, reg14;
	
	reg3 = ar1000_read(3) & 0xF87F; //Zero out bits D7-D10
     3fc:	83 e0       	ldi	r24, 0x03	; 3
     3fe:	0e 94 bf 01 	call	0x37e	; 0x37e <ar1000_read>
     402:	8c 01       	movw	r16, r24
     404:	0f 77       	andi	r16, 0x7F	; 127
     406:	18 7f       	andi	r17, 0xF8	; 248
	reg3 |= ( (AR1000vol[volume_level] & 0x0F) << 7); //Mask in D7-D10
     408:	d0 e0       	ldi	r29, 0x00	; 0
     40a:	c0 50       	subi	r28, 0x00	; 0
     40c:	df 4f       	sbci	r29, 0xFF	; 255
     40e:	98 81       	ld	r25, Y
     410:	9f 70       	andi	r25, 0x0F	; 15
     412:	80 e8       	ldi	r24, 0x80	; 128
     414:	98 9f       	mul	r25, r24
     416:	90 01       	movw	r18, r0
     418:	11 24       	eor	r1, r1
     41a:	02 2b       	or	r16, r18
     41c:	13 2b       	or	r17, r19
	
	reg14 = ar1000_read(14) & 0x0FFF; //Zero out bits D12-D15
     41e:	8e e0       	ldi	r24, 0x0E	; 14
     420:	0e 94 bf 01 	call	0x37e	; 0x37e <ar1000_read>
     424:	9f 70       	andi	r25, 0x0F	; 15
	reg14 |= ((AR1000vol[volume_level] & 0xF0) << 8); //Mask in D12-D15
     426:	28 81       	ld	r18, Y
     428:	20 7f       	andi	r18, 0xF0	; 240
     42a:	ec 01       	movw	r28, r24
     42c:	d2 2b       	or	r29, r18
	
	ar1000_write(3, reg3);
     42e:	b8 01       	movw	r22, r16
     430:	83 e0       	ldi	r24, 0x03	; 3
     432:	0e 94 67 01 	call	0x2ce	; 0x2ce <ar1000_write>
	ar1000_write(14, reg14);
     436:	be 01       	movw	r22, r28
     438:	8e e0       	ldi	r24, 0x0E	; 14
}
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	1f 91       	pop	r17
     440:	0f 91       	pop	r16
	
	reg14 = ar1000_read(14) & 0x0FFF; //Zero out bits D12-D15
	reg14 |= ((AR1000vol[volume_level] & 0xF0) << 8); //Mask in D12-D15
	
	ar1000_write(3, reg3);
	ar1000_write(14, reg14);
     442:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <ar1000_write>

00000446 <ar1000_tuneto>:

//Tunes the AR1000 to a given station.
//Calculate AR1000 CHAN id  :  Freq (MHz) = 69 + 0.1*CHAN
//Example, sending 973 will tune to 97.3MHz
void ar1000_tuneto(uint16_t freq_kHz)
{
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	ec 01       	movw	r28, r24
	7) Clear hmute Bit 
	8) Update Functions (optional) 
	*/

	//Clear tune bit
	AR1000_TUNE_OFF;
     44c:	82 e0       	ldi	r24, 0x02	; 2
     44e:	0e 94 bf 01 	call	0x37e	; 0x37e <ar1000_read>
     452:	bc 01       	movw	r22, r24
     454:	7d 7f       	andi	r23, 0xFD	; 253
     456:	82 e0       	ldi	r24, 0x02	; 2
     458:	0e 94 67 01 	call	0x2ce	; 0x2ce <ar1000_write>

	//Set Channel
	channel = freq_kHz - 690;
	temp = ar1000_read(2); //Read 
     45c:	82 e0       	ldi	r24, 0x02	; 2
     45e:	0e 94 bf 01 	call	0x37e	; 0x37e <ar1000_read>
	temp &= 0xFE00; //Mask
     462:	88 27       	eor	r24, r24
     464:	9e 7f       	andi	r25, 0xFE	; 254
	temp |= channel;
	ar1000_write(2, temp); //Write
     466:	be 01       	movw	r22, r28
     468:	62 5b       	subi	r22, 0xB2	; 178
     46a:	72 40       	sbci	r23, 0x02	; 2
     46c:	68 2b       	or	r22, r24
     46e:	79 2b       	or	r23, r25
     470:	82 e0       	ldi	r24, 0x02	; 2
     472:	0e 94 67 01 	call	0x2ce	; 0x2ce <ar1000_write>
	
	//Enable tune bit
	AR1000_TUNE_ON;
     476:	82 e0       	ldi	r24, 0x02	; 2
     478:	0e 94 bf 01 	call	0x37e	; 0x37e <ar1000_read>
     47c:	bc 01       	movw	r22, r24
     47e:	72 60       	ori	r23, 0x02	; 2
     480:	82 e0       	ldi	r24, 0x02	; 2
     482:	0e 94 67 01 	call	0x2ce	; 0x2ce <ar1000_write>
	
	//Wait for tune to stabilize (STC flag)
	temp = 0;
	while(temp == 0)
	{
		temp = ar1000_read(ADDR_STATUS) & MASK_STC;
     486:	83 e1       	ldi	r24, 0x13	; 19
     488:	0e 94 bf 01 	call	0x37e	; 0x37e <ar1000_read>
     48c:	c8 2f       	mov	r28, r24
		printf("!");
     48e:	81 e2       	ldi	r24, 0x21	; 33
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	0e 94 1b 05 	call	0xa36	; 0xa36 <putchar>
	//Enable tune bit
	AR1000_TUNE_ON;
	
	//Wait for tune to stabilize (STC flag)
	temp = 0;
	while(temp == 0)
     496:	c5 ff       	sbrs	r28, 5
     498:	f6 cf       	rjmp	.-20     	; 0x486 <ar1000_tuneto+0x40>
	{
		temp = ar1000_read(ADDR_STATUS) & MASK_STC;
		printf("!");
	}
	
}
     49a:	df 91       	pop	r29
     49c:	cf 91       	pop	r28
     49e:	08 95       	ret

000004a0 <ar1000_tune_hilo>:

//This is some weird function in AR1000 example code provided by Airoha
//Looks like it takes the RSSI into account and then fine tunes the station
//I can't hear much of a difference, but it looks fancy.
void ar1000_tune_hilo(uint16_t freq_kHz)
{
     4a0:	cf 93       	push	r28
     4a2:	df 93       	push	r29
     4a4:	ec 01       	movw	r28, r24
	uint16_t temp;

	AR1000_MUTE_ON; //Set mute ON before TUNE
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	0e 94 bf 01 	call	0x37e	; 0x37e <ar1000_read>
     4ac:	bc 01       	movw	r22, r24
     4ae:	62 60       	ori	r22, 0x02	; 2
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	0e 94 67 01 	call	0x2ce	; 0x2ce <ar1000_write>
	AR1000_SEEK_OFF; //Clear seek
     4b6:	83 e0       	ldi	r24, 0x03	; 3
     4b8:	0e 94 bf 01 	call	0x37e	; 0x37e <ar1000_read>
     4bc:	bc 01       	movw	r22, r24
     4be:	7f 7b       	andi	r23, 0xBF	; 191
     4c0:	83 e0       	ldi	r24, 0x03	; 3
     4c2:	0e 94 67 01 	call	0x2ce	; 0x2ce <ar1000_write>

	//Read Low-Side LO Injection
	//R11 --> clear  D15,  clear D0/D2,  D3 is the same as default
	temp = ar1000_read(11) & 0x7FFA;
     4c6:	8b e0       	ldi	r24, 0x0B	; 11
     4c8:	0e 94 bf 01 	call	0x37e	; 0x37e <ar1000_read>
	ar1000_write(11, temp);
     4cc:	bc 01       	movw	r22, r24
     4ce:	6a 7f       	andi	r22, 0xFA	; 250
     4d0:	7f 77       	andi	r23, 0x7F	; 127
     4d2:	8b e0       	ldi	r24, 0x0B	; 11
     4d4:	0e 94 67 01 	call	0x2ce	; 0x2ce <ar1000_write>

	//TUNE to FreqKHz with current setting
	ar1000_tuneto(freq_kHz); //This function turns on TUNE and waits for STC flag
     4d8:	ce 01       	movw	r24, r28
     4da:	0e 94 23 02 	call	0x446	; 0x446 <ar1000_tuneto>
	//Low-side TUNE Ends 

	printf("\nLow complete");
     4de:	82 ef       	ldi	r24, 0xF2	; 242
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	9f 93       	push	r25
     4e4:	8f 93       	push	r24
     4e6:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>

	uint16_t status = ar1000_read(ADDR_RSSI);
     4ea:	82 e1       	ldi	r24, 0x12	; 18
     4ec:	0e 94 bf 01 	call	0x37e	; 0x37e <ar1000_read>
	uint16_t rssi = (status & MASK_RSSI);

	printf("\nRSSI 1 = %d", rssi >> SHIFT_RSSI);
     4f0:	88 27       	eor	r24, r24
     4f2:	9e 7f       	andi	r25, 0xFE	; 254
     4f4:	89 2f       	mov	r24, r25
     4f6:	86 95       	lsr	r24
     4f8:	1f 92       	push	r1
     4fa:	8f 93       	push	r24
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	92 e0       	ldi	r25, 0x02	; 2
     500:	9f 93       	push	r25
     502:	8f 93       	push	r24
     504:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>

	//Read Hi-Side LO Injection
	// R11-->set D15, set D0/D2,  D3 is the same as default
	temp = ar1000_read(11) | 0x8005;
     508:	8b e0       	ldi	r24, 0x0B	; 11
     50a:	0e 94 bf 01 	call	0x37e	; 0x37e <ar1000_read>
	ar1000_write(11, temp);
     50e:	bc 01       	movw	r22, r24
     510:	65 60       	ori	r22, 0x05	; 5
     512:	70 68       	ori	r23, 0x80	; 128
     514:	8b e0       	ldi	r24, 0x0B	; 11
     516:	0e 94 67 01 	call	0x2ce	; 0x2ce <ar1000_write>
	
	//TUNE to FreqKHz with current setting
	ar1000_tuneto(freq_kHz); //This function turns on TUNE and waits for STC flag
     51a:	ce 01       	movw	r24, r28
     51c:	0e 94 23 02 	call	0x446	; 0x446 <ar1000_tuneto>
	//High-side TUNE Ends 

	printf("\nHigh complete");
     520:	8d e0       	ldi	r24, 0x0D	; 13
     522:	92 e0       	ldi	r25, 0x02	; 2
     524:	9f 93       	push	r25
     526:	8f 93       	push	r24
     528:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>
	

	status = ar1000_read(ADDR_RSSI);
     52c:	82 e1       	ldi	r24, 0x12	; 18
     52e:	0e 94 bf 01 	call	0x37e	; 0x37e <ar1000_read>
	printf("\nRSSI 2 = %d", (status & MASK_RSSI) >> SHIFT_RSSI);
     532:	96 95       	lsr	r25
     534:	1f 92       	push	r1
     536:	9f 93       	push	r25
     538:	8c e1       	ldi	r24, 0x1C	; 28
     53a:	92 e0       	ldi	r25, 0x02	; 2
     53c:	9f 93       	push	r25
     53e:	8f 93       	push	r24
     540:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>
	}
	else
	{ 
		//HI
		//R11-->  set D15, clear D0/D2, D3 is the same as default
		temp = (ar1000_read(11) | 0x8000) & 0xFFFA;
     544:	8b e0       	ldi	r24, 0x0B	; 11
     546:	0e 94 bf 01 	call	0x37e	; 0x37e <ar1000_read>
		ar1000_write(11, temp);
     54a:	8a 7f       	andi	r24, 0xFA	; 250
     54c:	9f 77       	andi	r25, 0x7F	; 127
     54e:	bc 01       	movw	r22, r24
     550:	70 68       	ori	r23, 0x80	; 128
     552:	8b e0       	ldi	r24, 0x0B	; 11
     554:	0e 94 67 01 	call	0x2ce	; 0x2ce <ar1000_write>
	}

	//Fine-tune!!
	//TUNE to FreqKHz with current setting
	ar1000_tuneto(freq_kHz); //This function turns on TUNE and waits for STC flag
     558:	ce 01       	movw	r24, r28
     55a:	0e 94 23 02 	call	0x446	; 0x446 <ar1000_tuneto>

	AR1000_MUTE_OFF;
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	0e 94 bf 01 	call	0x37e	; 0x37e <ar1000_read>
     564:	bc 01       	movw	r22, r24
     566:	6d 7f       	andi	r22, 0xFD	; 253
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	0e 94 67 01 	call	0x2ce	; 0x2ce <ar1000_write>

	printf("\nLow/Hi tuning complete");
     56e:	89 e2       	ldi	r24, 0x29	; 41
     570:	92 e0       	ldi	r25, 0x02	; 2
     572:	9f 93       	push	r25
     574:	8f 93       	push	r24
     576:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>

}
     57a:	8d b7       	in	r24, 0x3d	; 61
     57c:	9e b7       	in	r25, 0x3e	; 62
     57e:	0e 96       	adiw	r24, 0x0e	; 14
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	f8 94       	cli
     584:	9e bf       	out	0x3e, r25	; 62
     586:	0f be       	out	0x3f, r0	; 63
     588:	8d bf       	out	0x3d, r24	; 61
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	08 95       	ret

00000590 <ar1000_seek>:

//Starts scanning the stations for a minimum set threshold. I found the bit to enable
//wrapping so the every time the function is called, it searches up, and wrap back to 88MHz
//if it doesn't find a good station.
void ar1000_seek(void)
{
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
	
	char space = 1; //0.1MHz scanning
	char updown = 1; //Seek up
	char band = 0; //US/Europe radio band
	
	AR1000_MUTE_ON;
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	0e 94 bf 01 	call	0x37e	; 0x37e <ar1000_read>
     59a:	bc 01       	movw	r22, r24
     59c:	62 60       	ori	r22, 0x02	; 2
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	0e 94 67 01 	call	0x2ce	; 0x2ce <ar1000_write>
	AR1000_TUNE_OFF;
     5a4:	82 e0       	ldi	r24, 0x02	; 2
     5a6:	0e 94 bf 01 	call	0x37e	; 0x37e <ar1000_read>
     5aa:	bc 01       	movw	r22, r24
     5ac:	7d 7f       	andi	r23, 0xFD	; 253
     5ae:	82 e0       	ldi	r24, 0x02	; 2
     5b0:	0e 94 67 01 	call	0x2ce	; 0x2ce <ar1000_write>
	AR1000_SEEK_OFF;
     5b4:	83 e0       	ldi	r24, 0x03	; 3
     5b6:	0e 94 bf 01 	call	0x37e	; 0x37e <ar1000_read>
     5ba:	bc 01       	movw	r22, r24
     5bc:	7f 7b       	andi	r23, 0xBF	; 191
     5be:	83 e0       	ldi	r24, 0x03	; 3
     5c0:	0e 94 67 01 	call	0x2ce	; 0x2ce <ar1000_write>
	
	//Enable wrap during seek - I found bit D3 enables wrap, by trial and error. Seems to work
	temp = ar1000_read(10) | (1<<3); //0x82C6 = 1000 0010 1100 0110
     5c4:	8a e0       	ldi	r24, 0x0A	; 10
     5c6:	0e 94 bf 01 	call	0x37e	; 0x37e <ar1000_read>
	ar1000_write(10, temp);
     5ca:	bc 01       	movw	r22, r24
     5cc:	68 60       	ori	r22, 0x08	; 8
     5ce:	8a e0       	ldi	r24, 0x0A	; 10
     5d0:	0e 94 67 01 	call	0x2ce	; 0x2ce <ar1000_write>
	
	//Setting before seek
	temp = (ar1000_read(17) & SEEK_MASK) | SEEK_SETTING;
     5d4:	81 e1       	ldi	r24, 0x11	; 17
     5d6:	0e 94 bf 01 	call	0x37e	; 0x37e <ar1000_read>
	ar1000_write(17, temp);
     5da:	93 7c       	andi	r25, 0xC3	; 195
     5dc:	bc 01       	movw	r22, r24
     5de:	70 62       	ori	r23, 0x20	; 32
     5e0:	81 e1       	ldi	r24, 0x11	; 17
     5e2:	0e 94 67 01 	call	0x2ce	; 0x2ce <ar1000_write>

	printf("\n\nBegin searching:");
     5e6:	81 e4       	ldi	r24, 0x41	; 65
     5e8:	92 e0       	ldi	r25, 0x02	; 2
     5ea:	9f 93       	push	r25
     5ec:	8f 93       	push	r24
     5ee:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>

	AR1000_SEEK_ON;
     5f2:	83 e0       	ldi	r24, 0x03	; 3
     5f4:	0e 94 bf 01 	call	0x37e	; 0x37e <ar1000_read>
     5f8:	bc 01       	movw	r22, r24
     5fa:	70 64       	ori	r23, 0x40	; 64
     5fc:	83 e0       	ldi	r24, 0x03	; 3
     5fe:	0e 94 67 01 	call	0x2ce	; 0x2ce <ar1000_write>
	temp = ar1000_read(3);
     602:	83 e0       	ldi	r24, 0x03	; 3
     604:	0e 94 bf 01 	call	0x37e	; 0x37e <ar1000_read>
     608:	80 78       	andi	r24, 0x80	; 128
     60a:	97 7e       	andi	r25, 0xE7	; 231
	if(space == 1)	temp |= (1<<13); //Set space
	if(updown == 1)	temp |= (1<<15); //Set seek up or down
	temp = (temp & 0xE7FF) | band; //Set Band
	temp &= SEEK_TH_MASK; //Clear out the seek threshold
	temp |= SEEK_TH; //Set threshold
	ar1000_write(3, temp);
     60c:	bc 01       	movw	r22, r24
     60e:	65 60       	ori	r22, 0x05	; 5
     610:	70 6a       	ori	r23, 0xA0	; 160
     612:	83 e0       	ldi	r24, 0x03	; 3
     614:	0e 94 67 01 	call	0x2ce	; 0x2ce <ar1000_write>
     618:	0f 90       	pop	r0
     61a:	0f 90       	pop	r0
	
	//Wait for tune to stabilize (STC flag)
	temp = 0;
	while(temp == 0)
	{
		temp = ar1000_read(ADDR_STATUS) & MASK_STC;
     61c:	83 e1       	ldi	r24, 0x13	; 19
     61e:	0e 94 bf 01 	call	0x37e	; 0x37e <ar1000_read>
     622:	c8 2f       	mov	r28, r24
		printf(".");
     624:	8e e2       	ldi	r24, 0x2E	; 46
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	0e 94 1b 05 	call	0xa36	; 0xa36 <putchar>
	temp |= SEEK_TH; //Set threshold
	ar1000_write(3, temp);
	
	//Wait for tune to stabilize (STC flag)
	temp = 0;
	while(temp == 0)
     62c:	c5 ff       	sbrs	r28, 5
     62e:	f6 cf       	rjmp	.-20     	; 0x61c <ar1000_seek+0x8c>
	{
		temp = ar1000_read(ADDR_STATUS) & MASK_STC;
		printf(".");
	}

	temp = ar1000_read(ADDR_STATUS) & MASK_SF;
     630:	83 e1       	ldi	r24, 0x13	; 19
     632:	0e 94 bf 01 	call	0x37e	; 0x37e <ar1000_read>
	if(temp != 0)
     636:	84 ff       	sbrs	r24, 4
     638:	0b c0       	rjmp	.+22     	; 0x650 <ar1000_seek+0xc0>
	{
		printf("\nSeek failed!");
     63a:	84 e5       	ldi	r24, 0x54	; 84
     63c:	92 e0       	ldi	r25, 0x02	; 2
     63e:	9f 93       	push	r25
     640:	8f 93       	push	r24
     642:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>
		return;
     646:	0f 90       	pop	r0
     648:	0f 90       	pop	r0

	//Fine-tune with auto hilo rejection
	ar1000_tune_hilo(freq_kHz);

	AR1000_MUTE_OFF;     
}
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	08 95       	ret
	if(temp != 0)
	{
		printf("\nSeek failed!");
		return;
	}
	printf("\nSeek success!");
     650:	82 e6       	ldi	r24, 0x62	; 98
     652:	92 e0       	ldi	r25, 0x02	; 2
     654:	9f 93       	push	r25
     656:	8f 93       	push	r24
     658:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>
	
	temp = ar1000_read(ADDR_STATUS) & MASK_READCHAN;
     65c:	83 e1       	ldi	r24, 0x13	; 19
     65e:	0e 94 bf 01 	call	0x37e	; 0x37e <ar1000_read>
	uint16_t freq_kHz = 690 + (temp >> SHIFT_READCHAN); //Determine what channel we found
     662:	88 0f       	add	r24, r24
     664:	89 2f       	mov	r24, r25
     666:	88 1f       	adc	r24, r24
     668:	99 0b       	sbc	r25, r25
     66a:	91 95       	neg	r25
     66c:	ec 01       	movw	r28, r24
     66e:	ce 54       	subi	r28, 0x4E	; 78
     670:	dd 4f       	sbci	r29, 0xFD	; 253
	
	printf("\nNow on channel %d.%dMHz", freq_kHz / 10, freq_kHz % 10);
     672:	ce 01       	movw	r24, r28
     674:	6a e0       	ldi	r22, 0x0A	; 10
     676:	70 e0       	ldi	r23, 0x00	; 0
     678:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__udivmodhi4>
     67c:	9f 93       	push	r25
     67e:	8f 93       	push	r24
     680:	7f 93       	push	r23
     682:	6f 93       	push	r22
     684:	81 e7       	ldi	r24, 0x71	; 113
     686:	92 e0       	ldi	r25, 0x02	; 2
     688:	9f 93       	push	r25
     68a:	8f 93       	push	r24
     68c:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>

	//Restore setting after seek
	ar1000_write(17, register_values[17]);
     690:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <register_values+0x22>
     694:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <register_values+0x23>
     698:	81 e1       	ldi	r24, 0x11	; 17
     69a:	0e 94 67 01 	call	0x2ce	; 0x2ce <ar1000_write>

	//Fine-tune with auto hilo rejection
	ar1000_tune_hilo(freq_kHz);
     69e:	ce 01       	movw	r24, r28
     6a0:	0e 94 50 02 	call	0x4a0	; 0x4a0 <ar1000_tune_hilo>

	AR1000_MUTE_OFF;     
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	0e 94 bf 01 	call	0x37e	; 0x37e <ar1000_read>
     6aa:	2d b7       	in	r18, 0x3d	; 61
     6ac:	3e b7       	in	r19, 0x3e	; 62
     6ae:	28 5f       	subi	r18, 0xF8	; 248
     6b0:	3f 4f       	sbci	r19, 0xFF	; 255
     6b2:	0f b6       	in	r0, 0x3f	; 63
     6b4:	f8 94       	cli
     6b6:	3e bf       	out	0x3e, r19	; 62
     6b8:	0f be       	out	0x3f, r0	; 63
     6ba:	2d bf       	out	0x3d, r18	; 61
     6bc:	bc 01       	movw	r22, r24
     6be:	6d 7f       	andi	r22, 0xFD	; 253
     6c0:	81 e0       	ldi	r24, 0x01	; 1
}
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
	ar1000_write(17, register_values[17]);

	//Fine-tune with auto hilo rejection
	ar1000_tune_hilo(freq_kHz);

	AR1000_MUTE_OFF;     
     6c6:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <ar1000_write>

000006ca <ar1000_readall>:
	ar1000_write(0, register_values[0]); //Re-write the first register, this will set the enable bit
}

//Reads and prints all 16 registers (16-bits wide) of the AR1000
void ar1000_readall(void)
{
     6ca:	0f 93       	push	r16
     6cc:	1f 93       	push	r17
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
	uint16_t x, register_value;
	for(x = 0 ; x < 0x1D ; x++)
     6d2:	c0 e0       	ldi	r28, 0x00	; 0
     6d4:	d0 e0       	ldi	r29, 0x00	; 0
	{
		register_value = ar1000_read(x);
		printf("0x%.2X: 0x%.4X\n", x, register_value);
     6d6:	00 e6       	ldi	r16, 0x60	; 96
     6d8:	11 e0       	ldi	r17, 0x01	; 1
void ar1000_readall(void)
{
	uint16_t x, register_value;
	for(x = 0 ; x < 0x1D ; x++)
	{
		register_value = ar1000_read(x);
     6da:	8c 2f       	mov	r24, r28
     6dc:	0e 94 bf 01 	call	0x37e	; 0x37e <ar1000_read>
		printf("0x%.2X: 0x%.4X\n", x, register_value);
     6e0:	9f 93       	push	r25
     6e2:	8f 93       	push	r24
     6e4:	df 93       	push	r29
     6e6:	cf 93       	push	r28
     6e8:	1f 93       	push	r17
     6ea:	0f 93       	push	r16
     6ec:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>

//Reads and prints all 16 registers (16-bits wide) of the AR1000
void ar1000_readall(void)
{
	uint16_t x, register_value;
	for(x = 0 ; x < 0x1D ; x++)
     6f0:	21 96       	adiw	r28, 0x01	; 1
     6f2:	0f 90       	pop	r0
     6f4:	0f 90       	pop	r0
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	0f 90       	pop	r0
     6fe:	cd 31       	cpi	r28, 0x1D	; 29
     700:	d1 05       	cpc	r29, r1
     702:	59 f7       	brne	.-42     	; 0x6da <ar1000_readall+0x10>
	{
		register_value = ar1000_read(x);
		printf("0x%.2X: 0x%.4X\n", x, register_value);
	}
}
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	1f 91       	pop	r17
     70a:	0f 91       	pop	r16
     70c:	08 95       	ret

0000070e <ar1000_init>:

void ar1000_init(void)
{
     70e:	0f 93       	push	r16
     710:	1f 93       	push	r17
     712:	cf 93       	push	r28
	delay_ms(100); //Wait for power to stabilize
     714:	84 e6       	ldi	r24, 0x64	; 100
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	0e 94 37 01 	call	0x26e	; 0x26e <delay_ms>
	
	ar1000_write_array(); //Init the AR1000 by writing the initial recommended values
     71c:	0e 94 8b 01 	call	0x316	; 0x316 <ar1000_write_array>
	uint16_t status = 0;
	while(status == 0)
	{
		status = ar1000_read(ADDR_STATUS);
	
		printf("\nAR1000 status : 0x%04X", status);
     720:	0b e8       	ldi	r16, 0x8B	; 139
     722:	12 e0       	ldi	r17, 0x02	; 2
	ar1000_write_array(); //Init the AR1000 by writing the initial recommended values

	uint16_t status = 0;
	while(status == 0)
	{
		status = ar1000_read(ADDR_STATUS);
     724:	83 e1       	ldi	r24, 0x13	; 19
     726:	0e 94 bf 01 	call	0x37e	; 0x37e <ar1000_read>
     72a:	c8 2f       	mov	r28, r24
	
		printf("\nAR1000 status : 0x%04X", status);
     72c:	9f 93       	push	r25
     72e:	8f 93       	push	r24
     730:	1f 93       	push	r17
     732:	0f 93       	push	r16
     734:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>

		status = status & MASK_STC;
		delay_ms(10);
     738:	8a e0       	ldi	r24, 0x0A	; 10
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	0e 94 37 01 	call	0x26e	; 0x26e <delay_ms>
	delay_ms(100); //Wait for power to stabilize
	
	ar1000_write_array(); //Init the AR1000 by writing the initial recommended values

	uint16_t status = 0;
	while(status == 0)
     740:	0f 90       	pop	r0
     742:	0f 90       	pop	r0
     744:	0f 90       	pop	r0
     746:	0f 90       	pop	r0
     748:	c5 ff       	sbrs	r28, 5
     74a:	ec cf       	rjmp	.-40     	; 0x724 <ar1000_init+0x16>
		printf("\nAR1000 status : 0x%04X", status);

		status = status & MASK_STC;
		delay_ms(10);
	}
}
     74c:	cf 91       	pop	r28
     74e:	1f 91       	pop	r17
     750:	0f 91       	pop	r16
     752:	08 95       	ret

00000754 <ioinit>:
//Setup for UART and IO pins
void ioinit (void)
{
	
	//1 = output, 0 = input
    DDRB = 0b11111111; //All outputs
     754:	8f ef       	ldi	r24, 0xFF	; 255
     756:	84 b9       	out	0x04, r24	; 4
    DDRC = 0b11111111; //All outputs
     758:	87 b9       	out	0x07, r24	; 7
    //DDRD = 0b11111110; //PORTD (RX on PD0)
	stdout = &mystdout; //Required for printf init
     75a:	8a e3       	ldi	r24, 0x3A	; 58
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	90 93 81 04 	sts	0x0481, r25	; 0x800481 <__data_end+0x3>
     762:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <__data_end+0x2>

	UBRR0H = (MYUBRR) >> 8;
     766:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = MYUBRR;
     76a:	87 e6       	ldi	r24, 0x67	; 103
     76c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     770:	88 e1       	ldi	r24, 0x18	; 24
     772:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3<<UCSZ00);
     776:	86 e0       	ldi	r24, 0x06	; 6
     778:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0A = (1<<U2X0);
     77c:	82 e0       	ldi	r24, 0x02	; 2
     77e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>

	//Init timer 0 for delay_us timing
	//8,000,000 / 8 = 1,000,000
    TCCR0B = (1<<CS01); //Set Prescaler to 8. CS01=1
     782:	85 bd       	out	0x25, r24	; 37
	
	//initialize I2C hardware
	TWCR = 0x00;
     784:	ec eb       	ldi	r30, 0xBC	; 188
     786:	f0 e0       	ldi	r31, 0x00	; 0
     788:	10 82       	st	Z, r1
	TWBR = 64;
     78a:	80 e4       	ldi	r24, 0x40	; 64
     78c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
	//TWSR = (1 << TWPS1);
	cbi(TWCR, TWEA);
     790:	80 81       	ld	r24, Z
     792:	8f 7b       	andi	r24, 0xBF	; 191
     794:	80 83       	st	Z, r24
	sbi(TWCR, TWEN);
     796:	80 81       	ld	r24, Z
     798:	84 60       	ori	r24, 0x04	; 4
     79a:	80 83       	st	Z, r24
	
	ar1000_init(); //Initialize AR1000
     79c:	0c 94 87 03 	jmp	0x70e	; 0x70e <ar1000_init>

000007a0 <ar1000_status>:
	}
}

//Read the status register (0x13) of the AR1000
void ar1000_status(void)
{
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
	uint16_t status;
	
	status = ar1000_read(ADDR_STATUS);
     7a4:	83 e1       	ldi	r24, 0x13	; 19
     7a6:	0e 94 bf 01 	call	0x37e	; 0x37e <ar1000_read>
     7aa:	ec 01       	movw	r28, r24
	
	printf("\n\nAR1000 status : 0x%04X", status);
     7ac:	df 93       	push	r29
     7ae:	cf 93       	push	r28
     7b0:	8a e8       	ldi	r24, 0x8A	; 138
     7b2:	92 e0       	ldi	r25, 0x02	; 2
     7b4:	9f 93       	push	r25
     7b6:	8f 93       	push	r24
     7b8:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>
	
	uint16_t channel = status & MASK_READCHAN;
	channel >>= SHIFT_READCHAN;
     7bc:	ce 01       	movw	r24, r28
     7be:	88 0f       	add	r24, r24
     7c0:	89 2f       	mov	r24, r25
     7c2:	88 1f       	adc	r24, r24
     7c4:	99 0b       	sbc	r25, r25
     7c6:	91 95       	neg	r25
	channel += 690;
     7c8:	8e 54       	subi	r24, 0x4E	; 78
     7ca:	9d 4f       	sbci	r25, 0xFD	; 253
	printf("\nChannel : %02d.%01dMHz", channel / 10, channel % 10);
     7cc:	6a e0       	ldi	r22, 0x0A	; 10
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__udivmodhi4>
     7d4:	9f 93       	push	r25
     7d6:	8f 93       	push	r24
     7d8:	7f 93       	push	r23
     7da:	6f 93       	push	r22
     7dc:	83 ea       	ldi	r24, 0xA3	; 163
     7de:	92 e0       	ldi	r25, 0x02	; 2
     7e0:	9f 93       	push	r25
     7e2:	8f 93       	push	r24
     7e4:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>
	
	if(status & MASK_STC) 
     7e8:	8d b7       	in	r24, 0x3d	; 61
     7ea:	9e b7       	in	r25, 0x3e	; 62
     7ec:	0a 96       	adiw	r24, 0x0a	; 10
     7ee:	0f b6       	in	r0, 0x3f	; 63
     7f0:	f8 94       	cli
     7f2:	9e bf       	out	0x3e, r25	; 62
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	8d bf       	out	0x3d, r24	; 61
     7f8:	c5 ff       	sbrs	r28, 5
     7fa:	03 c0       	rjmp	.+6      	; 0x802 <ar1000_status+0x62>
		printf(" (Seek/Tune Complete)");
     7fc:	8b eb       	ldi	r24, 0xBB	; 187
     7fe:	92 e0       	ldi	r25, 0x02	; 2
     800:	02 c0       	rjmp	.+4      	; 0x806 <ar1000_status+0x66>
	else
		printf(" (Seek/Tune Incomplete)");
     802:	81 ed       	ldi	r24, 0xD1	; 209
     804:	92 e0       	ldi	r25, 0x02	; 2
     806:	9f 93       	push	r25
     808:	8f 93       	push	r24
     80a:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>
     80e:	0f 90       	pop	r0
     810:	0f 90       	pop	r0
	
	if(status & MASK_SF) 
     812:	c4 ff       	sbrs	r28, 4
     814:	03 c0       	rjmp	.+6      	; 0x81c <ar1000_status+0x7c>
		printf(" (Seek Fail)");
     816:	89 ee       	ldi	r24, 0xE9	; 233
     818:	92 e0       	ldi	r25, 0x02	; 2
     81a:	02 c0       	rjmp	.+4      	; 0x820 <ar1000_status+0x80>
	else
		printf(" (Seek Successful)");
     81c:	86 ef       	ldi	r24, 0xF6	; 246
     81e:	92 e0       	ldi	r25, 0x02	; 2
     820:	9f 93       	push	r25
     822:	8f 93       	push	r24
     824:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>
     828:	0f 90       	pop	r0
     82a:	0f 90       	pop	r0
		
	if(status & MASK_ST) 
     82c:	c3 ff       	sbrs	r28, 3
     82e:	03 c0       	rjmp	.+6      	; 0x836 <ar1000_status+0x96>
		printf(" (Stereo)");
     830:	89 e0       	ldi	r24, 0x09	; 9
     832:	93 e0       	ldi	r25, 0x03	; 3
     834:	02 c0       	rjmp	.+4      	; 0x83a <ar1000_status+0x9a>
	else
		printf(" (Mono)");
     836:	83 e1       	ldi	r24, 0x13	; 19
     838:	93 e0       	ldi	r25, 0x03	; 3
     83a:	9f 93       	push	r25
     83c:	8f 93       	push	r24
     83e:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>
     842:	0f 90       	pop	r0
     844:	0f 90       	pop	r0
}
     846:	df 91       	pop	r29
     848:	cf 91       	pop	r28
     84a:	08 95       	ret

0000084c <main>:

//======================

int main (void)
{
	ioinit(); //Setup IO pins and defaults
     84c:	0e 94 aa 03 	call	0x754	; 0x754 <ioinit>
	
	char option;
	char vol = 21;
     850:	c5 e1       	ldi	r28, 0x15	; 21
	while(1)
	{
		printf("\n\n----AR1000 Configuration----");
		printf("\n1) Send array values");
		printf("\n2) Read array values");
		printf("\n3) Set array value");	
     852:	86 e6       	ldi	r24, 0x66	; 102
     854:	28 2e       	mov	r2, r24
     856:	83 e0       	ldi	r24, 0x03	; 3
     858:	38 2e       	mov	r3, r24
		printf("\n4) Read All Register values");
     85a:	9a e7       	ldi	r25, 0x7A	; 122
     85c:	49 2e       	mov	r4, r25
     85e:	93 e0       	ldi	r25, 0x03	; 3
     860:	59 2e       	mov	r5, r25
		printf("\n5) Begin Seek");		
     862:	27 e9       	ldi	r18, 0x97	; 151
     864:	62 2e       	mov	r6, r18
     866:	23 e0       	ldi	r18, 0x03	; 3
     868:	72 2e       	mov	r7, r18
		printf("\n6) Tune to 97.3");		
     86a:	36 ea       	ldi	r19, 0xA6	; 166
     86c:	83 2e       	mov	r8, r19
     86e:	33 e0       	ldi	r19, 0x03	; 3
     870:	93 2e       	mov	r9, r19
		printf("\n7) Check Status");		
		printf("\n8) Raise volume");		
     872:	08 ec       	ldi	r16, 0xC8	; 200
     874:	13 e0       	ldi	r17, 0x03	; 3
		printf("\n9) Lower volume");		
     876:	49 ed       	ldi	r20, 0xD9	; 217
     878:	e4 2e       	mov	r14, r20
     87a:	43 e0       	ldi	r20, 0x03	; 3
     87c:	f4 2e       	mov	r15, r20
		printf("\na) Check RSSI");		
     87e:	5a ee       	ldi	r21, 0xEA	; 234
     880:	c5 2e       	mov	r12, r21
     882:	53 e0       	ldi	r21, 0x03	; 3
     884:	d5 2e       	mov	r13, r21
		printf("\nb) Special tune hi/low to 97.3");		
     886:	69 ef       	ldi	r22, 0xF9	; 249
     888:	a6 2e       	mov	r10, r22
     88a:	63 e0       	ldi	r22, 0x03	; 3
     88c:	b6 2e       	mov	r11, r22
	char option;
	char vol = 21;
	
	while(1)
	{
		printf("\n\n----AR1000 Configuration----");
     88e:	2b e1       	ldi	r18, 0x1B	; 27
     890:	33 e0       	ldi	r19, 0x03	; 3
     892:	3f 93       	push	r19
     894:	2f 93       	push	r18
     896:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>
		printf("\n1) Send array values");
     89a:	2a e3       	ldi	r18, 0x3A	; 58
     89c:	33 e0       	ldi	r19, 0x03	; 3
     89e:	3f 93       	push	r19
     8a0:	2f 93       	push	r18
     8a2:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>
		printf("\n2) Read array values");
     8a6:	20 e5       	ldi	r18, 0x50	; 80
     8a8:	33 e0       	ldi	r19, 0x03	; 3
     8aa:	3f 93       	push	r19
     8ac:	2f 93       	push	r18
     8ae:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>
		printf("\n3) Set array value");	
     8b2:	3f 92       	push	r3
     8b4:	2f 92       	push	r2
     8b6:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>
		printf("\n4) Read All Register values");
     8ba:	5f 92       	push	r5
     8bc:	4f 92       	push	r4
     8be:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>
		printf("\n5) Begin Seek");		
     8c2:	7f 92       	push	r7
     8c4:	6f 92       	push	r6
     8c6:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>
		printf("\n6) Tune to 97.3");		
     8ca:	9f 92       	push	r9
     8cc:	8f 92       	push	r8
     8ce:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>
		printf("\n7) Check Status");		
     8d2:	27 eb       	ldi	r18, 0xB7	; 183
     8d4:	33 e0       	ldi	r19, 0x03	; 3
     8d6:	3f 93       	push	r19
     8d8:	2f 93       	push	r18
     8da:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>
		printf("\n8) Raise volume");		
     8de:	1f 93       	push	r17
     8e0:	0f 93       	push	r16
     8e2:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>
		printf("\n9) Lower volume");		
     8e6:	ff 92       	push	r15
     8e8:	ef 92       	push	r14
     8ea:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>
		printf("\na) Check RSSI");		
     8ee:	df 92       	push	r13
     8f0:	cf 92       	push	r12
     8f2:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>
		printf("\nb) Special tune hi/low to 97.3");		
     8f6:	bf 92       	push	r11
     8f8:	af 92       	push	r10
     8fa:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>

		option = uart_getchar();
     8fe:	0e 94 a8 00 	call	0x150	; 0x150 <uart_getchar>
		
		if(option == '1')
     902:	2d b7       	in	r18, 0x3d	; 61
     904:	3e b7       	in	r19, 0x3e	; 62
     906:	28 5e       	subi	r18, 0xE8	; 232
     908:	3f 4f       	sbci	r19, 0xFF	; 255
     90a:	0f b6       	in	r0, 0x3f	; 63
     90c:	f8 94       	cli
     90e:	3e bf       	out	0x3e, r19	; 62
     910:	0f be       	out	0x3f, r0	; 63
     912:	2d bf       	out	0x3d, r18	; 61
     914:	81 33       	cpi	r24, 0x31	; 49
     916:	59 f4       	brne	.+22     	; 0x92e <main+0xe2>
		{
			printf("\n\n\tSending Array Values\n");
     918:	89 e1       	ldi	r24, 0x19	; 25
     91a:	94 e0       	ldi	r25, 0x04	; 4
     91c:	0e 94 21 05 	call	0xa42	; 0xa42 <puts>
			ar1000_write_array();
     920:	0e 94 8b 01 	call	0x316	; 0x316 <ar1000_write_array>
			printf("\n\t\tDone\n");
     924:	81 e3       	ldi	r24, 0x31	; 49
     926:	94 e0       	ldi	r25, 0x04	; 4
     928:	0e 94 21 05 	call	0xa42	; 0xa42 <puts>
     92c:	b0 cf       	rjmp	.-160    	; 0x88e <main+0x42>
		}
		
		else if(option == '2')
     92e:	82 33       	cpi	r24, 0x32	; 50
     930:	19 f4       	brne	.+6      	; 0x938 <main+0xec>
		{
			print_array();
     932:	0e 94 78 00 	call	0xf0	; 0xf0 <print_array>
     936:	ab cf       	rjmp	.-170    	; 0x88e <main+0x42>
		}
		
		else if(option == '3')	
     938:	83 33       	cpi	r24, 0x33	; 51
     93a:	19 f4       	brne	.+6      	; 0x942 <main+0xf6>
		{
			set_array_value();
     93c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <set_array_value>
     940:	a6 cf       	rjmp	.-180    	; 0x88e <main+0x42>
		}
		
		else if(option == '4')
     942:	84 33       	cpi	r24, 0x34	; 52
     944:	39 f4       	brne	.+14     	; 0x954 <main+0x108>
		{
			printf("\n\n\tRead All\n");
     946:	89 e3       	ldi	r24, 0x39	; 57
     948:	94 e0       	ldi	r25, 0x04	; 4
     94a:	0e 94 21 05 	call	0xa42	; 0xa42 <puts>
			ar1000_readall();
     94e:	0e 94 65 03 	call	0x6ca	; 0x6ca <ar1000_readall>
     952:	9d cf       	rjmp	.-198    	; 0x88e <main+0x42>
		}
		
		else if(option == '5')
     954:	85 33       	cpi	r24, 0x35	; 53
     956:	19 f4       	brne	.+6      	; 0x95e <main+0x112>
		{
			ar1000_seek();
     958:	0e 94 c8 02 	call	0x590	; 0x590 <ar1000_seek>
     95c:	98 cf       	rjmp	.-208    	; 0x88e <main+0x42>
		}
		
		else if(option == '6')
     95e:	86 33       	cpi	r24, 0x36	; 54
     960:	49 f4       	brne	.+18     	; 0x974 <main+0x128>
		{
			printf("\n\t Tune to 97.3\n");
     962:	85 e4       	ldi	r24, 0x45	; 69
     964:	94 e0       	ldi	r25, 0x04	; 4
     966:	0e 94 21 05 	call	0xa42	; 0xa42 <puts>
			ar1000_tuneto(973);
     96a:	8d ec       	ldi	r24, 0xCD	; 205
     96c:	93 e0       	ldi	r25, 0x03	; 3
     96e:	0e 94 23 02 	call	0x446	; 0x446 <ar1000_tuneto>
     972:	8d cf       	rjmp	.-230    	; 0x88e <main+0x42>
		}

		else if(option == '7')
     974:	87 33       	cpi	r24, 0x37	; 55
     976:	19 f4       	brne	.+6      	; 0x97e <main+0x132>
		{
			ar1000_status();
     978:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <ar1000_status>
     97c:	88 cf       	rjmp	.-240    	; 0x88e <main+0x42>
		}

		else if(option == '8')
     97e:	88 33       	cpi	r24, 0x38	; 56
     980:	21 f4       	brne	.+8      	; 0x98a <main+0x13e>
		{
			if(vol < 21) ar1000_setvolume(vol++);
     982:	c5 31       	cpi	r28, 0x15	; 21
     984:	61 f0       	breq	.+24     	; 0x99e <main+0x152>
     986:	d1 e0       	ldi	r29, 0x01	; 1
     988:	05 c0       	rjmp	.+10     	; 0x994 <main+0x148>
			printf("\nVolume = %02d", vol);
		}
		else if(option == '9')
     98a:	89 33       	cpi	r24, 0x39	; 57
     98c:	69 f4       	brne	.+26     	; 0x9a8 <main+0x15c>
		{
			if(vol > 0) ar1000_setvolume(vol--);
     98e:	cc 23       	and	r28, r28
     990:	31 f0       	breq	.+12     	; 0x99e <main+0x152>
     992:	df ef       	ldi	r29, 0xFF	; 255
     994:	dc 0f       	add	r29, r28
     996:	8c 2f       	mov	r24, r28
     998:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <ar1000_setvolume>
     99c:	cd 2f       	mov	r28, r29
			printf("\nVolume = %02d", vol);
     99e:	1f 92       	push	r1
     9a0:	cf 93       	push	r28
     9a2:	85 e5       	ldi	r24, 0x55	; 85
     9a4:	94 e0       	ldi	r25, 0x04	; 4
     9a6:	09 c0       	rjmp	.+18     	; 0x9ba <main+0x16e>
		}
		else if(option == 'a')
     9a8:	81 36       	cpi	r24, 0x61	; 97
     9aa:	49 f4       	brne	.+18     	; 0x9be <main+0x172>
		{
			option = ar1000_rssi();
     9ac:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <ar1000_rssi>
			printf("\nRSSI = %d", option);
     9b0:	99 27       	eor	r25, r25
     9b2:	9f 93       	push	r25
     9b4:	8f 93       	push	r24
     9b6:	84 e6       	ldi	r24, 0x64	; 100
     9b8:	94 e0       	ldi	r25, 0x04	; 4
     9ba:	9f 93       	push	r25
     9bc:	0c c0       	rjmp	.+24     	; 0x9d6 <main+0x18a>
		}
		else if(option == 'b')
     9be:	82 36       	cpi	r24, 0x62	; 98
     9c0:	29 f4       	brne	.+10     	; 0x9cc <main+0x180>
		{
			ar1000_tune_hilo(973);
     9c2:	8d ec       	ldi	r24, 0xCD	; 205
     9c4:	93 e0       	ldi	r25, 0x03	; 3
     9c6:	0e 94 50 02 	call	0x4a0	; 0x4a0 <ar1000_tune_hilo>
     9ca:	61 cf       	rjmp	.-318    	; 0x88e <main+0x42>
		}

		else
			printf("\n\nChoice = %c", option);
     9cc:	1f 92       	push	r1
     9ce:	8f 93       	push	r24
     9d0:	8f e6       	ldi	r24, 0x6F	; 111
     9d2:	94 e0       	ldi	r25, 0x04	; 4
     9d4:	9f 93       	push	r25
     9d6:	8f 93       	push	r24
     9d8:	0e 94 07 05 	call	0xa0e	; 0xa0e <printf>
     9dc:	0f 90       	pop	r0
     9de:	0f 90       	pop	r0
     9e0:	0f 90       	pop	r0
     9e2:	0f 90       	pop	r0
     9e4:	54 cf       	rjmp	.-344    	; 0x88e <main+0x42>

000009e6 <__udivmodhi4>:
     9e6:	aa 1b       	sub	r26, r26
     9e8:	bb 1b       	sub	r27, r27
     9ea:	51 e1       	ldi	r21, 0x11	; 17
     9ec:	07 c0       	rjmp	.+14     	; 0x9fc <__udivmodhi4_ep>

000009ee <__udivmodhi4_loop>:
     9ee:	aa 1f       	adc	r26, r26
     9f0:	bb 1f       	adc	r27, r27
     9f2:	a6 17       	cp	r26, r22
     9f4:	b7 07       	cpc	r27, r23
     9f6:	10 f0       	brcs	.+4      	; 0x9fc <__udivmodhi4_ep>
     9f8:	a6 1b       	sub	r26, r22
     9fa:	b7 0b       	sbc	r27, r23

000009fc <__udivmodhi4_ep>:
     9fc:	88 1f       	adc	r24, r24
     9fe:	99 1f       	adc	r25, r25
     a00:	5a 95       	dec	r21
     a02:	a9 f7       	brne	.-22     	; 0x9ee <__udivmodhi4_loop>
     a04:	80 95       	com	r24
     a06:	90 95       	com	r25
     a08:	bc 01       	movw	r22, r24
     a0a:	cd 01       	movw	r24, r26
     a0c:	08 95       	ret

00000a0e <printf>:
     a0e:	cf 93       	push	r28
     a10:	df 93       	push	r29
     a12:	cd b7       	in	r28, 0x3d	; 61
     a14:	de b7       	in	r29, 0x3e	; 62
     a16:	ae 01       	movw	r20, r28
     a18:	4b 5f       	subi	r20, 0xFB	; 251
     a1a:	5f 4f       	sbci	r21, 0xFF	; 255
     a1c:	fa 01       	movw	r30, r20
     a1e:	61 91       	ld	r22, Z+
     a20:	71 91       	ld	r23, Z+
     a22:	af 01       	movw	r20, r30
     a24:	80 91 80 04 	lds	r24, 0x0480	; 0x800480 <__data_end+0x2>
     a28:	90 91 81 04 	lds	r25, 0x0481	; 0x800481 <__data_end+0x3>
     a2c:	0e 94 51 05 	call	0xaa2	; 0xaa2 <vfprintf>
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	08 95       	ret

00000a36 <putchar>:
     a36:	60 91 80 04 	lds	r22, 0x0480	; 0x800480 <__data_end+0x2>
     a3a:	70 91 81 04 	lds	r23, 0x0481	; 0x800481 <__data_end+0x3>
     a3e:	0c 94 71 07 	jmp	0xee2	; 0xee2 <fputc>

00000a42 <puts>:
     a42:	0f 93       	push	r16
     a44:	1f 93       	push	r17
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	e0 91 80 04 	lds	r30, 0x0480	; 0x800480 <__data_end+0x2>
     a4e:	f0 91 81 04 	lds	r31, 0x0481	; 0x800481 <__data_end+0x3>
     a52:	23 81       	ldd	r18, Z+3	; 0x03
     a54:	21 ff       	sbrs	r18, 1
     a56:	1b c0       	rjmp	.+54     	; 0xa8e <puts+0x4c>
     a58:	8c 01       	movw	r16, r24
     a5a:	d0 e0       	ldi	r29, 0x00	; 0
     a5c:	c0 e0       	ldi	r28, 0x00	; 0
     a5e:	f8 01       	movw	r30, r16
     a60:	81 91       	ld	r24, Z+
     a62:	8f 01       	movw	r16, r30
     a64:	60 91 80 04 	lds	r22, 0x0480	; 0x800480 <__data_end+0x2>
     a68:	70 91 81 04 	lds	r23, 0x0481	; 0x800481 <__data_end+0x3>
     a6c:	db 01       	movw	r26, r22
     a6e:	18 96       	adiw	r26, 0x08	; 8
     a70:	ed 91       	ld	r30, X+
     a72:	fc 91       	ld	r31, X
     a74:	19 97       	sbiw	r26, 0x09	; 9
     a76:	88 23       	and	r24, r24
     a78:	31 f0       	breq	.+12     	; 0xa86 <puts+0x44>
     a7a:	09 95       	icall
     a7c:	89 2b       	or	r24, r25
     a7e:	79 f3       	breq	.-34     	; 0xa5e <puts+0x1c>
     a80:	df ef       	ldi	r29, 0xFF	; 255
     a82:	cf ef       	ldi	r28, 0xFF	; 255
     a84:	ec cf       	rjmp	.-40     	; 0xa5e <puts+0x1c>
     a86:	8a e0       	ldi	r24, 0x0A	; 10
     a88:	09 95       	icall
     a8a:	89 2b       	or	r24, r25
     a8c:	19 f0       	breq	.+6      	; 0xa94 <puts+0x52>
     a8e:	8f ef       	ldi	r24, 0xFF	; 255
     a90:	9f ef       	ldi	r25, 0xFF	; 255
     a92:	02 c0       	rjmp	.+4      	; 0xa98 <puts+0x56>
     a94:	8d 2f       	mov	r24, r29
     a96:	9c 2f       	mov	r25, r28
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	1f 91       	pop	r17
     a9e:	0f 91       	pop	r16
     aa0:	08 95       	ret

00000aa2 <vfprintf>:
     aa2:	2f 92       	push	r2
     aa4:	3f 92       	push	r3
     aa6:	4f 92       	push	r4
     aa8:	5f 92       	push	r5
     aaa:	6f 92       	push	r6
     aac:	7f 92       	push	r7
     aae:	8f 92       	push	r8
     ab0:	9f 92       	push	r9
     ab2:	af 92       	push	r10
     ab4:	bf 92       	push	r11
     ab6:	cf 92       	push	r12
     ab8:	df 92       	push	r13
     aba:	ef 92       	push	r14
     abc:	ff 92       	push	r15
     abe:	0f 93       	push	r16
     ac0:	1f 93       	push	r17
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	cd b7       	in	r28, 0x3d	; 61
     ac8:	de b7       	in	r29, 0x3e	; 62
     aca:	2b 97       	sbiw	r28, 0x0b	; 11
     acc:	0f b6       	in	r0, 0x3f	; 63
     ace:	f8 94       	cli
     ad0:	de bf       	out	0x3e, r29	; 62
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	cd bf       	out	0x3d, r28	; 61
     ad6:	6c 01       	movw	r12, r24
     ad8:	7b 01       	movw	r14, r22
     ada:	8a 01       	movw	r16, r20
     adc:	fc 01       	movw	r30, r24
     ade:	17 82       	std	Z+7, r1	; 0x07
     ae0:	16 82       	std	Z+6, r1	; 0x06
     ae2:	83 81       	ldd	r24, Z+3	; 0x03
     ae4:	81 ff       	sbrs	r24, 1
     ae6:	cc c1       	rjmp	.+920    	; 0xe80 <vfprintf+0x3de>
     ae8:	ce 01       	movw	r24, r28
     aea:	01 96       	adiw	r24, 0x01	; 1
     aec:	3c 01       	movw	r6, r24
     aee:	f6 01       	movw	r30, r12
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	f7 01       	movw	r30, r14
     af4:	93 fd       	sbrc	r25, 3
     af6:	85 91       	lpm	r24, Z+
     af8:	93 ff       	sbrs	r25, 3
     afa:	81 91       	ld	r24, Z+
     afc:	7f 01       	movw	r14, r30
     afe:	88 23       	and	r24, r24
     b00:	09 f4       	brne	.+2      	; 0xb04 <vfprintf+0x62>
     b02:	ba c1       	rjmp	.+884    	; 0xe78 <vfprintf+0x3d6>
     b04:	85 32       	cpi	r24, 0x25	; 37
     b06:	39 f4       	brne	.+14     	; 0xb16 <vfprintf+0x74>
     b08:	93 fd       	sbrc	r25, 3
     b0a:	85 91       	lpm	r24, Z+
     b0c:	93 ff       	sbrs	r25, 3
     b0e:	81 91       	ld	r24, Z+
     b10:	7f 01       	movw	r14, r30
     b12:	85 32       	cpi	r24, 0x25	; 37
     b14:	29 f4       	brne	.+10     	; 0xb20 <vfprintf+0x7e>
     b16:	b6 01       	movw	r22, r12
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	0e 94 71 07 	call	0xee2	; 0xee2 <fputc>
     b1e:	e7 cf       	rjmp	.-50     	; 0xaee <vfprintf+0x4c>
     b20:	91 2c       	mov	r9, r1
     b22:	21 2c       	mov	r2, r1
     b24:	31 2c       	mov	r3, r1
     b26:	ff e1       	ldi	r31, 0x1F	; 31
     b28:	f3 15       	cp	r31, r3
     b2a:	d8 f0       	brcs	.+54     	; 0xb62 <vfprintf+0xc0>
     b2c:	8b 32       	cpi	r24, 0x2B	; 43
     b2e:	79 f0       	breq	.+30     	; 0xb4e <vfprintf+0xac>
     b30:	38 f4       	brcc	.+14     	; 0xb40 <vfprintf+0x9e>
     b32:	80 32       	cpi	r24, 0x20	; 32
     b34:	79 f0       	breq	.+30     	; 0xb54 <vfprintf+0xb2>
     b36:	83 32       	cpi	r24, 0x23	; 35
     b38:	a1 f4       	brne	.+40     	; 0xb62 <vfprintf+0xc0>
     b3a:	23 2d       	mov	r18, r3
     b3c:	20 61       	ori	r18, 0x10	; 16
     b3e:	1d c0       	rjmp	.+58     	; 0xb7a <vfprintf+0xd8>
     b40:	8d 32       	cpi	r24, 0x2D	; 45
     b42:	61 f0       	breq	.+24     	; 0xb5c <vfprintf+0xba>
     b44:	80 33       	cpi	r24, 0x30	; 48
     b46:	69 f4       	brne	.+26     	; 0xb62 <vfprintf+0xc0>
     b48:	23 2d       	mov	r18, r3
     b4a:	21 60       	ori	r18, 0x01	; 1
     b4c:	16 c0       	rjmp	.+44     	; 0xb7a <vfprintf+0xd8>
     b4e:	83 2d       	mov	r24, r3
     b50:	82 60       	ori	r24, 0x02	; 2
     b52:	38 2e       	mov	r3, r24
     b54:	e3 2d       	mov	r30, r3
     b56:	e4 60       	ori	r30, 0x04	; 4
     b58:	3e 2e       	mov	r3, r30
     b5a:	2a c0       	rjmp	.+84     	; 0xbb0 <vfprintf+0x10e>
     b5c:	f3 2d       	mov	r31, r3
     b5e:	f8 60       	ori	r31, 0x08	; 8
     b60:	1d c0       	rjmp	.+58     	; 0xb9c <vfprintf+0xfa>
     b62:	37 fc       	sbrc	r3, 7
     b64:	2d c0       	rjmp	.+90     	; 0xbc0 <vfprintf+0x11e>
     b66:	20 ed       	ldi	r18, 0xD0	; 208
     b68:	28 0f       	add	r18, r24
     b6a:	2a 30       	cpi	r18, 0x0A	; 10
     b6c:	40 f0       	brcs	.+16     	; 0xb7e <vfprintf+0xdc>
     b6e:	8e 32       	cpi	r24, 0x2E	; 46
     b70:	b9 f4       	brne	.+46     	; 0xba0 <vfprintf+0xfe>
     b72:	36 fc       	sbrc	r3, 6
     b74:	81 c1       	rjmp	.+770    	; 0xe78 <vfprintf+0x3d6>
     b76:	23 2d       	mov	r18, r3
     b78:	20 64       	ori	r18, 0x40	; 64
     b7a:	32 2e       	mov	r3, r18
     b7c:	19 c0       	rjmp	.+50     	; 0xbb0 <vfprintf+0x10e>
     b7e:	36 fe       	sbrs	r3, 6
     b80:	06 c0       	rjmp	.+12     	; 0xb8e <vfprintf+0xec>
     b82:	8a e0       	ldi	r24, 0x0A	; 10
     b84:	98 9e       	mul	r9, r24
     b86:	20 0d       	add	r18, r0
     b88:	11 24       	eor	r1, r1
     b8a:	92 2e       	mov	r9, r18
     b8c:	11 c0       	rjmp	.+34     	; 0xbb0 <vfprintf+0x10e>
     b8e:	ea e0       	ldi	r30, 0x0A	; 10
     b90:	2e 9e       	mul	r2, r30
     b92:	20 0d       	add	r18, r0
     b94:	11 24       	eor	r1, r1
     b96:	22 2e       	mov	r2, r18
     b98:	f3 2d       	mov	r31, r3
     b9a:	f0 62       	ori	r31, 0x20	; 32
     b9c:	3f 2e       	mov	r3, r31
     b9e:	08 c0       	rjmp	.+16     	; 0xbb0 <vfprintf+0x10e>
     ba0:	8c 36       	cpi	r24, 0x6C	; 108
     ba2:	21 f4       	brne	.+8      	; 0xbac <vfprintf+0x10a>
     ba4:	83 2d       	mov	r24, r3
     ba6:	80 68       	ori	r24, 0x80	; 128
     ba8:	38 2e       	mov	r3, r24
     baa:	02 c0       	rjmp	.+4      	; 0xbb0 <vfprintf+0x10e>
     bac:	88 36       	cpi	r24, 0x68	; 104
     bae:	41 f4       	brne	.+16     	; 0xbc0 <vfprintf+0x11e>
     bb0:	f7 01       	movw	r30, r14
     bb2:	93 fd       	sbrc	r25, 3
     bb4:	85 91       	lpm	r24, Z+
     bb6:	93 ff       	sbrs	r25, 3
     bb8:	81 91       	ld	r24, Z+
     bba:	7f 01       	movw	r14, r30
     bbc:	81 11       	cpse	r24, r1
     bbe:	b3 cf       	rjmp	.-154    	; 0xb26 <vfprintf+0x84>
     bc0:	98 2f       	mov	r25, r24
     bc2:	9f 7d       	andi	r25, 0xDF	; 223
     bc4:	95 54       	subi	r25, 0x45	; 69
     bc6:	93 30       	cpi	r25, 0x03	; 3
     bc8:	28 f4       	brcc	.+10     	; 0xbd4 <vfprintf+0x132>
     bca:	0c 5f       	subi	r16, 0xFC	; 252
     bcc:	1f 4f       	sbci	r17, 0xFF	; 255
     bce:	9f e3       	ldi	r25, 0x3F	; 63
     bd0:	99 83       	std	Y+1, r25	; 0x01
     bd2:	0d c0       	rjmp	.+26     	; 0xbee <vfprintf+0x14c>
     bd4:	83 36       	cpi	r24, 0x63	; 99
     bd6:	31 f0       	breq	.+12     	; 0xbe4 <vfprintf+0x142>
     bd8:	83 37       	cpi	r24, 0x73	; 115
     bda:	71 f0       	breq	.+28     	; 0xbf8 <vfprintf+0x156>
     bdc:	83 35       	cpi	r24, 0x53	; 83
     bde:	09 f0       	breq	.+2      	; 0xbe2 <vfprintf+0x140>
     be0:	59 c0       	rjmp	.+178    	; 0xc94 <vfprintf+0x1f2>
     be2:	21 c0       	rjmp	.+66     	; 0xc26 <vfprintf+0x184>
     be4:	f8 01       	movw	r30, r16
     be6:	80 81       	ld	r24, Z
     be8:	89 83       	std	Y+1, r24	; 0x01
     bea:	0e 5f       	subi	r16, 0xFE	; 254
     bec:	1f 4f       	sbci	r17, 0xFF	; 255
     bee:	88 24       	eor	r8, r8
     bf0:	83 94       	inc	r8
     bf2:	91 2c       	mov	r9, r1
     bf4:	53 01       	movw	r10, r6
     bf6:	13 c0       	rjmp	.+38     	; 0xc1e <vfprintf+0x17c>
     bf8:	28 01       	movw	r4, r16
     bfa:	f2 e0       	ldi	r31, 0x02	; 2
     bfc:	4f 0e       	add	r4, r31
     bfe:	51 1c       	adc	r5, r1
     c00:	f8 01       	movw	r30, r16
     c02:	a0 80       	ld	r10, Z
     c04:	b1 80       	ldd	r11, Z+1	; 0x01
     c06:	36 fe       	sbrs	r3, 6
     c08:	03 c0       	rjmp	.+6      	; 0xc10 <vfprintf+0x16e>
     c0a:	69 2d       	mov	r22, r9
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <vfprintf+0x172>
     c10:	6f ef       	ldi	r22, 0xFF	; 255
     c12:	7f ef       	ldi	r23, 0xFF	; 255
     c14:	c5 01       	movw	r24, r10
     c16:	0e 94 66 07 	call	0xecc	; 0xecc <strnlen>
     c1a:	4c 01       	movw	r8, r24
     c1c:	82 01       	movw	r16, r4
     c1e:	f3 2d       	mov	r31, r3
     c20:	ff 77       	andi	r31, 0x7F	; 127
     c22:	3f 2e       	mov	r3, r31
     c24:	16 c0       	rjmp	.+44     	; 0xc52 <vfprintf+0x1b0>
     c26:	28 01       	movw	r4, r16
     c28:	22 e0       	ldi	r18, 0x02	; 2
     c2a:	42 0e       	add	r4, r18
     c2c:	51 1c       	adc	r5, r1
     c2e:	f8 01       	movw	r30, r16
     c30:	a0 80       	ld	r10, Z
     c32:	b1 80       	ldd	r11, Z+1	; 0x01
     c34:	36 fe       	sbrs	r3, 6
     c36:	03 c0       	rjmp	.+6      	; 0xc3e <vfprintf+0x19c>
     c38:	69 2d       	mov	r22, r9
     c3a:	70 e0       	ldi	r23, 0x00	; 0
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <vfprintf+0x1a0>
     c3e:	6f ef       	ldi	r22, 0xFF	; 255
     c40:	7f ef       	ldi	r23, 0xFF	; 255
     c42:	c5 01       	movw	r24, r10
     c44:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <strnlen_P>
     c48:	4c 01       	movw	r8, r24
     c4a:	f3 2d       	mov	r31, r3
     c4c:	f0 68       	ori	r31, 0x80	; 128
     c4e:	3f 2e       	mov	r3, r31
     c50:	82 01       	movw	r16, r4
     c52:	33 fc       	sbrc	r3, 3
     c54:	1b c0       	rjmp	.+54     	; 0xc8c <vfprintf+0x1ea>
     c56:	82 2d       	mov	r24, r2
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	88 16       	cp	r8, r24
     c5c:	99 06       	cpc	r9, r25
     c5e:	b0 f4       	brcc	.+44     	; 0xc8c <vfprintf+0x1ea>
     c60:	b6 01       	movw	r22, r12
     c62:	80 e2       	ldi	r24, 0x20	; 32
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	0e 94 71 07 	call	0xee2	; 0xee2 <fputc>
     c6a:	2a 94       	dec	r2
     c6c:	f4 cf       	rjmp	.-24     	; 0xc56 <vfprintf+0x1b4>
     c6e:	f5 01       	movw	r30, r10
     c70:	37 fc       	sbrc	r3, 7
     c72:	85 91       	lpm	r24, Z+
     c74:	37 fe       	sbrs	r3, 7
     c76:	81 91       	ld	r24, Z+
     c78:	5f 01       	movw	r10, r30
     c7a:	b6 01       	movw	r22, r12
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	0e 94 71 07 	call	0xee2	; 0xee2 <fputc>
     c82:	21 10       	cpse	r2, r1
     c84:	2a 94       	dec	r2
     c86:	21 e0       	ldi	r18, 0x01	; 1
     c88:	82 1a       	sub	r8, r18
     c8a:	91 08       	sbc	r9, r1
     c8c:	81 14       	cp	r8, r1
     c8e:	91 04       	cpc	r9, r1
     c90:	71 f7       	brne	.-36     	; 0xc6e <vfprintf+0x1cc>
     c92:	e8 c0       	rjmp	.+464    	; 0xe64 <vfprintf+0x3c2>
     c94:	84 36       	cpi	r24, 0x64	; 100
     c96:	11 f0       	breq	.+4      	; 0xc9c <vfprintf+0x1fa>
     c98:	89 36       	cpi	r24, 0x69	; 105
     c9a:	41 f5       	brne	.+80     	; 0xcec <vfprintf+0x24a>
     c9c:	f8 01       	movw	r30, r16
     c9e:	37 fe       	sbrs	r3, 7
     ca0:	07 c0       	rjmp	.+14     	; 0xcb0 <vfprintf+0x20e>
     ca2:	60 81       	ld	r22, Z
     ca4:	71 81       	ldd	r23, Z+1	; 0x01
     ca6:	82 81       	ldd	r24, Z+2	; 0x02
     ca8:	93 81       	ldd	r25, Z+3	; 0x03
     caa:	0c 5f       	subi	r16, 0xFC	; 252
     cac:	1f 4f       	sbci	r17, 0xFF	; 255
     cae:	08 c0       	rjmp	.+16     	; 0xcc0 <vfprintf+0x21e>
     cb0:	60 81       	ld	r22, Z
     cb2:	71 81       	ldd	r23, Z+1	; 0x01
     cb4:	07 2e       	mov	r0, r23
     cb6:	00 0c       	add	r0, r0
     cb8:	88 0b       	sbc	r24, r24
     cba:	99 0b       	sbc	r25, r25
     cbc:	0e 5f       	subi	r16, 0xFE	; 254
     cbe:	1f 4f       	sbci	r17, 0xFF	; 255
     cc0:	f3 2d       	mov	r31, r3
     cc2:	ff 76       	andi	r31, 0x6F	; 111
     cc4:	3f 2e       	mov	r3, r31
     cc6:	97 ff       	sbrs	r25, 7
     cc8:	09 c0       	rjmp	.+18     	; 0xcdc <vfprintf+0x23a>
     cca:	90 95       	com	r25
     ccc:	80 95       	com	r24
     cce:	70 95       	com	r23
     cd0:	61 95       	neg	r22
     cd2:	7f 4f       	sbci	r23, 0xFF	; 255
     cd4:	8f 4f       	sbci	r24, 0xFF	; 255
     cd6:	9f 4f       	sbci	r25, 0xFF	; 255
     cd8:	f0 68       	ori	r31, 0x80	; 128
     cda:	3f 2e       	mov	r3, r31
     cdc:	2a e0       	ldi	r18, 0x0A	; 10
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	a3 01       	movw	r20, r6
     ce2:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__ultoa_invert>
     ce6:	88 2e       	mov	r8, r24
     ce8:	86 18       	sub	r8, r6
     cea:	45 c0       	rjmp	.+138    	; 0xd76 <vfprintf+0x2d4>
     cec:	85 37       	cpi	r24, 0x75	; 117
     cee:	31 f4       	brne	.+12     	; 0xcfc <vfprintf+0x25a>
     cf0:	23 2d       	mov	r18, r3
     cf2:	2f 7e       	andi	r18, 0xEF	; 239
     cf4:	b2 2e       	mov	r11, r18
     cf6:	2a e0       	ldi	r18, 0x0A	; 10
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	25 c0       	rjmp	.+74     	; 0xd46 <vfprintf+0x2a4>
     cfc:	93 2d       	mov	r25, r3
     cfe:	99 7f       	andi	r25, 0xF9	; 249
     d00:	b9 2e       	mov	r11, r25
     d02:	8f 36       	cpi	r24, 0x6F	; 111
     d04:	c1 f0       	breq	.+48     	; 0xd36 <vfprintf+0x294>
     d06:	18 f4       	brcc	.+6      	; 0xd0e <vfprintf+0x26c>
     d08:	88 35       	cpi	r24, 0x58	; 88
     d0a:	79 f0       	breq	.+30     	; 0xd2a <vfprintf+0x288>
     d0c:	b5 c0       	rjmp	.+362    	; 0xe78 <vfprintf+0x3d6>
     d0e:	80 37       	cpi	r24, 0x70	; 112
     d10:	19 f0       	breq	.+6      	; 0xd18 <vfprintf+0x276>
     d12:	88 37       	cpi	r24, 0x78	; 120
     d14:	21 f0       	breq	.+8      	; 0xd1e <vfprintf+0x27c>
     d16:	b0 c0       	rjmp	.+352    	; 0xe78 <vfprintf+0x3d6>
     d18:	e9 2f       	mov	r30, r25
     d1a:	e0 61       	ori	r30, 0x10	; 16
     d1c:	be 2e       	mov	r11, r30
     d1e:	b4 fe       	sbrs	r11, 4
     d20:	0d c0       	rjmp	.+26     	; 0xd3c <vfprintf+0x29a>
     d22:	fb 2d       	mov	r31, r11
     d24:	f4 60       	ori	r31, 0x04	; 4
     d26:	bf 2e       	mov	r11, r31
     d28:	09 c0       	rjmp	.+18     	; 0xd3c <vfprintf+0x29a>
     d2a:	34 fe       	sbrs	r3, 4
     d2c:	0a c0       	rjmp	.+20     	; 0xd42 <vfprintf+0x2a0>
     d2e:	29 2f       	mov	r18, r25
     d30:	26 60       	ori	r18, 0x06	; 6
     d32:	b2 2e       	mov	r11, r18
     d34:	06 c0       	rjmp	.+12     	; 0xd42 <vfprintf+0x2a0>
     d36:	28 e0       	ldi	r18, 0x08	; 8
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	05 c0       	rjmp	.+10     	; 0xd46 <vfprintf+0x2a4>
     d3c:	20 e1       	ldi	r18, 0x10	; 16
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <vfprintf+0x2a4>
     d42:	20 e1       	ldi	r18, 0x10	; 16
     d44:	32 e0       	ldi	r19, 0x02	; 2
     d46:	f8 01       	movw	r30, r16
     d48:	b7 fe       	sbrs	r11, 7
     d4a:	07 c0       	rjmp	.+14     	; 0xd5a <vfprintf+0x2b8>
     d4c:	60 81       	ld	r22, Z
     d4e:	71 81       	ldd	r23, Z+1	; 0x01
     d50:	82 81       	ldd	r24, Z+2	; 0x02
     d52:	93 81       	ldd	r25, Z+3	; 0x03
     d54:	0c 5f       	subi	r16, 0xFC	; 252
     d56:	1f 4f       	sbci	r17, 0xFF	; 255
     d58:	06 c0       	rjmp	.+12     	; 0xd66 <vfprintf+0x2c4>
     d5a:	60 81       	ld	r22, Z
     d5c:	71 81       	ldd	r23, Z+1	; 0x01
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	0e 5f       	subi	r16, 0xFE	; 254
     d64:	1f 4f       	sbci	r17, 0xFF	; 255
     d66:	a3 01       	movw	r20, r6
     d68:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__ultoa_invert>
     d6c:	88 2e       	mov	r8, r24
     d6e:	86 18       	sub	r8, r6
     d70:	fb 2d       	mov	r31, r11
     d72:	ff 77       	andi	r31, 0x7F	; 127
     d74:	3f 2e       	mov	r3, r31
     d76:	36 fe       	sbrs	r3, 6
     d78:	0d c0       	rjmp	.+26     	; 0xd94 <vfprintf+0x2f2>
     d7a:	23 2d       	mov	r18, r3
     d7c:	2e 7f       	andi	r18, 0xFE	; 254
     d7e:	a2 2e       	mov	r10, r18
     d80:	89 14       	cp	r8, r9
     d82:	58 f4       	brcc	.+22     	; 0xd9a <vfprintf+0x2f8>
     d84:	34 fe       	sbrs	r3, 4
     d86:	0b c0       	rjmp	.+22     	; 0xd9e <vfprintf+0x2fc>
     d88:	32 fc       	sbrc	r3, 2
     d8a:	09 c0       	rjmp	.+18     	; 0xd9e <vfprintf+0x2fc>
     d8c:	83 2d       	mov	r24, r3
     d8e:	8e 7e       	andi	r24, 0xEE	; 238
     d90:	a8 2e       	mov	r10, r24
     d92:	05 c0       	rjmp	.+10     	; 0xd9e <vfprintf+0x2fc>
     d94:	b8 2c       	mov	r11, r8
     d96:	a3 2c       	mov	r10, r3
     d98:	03 c0       	rjmp	.+6      	; 0xda0 <vfprintf+0x2fe>
     d9a:	b8 2c       	mov	r11, r8
     d9c:	01 c0       	rjmp	.+2      	; 0xda0 <vfprintf+0x2fe>
     d9e:	b9 2c       	mov	r11, r9
     da0:	a4 fe       	sbrs	r10, 4
     da2:	0f c0       	rjmp	.+30     	; 0xdc2 <vfprintf+0x320>
     da4:	fe 01       	movw	r30, r28
     da6:	e8 0d       	add	r30, r8
     da8:	f1 1d       	adc	r31, r1
     daa:	80 81       	ld	r24, Z
     dac:	80 33       	cpi	r24, 0x30	; 48
     dae:	21 f4       	brne	.+8      	; 0xdb8 <vfprintf+0x316>
     db0:	9a 2d       	mov	r25, r10
     db2:	99 7e       	andi	r25, 0xE9	; 233
     db4:	a9 2e       	mov	r10, r25
     db6:	09 c0       	rjmp	.+18     	; 0xdca <vfprintf+0x328>
     db8:	a2 fe       	sbrs	r10, 2
     dba:	06 c0       	rjmp	.+12     	; 0xdc8 <vfprintf+0x326>
     dbc:	b3 94       	inc	r11
     dbe:	b3 94       	inc	r11
     dc0:	04 c0       	rjmp	.+8      	; 0xdca <vfprintf+0x328>
     dc2:	8a 2d       	mov	r24, r10
     dc4:	86 78       	andi	r24, 0x86	; 134
     dc6:	09 f0       	breq	.+2      	; 0xdca <vfprintf+0x328>
     dc8:	b3 94       	inc	r11
     dca:	a3 fc       	sbrc	r10, 3
     dcc:	11 c0       	rjmp	.+34     	; 0xdf0 <vfprintf+0x34e>
     dce:	a0 fe       	sbrs	r10, 0
     dd0:	06 c0       	rjmp	.+12     	; 0xdde <vfprintf+0x33c>
     dd2:	b2 14       	cp	r11, r2
     dd4:	88 f4       	brcc	.+34     	; 0xdf8 <vfprintf+0x356>
     dd6:	28 0c       	add	r2, r8
     dd8:	92 2c       	mov	r9, r2
     dda:	9b 18       	sub	r9, r11
     ddc:	0e c0       	rjmp	.+28     	; 0xdfa <vfprintf+0x358>
     dde:	b2 14       	cp	r11, r2
     de0:	60 f4       	brcc	.+24     	; 0xdfa <vfprintf+0x358>
     de2:	b6 01       	movw	r22, r12
     de4:	80 e2       	ldi	r24, 0x20	; 32
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	0e 94 71 07 	call	0xee2	; 0xee2 <fputc>
     dec:	b3 94       	inc	r11
     dee:	f7 cf       	rjmp	.-18     	; 0xdde <vfprintf+0x33c>
     df0:	b2 14       	cp	r11, r2
     df2:	18 f4       	brcc	.+6      	; 0xdfa <vfprintf+0x358>
     df4:	2b 18       	sub	r2, r11
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <vfprintf+0x35a>
     df8:	98 2c       	mov	r9, r8
     dfa:	21 2c       	mov	r2, r1
     dfc:	a4 fe       	sbrs	r10, 4
     dfe:	10 c0       	rjmp	.+32     	; 0xe20 <vfprintf+0x37e>
     e00:	b6 01       	movw	r22, r12
     e02:	80 e3       	ldi	r24, 0x30	; 48
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	0e 94 71 07 	call	0xee2	; 0xee2 <fputc>
     e0a:	a2 fe       	sbrs	r10, 2
     e0c:	17 c0       	rjmp	.+46     	; 0xe3c <vfprintf+0x39a>
     e0e:	a1 fc       	sbrc	r10, 1
     e10:	03 c0       	rjmp	.+6      	; 0xe18 <vfprintf+0x376>
     e12:	88 e7       	ldi	r24, 0x78	; 120
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <vfprintf+0x37a>
     e18:	88 e5       	ldi	r24, 0x58	; 88
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	b6 01       	movw	r22, r12
     e1e:	0c c0       	rjmp	.+24     	; 0xe38 <vfprintf+0x396>
     e20:	8a 2d       	mov	r24, r10
     e22:	86 78       	andi	r24, 0x86	; 134
     e24:	59 f0       	breq	.+22     	; 0xe3c <vfprintf+0x39a>
     e26:	a1 fe       	sbrs	r10, 1
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <vfprintf+0x38c>
     e2a:	8b e2       	ldi	r24, 0x2B	; 43
     e2c:	01 c0       	rjmp	.+2      	; 0xe30 <vfprintf+0x38e>
     e2e:	80 e2       	ldi	r24, 0x20	; 32
     e30:	a7 fc       	sbrc	r10, 7
     e32:	8d e2       	ldi	r24, 0x2D	; 45
     e34:	b6 01       	movw	r22, r12
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	0e 94 71 07 	call	0xee2	; 0xee2 <fputc>
     e3c:	89 14       	cp	r8, r9
     e3e:	38 f4       	brcc	.+14     	; 0xe4e <vfprintf+0x3ac>
     e40:	b6 01       	movw	r22, r12
     e42:	80 e3       	ldi	r24, 0x30	; 48
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 71 07 	call	0xee2	; 0xee2 <fputc>
     e4a:	9a 94       	dec	r9
     e4c:	f7 cf       	rjmp	.-18     	; 0xe3c <vfprintf+0x39a>
     e4e:	8a 94       	dec	r8
     e50:	f3 01       	movw	r30, r6
     e52:	e8 0d       	add	r30, r8
     e54:	f1 1d       	adc	r31, r1
     e56:	80 81       	ld	r24, Z
     e58:	b6 01       	movw	r22, r12
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	0e 94 71 07 	call	0xee2	; 0xee2 <fputc>
     e60:	81 10       	cpse	r8, r1
     e62:	f5 cf       	rjmp	.-22     	; 0xe4e <vfprintf+0x3ac>
     e64:	22 20       	and	r2, r2
     e66:	09 f4       	brne	.+2      	; 0xe6a <vfprintf+0x3c8>
     e68:	42 ce       	rjmp	.-892    	; 0xaee <vfprintf+0x4c>
     e6a:	b6 01       	movw	r22, r12
     e6c:	80 e2       	ldi	r24, 0x20	; 32
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	0e 94 71 07 	call	0xee2	; 0xee2 <fputc>
     e74:	2a 94       	dec	r2
     e76:	f6 cf       	rjmp	.-20     	; 0xe64 <vfprintf+0x3c2>
     e78:	f6 01       	movw	r30, r12
     e7a:	86 81       	ldd	r24, Z+6	; 0x06
     e7c:	97 81       	ldd	r25, Z+7	; 0x07
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <vfprintf+0x3e2>
     e80:	8f ef       	ldi	r24, 0xFF	; 255
     e82:	9f ef       	ldi	r25, 0xFF	; 255
     e84:	2b 96       	adiw	r28, 0x0b	; 11
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	de bf       	out	0x3e, r29	; 62
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	cd bf       	out	0x3d, r28	; 61
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	1f 91       	pop	r17
     e96:	0f 91       	pop	r16
     e98:	ff 90       	pop	r15
     e9a:	ef 90       	pop	r14
     e9c:	df 90       	pop	r13
     e9e:	cf 90       	pop	r12
     ea0:	bf 90       	pop	r11
     ea2:	af 90       	pop	r10
     ea4:	9f 90       	pop	r9
     ea6:	8f 90       	pop	r8
     ea8:	7f 90       	pop	r7
     eaa:	6f 90       	pop	r6
     eac:	5f 90       	pop	r5
     eae:	4f 90       	pop	r4
     eb0:	3f 90       	pop	r3
     eb2:	2f 90       	pop	r2
     eb4:	08 95       	ret

00000eb6 <strnlen_P>:
     eb6:	fc 01       	movw	r30, r24
     eb8:	05 90       	lpm	r0, Z+
     eba:	61 50       	subi	r22, 0x01	; 1
     ebc:	70 40       	sbci	r23, 0x00	; 0
     ebe:	01 10       	cpse	r0, r1
     ec0:	d8 f7       	brcc	.-10     	; 0xeb8 <strnlen_P+0x2>
     ec2:	80 95       	com	r24
     ec4:	90 95       	com	r25
     ec6:	8e 0f       	add	r24, r30
     ec8:	9f 1f       	adc	r25, r31
     eca:	08 95       	ret

00000ecc <strnlen>:
     ecc:	fc 01       	movw	r30, r24
     ece:	61 50       	subi	r22, 0x01	; 1
     ed0:	70 40       	sbci	r23, 0x00	; 0
     ed2:	01 90       	ld	r0, Z+
     ed4:	01 10       	cpse	r0, r1
     ed6:	d8 f7       	brcc	.-10     	; 0xece <strnlen+0x2>
     ed8:	80 95       	com	r24
     eda:	90 95       	com	r25
     edc:	8e 0f       	add	r24, r30
     ede:	9f 1f       	adc	r25, r31
     ee0:	08 95       	ret

00000ee2 <fputc>:
     ee2:	0f 93       	push	r16
     ee4:	1f 93       	push	r17
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	fb 01       	movw	r30, r22
     eec:	23 81       	ldd	r18, Z+3	; 0x03
     eee:	21 fd       	sbrc	r18, 1
     ef0:	03 c0       	rjmp	.+6      	; 0xef8 <fputc+0x16>
     ef2:	8f ef       	ldi	r24, 0xFF	; 255
     ef4:	9f ef       	ldi	r25, 0xFF	; 255
     ef6:	2c c0       	rjmp	.+88     	; 0xf50 <fputc+0x6e>
     ef8:	22 ff       	sbrs	r18, 2
     efa:	16 c0       	rjmp	.+44     	; 0xf28 <fputc+0x46>
     efc:	46 81       	ldd	r20, Z+6	; 0x06
     efe:	57 81       	ldd	r21, Z+7	; 0x07
     f00:	24 81       	ldd	r18, Z+4	; 0x04
     f02:	35 81       	ldd	r19, Z+5	; 0x05
     f04:	42 17       	cp	r20, r18
     f06:	53 07       	cpc	r21, r19
     f08:	44 f4       	brge	.+16     	; 0xf1a <fputc+0x38>
     f0a:	a0 81       	ld	r26, Z
     f0c:	b1 81       	ldd	r27, Z+1	; 0x01
     f0e:	9d 01       	movw	r18, r26
     f10:	2f 5f       	subi	r18, 0xFF	; 255
     f12:	3f 4f       	sbci	r19, 0xFF	; 255
     f14:	31 83       	std	Z+1, r19	; 0x01
     f16:	20 83       	st	Z, r18
     f18:	8c 93       	st	X, r24
     f1a:	26 81       	ldd	r18, Z+6	; 0x06
     f1c:	37 81       	ldd	r19, Z+7	; 0x07
     f1e:	2f 5f       	subi	r18, 0xFF	; 255
     f20:	3f 4f       	sbci	r19, 0xFF	; 255
     f22:	37 83       	std	Z+7, r19	; 0x07
     f24:	26 83       	std	Z+6, r18	; 0x06
     f26:	14 c0       	rjmp	.+40     	; 0xf50 <fputc+0x6e>
     f28:	8b 01       	movw	r16, r22
     f2a:	ec 01       	movw	r28, r24
     f2c:	fb 01       	movw	r30, r22
     f2e:	00 84       	ldd	r0, Z+8	; 0x08
     f30:	f1 85       	ldd	r31, Z+9	; 0x09
     f32:	e0 2d       	mov	r30, r0
     f34:	09 95       	icall
     f36:	89 2b       	or	r24, r25
     f38:	e1 f6       	brne	.-72     	; 0xef2 <fputc+0x10>
     f3a:	d8 01       	movw	r26, r16
     f3c:	16 96       	adiw	r26, 0x06	; 6
     f3e:	8d 91       	ld	r24, X+
     f40:	9c 91       	ld	r25, X
     f42:	17 97       	sbiw	r26, 0x07	; 7
     f44:	01 96       	adiw	r24, 0x01	; 1
     f46:	17 96       	adiw	r26, 0x07	; 7
     f48:	9c 93       	st	X, r25
     f4a:	8e 93       	st	-X, r24
     f4c:	16 97       	sbiw	r26, 0x06	; 6
     f4e:	ce 01       	movw	r24, r28
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	1f 91       	pop	r17
     f56:	0f 91       	pop	r16
     f58:	08 95       	ret

00000f5a <__ultoa_invert>:
     f5a:	fa 01       	movw	r30, r20
     f5c:	aa 27       	eor	r26, r26
     f5e:	28 30       	cpi	r18, 0x08	; 8
     f60:	51 f1       	breq	.+84     	; 0xfb6 <__ultoa_invert+0x5c>
     f62:	20 31       	cpi	r18, 0x10	; 16
     f64:	81 f1       	breq	.+96     	; 0xfc6 <__ultoa_invert+0x6c>
     f66:	e8 94       	clt
     f68:	6f 93       	push	r22
     f6a:	6e 7f       	andi	r22, 0xFE	; 254
     f6c:	6e 5f       	subi	r22, 0xFE	; 254
     f6e:	7f 4f       	sbci	r23, 0xFF	; 255
     f70:	8f 4f       	sbci	r24, 0xFF	; 255
     f72:	9f 4f       	sbci	r25, 0xFF	; 255
     f74:	af 4f       	sbci	r26, 0xFF	; 255
     f76:	b1 e0       	ldi	r27, 0x01	; 1
     f78:	3e d0       	rcall	.+124    	; 0xff6 <__ultoa_invert+0x9c>
     f7a:	b4 e0       	ldi	r27, 0x04	; 4
     f7c:	3c d0       	rcall	.+120    	; 0xff6 <__ultoa_invert+0x9c>
     f7e:	67 0f       	add	r22, r23
     f80:	78 1f       	adc	r23, r24
     f82:	89 1f       	adc	r24, r25
     f84:	9a 1f       	adc	r25, r26
     f86:	a1 1d       	adc	r26, r1
     f88:	68 0f       	add	r22, r24
     f8a:	79 1f       	adc	r23, r25
     f8c:	8a 1f       	adc	r24, r26
     f8e:	91 1d       	adc	r25, r1
     f90:	a1 1d       	adc	r26, r1
     f92:	6a 0f       	add	r22, r26
     f94:	71 1d       	adc	r23, r1
     f96:	81 1d       	adc	r24, r1
     f98:	91 1d       	adc	r25, r1
     f9a:	a1 1d       	adc	r26, r1
     f9c:	20 d0       	rcall	.+64     	; 0xfde <__ultoa_invert+0x84>
     f9e:	09 f4       	brne	.+2      	; 0xfa2 <__ultoa_invert+0x48>
     fa0:	68 94       	set
     fa2:	3f 91       	pop	r19
     fa4:	2a e0       	ldi	r18, 0x0A	; 10
     fa6:	26 9f       	mul	r18, r22
     fa8:	11 24       	eor	r1, r1
     faa:	30 19       	sub	r19, r0
     fac:	30 5d       	subi	r19, 0xD0	; 208
     fae:	31 93       	st	Z+, r19
     fb0:	de f6       	brtc	.-74     	; 0xf68 <__ultoa_invert+0xe>
     fb2:	cf 01       	movw	r24, r30
     fb4:	08 95       	ret
     fb6:	46 2f       	mov	r20, r22
     fb8:	47 70       	andi	r20, 0x07	; 7
     fba:	40 5d       	subi	r20, 0xD0	; 208
     fbc:	41 93       	st	Z+, r20
     fbe:	b3 e0       	ldi	r27, 0x03	; 3
     fc0:	0f d0       	rcall	.+30     	; 0xfe0 <__ultoa_invert+0x86>
     fc2:	c9 f7       	brne	.-14     	; 0xfb6 <__ultoa_invert+0x5c>
     fc4:	f6 cf       	rjmp	.-20     	; 0xfb2 <__ultoa_invert+0x58>
     fc6:	46 2f       	mov	r20, r22
     fc8:	4f 70       	andi	r20, 0x0F	; 15
     fca:	40 5d       	subi	r20, 0xD0	; 208
     fcc:	4a 33       	cpi	r20, 0x3A	; 58
     fce:	18 f0       	brcs	.+6      	; 0xfd6 <__ultoa_invert+0x7c>
     fd0:	49 5d       	subi	r20, 0xD9	; 217
     fd2:	31 fd       	sbrc	r19, 1
     fd4:	40 52       	subi	r20, 0x20	; 32
     fd6:	41 93       	st	Z+, r20
     fd8:	02 d0       	rcall	.+4      	; 0xfde <__ultoa_invert+0x84>
     fda:	a9 f7       	brne	.-22     	; 0xfc6 <__ultoa_invert+0x6c>
     fdc:	ea cf       	rjmp	.-44     	; 0xfb2 <__ultoa_invert+0x58>
     fde:	b4 e0       	ldi	r27, 0x04	; 4
     fe0:	a6 95       	lsr	r26
     fe2:	97 95       	ror	r25
     fe4:	87 95       	ror	r24
     fe6:	77 95       	ror	r23
     fe8:	67 95       	ror	r22
     fea:	ba 95       	dec	r27
     fec:	c9 f7       	brne	.-14     	; 0xfe0 <__ultoa_invert+0x86>
     fee:	00 97       	sbiw	r24, 0x00	; 0
     ff0:	61 05       	cpc	r22, r1
     ff2:	71 05       	cpc	r23, r1
     ff4:	08 95       	ret
     ff6:	9b 01       	movw	r18, r22
     ff8:	ac 01       	movw	r20, r24
     ffa:	0a 2e       	mov	r0, r26
     ffc:	06 94       	lsr	r0
     ffe:	57 95       	ror	r21
    1000:	47 95       	ror	r20
    1002:	37 95       	ror	r19
    1004:	27 95       	ror	r18
    1006:	ba 95       	dec	r27
    1008:	c9 f7       	brne	.-14     	; 0xffc <__ultoa_invert+0xa2>
    100a:	62 0f       	add	r22, r18
    100c:	73 1f       	adc	r23, r19
    100e:	84 1f       	adc	r24, r20
    1010:	95 1f       	adc	r25, r21
    1012:	a0 1d       	adc	r26, r0
    1014:	08 95       	ret

00001016 <_exit>:
    1016:	f8 94       	cli

00001018 <__stop_program>:
    1018:	ff cf       	rjmp	.-2      	; 0x1018 <__stop_program>
